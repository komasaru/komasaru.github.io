var store = [{
        "title": "D945GCLF + Fedora10 サーバ構築メモ",
        "excerpt":"『Fedoraで自宅サーバー構築』を参考にして構築したときのメモです。 以前、Fedora9で構築しようとしましたが、カーネルがD945GCLFのLanカードドライバに非対応のようでインストール自体が失敗したため、Fedora８で構築し運用していました。 しかし、新しい物好きの僕なので、Fedora10でのサーバ構築に挑んでみたのでした。 幸い自分が必要としているサービスは何とか構築できたので、以下に記録として残しておくことにしました。 ただし、基本は『Fedoraで自宅サーバー構築』ですので、あしからず。。。 構築記録 （ ■：構築済み、□：未構築、△：不要と判断したもの ） Fedoraインストール ■ Fedora 10 インストール → Fedora 9 のインストールと同様の方法で Fedora 10 をインストール。 内部クライアント(Windows)からLinuxサーバーをリモート操作する ■ WindowsからSSHサーバーへリモート接続(Poderosaパスワード方式ログイン編) Fedora初期設定 ■ Fedora 9初期設定 → ネットワーク設定は kajuhome.com を参照。 仮想マシン構築 △ 仮想マシン構築 △ ドメインＵディスクサイズ拡張 Perlモジュールを簡単にインストールできるようにする ■ Perlモジュールパッケージ管理システム導入(cpan2rpm) → cpan2rpm はインストール完了。しかしperlモジュールのインストールはエラー。 ・以下のディレクトリがないとのエラーのようなので、mkdir で作成したら成功。 /root/rpmbuild/SRPMS/SRPMS /root/rpmbuild/SRPMS/BUILD /root/rpmbuild/SRPMS/SOURCES /root/rpmbuild/SRPMS/SPECS /root/rpmbuild/SRPMS/RPMS...","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2009/01/05/05165522/",
        "teaser": null
      },{
        "title": "WordPress 2.7 にアップグレード ＆ テーマ変更！",
        "excerpt":"前投稿にもあるようように、Fedora10でサーバを構築して運用しているのですが、ブログのWordpressはほったらかしでした。   　　 そこで、新年だし本格的にブログをはじめようと思ったわけです。   　　 今日やった事は、      Wordpressをインストール時の２．５から２．７へアップグレード。 アップグレードの方法をちゃんと調べてからやればよかったが、２．５を削除（データベースも削除）してから、２．７を新たにインストールしてしまった。 （結局、アップグレードではなく、アンインストール＆インストールでした）   テーマをデフォルトのものから、カッコいいのをダウンロードして変更   カレンダーのウィジェットを設定。   カレンダーの土曜日・休日の色をつけるプラグインを導入。   ","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/05/05190900/",
        "teaser": null
      },{
        "title": "携帯からの投稿テスト",
        "excerpt":"携帯からの投稿テストです。画像付きで。   ","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/06/06101002/",
        "teaser": null
      },{
        "title": "携帯からの投稿テスト( 再)",
        "excerpt":"   携帯からの投稿テストです。画像付きでもう１回。   ","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/06/06130432/",
        "teaser": null
      },{
        "title": "携帯から画像投稿可能に！",
        "excerpt":"サーバ構築の際、PHPを標準？でインストールしただけだったので、GDというのがインストールされていなかったみたい。   以下でやっと解決。   # yum -y install php-gd # service httpd restart    ","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/06/06130814/",
        "teaser": null
      },{
        "title": "ホームページ更新！",
        "excerpt":"今までのホームページが、以前HTMLタグを自分でつけて作成してそのままほったらかしだったので、ちょっとだけきれいにしました。   あと、MyRoomのWebカメラの画像を画像クリックで更新するように修正しました。   もっと、凝ったサイトを目指してがんばりマッシュ。   ","categories": ["Webサイト"],
        "tags": [],
        "url": "/2009/01/08/08103709/",
        "teaser": null
      },{
        "title": "Loto6 [ 080108 ]",
        "excerpt":"本日、ロト６抽選日ということで、１口だけ購入！   実は、以前からロト６攻略には興味があって、エクセルで分析したり、各関連サイトを調べたりしています。   今は統計学的に当ててみようと思い、ちょっと前からVB ＋ SQLServer で回帰分析を利用していい数字が予想できないかと日々研究しているところです。   今回はそのうちのある手法（重回帰分析）で選出した数字を１つだけ買ってみました。   結果はトホホ・・・　でした。（購入した数字と当選結果は最後に！）   単純に統計学的手法で数字を選ぶといっても色々な要素があるので、それらを複雑に絡み合わせて、一番当たりやすいロジックを探すことが非常に重要なことだと思った次第であり、、、　まあ、とにかくこれからもずっと研究し続けるべしということ。   いろんなサイトでいろんな攻略法が公開されてはいるけど、僕は自分で考え出した攻略法で高額当選をしたらスゲーと思っているので、他のサイトもある程度は参考にはしますが。   2008/01/08(FRI) 購入数字 ０４・１４・１７・２１・３２・３５   当選結果 ０５・１２・１３・３３・３９・４２（２０）   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/01/09/09134549/",
        "teaser": null
      },{
        "title": "松江日赤建設中！",
        "excerpt":"   たまたま、近くを通ったので、パシャリ！ ５階あたりまで鉄骨が組まれています。 クレーンも前より高くなってますが、１１階くらいになったら、１４階・ヘリポートまで組むために更にクレーンが高くなるようです。   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/01/10/10153552/",
        "teaser": null
      },{
        "title": "ブログデザイン修正！",
        "excerpt":"背景画像だの、タイトルバーだの色々と変更しました。   ただ１つ気にいらないことが・・・   それは、普段僕はMozilla Firefox というブラウザを使用しているのですが、Internet Explorer と動きを比較すると・・・   IEではRSS Feed 、コメントフイードをクリックしてもソースが表示されたり、エラーのメッセージがでたりする。   使っているIEのバージョンが ６．０ だからかもしれないけど、はっきりとしたことは未確認。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/10/10181203/",
        "teaser": null
      },{
        "title": "ブログデザイン修正！その２",
        "excerpt":"   このブログサイトは携帯でも利用できるよう Ktai_Style（閲覧・コメント用）、Ktai_Entry（記事作成用）のプラグインを導入しているので、PC用のブログページにQRコードを追加しました。   ちなみにQRコードを作るに使用したのは   『QRのススメ 【無料で作成！QRコード徹底活用サイト】』（http://qr.quel.jp/）上の作成ページです。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/11/11125739/",
        "teaser": null
      },{
        "title": "携帯電話に保護シール。",
        "excerpt":" この間の年末に携帯電話を機種変更しました。   docomo P901iS → P-01A（色はブラック） に。   でも、ブラックはなんか手あかとか汚れが目立つような感じがするので、着せ替えシール＆液晶保護シールを探したら、いいのがありました。   マックハリアーさんのものです。楽天に出てました。   僕は、一番人気のレザー調の着せ替えシールにしました。   貼り方も意外と簡単でした。   出来上がった感じはまずまずといった感じ表面の肌触りは最高ですが、シールが硬いせいか角の部分が引っかかる感じ。。。   でも、使っているうちになじんでいくんではないかと。   仮にあきても、すぐ剥がせるようだし、違うデザインシールに変えてもいいし・・・   ","categories": ["その他"],
        "tags": ["モバイル"],
        "url": "/2009/01/11/11234931/",
        "teaser": null
      },{
        "title": "積もりました〜",
        "excerpt":" 今日のお昼頃のうちの前の様子です。 平野部でこれくらい(15センチ位)。 山間部はもっとスゴいみたい！    ","categories": ["その他"],
        "tags": [],
        "url": "/2009/01/12/12163239/",
        "teaser": null
      },{
        "title": "ブログ村に登録！",
        "excerpt":"ある程度ブログページが整ったので、にほんブログ村 とかいうのに登録してみました。   自分のブログもアピールできるし、他の方のブログも参考にさせてもらえるので、今後が楽しみです。   ちなみに、 にほんブログ村 というのは、うんせきブログ さんのページで見つけました。   いろいろ参考にさせてもらっています。   たいへん、だんだんです。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/12/12232946/",
        "teaser": null
      },{
        "title": "うちのPC環境について。",
        "excerpt":"僕の家での今現在のPC関連の環境について公開します。 主にパソコン３台とNAS１台という以下のような環境です。 主な用途はそれぞれの「主な用途」欄に記載しました。 何か知りたいことがあれば、きままに聞いてください。 ■Intel Atom マシン (完全自作、１枚目の写真の上の黒い小さいヤツ) ・ケース : Noah 800AL-BK ・マザーボード : Intel D945GCLF ・CPU : Intel Atom 230 (1.6GHz) (オンボード) ・MEMORY : DDR2-667 (PC2-5300) 1GB ・ハードディスク : MAXTOR 6V250F0 (250G SATAII300 7200) ・光学ドライブ: ソニーNECオプティアーク AD-7590A スリムDVDスーパーマルチドライブ ・OS : Fedora10 (Kernel: 2.6.27.9-159.fc10.i686) ・主な用途 : サーバマシン。主にWebサーバ・メールサーバ・FTPサーバ・ブログサーバ。 ■Shuttle SD11G5 (PentiumM対応キューブ型ベアボーンキット、１枚目の写真の下の白いヤツ)...","categories": ["自作PC"],
        "tags": [],
        "url": "/2009/01/13/13200706/",
        "teaser": null
      },{
        "title": "天気予報をつけてみました。",
        "excerpt":"ブログの投稿日の天気を表示したいと思い、Wordpress用の天気情報のプラグインを探してみました。   まず、wp-otenki というのを見つけて、何とか導入してみましたが、僕的にはなんかイマイチだったので、却下。   （お目当ての自分の設定したい地域のコード（今はリンク先のlivedoorのページに地域コードの一覧が見当たらない）を苦労して見つけて（livedooraの天気予報のページのURLを参照してお目当ての地域のコードを探し当てました）天気の表示もできましたが・・・）   次に、CoolWeather というの（中国語のページ）を見つけましたが、ダウンロードページに行っても、ファイルが見つからず、断念。   更に、Weather Journal というのを見つけましたが、これは自動ではなく、投稿時に自分で天気を入力するものだったので、あきらめ。   あと、いろいろ探してみましたが、結局投稿時にその日の天気を表示するのはあきらめました。   なので、ブログページを表示したときに、地元の「天気予報」を表示するようにしました。   いいのがありました。   それは、WordpressでなくてもPHPに対応していれば使用できる 「Flash天気予報1.20」 というのです。 Flashなのでなんか綺麗です。ぜひお試しを。 （自宅でブログサーバを稼動している人以外では、どうかわかりませんが・・・）   以下、参考までに導入方法です。   （１）プラグイン本体をダウンロード＆適当な場所にアップロード。 　（こちらから ダウンロードページ）   （２）ソース作成。 　ダウンロードページにソース作成用のページがあります。 　そこでプラグイン本体をアップロードしたURL、天気予報を表示したい地域、背景・枠カーソル色等を入力して、ソース作成ボタンを押すと、”ソース”が表示されるのでそれをコピーする。   （３）ソースの貼り付け 　上記（２）でコピーしたソースを表示したい箇所に貼り付ければOK。   ※背景色、枠、カーソルの色は設定できるが、文字色がどうも変更できない。 　（単なる僕の勉強不足かもしれませんが・・・）   他にいいのがあれば変更するかもしれません。 ではまた。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/14/14194510/",
        "teaser": null
      },{
        "title": "Fedora10サーバにＷｅｂカメラを構築！",
        "excerpt":"こんばんわ。こちらは今日も雪でした。まだ降るようです。 さて、ＦｅｄｏｒａサーバにＷｅｂカメラをつなげて、ライブ画像（自分のデスクトップ）を配信できるようになったので報告します。 ちなみに以前は、メインマシン（ＷｉｎｄｏｗｓＸＰ）にＷｅｂカメラをつなげて、フリーソフト(LiveCapture2)でキャプチャした画像をＦｅｄｏｒａサーバにＦＴＰでアップロードして使用していました。 しかし、これではメインマシンが起動中でないとライブの画像が配信できませんでした。 （最初から、ＦｅｄｏｒａサーバにＷｅｂカメラを導入すればよかったのですが、非常に難しかったので。トホホ・・・） 今回はどうしても、ＦｅｄｏｒａサーバにＷｅｂカメラを導入してやろうと思い立ったので、今回もものすごく四苦八苦して何とか導入できました。 導入方法 （Fedora１０インストール、Webサーバ導入済みが前提） （但し、環境によっては若干異なることもあると思いますし、自分自身も今までに何回もＷｅｂカメラ導入しようとしてアレコレしていたので、これが完璧の導入方法といえないと思います。あしからず・・・） いろんなサイトを参考しました。参考にしたサイトは最後にご紹介します。 １．Ｘ環境導入 X11のウィンドウでモニタするアプリなので，X11に依存する。 X11 がインストールされていない環境下では，webcam も make できない。 ということは、うちのFedoraはＸ環境入れてないので、以下を実行。 [root@noah ~]# yum -y install xorg-x11-drivers ２．libjpeg-devel, kernel-devel, ncurse-devel のインストール その他make中に（ファイル不足で）エラーが出るので libjpeg-devel, kernel-devel, ncurse-devel をインストール。 [root@noah ~]# yum -y install libjpeg-devel [root@noah ~]# yum -y install kernel-devel [root@noah ~]# yum -y install...","categories": ["サーバ構築","Webサイト","自作PC"],
        "tags": ["Webカメラ"],
        "url": "/2009/01/15/15200044/",
        "teaser": null
      },{
        "title": "デジタル時計を追加！",
        "excerpt":"おはようございます。今朝も超さむ～です。   出勤前の投稿です。   特に、どうしても必要というわけでもありませんでしたが、ブログページにデジタル時計を表示させてみました。   PHPでも日時の表示は可能ですが、一度表示したら画面を手動でリフレッシュしないと時間が変わらないので、こちらのサイト（ブログパーツ.com）から入手したものを貼り付けました。   （でも、PHPで取得した時刻（サーバの時刻）をJavaScriptを使えば、自動で時刻を更新できるようですが・・・。またの機会に。）   （Flashで作られたものも多数ありましたが、シンプルでちょうどいいサイズものを見つけ切れなかったので、これもまたの機会に。）   ※いずれは、自分でFlashを勉強してデジタル時計を作ってみたいですが・・・   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/16/16063000/",
        "teaser": null
      },{
        "title": "カレンダーに色付け。",
        "excerpt":"ブログページに表示しているカレンダーが以前使用していたWordPressのテーマでは土曜・日曜・祝日がちゃんと色が付いていたのに、今の自分で作成したテーマではなぜか色づけうまくできていませんでした。   使用していたプラグインは小粋空間さんの休日表示付きリアルタイムカレンダー for WordPress 日本語版 というのです。   よくよく調べてみたら、このプラグインのＣＳＳやＪａｖａＳｃｒｉｐｔが取り込めていないことが原因でした。   取り込むためはどうしたらよいのか、他のテーマではどのようにして取り込んでいるのかを見てみたり、プラグインのrealtime-calendar.phpソースを見ていたら・・・   以下のような記述を追加したらよさそうなので、早速やってみました。           内に以下を記述        File: `&lt;?php`   1  wp_head(); ?&gt;           内最後に以下を記述        File: `&lt;?php`   1  wp_footer(); ?&gt;    ・・・できました。   ついでにうっすら枠線をつけてみました。         IE6では綺麗にできましたが、FireFox３では下のほうに余計な余白ができてしまいます。   なぜでしょう？   これに限らず、他にもブラウザごとにデザインが異なって表示される問題がいくつかあって、ちょっとイヤな感じ・・・   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/16/16215445/",
        "teaser": null
      },{
        "title": "カテゴリ別・月別の記事数表示！",
        "excerpt":"また、ブログの話題です。   月別やらカテゴリ別の記事数が表示されているページを見たら、自分もやりたくなり、やってみました。   wordpress ではphp に関数があってそれを使えば簡単でした。   例のごとく、あちこちサイトをチェックしました。   僕のページではwp_list_categories、wp_get_archives をパラメータなしで使用していたので、以下のように変更しました。   カテゴリ別の記事（投稿）数を表示   &lt;?php wp_list_categories('title_li=&amp;show_count=1'); ?&gt;   月別の記事（投稿）数を表示   &lt;?php wp_get_archives('type=monthly&amp;show_post_count=1'); ?&gt;   （’type=monthly’はなくても大丈夫（デフォルト）みたい）     ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/16/16224739/",
        "teaser": null
      },{
        "title": "Webカメラ保存画像バックアップ！",
        "excerpt":"今日は、だいぶ太陽さんが出てて、そんなに寒くはなかったかな。   ところで、この間、Fedora１０サーバに構築したWebカメラのことですが、   ホームページで配信中の画像以外に１分ごとにキャプチャした画像が   ちょっとわかる人には全部丸見えになることがある、   （Webカメラキャプチャ画像を外部からでも見えるフォルダに保存していたので）   ということがあって、これではやっぱりマズイかな   （今のところたいした画像でもないですけど）と思ったので、   とりあえずサーバ側でバッチを作ってcronで１日１回別のフォルダに   退避するようにしました。   （退避は１日１回なので、結局わかる人には最大で１日分の僕の机の上の画像がバレバレですが・・・）   ただ、たいしたキャプチャ画像でないのに１分ごとに２４時間キャプチャしていては   ディスク容量がいずれ無くなるので、   （※一応、ディスク容量が少なくなったら、メールで警告するような設定にはしていますが・・・）   ・キャプチャするのはカメラ撮影画面に変化があったときだけキャプチャするようにする。か   ・自動キャプチャの間隔を長くする。か   ・退避している画像を一定期間を過ぎたら自動で削除するようにする。か   などなど、思案中です。   ・・・・・・・   いろいろサーバ構築はしてますけど、Linuxはまだまだ素人ですので・・・   ","categories": ["サーバ構築","Webサイト"],
        "tags": ["Webカメラ"],
        "url": "/2009/01/17/17204632/",
        "teaser": null
      },{
        "title": "今日の気になるアングル",
        "excerpt":"   こんにちは！   今日の外出時に撮った写真です。   松江のＲ９袖師交差点北側(県立美術館前)から南方を見た景色です。 (車のフロントガラス越しですが)   ビルが建ち並ぶ風景が意外と都会的に見えたので撮ってみました。   最近気づいたんですが、僕は建物フェチかも！？   これからもいろんな景色・建物を撮ってみたいと思います。    ","categories": ["その他"],
        "tags": [],
        "url": "/2009/01/18/18162944/",
        "teaser": null
      },{
        "title": "Ｗｅｂカメラを構築後！",
        "excerpt":"まいどっ！ この間自宅サーバ（Ｆｅｄｏｒａ１０）にＷｅｂカメラを構築したんですが、 about WAKITAs’ server にも時々Ｗｅｂカメラがダウンするとかの記載があって心配していたんですが・・・ とうとう、うちのもダウンしました。 現象はWAKITAさんと同じかどうかはあんまり詳しくないのでわかりませんが、WAKITAさんがされているような対応を真似させてもらいました。 （ こちらを参照 ） 作業手順 １．respawnd なるファイルをこちらからダウンロード # wget http://wakita.no-ip.com/server/respawnd/download/respawnd.tar.gz ２．ダウンロードしたファイルを展開・ビルド・インストール # tar zxvf respawnd.tar.gz # cd respawnd-1.0.0 # make # make install ３．/etc/rc.d/rc.local の webcam 起動の部分を以下のように変更 （ フォルダ構成は当方のケース ） # vi /etc/rc.d/rc.local -------------------------------------------------- usr/local/bin/webcam /usr/local/etc/webcamrc &gt; /dev/null 2&gt; /dev/null &amp; ↓ &lt;font...","categories": ["サーバ構築","Webサイト"],
        "tags": ["Webカメラ"],
        "url": "/2009/01/18/18172037/",
        "teaser": null
      },{
        "title": "デジタル時計をＦｌａｓｈ版に変更！",
        "excerpt":"こんちは。今日はお休みです。   昨夜の深夜はなんか遠くにかみなり雲があったようで、暗闇がピカピカしてましたが、   今日はまずますの天気でした。   この間、ブログページにデジタル時計を追加してたんですが、動きがない（画面をリフレッシュしないと時間がかわらない）んで、やっぱりＦｌａｓｈ版のデジタル時計にしました。   やはり、こちらのサイト（ブログパーツ.com）から入手。 シンプルなこんなのにしました。      ※ちゃんと表示させるにはＦｌａｓｈＰｌａｙｅｒのインストールとＪａｖａＳｃｒｉｐｔのＯｎが必要です。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/19/19104832/",
        "teaser": null
      },{
        "title": "天気予報も変更！",
        "excerpt":" またまた、こんにちは。   さっきからこちらのサイト（ブログパーツ.com）を見ていたら、天気予報も気に入ったのがあったので（人気ランキングも１位だし）、これに変えてみました。   なんかいろんなのがあって、目移りしてしまいますが・・・   皆さんもぜひお試しを。   ","categories": ["ブログ","Webサイト"],
        "tags": ["WordPress"],
        "url": "/2009/01/19/19111151/",
        "teaser": null
      },{
        "title": "Ping送信の設定！",
        "excerpt":"ブログを始めて間もないですが、 にほんブログ村に登録していて、投稿するたびに「にほんブログ村」のマイページからPing代理送信をしていました。（自前でブログサーバ（WordPress）を構築しているので）   ※Ping送信というのは閲覧者の方々にいち早く投稿を知らせるために、ブロガーにとっては非常に重要なものなんです。   Ping送信についていろいろ見ていたら、ふとWordPressにもPing送信機能が標準であることに気づき、早速設定してみました。 ●設定する場所は「投稿設定」の「更新情報サービス」欄   が、そんな矢先、もっといいプラグインがあることにも気づいてしまった。   結局WordPress標準のPing送信機能を使わないまま、そっちを導入してみました。 それは、Smart Update Pinger というプラグインです。   これだと、Ping送信ができたかどうかの確認もできます。   しかも、記事投稿時に自動でPing送信されるそうです。   以下手順です。      こちらから日本語化版をダウンロード＆解凍。   /wp-content/plugins/配下に smart-update-pinger.php をアップロード。   管理画面 ＞ プラグインで有効化。   管理画面 ＞ 設定 ＞ Smart update pinger で設定。   注意）WordPress標準のPing送信設定に入力したPing送信先URLを使用するみたいなので、 smart-update-pinger.phpを入れたからといって、そのURLは削除しないこと。   WordPress の方でご利用でない方、ぜひお試しを。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/20/20001058/",
        "teaser": null
      },{
        "title": "リンク画像マウスオンで画像ずらし。",
        "excerpt":"少しずつ僕のブログページも進化しつつある今日この頃・・・   今日は、リンクの張ってある画像・文字にマウスカーソルが乗ったときに、その画像・文字をピコッと１ｐｘくらいずらす手法（よくあるヤツ）を試してみました。   [ 参照ページ：小粋空間さんのこのページ ] いつも参考にさせてもらってます　m(_ _)m   方法はスタイルシートで a:hover に以下のように記述してやればオッケーです。（うちの例）    ``` css  div#sidebar a:hover\t{ \tposition:relative; top:1px; left:1px; } ```   ・ちなみに img:hover で同じことをすると、リンクされていない画像もずれてしまいます。（当然か！）   （ＦｉｒｅＦｏｘ３．０５、Ｏｐｅｒａ９．６３、ＩＥ６で確認済み）   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/21/21010037/",
        "teaser": null
      },{
        "title": "回帰分析のお話！？",
        "excerpt":"いつも、ブログのデザイン関連の話ばかりなんで、この辺でちょっとギャンブルのお話でも。   といっても、ロト６を統計学的に解析しようという話です。   （以前は、書店で見かけた攻略本のマネゴトをしてましたが、サッパリなんで・・・）   実は、僕は大学生時代、数学科に籍を置いておりまして、いまでも数学はチョットばかし興味が残っておりまして・・・   ロト６を統計学的に推測してみようと、チョット前から足を突っ込んでいます（かなり浅くですが・・・）。   意外と分析しようがなさそうに見えるロト系の宝くじの数字予想ですが、回帰分析（互いに関連のなさそうな数字を関連付けてみせる分析（？））はかなり有効性がありそうな気がしています。   （でも、細かく言うと、次回のこの数字は何と一番関連が強いかなどの解析をする必要があります。その関連する相手をうまく探し出すことからしないといけないかもしれませんが・・・（実は月の満ち欠けと強い関係があったりなんて話も聞いたことがありますが））   僕は今のところ、単に過去に出現した数字を使用して単回帰分析・重回帰分析をしているだけです。   そこで、色々回帰分析の文献をあさってみて、自分なりにまとめの文書（PDF）を作成しました。   もし、よろしければ、参考にしてください。      単回帰曲線の求め方 （単回帰曲線の求め方.pdf ）   重回帰式の求め方 （重回帰式の求め方.pdf ）   ただ、これらの連立方程式を作成できたとしても、これらの（５次・６次の）連立方程式を解かなくてはなりません。   僕はGaussJordan法という方法（行列を利用した連立方程式の解法）を利用して答えを導き出しています。   ※実際、今は自宅ではＶｉｓｕａｌＢａｓｉｃ２００５ ＆ ＳＱＬＳｅｒｖｅｒ２００５ でWindowsXPマシンでプログラミングして使用しています。（まだまだテスト段階ですが・・・）   どんな過去数字の選び方が一番関連性が強いのか模索しながらのLOTO6挑戦です。   今日もこれらの方法で４口ほどLOTO6購入しました。 ※多分ダメでしょうけど、数字を予想してしまった以上は購入することにしています。 あの時、あれを買っていれば・・・　ということにならないように。   ","categories": ["ロト６","数学"],
        "tags": [],
        "url": "/2009/01/21/21205801/",
        "teaser": null
      },{
        "title": "「人気ブログランキング」に登録！",
        "excerpt":"「にほんブログ村」の登録に引き続き、 「人気ブログランキング」にも登録しました。 サイドバーのお気に入りを参照。   ぜひクリックしてみてください。 （僕のモチベーションが上がるので。。。）   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/21/21220344/",
        "teaser": null
      },{
        "title": "Ｆａｖｉｃｏｎ追加！",
        "excerpt":"まいど、どうも。   今日は当ブログにFaviconを導入しました。 （Faviconとは、FAVorite ICONの略で、ウェブサイトやウェブページに関連付けられたアイコンのことで、ウェブブラウザのブックマーク(お気に入り)リストやウィンドウアイコン・タブなどに現れることのある、ウェブサイト独自のアイコンのこと。）   導入方法は以下のとおり。      Web上で簡単に意外とシンプルな Favicon がつくれる [ Favicon Generator ]で Favicon を作成。 これ↓         作成した Favicon を所定の位置にアップロード。 （当方は自分が利用しているテーマの下のimagesフォルダにおきました。）   ブログページの＜HEAD＞~＜/HEAD＞内に以下のように追記。    ``` php   ```    以上です。 簡単でした。   ※最初はチョット凝ったデザインにしようかとも思ったが、なにせ１６Ｘ１６pxなんであまり凝れなかった。   とりあえず、これで運用。   気が変わったら、デザインを変更するかも！   ","categories": ["ブログ","Webサイト"],
        "tags": ["WordPress"],
        "url": "/2009/01/22/22005737/",
        "teaser": null
      },{
        "title": "今日の気になるアングル！",
        "excerpt":"ちなみに私は松江人です。 職場は松江市外ですが、今日は午後から松江に出る用事があり、そのまま直帰です。   そこで、前からチョットいいなと思っていた建物の写真です。      僕の母校の島大です。（ちなみに当時の理学部数学科でした）   僕が当時通っていたころは写真の手前の総合理工学部の立派な建物はありませんでした。   この建物の左側に当時では島大で一番立派だと思っていた建物もまだ健在です。   そして、写真右奥にも生物資源科学部（当時は農学部）の立派な建物ありますね~！   時々、大学構内に入ることもありますが、やはり時とともに変わっていくもんですなあ。   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/01/22/22185026/",
        "teaser": null
      },{
        "title": "ついに激写！？",
        "excerpt":"実は今日の午後、松江で用事が終わり直帰しようと市内を車で走っていたときのこと、見つけましたヨ～。   走っている姿を。   チョットだけ追っかけさせてもらって、ついにパシャリと撮っちゃいました。   その名も　「NISSAN　GT-R」   （その方には悪いですが、ついつい・・・）         日産好きの僕にはたまりませんでした。 （ＧＴ−Ｒ好きの方ほどではないかもしれませんが・・・）   RV車の僕にはキビキビ走るＧＴ−Ｒに付いていくのが大変（ハァハァ）でした。   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/01/22/22200000/",
        "teaser": null
      },{
        "title": "Lightbox 2.0 for WordPress を導入！",
        "excerpt":"今夜は、ブログ上のサムネイル画像をクリックするとかっこよくポープアップ表示されるアレを導入しました。   やっぱ、なんかカッコいい！！   ●導入方法      まず、プラグインを こちら からダンロードして解凍。   解凍したできた wp-lightbox2 フォルダを WordPress の Plugins フォルダにアップロード。   あとは、ワードプレスの 「 管理画面 ＞ プラグイン 」 でプラグインを有効化する。   以上。このプラグインは簡単でした。   ※もしうまくいかない場合、以下のようにしてみてください。      ＜/head＞の手前に＜?php wp_head(); ?＞を挿入。   ＜/body＞の手前に＜?php wp_footer(); ?＞を挿入。   （僕の場合は、休日表示機能付きカレンダー（ realtime-calendar ）導入時にしていた）   ただ、他にも Lightbox のプラグインがいくつかあり、試してみましたが、なんかうまくいかないのもあったりして、これにしました。   これはサンプル画像です↓      （また、ＧＴ−Ｒですが・・・）   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/22/22232013/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓのバックアップ！",
        "excerpt":"まず、当方のサーバではバックアップを１日１回以下のようにしています。 （サーバにあまり負荷（たいした負荷でもないけど）をかけたくないので、１日１回にしてます） Ｆｅｄｏｒａ１０サーバ側でバックアップスクリプトを１日１回定期実行させ、圧縮ファイル（tar.bz2ファイル）を作成。 その圧縮ファイルをメインマシン（WinXP）起動中の定時（タスク登録）にＦＴＰダウンロードしてメインマシンに保存。 （メインマシン起動時はいろんな処理が動くので、起動時にしていないのです） （ 参照：Fedoraで自宅サーバー構築 ） サーバの保存フォルダは/home, /root, /var/www。 その他ＤＢ（ＭｙＳＱＬ）（WordPress用も含んでます）もバックアップ用フォルダにコピー後、上記のフォルダと一緒に圧縮してます。 （ブログ用のDBはWordPressのプラグイン（wp-DBManager）も使用しています） ところが、上記のような日々のバックアップとは別に、ブログのデザイン等変更後すぐにローカル（メインマシン）にバックアップをとってみようと思い、バッチファイルを作成しました。 バッチファイルの実行で即バックアップできるので、便利です。 内容は、 ローカルにＦＦＦＴＰで対象のフォルダ（ここでは”wordpress”）を丸ごとＦＴＰダウンロード後、圧縮ツールで圧縮保存。 （FFFTP側であらかじめダウンロードの設定をしておく必要があります） （圧縮ファイル名はwordpress_YYYYMMDD_HHMMSS.LZH） ログファイルも出力しています。 以下ご覧ください。 （各種フォルダ名は適宜変更してください） [ BAK_WORDPRESS.bat ] @REM *********************************** @REM * BAK_WORDPRESS.bat * @REM * Created By ＊＊＊＊＊ * @REM * at 2009/99/99 * @REM *********************************** @TITLE ■ Backup WordPress ... @REM...","categories": ["PC_Tips","サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/23/23022527/",
        "teaser": null
      },{
        "title": "ついにアフィリエイト挑戦！",
        "excerpt":"松江は明日あたりからこの冬一番ぐらいの冷え込みが当分続きそうです。   ところで・・・・、   ついに・・・・、   アフィリエイトデビューしました。   とりあえず、Amazonアソシエイトに登録（無料）してみました。   （登録は簡単でした）   今ご覧のページ左サイドバーに「Amazon」のリンクバナーを貼り付けてみました。   どうぞ、クリックしてどんどん本を購入してください。   ※ただ、ブログ村の利用規約にもありましたが、アフィリエイトでの収入のみが目的となってはいけないので、あくまでも普段のブログライフの脇役（お小遣い稼ぎ）程度にしておいたほうが良いようです。   とはいっても、もう１つ２つくらいはアフィリエイトを追加しようかと・・・   （アフィリエイト収入をメインには絶対しませんので。）   ","categories": ["ブログ"],
        "tags": ["WordPress","アフィリエイト"],
        "url": "/2009/01/23/23195027/",
        "teaser": null
      },{
        "title": "ロト６の結果！",
        "excerpt":"そういえば、昨日はロト６抽選日でした。   当選数字は以下のとおりでした。   第４２９回   １７・２５・２９・３３・３７・４２　（０７）   （※念のため、結果は自身で「みずほ」のサイトで確認してください。）   僕の研究している方法で購入した数字はというと・・・   いつもながら散々でした。   ただ、それとは別に毎回同じ数字を５口購入しているんですが、それは５等（¥１，０００）が１口当たりました。   まだまだ、ぜんぜん元がとれません。   要研究！！！！   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/01/23/23201009/",
        "teaser": null
      },{
        "title": "今日の１冊！",
        "excerpt":"昨日会社の上司と話をしている中、「この本を読むといいよ」と言われ、その本をお借りしました。   それは、中村天風の「天風瞑想録」という本です。    「いい人生を送るには」、「運命を成功させるには」といった内容の本らしいです。あの松下幸之助氏や京セラの稲盛氏などもこの本の影響を受けているらしいです。   僕がお借りしたのは、A５版くらいの古くてとても立派なハードカバーの本でした。   ただ、これからこれを読んでもいいのですが、どうせ将来もずっと参考にするかもしれないと思ったので、自分も欲しくなり書店で探しました。   そしたら、文庫本バージョンが出ていました。   買いました。   これです。 （Amazonのアフィリエイトを始めたからというわけでもありませんが）   これからはこれをベッドサイドで読んだり、持ち歩いて待ち時間がある時に読んだりしようかと思っています。   まえがきにも書いてありましたが、この本を熟読すればするほど、人生が成功に導かれるような気になれるようです。   読んでみる価値は十分にあると思います。   （まだ、まえがき、序章しか読んでないのでしっかりしたコメントができなくてあれですが・・・、）   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/01/23/23211425/",
        "teaser": null
      },{
        "title": "アフィリエイトに挑戦（その２）",
        "excerpt":"また、こんばんは。   調子に乗って、もう１つアフィリエイト追加しちゃいました。   楽天アフィリエイト。   僕は楽天の会員だったので、登録作業も特に無く（？）、   すぐにできました。   ホントにアフィリエイトの利用登録ができているのかイマイチ不安ですが・・・   とりあえず、パソコン関係のランキングを表示させるのにしてみました。   ぜひ、ご利用ください。   ","categories": ["ブログ"],
        "tags": ["WordPress","アフィリエイト"],
        "url": "/2009/01/23/23223949/",
        "teaser": null
      },{
        "title": "webmaster宛てメールの転送！",
        "excerpt":"このブログでは、各投稿に対しコメントをいただいた場合、webmaster@mk-mode.com宛てに承認をするか否かの確認メールが届くようにしていて、僕が承認をしないとコメントが公開されないようになっています。   しかし、webmaster宛てのメールは現在、root宛て（root宛てのメールは自分のＰＣ用メールアドレス）に転送するようにしていて、これではパソコン上で確認するか、別途構築しているWebmail（携帯用）の機能を利用して、携帯でこちらから確認に行かなくてはいけませんでした。   それでは、せっかくコメントをいただいても僕が承認するまでに時間がかかってしまいます。   そこで、webmaster宛てのメールは携帯アドレス宛にも転送するように設定を追加しました。   手順は簡単。 /etc/aliases に追加するだけ。   [root@noah ~]# vi /etc/aliases -------------------------------------------------- ・・・・ webmaster: root, 携帯アドレス ・・・・ -------------------------------------------------- [root@noah ~]# newaliases    自分で投稿した記事にコメントしたら、無事自分の携帯にメール届きました。   （コメント以外にもwebmaster宛なら結局全部転送されますが・・・）   ま、携帯からもコメントの承認ができたで、これでオッケー、オッケー！   （コメントなんて、あんま無いと思うけど（笑））   ","categories": ["サーバ構築","ブログ"],
        "tags": ["Fedora","Linux"],
        "url": "/2009/01/24/24013505/",
        "teaser": null
      },{
        "title": "今日の松江。",
        "excerpt":"こんちわっ！   今日は吹雪模様です。         写真はＰＭ２：３０ごろでしたが、今も積もりそうな雪がズンズン（？）降ってます。   積もりそうです。   山間部の方はもっとすごいでしょうね。   こんな日は絶好のブログ日和ですな～。   本も読まなければ！   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/01/24/24155836/",
        "teaser": null
      },{
        "title": "新聞社のRSSフィードのニュースについて！",
        "excerpt":"実は今日は、ある新聞社のRSSフィードを自分のブログのサイドバーに表示させようと思い、あれこれ調べて一旦表示させてみました。   が、これって著作権どうなってるんだろうと思い、色々調べてみましたが、RSSで提供しているニュースについてはよくわからなかったので、ヤメました。   （新聞社のサイトに掲載されている記事を無断転載したらどうのか・・・、などについてはわかりましたが、RSSについてはいまいちわかりませんでした。「はてな」サイトのRSSを無断で使用して著作権料を請求されてたというような記事もあって・・・）   怖くなったんで、とりあえずヤメました。   はっきりわかってからやろうと思った次第です。   ちなみに、asahi.comはやってもいいヨ、みたいなことが書いてありましたが・・・   新聞社協会の見解を見てもRSSに限っての記述が無くてよく解らなかったので、とりあえずは、   やっぱりヤメとこ～～っと。   （桂小枝調でした（笑））   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/24/24195718/",
        "teaser": null
      },{
        "title": "Webカメラダウン！？",
        "excerpt":"久々にWebカメラの動作状況を確認すべく、Webカメラのページを見てみたら、なんと・・・今朝４時過ぎの画像で止まっているではないですか・・・   たしか、止まったときに自動でデーモンを再起動するようにしたはずなんだけど・・・ （ こちら のように ）   チェック、チェック。   ガ～ン。。。。。   設定ファイルのフォルダ指定を誤ってました。   修正、修正。   # vi /etc/rc.d/rc.local -------------------------------------------------- /usr/local/bin/respawnd /usr/local/bin/webcam /etc/local/etc/webcamrc         ↓ /usr/local/bin/respawnd /usr/local/bin/webcam /usr/local/etc/webcamrc --------------------------------------------------    たぶん、これで大丈夫でしょう。   ","categories": ["サーバ構築","Webサイト"],
        "tags": ["Webカメラ"],
        "url": "/2009/01/24/24232737/",
        "teaser": null
      },{
        "title": "ルービックキューブたち！",
        "excerpt":"こんにちは。   実は僕の趣味のひとつに「ルービックキューブ」があります。   キューブ歴は小学３年くらいからだから多分２７年くらい。   （途中サボっていた時期もあるけど・・・）   ３×３×３の６面完成のスピードは平均で約１分です。   いかに早く６面完成させるか。それをスピードキュービングといいます。   キューブを買った時についている６面完成のための説明書のそろえ方（ 多分 「ツクダ式」 ）だと３０秒は切れないそうなんで、今はスピードキュービング界ではスタンダードの 「ＬＢＬ法」 にて練習中です。   ただ、今はLBL法の中でも基本的な解法でしかやってないんで、なかなか３０秒ではそろえられません。   基本的な解法以外にいろんなパターンを覚えると時間短縮ができるんで、いろいろ試してみようか思っているとこ。   とりあえず、僕の持っているキューブたちを紹介します。   １．３×３×３ （今メインで使用している。シールが剥げてる。）      ２．３×３×３ （予備。保管・観賞用）      ３．２×２×２ （遅くても３０秒で６面完成できます）      ４．３×３×３ （小学３年くらいに親に買ってもらった（もうグタグタ））      ５．４×４×４ （解法の説明書見ながらでしかそろえられん。それでも１０分はかかるかも）      ６．３×３×３ （スピードキュービング用。自分で動きの硬さなどを調整できるキット。まだ、未開封。いずれはこれをメインに）      ７．３×３×３ （キーホルダー。ちゃんと動きます。）      以上が僕のキューブ達でした。   ちなみに、僕が愛用しているLBL法の載っている本はこちら。      ただこれよりいいのが出ているみたいです。   追伸   このうち、メインで使用している３×３×３はぼちぼちシールの貼り変えをしようかと思ってます。   実は専用のシールを作っている方がいて、購入してあるんです。   その話題はまた。   ","categories": ["ルービックキューブ"],
        "tags": [],
        "url": "/2009/01/25/25122247/",
        "teaser": null
      },{
        "title": "ロト６の予想について。",
        "excerpt":"今日はロト６予想に関連した話題です。   僕はほぼ毎回ロト６を予想して購入してます。   宝くじ売り場ではなく、銀行のATMで購入してます。   たまたま、自分の持っている口座の銀行は口座さえ開設してあれば、ATMで簡単に購入できるんで。   毎回いちいちマークシート書くのも面倒だし・・・   予想方法は、以前 ここ に書いたように統計学的手法を自分なりに駆使してやっている発展途上の段階です。   その予想をするのに、うちのメインマシン（WindowsXP）で、VisualBasic２００５Express &amp; ＳＱＬＳｅｒｖｅｒ２００５Express を使用してます。   いつも、予想したあと、メモ紙に予想数字を転記して、ATMへ持参してLOTO6を購入していたんですが、   もっと楽にできないかと思って、予想した数字をVBから自分の携帯メール宛にメール送信するようにしました。   意外と簡単でした。   これで、いちいちメモ紙に転記して持参しなくても携帯にメールさえしておけばいいんで、結構楽になりました。   ちなみに、うちのサーバにＭｙＳＱＬも立ててるんで、いずれはDBをＳＱＬＳｅｒｖｅｒからＭｙＳＱＬに移行して、ついでにVB止めて、ＰＨＰやらJavaやらで自分のホームページや携帯サイトからデータの管理や予想をやってみたいとは思ってます。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/01/26/26005716/",
        "teaser": null
      },{
        "title": "ハードディスク＆メモリ購入っ！",
        "excerpt":"前にも書いたけど、   地デジ録画対応の新しいメインマシン（WindowsVista or XP）を自作しようかとたくらんでいる今日この頃。   （一応、どんな構成にするかはだいたい決めてるんで）   一気にパーツをそろえるのは資金的に難しいので、   少しずつそろえていこうかと。。。   そこで、今回はハードディスクとメモリを購入しました。   時々オークションで購入したりもするけど、   新品で欲しかったんで。   今回は２つともソフマップのネットショップにしました。 （安かったんで）      ハードディスク （¥８，２８０ （税込み）・・・期間限定価格みたい） （ 日立ＧＳＴ製： HDT７２１０１０SLA３６０_１TB バルク品 ） ※未開封（一応、実際に自作を開始するときに開封するつもり）         メモリ （¥４，４８０ （税込み）・・・これも期間限定価格みたい）（ UMAX製： PULSAR_DCDDR２-４GB-８００（２GB×２） ） ※こちらも未開封。      とりあえず、ほこりのかぶらない所に保管しとこっと。   ↓↓　楽天でＰＣパーツ探すならこちらからどうぞ　↓↓      （僕もよく「楽天」使います。何かと便利なポイントが付くし。。。）   ・ ・ ・   次はもう少し経ってから、また何かパーツを買います・・・   ","categories": ["自作PC"],
        "tags": [],
        "url": "/2009/01/26/26231733/",
        "teaser": null
      },{
        "title": "パーティション丸ごとバックアップ！",
        "excerpt":"まいど、どうも。 メインマシンの重要なデータなどは日々バックアップを取ってます。 でも、もしもWindows自体が起動しなくなった時なんかは、Windowsやらいろんなソフトやらを１からインストールし直さなきゃいけないんで、それは非常にうんざりです。 そこで、時々パーティション丸ごとバックアップを取るようにしてます。 （使うのはKnoppixというLinuxについているPartitionImageというソフトです） これだと仮にハードディスクが壊れてWindowsが起動しなくなっても、別のハードディスクへリストアすれば、最低限最後にバックアップを取っていた段階へ即戻れるはずです。 （実際にリストアしたことはまだないけど。。。できなかったりして。。。。） 久々に今日やっておきました。 パーティションバックアップするたびにいろんなサイトで調べてたんで、今回は自分の今後のために記録として残しておくことにしました。 作業手順 １．デフラグ 断片化が多いとバックアップに失敗することがそうです。 僕はいつも「すっきりデフラグ」というフリーソフトを使用してます。 ２．Knoppix起動 ＰＣをＣＤから起動し直し。 （Knoppix５．１．１（CD版）を使用。 Knoppix はネット上からダウンロードしてＣＤに焼いてます） （注）上の画像にうっすら写っているのは霊ではありません。 （僕です。ご安心を。。。） ３．コンソール画面を起動 rootユーザになる。 knoppix@Knoppix:~$ su - root@Knoppix:~# ４．バックアップ用ディレクトリの作成 root@Knoppix:~# mkdir /mnt/backup ５．作成したバックアップディテクトリをマウント 僕はいつも玄箱に構築しているsambaサーバへマウントしてます。 root@Knoppix:~# mount -t smbfs -o username=sambaユーザ名 //sambaのマシン名またはIPアドレス/ディレクトリ名 /mnt/backup passwordを聞かれたら、sambaユーザのパスワードを入力。 ６．PartitionImageの起動 root@Knoppix:~# partimage ７．保存元・保存先等の設定 今回はＣドライブをバックアップするので、 [ Partition to save/restore...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Knoppix","Linux"],
        "url": "/2009/01/27/27025002/",
        "teaser": null
      },{
        "title": "ノートの使い方！",
        "excerpt":"半年くらい前に書店で偶然目にして、ある本を購入。   その本はこれ。 ちょっと前、地元の書店でビジネス書ランキングでトップになってたこともあります。   要は、１冊のノートを見れば、 「何でもわかる」ということ。。。   僕はこの本を参考にして、 仕事での日々の記録、作業の手順の記録 などを行っています。   以前から仕事でノートを使ってましたが、 『あの事はどこにメモったっけ？』 なんてことが多々あったんで、何でも仕事ではこのノート１冊と決めて記録するようにしてます。 転記するのが面倒なものはコピーして、貼り付け。 （大事なことも、打ち合わせ中でのチョットしたメモも、とにかく職場ではいつも持ち歩く）   ちなみに僕が使っているノートはこんなの。         「無印」で買いました。   サイズ　・・・　A５（僕の好きなサイズ）。 カバー　・・・　ポリプロピレン。 中身　・・・　横線ではなく、５ミリ間隔のドット。 ※リングで綴じてあるのを選んだのは、ページを開いてももう片方のページを裏に回せるんで、常にＡ５のサイズで使用できるから。   でも、このノートはあくまでも仕事の記録として使ってるんで、 「スケジュール管理」とか、「今日は何をした」とかは今までどおりの手帳を使ってます。 僕は手帳をここ１０年くらい、ほぼ欠かさず使用してます。 今はその手帳もA5サイズのを使ってます。 （革張りのバインダータイプ。Ｄａｖｉｎｃｉというブランド）   ※手帳については、いつか気が向いたら（笑）アップします。   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/01/28/28000506/",
        "teaser": null
      },{
        "title": "ホームページ更新！",
        "excerpt":"何年も前からあまり更新してなかったホームページの方を、   更新してみました。   だいたいまとまってきたんで思い切って公開！   でも、   全然たいした内容じゃないんで、   期待はしないでください。   それでもよかったら、   右の「お気に入りリンク」からどうぞ。   まだまだ、修正は加えていくと思います。。。   ちなみに、   今回は、ｈｔｍｌ＋ＣＳＳ のみで作ってます。   ホントはＰＨＰを駆使してみたいところですが、   全然不勉強なんで。。。。   追々、ということで。。。   ","categories": ["サーバ構築","Webサイト"],
        "tags": [],
        "url": "/2009/01/29/29000546/",
        "teaser": null
      },{
        "title": "WordPress に改行プラグイン導入！",
        "excerpt":"今夜は、   ＷｏｒｄＰｒｅｓｓ で記事投稿時に   改行（Enter押下）しても思うように改行されない、   という不具合（仕様？）を解消させるための   プラグインを導入してみました。   それは、**brBrbr **とかいうのです。   以下、導入方法です。   １．こちらのページからプラグインのダウンロード＆解凍。   ２．解凍してできたファイル brBrbr.php を WordPress の Plugins フォルダへアップロード。   ３．WordPress の設定画面 - プラグイン で brBrbr を有効にする。   以上です。   簡単でした。   これで、このように思う存分改行できまーすっ！   めでたし。めでたし。   でも、実際使ってみると・・・、 記事投稿時に 「ビジュアル」モードでなく、 「ＨＴＭＬ」モードで改行を使って そのまま投稿しないと 改行されないジャン？   「ビジュアル」モードと「ＨＴＭＬ」モードを 行ったり来たりしてると 改行が消えてしまってる。   そんなもんですか？   う～～ん！   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/29/29205848/",
        "teaser": null
      },{
        "title": "Blog People に登録！",
        "excerpt":"また、こんばんは。   今度は、   ブログランキングサイト   「 Ｂｌｏｇ Ｐｅｏｐｌｅ 」   に登録してみました。   登録したカテゴリは、   こちらです。      よかったら、遠慮なく（？）クリックしてみてちょーだいっ！   これで、ブログランキングサイト大手は制覇（？）          まだ、あったりして！？？   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/01/30/30003114/",
        "teaser": null
      },{
        "title": "ホームページ更新！",
        "excerpt":"また、ホームページを更新しましたけん。   ＴＯＰページに載せていた自己紹介を   別に　ＰＲＯＦＩＬＥ　というページに分けて、   ＴＯＰページには、   便利そうなパーツ（全部フリー）を載せたり、   各種リンク（全部リンクフリー）を貼り付けたりしてみたけん。   よかったら、見てみてごしない。。。。   ここ だけん。。。   （各所に 「出雲弁」 を入れてみました（笑））   ","categories": ["ブログ"],
        "tags": [],
        "url": "/2009/01/30/30205317/",
        "teaser": null
      },{
        "title": "僕のＰＣ関連の経歴について。",
        "excerpt":"今日は、僕の所有ＰＣの歴史について書いてみます。 所有ＰＣ （　古い順　） １．日立のワープロ（名前は忘れた） 高校１年（１５歳）の時、 親戚のおじさんに高校入学祝いに買ってもらったワープロを使い始めました。 （当時のあんな（？）ワープロでも２０万円くらいはしてたと思います） ２．HITACHI BASIC MASTER Ⅲ （パソコンが出だしたころの超古いマシン、ＦＤは５インチ） でもギリギリ、テープの時代を知らない世代（？）です たしか、高校３年くらい（１７～１８歳）のとき、これも上記と同じ親戚のおじさんの会社で不要となったＰＣを譲ってもらい、 ＢＡＳＩＣプログラミングにはまってました。 ３．ＦＵＪＩＴＳＵ　ＦＭ−ＴＯＷＮＳ（型番は忘れた） 大学生（理学部数学科）のころ（１８～１９歳）、自分で初めて買ったマシン。 プリンタ、外付けＨＤセットで当時何十万円もした（もちろん分割払いで） 当時では珍しいWindows風の画面に感動。 いろんなことに（ワープロ、ＢＡＳＩＣ。雑誌に載ってたソースを入力したりして）使ってた。 ４．ＦＵＪＩＴＳＵ　ＦＭ−Ｒ（型番は忘れた） たしか社会人（事務系の職種）１年目（２２～２３歳）のときに購入。 このころから、ビジネス的なこと（Ｗｏｒｄ、Ｅｘｃｅｌ）の他、 パソコン通信、インターネットを始める。 ５．Ｆｒｏｎｔｉｅｒ 神代 G-Break （オーダーメイド） 社会人８年目くらい（ソフト系派遣）のときに購入。 Ｐｅｎｔｉｕｍ４マシン。 かなりいろんなことに使用。 （仕事柄プログラミングもかなりした） Ｂａｓｉｃ、Ｃ言語、ＣＯＢＯＬ、Ｆｏｒｔｒａｎ、アセンブラ、Ｊａｖａ ・・・・ 当時では珍しかったｉアプリも作ったりした。（１つだけだけど） ■今もこのマシン（ＷｉｎｄｏｗｓＸＰ）は安定稼動中 （ＴＶ録画サーバとして） ６．Shuttle SD11G5 （ベアボーン） ３年前（ソフト開発会社）のとき購入、パーツ組み込み。 このとき初めて、ほぼ自作みたいなことをした。 電源はＡＣアダプタ、ＣＰＵはPentiumMなので、ほぼ無音。 いろんなことにバリバリ使用中。 ■現在、メインマシン（ＷｉｎｄｏｗｓＸＰ）として安定使用中。 ７．KURO-BOX / HG （ＮＡＳ） ２～３年前購入。...","categories": ["自作PC"],
        "tags": [],
        "url": "/2009/01/31/31011312/",
        "teaser": null
      },{
        "title": "電子マネー「 ｉＤ 」！",
        "excerpt":"こんちわ！   この間携帯を機種変更したとき 「ＤＣＭＸ（ｉＤ）」 を契約してて、 アプリの設定も終わったんで、 今日初めて使ってみました。   電子マネー対応自販機(コカ・コーラ)で。   無事、缶コーヒー買えました。   お金入れる前に商品選んで、 その後でどの電子マネーを使うか選択して、 あとは携帯をかざすだけ。   ちゃんと使えるか心配だったけど、 すんなりできました。   今日使ったのは コカ・コーラの電子マネー 「 Ｃ−ｍｏｄｅ 」 と 「 ｉＤ 」 しか使えない自販機だったけど。   こちらの地元でも最近やっと 「 Ｅｄｙ 」 も使える自販機が出だした感じ。   Ｅｄｙは前から携帯で使えるようにしてて、 Ｅｄｙ使用時には楽天ポイントが貯まるように してるんだけど、 ２００円で１ポイントなんで、 自販機ではポイントが付かない（トホホ）   ちなみに、今持ってる電子マネーは ＷＡＯＮ（携帯とＪＡＬカード） Ｅｄｙ（携帯とＡＮＡカード） ｉＤ（携帯） Ｃ−ｍｏｄｅ（使ったことない）   クレジットカードもいろいろあるし、 ポイントのことを考えて色々使い分けないと うまくいかなんで、 大変だ～っ！   しかし、   小銭を使わず電子マネーで決済できるなんて すごい時代になったもんだ。。。   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/01/31/31163430/",
        "teaser": null
      },{
        "title": "Google検索を追加！",
        "excerpt":"今夜は当ブログサイトの検索機能に Ｇｏｏｇｌｅ検索を追加しました。   こちら を参考にしました。   ラジオボタンでＷＷＷとブログ内を選択して検索するのも ありましたが、   これだと、ブログ内検索しても、 検索結果がＧｏｏｇｌｅの画面で表示されてしまうんで、 通常のブログ内検索とＧｏｏｇｌｅ検索は別々にしました。   ブログ内検索は 今までの方法の方がいかにもブログ内を検索している っていう感じがするし、 検索結果が自分のブログページに表示されるんで、 こっちが良いヤと思ったんで　。。。   ","categories": ["ブログ"],
        "tags": ["Google","WordPress"],
        "url": "/2009/02/01/01001316/",
        "teaser": null
      },{
        "title": "「ロト６」コーナー作りました！",
        "excerpt":"この間の、ロト６も散々な結果でした。   恥ずかしいので、公表しません・・・・・・・・・   ところで、   以前、僕がロト６を研究しようと考え、   まずはデータをそろえなければと思ったとき、   みずほのホームページで当選結果は確認できるけど、   一括でダウンロードできなくて困りました。   いろんなサイトを探したけど、   結局、データが古いままだったり、   自分の意図するものでなかったりだったんで、   自分でデータダウンロードコーナーを作りました。   自分がロト６を研究し続ける限りは、   常に最新データを公表し続けようと、   硬く決心した次第でありまする。   もし良かったら、   僕のホームページ mk-mode SITE からダウンロードしてみてください。   ※仮に入力ミス等で不審なデータがあっても一切責任は負えませんのであしからず。。。。 （あくまでも、正式なデータは「みずほ」ですので・・・・）   ","categories": ["Webサイト","ロト６"],
        "tags": [],
        "url": "/2009/02/01/01205709/",
        "teaser": null
      },{
        "title": "ＰＨＰ使ってみた。",
        "excerpt":"またしても、こんばんは。   そういえば、   僕のホームページ 「mk-mode SITE 」 、   当初はＨＴＭＬだけで作ってたけど、   ほんのチョビッとだけＰＨＰ使ってみました。   ただ、各ページで同じ内容のＨＴＭＬを別ファイルに分けて   ＰＨＰで呼び出すようにしただけだけど・・・   まあ、これからＰＨＰは勉強してみますんで。   でも、自分の地元（松江）ゆかりのＲｕｂｙ（まつもとゆきひろ氏）も使ってみたいな～。 （Ｌｉｎｕｘ（これも松江ゆかり）はサーバとして、ボチボチ使ってるんで・・・）   ","categories": ["Webサイト"],
        "tags": ["PHP"],
        "url": "/2009/02/01/01210801/",
        "teaser": null
      },{
        "title": "「リメンバ～しまね」入団！",
        "excerpt":"今日は、   「リメンバ～しまね」 とかいうのに入団しました。   こちら ↓      「リメンバ～しまね」 とは何かというと、、、   僕の地元である「しまね」を   応援する人たちの集まり（応援団）です。   別に島根県人でなくても、   「「 ひそか 」」に「しまね」を応援してくれる人なら   誰でも入団できます。   いろんなコメントを投稿したり、閲覧したり、   島根のイベント情報を確認できたり、、、   今まで自分の知らなかった「しまね」を   再確認できたりもします。   「しまね」命の僕も、もちろん（やっと）入団登録しました。   ちなみに、２９２３番目でした。   皆さんも、「ひそか」（笑）でいいんで、   「しまね」を応援してみませんか？   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/02/02/02011510/",
        "teaser": null
      },{
        "title": "気になるアングル！",
        "excerpt":"　　 今日は、   「 ごうぎん本店　」 ビルをアップしてみました。      遠くから見るこのビルも良いけど、   近くに寄って見上げるのもいいですな。 （この画像は南西側からです）   ７５ｍもあるそうな。   現時点で山陰一のはず。   地下２階、地上14階。 ちなみに１３階には行員食堂があるみたい。。。 （建物情報は大林組の資料より）   今まで何回か展望フロア行った事あるけど、   あちこちが見えるんで、   いいですな～。   宍道湖も見下ろしてみると また違った風情を感じるし。。。   また展望フロア行ったときは、 写真撮ろっと。   ■休日 年中無休   ■営業時間 11月～3月　 9:30～17:30 4月～10月　10:00～18:00   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/02/02/02183353/",
        "teaser": null
      },{
        "title": "改行プラグインのその後！",
        "excerpt":"　　 この間、 自由に改行できるプラグインを導入したんだが、 何かおかしくて・・・・ 　　 それは、 WordPressで 「ビジュアルリッチエディタ」 と 「ＨＴＭＬエディタ」 を行き来すると、 せっかく入れた改行が消えてしまう。 PRE タグでコードを表示すると、行間に余計な改行が１つ入ってしまう。 何かタグを含んだ投稿を作成すると、 そのタグ以降のタグを付けていない通常の文字の色が黒くなってしまう。 （このプラグインは背景が白い人専用？） 　　 上記について、ちょっと調べて見ました。 　　 １． については、WordPress２．５．？以降のプラグインにすればよいとわかり、 早速入れ直してみたけど、やっぱりダメだった。 環境がちがう？ なので「ビジュアルリッチエディタ」は使わず 「ＨＴＭＬエディタ」 だけ使うように設定しなおした。 ２．も直せる方法がどこかのサイトに載ってた。 しか～し、 ３．はやっぱり何かのタグの後の文字は黒くなってしまう。 スタイルシートの設定もあっているはずなのに・・・ わざわざ、自分で何かタグを付け直せばＯＫだけど、 非常に面倒なんで・・・ 　　 もっと調べてたら、 このプラグインを使って投稿作成すると、 記事全体が＜Ｐ＞タグで囲まれるから、 その中に他のタグが入ると崩れてしまうみたいだ・・・ 　　 結局、当面「改行プラグイン」は止めにしました。 なので、 過去の複数改行をいれてた記事は複数改行が 無くなってますんで、あしからず・・・。 何かいろいろ手を加えれば直るみたいだけど、 それはちょっとプラグインとして入れるのはちょっと・・・ 　　 　　 　　 それでもやっぱ改行はしたいんで、 またちょっと調べてみました。...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/02/03/03001408/",
        "teaser": null
      },{
        "title": "携帯にフルブラウザアプリ！",
        "excerpt":"　　 　　 今日は携帯にフルブラウザアプリなるものを インストールしました。   何種類かあったけど、   「 ｊｉｇブラウザ 」 というのにしました。 （月額¥６３０かかるけど） 　　   最初から携帯に付いてるフルブラウザの 機能でもＰＣ用サイトを閲覧できるんだけど、   料金的にもフルブラウザアプリの方が得だし、 使いやすいし、カスタマイズしやすい、あといろいろ。。。   　　 料金が得というのは、、、 今、僕はドコモのパケホーダイ・ダブルを利用してるんだけど、 これって、   −−−−−−−− あまり使わなかったとき、      ¥９８０　（税込¥１，０２９）   その後は、使った分だけで上限額が、      iモード上限額 ¥４，２００　（税込¥４，４１０）   iモードフルブラウザ上限額 ¥５，７００　（税込¥５，９８５）   −−−−−−−−   なので、   携帯に標準搭載のフルブラウザ使った時は、 最大　¥５，９８５　（税込） かかってしまう。   ところが、フルブラウザアプリを使えば、 パケット通信はアプリからの通信になるので、 最大　¥４，４１０　（税込） で済んじゃうのだ。。。   フルブラウザアプリの月額使用料を足しても安い。   　　 無料お試し（１日１０ページ）もあるので、 みなさんもどうぞお試しあれ。   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/02/03/03193049/",
        "teaser": null
      },{
        "title": "ルービックキューブの本！",
        "excerpt":"どうも、まいど。 　　 ちょっと前に、 ルービックキューブの話しました。 （「ルービックキューブ」 のカテゴリ参照） そこの話の中で、 僕が持っている攻略本より良さげな本があることを 書きました。 　　 気になって、 昨日地元の本屋さんで買ってしまいました。 　　 でも、中身を見てみると・・・ 　　 大事な部分（攻略の部分）はほぼ同じでした。 違っていたのは、 トピックス的な内容が違っていた。 ２ｘ２ｘ２ の攻略も載ってた。 くらいかな？！ 　　 でも、いやな気分ではないです。 　　 　　 なぜなら、 ルービックキューブを愛しているからです。 　　 この２冊持ってます。 どうですか？ 　　 あっ、 あと、これも持ってます。 これは、 ルービックキューブを数学的に解く方法！ が載ってます。 まだちゃんと読んでないですが・・・ 　　 　　 バラバラになったままのルービックキューブを もっているアナタ。 　　 ６面揃えてみませんか？ 　　 　　 次回のルービックキューブの話題は、 だぶん、 シールのめくれたキューブ再生についてだと思います。。。 　　 　　...","categories": ["ルービックキューブ"],
        "tags": [],
        "url": "/2009/02/04/04063023/",
        "teaser": null
      },{
        "title": "Amazonアソシエイトの表示変更！",
        "excerpt":"いつも、どうもです。 今日は、 この間導入したアフィリエイト 「Ａｍａｚｏｎアソシエイト」 の表示デザインについてです。 商品リンクを作る場合に、 Ａｍａｚｏｎアソシエイトのページでは、 「テキストとイメージ」（縦長）か 「テキストのみ」しか選べません。 たとえば サイドバーに表示させたい場合に、 縦長のデザインだと たくさん表示させたときに 下にズラズラ長くなってしまい、 なんかイヤでした。 画像だけとか、 もっとシンプルなデザインのがいいんで・・・・ また、いつものように調べました。 そしたら、 いいのがありました。 そ　れ　は、 Ｇ−Ｔｏｏｌｓです。 他にも何個かありましたが、 これにしました。 これだと、 画像だけ表示だとか、 おすすめ度の表示だとか、 ランキングの表示だとか、 いろんな表示ができます。 僕はそのツールで、 シンプルな画像とタイトルだけの表示のデザインを 選択＆カスタマイズして このブログのサイドバーの「 紹介したBOOKS 」に表示させてみました。 いかがでしょう？ 今後は、 ブログ本文内で紹介する アマゾン商品も このツールを使ってみようか思ってる次第。。。 以下はサンプルです。 （当ブログの背景が黒なんで★マークのトコがなんかおかしいですが・・・） 情報盛りだくさんのこんなのや↓ [運命を拓く—天風瞑想録 (講談社文庫)](http://www.amazon.co.jp/%E9%81%8B%E5%91%BD%E3%82%92%E6%8B%93%E3%81%8F%E2%80%95%E5%A4%A9%E9%A2%A8%E7%9E%91%E6%83%B3%E9%8C%B2-%E8%AC%9B%E8%AB%87%E7%A4%BE%E6%96%87%E5%BA%AB-%E4%B8%AD%E6%9D%91%E5%A4%A9%E9%A2%A8/dp/4062637391%3FSubscriptionId%3D0G91FPYVW6ZGWBH4Y9G2%26tag%3Dkomasaru-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4062637391 \"運命を拓く—天風瞑想録 (講談社文庫)\") 中村天風 講談社 1998-06...","categories": ["ブログ"],
        "tags": ["WordPress","アフィリエイト"],
        "url": "/2009/02/04/04205038/",
        "teaser": null
      },{
        "title": "「しまね」のＣＭ！",
        "excerpt":"この間、 「しまね」を裏から応援するサイト 「 リメンバ～しまね 」      の応援団に入団したんで、   そのサイトを見てたら、   おもしろいＣＭ（このサイトのＣＭ）があって、   しかも、 「ブログに貼り付けちゃえ」とまで、 書いてあったんで、   貼り付けました。 （全３パターン）   どうぞ、見てみてごしない。      ミス島根！？も楽しんでる！あのサイトのCM  （島根の、どこにでもある日常風景のひとコマ）        アノことを知らないことは最大のピンチ！  （島根県庁知事室での出来事・・・  アノことを知らないことは最大のピンチを迎える）        マネキンお笑いグループ誕生！？  （何も言うことはありません。とりあえず、見てください）     ※僕的には、２番の知事さんの笑顔が気に入ってます。。。   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/02/05/05004643/",
        "teaser": null
      },{
        "title": "ブログの更新頻度について。",
        "excerpt":"どもども。。   　　 自宅サーバでブログを始めて約１ヶ月の僕です。   　　 いつの頃からか、 毎日欠かさず投稿しようと決意していました。   もし、 投稿する話題に困ったら・・・ と考えると、   日ごろ、 何か思いついたときにそれをメモっておいて、 いざ投稿する話題が無くなったら活用すればいいんじゃないか、 と思って、 日々メモってます。 （実際は携帯のメモ帳に書き込んでますが）   　　 でも毎日、 あんなことも・・・ こんなことも・・・ と思って、 結局今のところは 話題が余っている次第です。。。   最近仕事がヒマで 「残業」も「休出」も無く、 「帰休」が有る、 という世の中だから？   　　 ま、たいした話題じゃないけど ブログ（日々の記録）のことですけん、 勘弁してごしないませ。（出雲弁）   （あくまでも「今のところ」って感じかもしれんけど・・・・）   　　 でも、 なにかしら毎日投稿はするつもりなんで、 今後ともヨロシコ！！   もし、 投稿が途切れたら、 心配してください。 　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/02/05/05065817/",
        "teaser": null
      },{
        "title": "サイトの横幅！？",
        "excerpt":"　　 みなさんは、 ご自分のホームページやブログのページの 「 横幅 」 はいくらに設定されてますか？   　　 僕はブログ開設した当初は たしか、７６０ｐｘくらいにしてたと思います。 （なんかの本にかいてあるのマネて）   　　 でもなんか横幅が狭い感じがするんで、 あちこちいろんなサイト見たり、 サイトの横幅について調べたりしてみました。   　　 他のサイトも意外と横幅が狭いのが多かったけど、 ある人のブログ記事には ９０％以上は横１０２４px以上の画面を使っている というような調査結果が書いてあったし、 実際、ニフティとかのページも１０００ｐｘ近くあるようなんで、   僕のブログは横１０００ｐｘにしてます。   ホームページの方も１０００ｐｘにしてます。   多分問題ないと思います。。。   ※ま、１０００ｐｘ以下にしても横スクロールバーがでるだけなんでネ・・・   　　 　　   ","categories": ["ブログ","Webサイト"],
        "tags": [],
        "url": "/2009/02/06/06003329/",
        "teaser": null
      },{
        "title": "LOTO6 No.431",
        "excerpt":"まいど。   昨日のロト６（第４３１回）も いつもながら、 散々な結果でした。。。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/02/06/06123022/",
        "teaser": null
      },{
        "title": "W3Cのチェック！",
        "excerpt":"　　 ときどき他のサイトとかで、こんなバナー が表示されたり、 HTMLのソースのあたまの &lt;!DOCTYPE ～ のところに記述してたりする「 Ｗ３Ｃ 」 とは何か気になって調べてみました。 「 Ｗ３Ｃ 」 とは・・・ 正式名称は「 World Wide Web Consortium 」。 Webの標準化団体で、HTML, XML, XHTML, CSSなどの規格をとりまとめているところで、 インターネット上で用いられる技術の標準化を目的とする団体のようです。 その団体が定める一定の基準をクリアすると、 その「あかし」としてバナーが貼れるみたいです。 自分のホームページやブログも 自分でＨＴＭＬを作ってるんで 正しい記述かどうか気になってたトコ。。。 実際、 いろんなサイト見てみても、 Ｗ３Ｃのバナー貼ってないところは ソース上は「 Ｗ３Ｃ 」と唱って（うたって）いながら、 実は基準に沿ってない（エラーが何百もあるような）ページばかりでした。 （なかにはＷ３Ｃバナー画像だけ貼り付けてるのもあるみたい・・・） これでは、 地球上の人に見られる可能性があるＷｅｂの世界では 自分の知らないところで不具合が多々発生しているということです。 そんなんじゃ・・・・、ま・ず・い！！！ 実際、自分のサイトもログとか見てみると、 海外からのアクセスもあったんで（海外に住む日本人とかかも知れんけど） 自分のサイトもチェックしてみました。 予想通り、 １５０くらいのエラーがありました。 当ブログの方も２００近くもエラーがありました。 ※エラーの内容は全て英文ですけど、英語がわからなくても何がおかしいのかはわかると思いますヨ。 これは大変だあ～っ、と思い、...","categories": ["サーバ構築","Webサイト"],
        "tags": ["W3C","WordPress"],
        "url": "/2009/02/07/07000109/",
        "teaser": null
      },{
        "title": "Adobe製品 のダウンロードボタン！",
        "excerpt":"こんにちは。 　　 今日は、 ＡｄｏｂｅＲｅａｄｅｒ と Adobe FlashPlayer の ダウンロード用のリンクボタンについてです。 [ と ](http://www.adobe.com/products/acrobat/readstep2.html “ と ”) のこと。 自分の ブログ やホームページ でＰＤＦファイルを公開したり、 Ｆｌａｓｈのブログパーツを使ったりしてるんだけど、 そういえば、 ＡｄｏｂｅＲｅａｄｅｒ と Adobe FlashPlayer を持っていない人は見れないジャン。 と思い、よくあるようなＡｄｏｂｅのリンクボタンを貼ってみようと。 　　 しかし、調べても意外とわかりにくかった。 何とかできたんで、ホームページ の方に貼りました。 当ブログの方はちょっと様子をみてからということにします。 （別にリンクボタン無くても、確か大丈夫のような・・・） 　　 一応、忘れないよう記録することっと。 １．ボタン画像はこちらから（Reader、FlashPlayer どちらとも） 　　　　- - - &gt; http://www.adobe.com/misc/linking.html ２．リンク先はこちらを Ｒｅａｄｅｒ 　　- - - &gt; http://www.adobe.com/products/acrobat/readstep2.html...","categories": ["ブログ","Webサイト"],
        "tags": [],
        "url": "/2009/02/07/07111653/",
        "teaser": null
      },{
        "title": "W3Cのチェック（ＣＳＳ）！",
        "excerpt":"こんちは。   　　 先日、Ｗ３Ｃ のチェックをした話をしました。 （こちら を参照）   そこではＨＴＭＬのチェックをしたんだけど、 ＣＳＳ（スタイルシート）も基準をクリアしているかどうかチェックができるので、 今日は、ＣＳＳのチェックをしてみました。   エラーありました。 ８コ 。。。   　　 ホームページ の方はエラーゼロになりました。   ということで早速、ホームページ の方には Ｗ３Ｃ ＣＳＳ用のバナーを貼りました。 こんなの。    （このボタンは今表示している画面についての結果を表示します。ブログの方は未チェックなので、エラー多数だと思います。）   　　 エラーとは何だったかというと。。。 僕の ホームページ では、以下のような感じでした。      スクロールバー設定の記述があった。                                                               ＩＥ以外では使えないからか、エラーになってた。                                                    定義のだぶりがあった。                                                               container の backgound の色と、 の文字色 が同じだった。                                                    でした。   今後はＨＴＭＬ同様、サイト更新のつど ＣＳＳも Ｗ３Ｃチェックしまっす。 （とりあえずホームページの方だけ）   このＷ３Ｃボタンは、 水色系のほかにうす茶色系のバージョンもあります。   　　 さあ、ブログの方どうしよっかな～・・・   　　 ではまた。   　　   ","categories": ["ブログ","Webサイト"],
        "tags": ["W3C","WordPress"],
        "url": "/2009/02/07/07161539/",
        "teaser": null
      },{
        "title": "Fedoraのお気に入り！",
        "excerpt":"　　 今日は、 僕が自宅サーバを構築する上でいつも参考にさせてもらっているサイトをご紹介します。   　　 僕の自宅サーバは無料のＬｉｎｕｘである Ｆｅｄｏｒａ で構築しています。 （現在はＦｅｄｏｒａ１０で運用中） Ｗｅｂサーバ、メールサーバ、ＦＴＰサーバ、ファイルサーバ、ＤＢサーバ、ブログ等々・・・ Ｗｅｂ、メール、ブログがメインです。   　　 ちなみに Ｌｉｎｕｘ は ＦｅｄｏｒａＣｏｒｅ５ くらいの時から本格的に触りだしました。   それ以前も雑誌の付録で付いている Ｌｉｎｕｘ は使ってみたことはありますが・・・。   Ｆｅｄｏｒａでサーバを構築するにあたってよく参考にさせてもらっているのが、 以下の２つです。     Fedoraで自宅サーバー構築     はじめての自宅サーバ構築 - Fedora/CentOS -   僕の自宅Ｆｅｄｏｒａサーバはこの２つがあるからこそ成り立っています。 何かわからないことがあれば、お世話になり、 ひじょーに感謝している次第です。   　　 他にもありますが、僕はこの２つで大体のことがわかります。 Ｑ＆Ａなんかも丁寧に対応されてます。   　　 もし Ｆｅｄｏｒａ でサーバ構築される方がおられたら、 ぜひおすすめです。   　　 リンクフリーでしたので、 当 ブログ と ホームページ にバナー貼らせてもらいました。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2009/02/08/08014637/",
        "teaser": null
      },{
        "title": "まるごとPHP購入！",
        "excerpt":"　　 最近、 「 PHP 」が気になって仕方ないので、 本屋で「 PHP 」の本で、 初心者向け＆実用的そうなのを 探してみました。 　　 結局、 昔からなんか好きだった インプレスジャパンの「まるごとシリーズ」のムックを 買いました。 ※前にもこのシリーズのＪａｖａ等のムック買ったことがあるし、 初心者から中・上級者まで使えるシリーズなんで。 　　 しか～しっ、 その本屋には新しいほうの 第２弾（Vol.２）しか無かった。。。 仕方なく Vol．２を買ったんだが・・・、 ちらっと目を通してみたけど、 やっぱり中身は Vol．１ を読んだ人でないとわからないような内容だった。 （PHPは初心者なんで・・・） 　　 地元のほかの本屋にも Vol．1 は無かった（涙・・・） 　　 なので、 Amazon に注文しました。 今回Amazonで注文したのはVol．１の方です。 　　 たぶん、 Vol．１ の方は、 PHP初心者にもわかりやすい内容だろう！と思って。 （Amazonのコメント見る限り・・・） 　　 そして、 本日届きました。 肝心な内容の方は・・・ 予想通りの初心者向けで安心したところです。 ＰＨＰとはなんぞや？ Windows、ＬｉｎｕｘへのＰＨＰ環境の作成！...","categories": ["Webサイト","その他"],
        "tags": ["PHP"],
        "url": "/2009/02/09/09004501/",
        "teaser": null
      },{
        "title": "HTMLエディタ！",
        "excerpt":"　　 今日は僕が自分の ホームページ を作る際に使っているＨＴＭＬエディタをご紹介。   現在は、 昔の職場（システム開発）でＷｅｂ系システムを作る際に、 当時Ｗｅｂ系に乏しかった僕に Ｗｅｂ系に強かった後輩が勧めてくれたＨＴＭＬエディタを使用しています。   ホームページビルダとかＦｒｏｎｔＰａｇｅとかでもホームページは作れるけど、 やっぱり、自分で意識してＨＴＭＬタグを付けることが大事（？）と思って、 自分でプログラミングしてます。   しかも、基本テキストエディタさえあればできるし、 全て無料で使えるし。。。   ま、ちょっとしたこだわり！ （当然かも知れんけど）   その僕が使っているＨＴＭＬエディタは、     です。   当然ながら、 ・タグ等に色が付くし、 ・構文チェックもあるし、 ・ブレビューもできるし、 等々。。。   そして、最近ではＰＨＰにも対応しているみたい。   　　 実はこれからＰＨＰを本格的に触りたいと思ってＰＨＰ用エディタを探していたんだけど、 せっかく    を使って慣れていたのにもったいないなあと思ってたところ、     のサイトをみてたらＰＨＰ対応されていたので、超ラッキー！でした。   僕の場合、ＷｅｂサーバやＰＨＰはＦｅｄｏｒａサーバには入れてるけど、 メインマシン（WindowsXP）には入れてないんで、 これからＰＨＰをインストールすれば、 完全にＰＨＰ環境は整うと思っている次第。。。   よって、今は    をバージョンアップして使ってます。 今のバージョンはＢｅｔａ版みたいだけど、完成度も高いんで安心して使わせてもらってます。   最近はリンクウェアにされてるようなんで、 自分のホームページにリンクバナーを貼っておきました。 いろんなのあったけどこんなのにしました。→     みなさんもぜひお試しあれ。   　　 ＰＨＰについてはまたご報告します。   　　 じゃ。   　　   ","categories": ["Webサイト"],
        "tags": ["HTML"],
        "url": "/2009/02/10/10001036/",
        "teaser": null
      },{
        "title": "WindowsXPでＰＨＰ５！",
        "excerpt":"まず、うちのサーバはＦｅｄｏｒａ１０であれこれ構築してます。 そして今は、実際にホームページを作成するときはメインのＷｉｎＸＰマシンで を使ってコーディングしてから、ＦｅｄｏｒａサーバへＦＴＰアップロードしています。 が、 最近 でＰＨＰも使えることを知ったため、ＷｉｎＸＰマシンにＰＨＰを導入しました。 忘れないように、メモっときます。 作業記録 （ 本当はＷｅｂサーバとして Ａｐａｃｈｅ をいれたかったが、 ではＷｅｂサーバとして ＡＮ ＨＴＴＰＤ が対応のでしたので、今回は ＡＮ ＨＴＴＰＤ を導入） １．ＰＨＰのダウンロード こちらの PHP: Download から、「 Windows Binaries 」 の 「 PHP 5.2.8 zip package 」 をクリックして開いたページから 「 php-5.2.8-Win32.zip 」（「5.2.8」は執筆時点の最新）をダウンロード。 ※「 PHP 5.2.8 installer 」というのではない！ （いろんなサイトの記述によると多分 ＳｅｒｖｅｒＡＰＩ というのが含まれていないものなので） ２．解凍 先ほどダウンロードした php-5.2.8-Win32.zip を解凍。...","categories": ["サーバ構築","Webサイト"],
        "tags": ["PHP","Windows"],
        "url": "/2009/02/11/11014450/",
        "teaser": null
      },{
        "title": "WindowsXPでＰＨＰ５！（＋Ａｐａｃｈｅ２）",
        "excerpt":"昨日は、うちのメインマシン（WindowsXP）に AN HTTPD 、 PHP5 をインストールして で編集できるようにしたんだけど、、、 やっぱり Apache2 も入れてみたくなり、早速インストール＆設定しました。 作業記録 １．インストール前の準備 IIS というWebサーバが動いているとApache2のインストールに失敗するので、サービスを「無効」にする。 IIS自体をインストールしていなければいいですが、僕の場合VBでメールを送信するようなプログラミングをするためにインストールしていて、普段はIISサービス自体を停止させてサービス開始は手動で行うように設定していたつもりが、IISは手動開始に設定していても、なんか勝手にサービスが開始されてしまう。 （なぜかは今のところ不明！） 多分それが原因でApache2をインストールしようとしてもよく失敗していたみたい。。。 当然、AN HTTPD も停止。 ２．Apache2 のダウンロード こちらの Apacheのサイト の「 Download 」に入り以下のインストーラをダウンロード。 “apache_2.2.11-win32-x86-no_ssl.msi” （当記事執筆時点の最新。今回は外部には公開しないので no_ssl を選びました。） ３．Apache2 のインストール 先ほどダウンロードしたインストーラを実行して、すべてデフォルトのままの設定でインストールしました。 途中で入力すべき箇所は以下のように設定。 ・Network Domain : 「 localhost 」 ・Server Name : 「 localhost 」 ・Administrator’s Email Address...","categories": ["サーバ構築","Webサイト"],
        "tags": ["Apache","PHP","Windows"],
        "url": "/2009/02/12/12001517/",
        "teaser": null
      },{
        "title": "LOTO6 No.432",
        "excerpt":"まいど。   日付が変わって昨日のロト６（第４３２回）も 結果は、、、 全然でした。。。   考え方を変えないとダメかな？   というわけで、 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/02/13/13000215/",
        "teaser": null
      },{
        "title": "WindowsXPにMySQL！",
        "excerpt":"今夜は、ふと、Apache2＋PHPの導入ができたうちのメインマシン（WindowsXP）にデータベース MySQLを入れたくなったんで、入れてみました。 （実はいずれブログ WordPress を Windows でも使えるようにしたくて） 導入記録 １．アーカイブファイルのダウンロード MySQLサイトの ダウンロードページ から Windows 用の “Without installer” ファイルをダウンロードします。 （当記事執筆時点での最新は 5.1.31 でした） ※今回は、 「 Windows Essentials (x86) 」 や 「 Windows MSI Installer (x86) 」 のインストーラは使用せず、ＺＩＰファイルをダウンロード後解凍して設定していくことにしました。 「 Pick a mirror 」というところをクリックするとユーザ登録画面となる。 今回はユーザ登録せず、ダウンロードするだけなので、 「 » No thanks, just take me to the downloads! 」...","categories": ["サーバ構築","ブログ"],
        "tags": ["MySQL","Windows"],
        "url": "/2009/02/13/13013058/",
        "teaser": null
      },{
        "title": "WindowsXPにMySQL＋phpMyAdmin！",
        "excerpt":"昨夜ＭｙＳＱＬをＷｉｎｄｏｗｓマシンにインストールしたんだけど、 そういえば、 ＭｙＳＱＬ入れたらこれも入れておかないといけいない。 ってことを忘れてた。 そう、 ｐｈｐＭｙＡｄｍｉｎ というＭｙＳＱＬ管理用のツール。 ということで、入れてみました。 ※あくまでも、ＷｉｎｄｏｗｓＸＰ（ＳＰ３）にＷｅｂサーバがＡｐａｃｈｅ２、ＭｙＳＱＬ、ＰＨＰ５がインストール済み、ってことが前提条件ですので、ご自分の環境と違う場合は若干異なることがあるかもしれません。 （XAMPP for Windows とかで一括でインストールした場合等？） 導入記録 ※最後まで読んでいただければわかりますが、エラーが出るたびに修正しています。 最初からわかっていれば、あらかじめ正しく設定していくのですが、なにぶん初心者なんで。。。 わかる方は、適宜設定手順を変えてください。 １．アーカイブファイルのダウンロード こちら（ http://www.phpmyadmin.net/home_page/ ）のページからＺＩＰファイルをダウンロードする。 ※当記事執筆時点では、「 phpMyAdmin-3.1.2-all-languages.zip 」が最新でした。 ２．アーカイブファイルの展開 先ほどダウンロードした phpMyAdmin-3.1.2-all-languages.zip を適当な場所に展開する。 ３．フォルダのコピー 展開されたフォルダはフォルダ名が長いので、適当な名前に変更して、Ｗｅｂサーバのドキュメントルートへコピーする。 ※うちの場合、フォルダ名を「 phpmyadmin 」にして、ドキュメントルート「 D:\\00_MyDocuments\\01_WWW\\html_work 」にコピーした。 ４．動作確認 ブラウザより http://localhost/phpmyadmin/index.php （当方の場合）にアクセスしてみる。 ５．ＤＬＬを導入 上記のように 「 mcrypt 拡張をロードできません。PHP の設定を確認してください 」とエラーが出る場合、なんだか「 mcrypt 」というものがたりないみたい。正確には「 libmcrypt.dll 」というＤＬＬが不足しているようです。...","categories": ["サーバ構築","ブログ"],
        "tags": ["MySQL","PHP","Windows"],
        "url": "/2009/02/14/14003921/",
        "teaser": null
      },{
        "title": "WindowsXPにWordPress！",
        "excerpt":"今夜は、 うちのメインマシン（ WindowsXP ）にＷｏｒｄＰｒｅｓｓをインストールしました。 （ 自宅Ｆｅｄｏｒａサーバの予備用として稼動させるため ） 導入記録 ※前提条件は、 ＷｉｎｄｏｗｓＸＰ（ＳＰ３）にＷｅｂサーバがＡｐａｃｈｅ２、ＭｙＳＱＬ、ＰＨＰ５がインストール済み。 です。 ご自分の環境と違う場合は若干異なることがあるかもしれません。 １．アーカイブファイルのダウンロード こちらの（ http://ja.wordpress.org/install/ ）のページからＺＩＰファイルをダウンロードする。 ※当記事執筆時点では、「 wordpress-2.7.1-ja.zip 」が最新でした。 ２．アーカイブファイルの展開 先ほどダウンロードした wordpress-2.7.1-ja.zip を適当な場所に展開する。 ３．フォルダのコピー 展開されてできた「 wordpress 」フォルダをApache2のドキュメントルートへコピーする。 ※うちの場合、ドキュメントルート「 D:\\00_MyDocuments\\01_WWW\\html_work 」にコピーした ドキュメントルートを変更してなければ、 「 C:\\Program Files\\Apache Software Foundation\\Apache2.2\\htdocs 」です。 ４．データベースの作成 ＭｙＳＱＬサービスが停止していれば、サービスを開始する。 コマンドプロンプトより、以下のようにデータベースを作成する。 C:\\mysql\\bin&gt;mysql -u root -p　　←　MySQLへrootでログイン Enter password: ***************　　←　MySQLのrootパスワード応答 Welcome to the...","categories": ["サーバ構築","ブログ"],
        "tags": ["Windows","WordPress"],
        "url": "/2009/02/15/15004951/",
        "teaser": null
      },{
        "title": "WindowsXPにWordPress（その２）！",
        "excerpt":"今夜は、 うちのＦｅｄｏｒａサーバのＷｏｒｄＰｒｅｓｓをＷｉｎｄｏｗｓＸＰマシンで動かすため、データベースＭｙＳＱＬを移行してみました。 （自宅Ｆｅｄｏｒａサーバの予備用として稼動させるため） ※前提条件は、 ・ＷｉｎｄｏｗｓＸＰ（ＳＰ３）にＷｅｂサーバがＡｐａｃｈｅ２、ＭｙＳＱＬ、ＰＨＰ５、ＷｏｒｄＰｒｅｓｓがインストール済み。 ・さらに、サーバ側のＷｏｒｄＰｒｅｓｓのデータベースをプラグイン「 WP-DBManager 」にてバックアップしている。 （もしくは自分でダンプファイルを作成している） です。ご自分の環境と違う場合は若干異なることがあるかもしれません。 尚、サーバ側でデータベースバックアップ用にプラグインＷＰ−ＤＢＭａｎａｇｅｒを導入しているので、Ｗｉｎｄｏｗｓマシン側でもプラグインＷＰ−ＤＢＭａｎａｇｅｒを導入してデータベースの復元を試みてみましたが、なぜかうまく出来ませんでした。 導入記録 ※※必ずしも、このやり方が正しいとは限りません。 ※※自分の備忘録です。あくまでも参考程度に！ １．テーマの整備 サーバと同じにするために、サーバに導入しているＷｏｒｄＰｒｅｓｓのテーマをＷｉｎｄｏｗｓマシンにも同じように導入する。 ※基本的にはサーバ側にフォルダをＷｉｎｄｏｗｓにコピーして、テーマを使うように設定すればよい。 ２．プラグインの整備 サーバと同じにするために、サーバに導入しているＷｏｒｄＰｒｅｓｓのプラグインをＷｉｎｄｏｗｓマシンにも同じように導入する。 ※基本的にはサーバ側にフォルダをＷｉｎｄｏｗｓにコピーして、プラグインを使うように設定すればよい。 ※但し、ローカルで動かすだけなので、不要なものは導入しなくてもよい。 ３．アップロードファイルの整備 サーバと同じにするために、サーバでアップロードした画像などのアップロードファイルをＷｉｎｄｏｗｓマシンにコピーする。 ※当方の場合、「 \\wordpress\\wp-content\\uploads 」フォルダ配下のファイル。 ４．ダンプファイルのコピー サーバ側のダンプファイルをわかりやすい名前に変更して、わかりやすい場所にコピー。 ※うちの場合、ファイル名を「 wordpress.sql 」とし「 C:\\mysql\\bin 」フォルダに置きました。 ５．ダンプファイルの内容確認・修正 そのままＷｉｎｄｏｗｓ側ＭｙＳＱＬへリストアすると不具合が生じるので、以下のように修正。 ・サーバ側のダンプファイル内の 「 www.mk-mode.com 」（うちの場合） という文字列をローカル（Ｗｉｎｄｏｗｓ）側で動作するよう 「 127.0.0.1 」 と修正。（大量（数千）にあるのでテキストエディタで一括変換） ６．リストア実行 コマンドプロンプトにて以下のようにする。 （もちろんＭｙＳＱＬサービスを開始させてから） C:\\mysql\\bin&gt;mysql -u root...","categories": ["サーバ構築","ブログ"],
        "tags": ["Windows","WordPress"],
        "url": "/2009/02/16/16004003/",
        "teaser": null
      },{
        "title": "WindowsXPにWordPress（その３）！",
        "excerpt":"今夜は、 こちら でお話した うちのＦｅｄｏｒａサーバのＷｏｒｄＰｒｅｓｓをＷｉｎｄｏｗｓＸＰマシンで動かすためにデータベースＭｙＳＱＬを移行したけど、DB登録がうまくいかなかった。。。 ことについての調査結果です。 いろいろググって調べてみましたが、 Linuxサーバ上のMySQLをWindows上のMySQLへ移行するという話はあまりなくて結構苦労しました。 MySQLについての文字コードの設定についてもいろんな記事がありました。 バージョンによって違うこともありますが、いろんな記事を参考にさせてもらい、 なんとかWindows上で 「 Ａｐａｃｈｅ２．２．１１ ＋ PHP５．２．８ ＋ MySQL５．１．３１ ＋ WordPress２．７．１ 」 で稼動できるようになりました。 （日本語の投稿もできるようになりました。） ※例により前提条件は、 ・ＷｉｎｄｏｗｓＸＰ（ＳＰ３）にＷｅｂサーバがＡｐａｃｈｅ２、ＭｙＳＱＬ、ＰＨＰ５、ＷｏｒｄＰｒｅｓｓがインストール済み。 ・さらに、サーバ側のＷｏｒｄＰｒｅｓｓのデータベースをプラグイン「 WP-DBManager 」にてバックアップしている。 （ もしくは自分でダンプファイルを作成している。文字コードは「 UTF-8 」で。 ） です。ご自分の環境と違う場合は若干異なることがあるかもしれません。 導入記録 ※※いつも言ってますが、必ずしもこのやり方が正しいとは限りません。 今回は、あくまでもこちら（ WindowsXPにWordPress（その２）！ ）で一旦導入した履歴がある場合の対応です。 勝手ですけど、こちら（ WindowsXPにWordPress（その２）！ ）は間違えだったと思ってください。 しかし、今回の方法で最初からきれいに移行できる保証もありませんので、あしからず。。。 適宜他の情報等と読み比べながらの参考としてください。 テーマの整備 サーバと同じにするために、サーバに導入しているＷｏｒｄＰｒｅｓｓのテーマフォルダごとＷｉｎｄｏｗｓマシンにコピーする。 ※あえてWordPressの設定画面で設定しなくても良い。 あとでデータベースを丸ごとコピーすることで設定も移行されるので。 プラグインの整備 サーバと同じにするために、サーバに導入しているＷｏｒｄＰｒｅｓｓのプラグインをＷｉｎｄｏｗｓマシンにコピーする。 ※あえてWordPressの設定画面で設定しなくても良い。 あとでデータベースを丸ごとコピーすることで設定も移行されるので。...","categories": ["サーバ構築","ブログ"],
        "tags": ["Windows","WordPress"],
        "url": "/2009/02/17/17004004/",
        "teaser": null
      },{
        "title": "マザーボード購入！",
        "excerpt":"うちの新しいメインマシンを作成するために、最近コツコツとパーツをそろえているところです。   前回（先月）はメモリとハードディスクを買いました。（ こちら 参照）   そして、今回（今月）はマザーボードを購入しました。   今日届いてました。   購入したのは、 「 ASUSTeK P5Q DELUXE 」 です。         例のごとく袋からはまだ出しません。 ※一応新品を買ったんで、信頼してます。 実際に、組み立てるときに開封するつもりです。。。   【簡単な製品の説明】      Intel P45チップセット搭載、45nmプロセスCPU対応   16フェーズ電源回路搭載   電力管理プロセッサー「EPU-6Engine」搭載   ASUSオリジナルOS「Express Gate」搭載   日本製アルミ固体電解コンデンサ100%採用   DDR2メモリ16GB搭載可能   BIOS復旧ツール強化版「DieHard BIOS」搭載   Intel Core i７ も気になりましたが、 まだ高いし、使用者が少ないせいか情報も少ないんで。。。   CPUは「 Core2Duo 」か「 Core2Quad 」をのせようかと思ってます！   とりあえずは大事に保管しておきます。。。   ちなみにこちらから買いました。      それでは、また。   ","categories": ["自作PC"],
        "tags": ["ASUS"],
        "url": "/2009/02/18/18004040/",
        "teaser": null
      },{
        "title": "サーバ連続稼働時間の表示！",
        "excerpt":"　　 僕がFedoraでのサーバ構築の際によく参考にさせてもらっている Fedoraで自宅サーバー構築  や他のサイトとかで時々 サーバの連続稼働時間が表示されているので、 僕もやりたくなり、早速自分の ホームページ と ブログ に導入しました。   参考にしたのはFedoraで自宅サーバー構築の質問BBSの過去の記事です。   そちらにPHPのサンプルコードがアップされていたので、それを自分のサイトに埋め込みました。 ※CGI（Perl）バージョンもありました。   PHPの関数を埋め込んで、表示させたいところをその関数使って整形みたいな感じで。   導入した結果は、この ブログ のヘッダ右側をご覧下さい。 　　 これはうちのサーバがFedora（Linux）だから（ /usr/bin/uptime により ）稼働時間を取得できるのであって、 Windowsではこの方法ではできませんので、あしからず。。。   　　 自分では意識してなかったんですが、 現時点（当記事執筆時点で１６日もリブートなしで連続稼働してるようだ。 最近うちのサーバが安定稼働しているってことだ。   　　 Fedoraサーバのみなさんもいかがですか？   　　 じゃ、また。   　　   ","categories": ["サーバ構築","ブログ","Webサイト"],
        "tags": ["Fedora","Linux"],
        "url": "/2009/02/19/19001046/",
        "teaser": null
      },{
        "title": "LOTO6 No.433",
        "excerpt":"まいど。   日付が変わって昨日のロト６（第４３３回）の 結果です。 ２口が惜しかっただけでした。 （５等ですが・・・）   というわけで、 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/02/20/20004557/",
        "teaser": null
      },{
        "title": "ホームページでスライドショー！",
        "excerpt":"今日は ホームページ の方をかまってみました。 今までは自分の ホームページ で公開している画像はそのまま貼り付けているだけでしたが、 ＷｏｒｄＰｒｅｓｓに導入したプラグイン「 LightBox2 」と同じように、 サムネイルをクリックすると画像が大きくなるようにしたくなり、 ググりながら調べて導入しました。 スライドショーもできるやつでした。 （ＪａｖａＳｃｒｉｐｔでうごくやつです） その名は「 Lightbox JS v2.0 」です。 導入記録 １．アーカイブファイルのダウンロード こちら（ http://www.huddletogether.com/projects/lightbox2/ ）の「 Download 」からＺＩＰファイルをダウンロードする。 ※当記事執筆時点では「 lightbox2.04.zip 」が最新でした。 ２．アーカイブファイルの展開 先ほどダウンロードしたＺＩＰファイルを展開する。 以下のようなファイルが格納されているはずです。 │ index.html │ ├─css │ lightbox.css │ ├─images │ bullet.gif │ close.gif │ closelabel.gif │ donate-button.gif │ download-icon.gif │...","categories": ["サーバ構築","Webサイト"],
        "tags": ["WordPress"],
        "url": "/2009/02/20/20013012/",
        "teaser": null
      },{
        "title": "ＰＨＰでBASIC認証！",
        "excerpt":"今回は、自分の ホームページ の中でもある特定のページにログインする際、ID・パスワード の入力を促すようにしました。（PHPを使って） ページログイン時の認証は BASIC 認証の他に Digest 認証とか、データベースを使ったものとかいろいろあるみたいだけど、 とりあえず、練習ということで一番基本的なBASIC認証を導入してみました。 以下が導入手順の覚書です。 ソースサンプル ログイン認証したいページに以下のような記述を追加。 ※当方は、 &lt;head&gt; タグのすぐ上に追加しました。 &lt;?php $user = 'ここにID'; $password = 'ここにパスワード'; if (!isset($_SERVER['PHP_AUTH_USER'])){ header('WWW-Authenticate: Basic realm=\"Private Page\"'); header('HTTP/1.0 401 Unauthorized'); die('このページを見るにはログインが必要です'); }else{ if ($_SERVER['PHP_AUTH_USER'] != $user || $_SERVER['PHP_AUTH_PW'] != $password){ header('WWW-Authenticate: Basic realm=\"Private Page\"'); header('HTTP/1.0 401 Unauthorized'); die('このページを見るにはログインが必要です');...","categories": ["サーバ構築","Webサイト"],
        "tags": ["PHP"],
        "url": "/2009/02/21/21001007/",
        "teaser": null
      },{
        "title": "WindowsXPにPerl！",
        "excerpt":"今夜は、 うちのメインマシン（ＷｉｎｄｏｗｓＸＰ）でＣＧＩを動かしたいために、「 Ｐｅｒｌ 」を導入してみました。 あくまでも、ローカルでの動作確認用です。 本格的にＷｉｎｄｏｗｓでサーバ運用するつもりは（とりあえず）ありません。 導入記録 ※前提条件は、 ・ＷｉｎｄｏｗｓＸＰ（ＳＰ３）にＷｅｂサーバとしてＡｐａｃｈｅ２がインストール済み。 です。ご自分の環境と違う場合は若干異なることがあるかもしれません。 ※※必ずしも、このやり方が正しいとは限りません。 ※※自分の備忘録です。あくまでも参考程度に！ １．インストールファイルのダウンロード Ｗｉｎｄｏｗｓ用のＡｃｔｉｖｅＰｅｒｌを こちら（ http://aspn.activestate.com/ASPN/Downloads/ActivePerl/ ）のページの 「 Download ActivePerl 」へ進み、 「 ActivePerl DOWNLOAD NOW 」のボタンをクリックしてダウンロード。 （ニュースレターの登録画面が出るが「 maybe later 」でスキップ可能） ※当記事執筆時点では「 ActivePerl-5.10.0.1004-MSWin32-x86-287188.msi 」が最新。 ２．インストール 先ほどダウンロードしたファイルを実行させる。 途中ライセンス同意にクリックする必要があるが、その他は全てデフォルトでインストール。 インストールが正常に終了するとＣドライブに「 perl 」フォルダができるはず。 ３．Ｐｅｒｌの動作確認 ・動作テストのために以下のような簡単なサンプルをテキストエディタなどで作成する。 （例としてファイル名を「 test.pl 」として、適当なフォルダに保存する） [perl font_size=\"90%\"] printf (\"Hello Perl!!\"); [/perl]...","categories": ["サーバ構築","Webサイト"],
        "tags": ["Perl","Windows"],
        "url": "/2009/02/22/22002026/",
        "teaser": null
      },{
        "title": "WordPressを2.7.1にアップグレード！",
        "excerpt":"こんにちは。 今日は、前々から先延ばしにしていたＷｏｒｄＰｒｅｓｓのアップグレードをしました。 （今回は ２．７（日本語版） から ２．７．１（日本語版） にアップグレード） 以前のバージョン（２．７より前のバージョン）ではアーカイブをダウンロードして展開して、一部を残してファイルをコピーして、 というような手動で非常に面倒な作業が必要でしたが、 ２．７以降は自動アップグレードができるので、非常に助かっています。 アップグレード方法 １．バックアップ もしものときのことを考えて、バックアップをとっておく。 ・データベース ・ＷｏｒｄＰｒｅｓｓ全体（ファイル） ２．プラグインの停止 現在開始にしているプラグインをプラグインの画面ですべて停止させる。 ３．アップグレードの画面を開く ＷｏｒｄＰｒｅｓｓの管理画面の「 ツール 」 − 「 アップグレード 」からアップグレードの画面を開く。 ４．アップグレード開始 「 2.7.1-ja 」の方の「 自動アップグレードを実行 」のボタンをクリックする。 ５．接続情報の入力 ホスト名： localhost ユーザー名： WordPressのユーザ名 パスワード： 上記ユーザのパスワード ６．アップグレード完了 「 WordPress のアップグレードを完了しました。 」とメッセージが表示されれば、正常にアップグレード完了！ ７．プラグインの開始 先ほど停止したプラグインをプラグインの画面で開始させる。 以上です。 簡単だ！！ こちらのＷｏｒｄＰｒｅｓｓのフォーラムにも アップグレード方法 が載っていますのでご参照下さい。...","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/02/22/22154422/",
        "teaser": null
      },{
        "title": "ＰＨＰでアクセスカウンタ！",
        "excerpt":"今日は ホームページ のアクセスカウンタをＰＨＰで自作してみました。 今までもアクセスカウンタはつけていましたが、プロバイダの提供するＣＧＩを使っていました。 やはり自宅サーバで運用するからには自分で作らないとと思って、アレコレと調べながら自作しました。 いろんな方法があると思います。 自分でいい方法を試してください。 今回はテキストファイルに書き込む形のもので数字は画像ファイルを使用するものを作りました。 （簡単なやつです） 導入記録 １．画像ファイルの準備 数字に使用する画像を０から９までの１０個、自分の好きなデザインのものをＷＥＢ上から探してダウンロードする。 ダウンロードした画像のファイル名は 0 用は「 0.gif 」というようにわかりやすいものにし、Ｗｅｂサーバにアップロードする。 ※当方の場合、ドキュメントルートの「 images/counter/ 」に配置しました。 ２．カウンタ保存用のテキストファイル作成 適当なファイル名、内容は適当な数字でテキストファイルを作成しＷｅｂサーバにアップロードする。 さらにサーバがＬｉｎｕｘの場合、このテキストファイルに書き込みができるような権限「 666 」を与える。 ※当方の場合、「 counter.txt 」というファイル名にし、ドキュメントルートの「 dat 」フォルダに配置しました。 ※内容の最後は改行せずに保存すること。改行するとカウンタが更新されませんので。 ３．ソース作成 以下のようなＰＨＰソースをカウンタを設置したい箇所に記述する。 &lt;?php $counter_file = 'dat/counter.txt'; $counter_lenght = 6;　　&lt; - - - 桁数の設定 $fp = fopen($counter_file, 'r+'); if ($fp){...","categories": ["サーバ構築","Webサイト"],
        "tags": ["PHP"],
        "url": "/2009/02/23/23001030/",
        "teaser": null
      },{
        "title": "ＰＨＰ＋ＭｙＳＱＬでアクセスカウンタ！",
        "excerpt":"今日は、 この間自分の ホームページ にテキストファイルを使った簡単なアクセスカウンタをＰＨＰで作って稼働させてましたが、 やっぱりちゃんとしたもの、つまり、同じＩＰからのアクセスはある程度制限かけたり、データベースを使って動かしたり、ということがしてみたくなり、いろいろ調べながらやってみました。 導入にあたり、こちら「 DA実験室 :: PHP+MySQLのスクリプト配布 」 を参考にさせてもらいました。 ご参照下さい。 こちら では以下の３種類のカウンターがありますが、 今回は「 カウンター３ 」を導入しました。 カウンター１ 単純にカウントするだけのカウンター。 同ホスト連続アクセス検査用の機能も付いてます。 カウンター２ カウンター１の機能に加え、昨日・今日の値もカウントできるように 改良したカウンター。 カウンター３ カウンター２の機能に加え、同ホスト連続アクセスの判定に 制限時間を付けられます。制限時間を超えてアクセスした場合は、 同ホストでもカウンターを更新します。 導入記録 １．サンプルソースダウンロード＆展開 こちらの「 DA実験室 :: PHP+MySQLのスクリプト配布 」の ダウンロードページ から「 DACNT dacnt-2.1.zip 」をダウンロード＆展開する。 ２．データベース作成 今回使用するテーブルを作成するためにまずＭｙＳＱＬにデータベースを作成する。 コマンドプロンプトから行いました。 （ｐｈｐＭｙＡｄｍｉｎを使用してもＯＫ） C:\\mysql\\bin&gt;mysql -u root -p Enter password: ***************...","categories": ["サーバ構築","Webサイト"],
        "tags": ["MySQL","PHP"],
        "url": "/2009/02/24/24001012/",
        "teaser": null
      },{
        "title": "ＰＨＰでＣＳＶ読み込み！",
        "excerpt":"今日はＷｅｂサーバ上にあるＣＳＶファイルを読み込んで表示させるということをしました。 実際にはロト６の当選データで試しました。 以下がソースサンプルです。 &lt;?php // CSVファイルの読み込み // ドキュメントルートの「docs/LOTO/」フォルダに「LOTO6_ALL.csv」という名前のCSVファイルを置いている場合 $openfile = file_get_contents('docs/LOTO/LOTO6_ALL.csv'); // ここで１行ずつ分けている $csv_gyo = split(\"\\n\", $openfile);// ここで１行ずつ分けている echo \"&lt;table&gt;\";// １行ずつ読み込みながらのループ処理 foreach($csv_gyo as $kurikaeshi) { // ここでカンマごとに分けている list($No,$抽選日,$数字１,$数字２,$数字３,$数字４,$数字５,$数字６,$数字Ｂ,$１等口数,$２等口数,$３等口数,$４等口数,$５等口数,$１等金額,$２等金額,$３等金額,$４等金額,$５等金額,$キャリーオーバー) = split(\",\", $kurikaeshi); // HTMLソースの出力 echo \"&lt;tbody&gt;&lt;tr&gt;\"; echo \"&lt;td&gt;\".$No.\"&lt;/td&gt;\"; echo \"&lt;td&gt;\".$抽選日.\"&lt;/td&gt;\"; echo \"&lt;td&gt;\".$数字１.\"&lt;/td&gt;\"; echo \"&lt;td&gt;\".$数字２.\"&lt;/td&gt;\"; echo \"&lt;td&gt;\".$数字３.\"&lt;/td&gt;\"; echo \"&lt;td&gt;\".$数字４.\"&lt;/td&gt;\"; echo \"&lt;td&gt;\".$数字５.\"&lt;/td&gt;\"; echo...","categories": ["サーバ構築","ブログ","Webサイト"],
        "tags": ["PHP"],
        "url": "/2009/02/25/25002015/",
        "teaser": null
      },{
        "title": "WordPressにSyntax-Highlighter！",
        "excerpt":"今回は昨日導入したＷｏｒｄＰｒｅｓｓにソースコードを直接表示させることができるプラグインを導入したことについて。 いままでは、ソースコードなどを投稿する場合には&lt;pre&gt;タグを使って、 さらに “&lt;” や “&gt;” などはエスケープ文字に変換して記述していましたが、 手間がかかりすぎで結構疲れるんで、ソースコードをそのまま貼り付けられるプラグインを探してみました。 しかも、予約語などに色が付きます。 見つけたのは「 Syntax-Highlighter 」というものです。 導入記録 （一般的なプラグインの導入方法ですが） １．アーカイブファイルのダウンロード こちら のページからアーカイブファイルをダウンロードする。 ※当記事執筆時点では「 syntax-highlighter-2.0.0.zip 」が最新でした。 ２．アーカイブファイルの展開 先程ダウンロードした「 syntax-highlighter-2.0.0.zip 」を展開する。 ３．ファイルアップロード 展開してできた「 syntax-highlighter 」というフォルダごと、Ｗｅｂサーバの「 /wordpress/wp-content/plugins 」配下へアップロードする。 ４．プラグイン有効化 ＷｏｒｄＰｒｅｓｓの管理画面「プラグイン」で「 Syntax-Highlighter 」を有効化（「使用する」）する。 ５．確認 新規投稿の画面を開き、ソースを貼り付けてみる。 たとえばPHPのソースを貼り付けるなら ［php］ と** ［/php］ **の間にPHPソースをまるまる貼り付ければOKです。 ↓↓ 出来上がり例　↓↓ 以上です。 ちなみに対応ソースは以下のとおり。（これも Syntax-Highlighter 。） ``` text Bash...","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/02/26/26001044/",
        "teaser": null
      },{
        "title": "「ブログ王」登録！",
        "excerpt":"また、こんばんは。   　　 今夜は   ブログランキングサイト   「 ブログ王 」   に登録してみました。   登録したカテゴリは、   「 コンピュータとインターネット-ソフト 」   です。   よかったら、遠慮なく（？）クリックして投票してみてちょーだいっ！   これで、ブログランキングサイト４つ目！            　　 とりあえず、もう追加登録はやめとこっ！   　　 じゃ。   　　   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/02/26/26005847/",
        "teaser": null
      },{
        "title": "LOTO6 No.434",
        "excerpt":"まいど。   まだ今日のうちです。 今日のロト６（第４３４回）の 結果です。 今回も２口が惜しかっただけでした。 （５等ですが・・・）   というわけで、 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/02/26/26214048/",
        "teaser": null
      },{
        "title": "WordPressに TinyMCE Advanced！",
        "excerpt":"今回はＷｏｒｄＰｒｅｓｓの「 ビジュアルリッチエディタ 」のプラグインを導入してみました。 いままでは投稿記事で文字色や文字サイズを変えたい場合に「 ＨＴＭＬエディタ 」で、タグ使っていちいちコーディングしてましたが、 手間がかかりすぎで結構疲れるんで、「 ビジュアルリッチエディタ 」で簡単にワープロ風（？）に編集できるプラグインを導入してみました。 それは「 ＴｉｎｙＭＣＥ Advanced 」というものです。 導入記録 （一般的なプラグインの導入方法ですが） １．アーカイブファイルのダウンロード こちら のページの「 Download 」のところからアーカイブファイルをダウンロードする。 ※当記事執筆時点では、「 tinymce-advanced.3.2.zip 」が最新でした。 ２．アーカイブファイルの展開 先程ダウンロードした「 tinymce-advanced.3.2.zip 」を展開する。 ３．ファイルアップロード 展開してできた「 tinymce-advanced 」というフォルダごと、Ｗｅｂサーバの「 /wordpress/wp-content/plugins 」配下へアップロードする。 ４．プラグイン有効化 ＷｏｒｄＰｒｅｓｓの管理画面「プラグイン」で「 TinyMCE Advanced 」を有効化（「使用する」）する。 ５．確認 新規投稿の画面を開き、ツールバーの「アドバンストツールバーの表示／非表示」をクリックして以下のような画面になればＯＫ。 ※「 ビジュアルリッチエディタ 」を表示しない設定にしている場合は、「 ビジュアルリッチエディタ 」を表示するように（ユーザ設定画面で）設定変更する。 動作も確認してみる。 当方の場合、この記事のひとつ前の記事やこの記事自体の作成時に動作を確認。 以上です。 ■感想■ なんとも、便利だ。...","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/02/27/27002036/",
        "teaser": null
      },{
        "title": "フォルダにパスワード！",
        "excerpt":"今日はＷｉｎｄｏｗｓＸＰであるフォルダにパスワードをかける方法をご紹介します。   通常は１つマシンを複数人で使用する場合、 ユーザを作成して、各個人が暗号化したいフォルダのプロパティ画面でセキュリティの設定をすれば、別ユーザにはそのフォルダ内は見られなくすることができます。   しかし、複数の人が同じユーザアカウントでログインしている場合は、そのようなことができません。   そんな時に使える小技です。   パスワード設定手順   例として以下のようなフォルダにパスワードを設定します。   フォルダ内には複数のＪＰＧファイルがあります。      フォルダを右クリックして「 送る 」から「 圧縮（zip 形式）フォルダ 」をクリックします。      圧縮確認のダイアログがでるので、「 はい 」をクリックする。      フォルダがＺＩＰ形式で圧縮されます。      ＺＩＰファイルを右クリックし「 エクスプローラ 」をクリックします。      ＺＩＰファイルの内容が表示されます。      エクスプローラの窓内の何も無いところで右クリックし「 パスワードの追加 」をクリックします。      パスワード入力のダイアログが表示されるので、パスワードを設定します。   ※ばれないようＷｉｎｄｏｗｓログイン時のパスワードとは異なるものがよいでしょう！      これでフォルダ配下のファイルにパスワードがかかっています。   ためしにファイルをダブルクリックして開いてみましょう。      パスワードの入力ダイアログが表示されるので、パスワードを入力し認証ＯＫならファイルが開きます。      確認ＯＫなら、圧縮する前のフォルダは不要なので削除します。   パスワード解除手順   エクスプローラの窓内の何も無いところで右クリックし「 暗号化解除 」をクリックします。      パスワードの入力ダイアログが表示されるので、パスワードを入力し認証ＯＫならパスワードが解除され、普通にパスワード認証なしでファイルが開けるようになります。   （必要に応じてＺＩＰ圧縮も解除する）      注意点   一旦パスワードをかけたフォルダにあらたにファイルを追加しても、追加したファイルには自動でパスワードがかかりません。   上記の手順でパスワードかけなおさなければいけません。   圧縮フォルダ内のファイルは別フォルダへのコピー・移動時にパスワードが必要になります。     ※なので、頻繁に利用するようなフォルダには不向きかもしれません。   では、また。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/02/28/28004027/",
        "teaser": null
      },{
        "title": "ブログのＷ３Ｃチェック！",
        "excerpt":"　　 以前、自分の ホームページ の方は Ｗ３Ｃ のチェックはしたんですが、今日は、自分の ブログページ のＷ３Ｃチェックを行いました。   案の定、大量のエラーがありました。   でも、ためしに他のブログサイトをチェックしてみたら、倍くらいエラーがあったんでチョットだけ安心。   うちの場合は以下の感じでした。      修正の結果、一応エラーはなくなりました。   ちなみにエラーは以下のようなものでした。      タグ文字が大文字になっていた。                                                               小文字に修正。                                                              、、、  タグの最後が” /&gt;”で終えてなかった。                                                                     のように “/” を付加。                                                    リンクに使われている”&amp;”が”&amp;” となっていなかった。                                                               “&amp;” を “&amp;” に修正。                                                    以上が主な修正点です。 他に細かなものもありましたが。。。   ※過去の投稿分についてはエラーが残っているかもしれません。   これで、心置きなく以下のバナーを貼れます。      当ブログの右下あたりに貼りました。   　　 やっぱり、エラーがないと気持ちいいですね。   　　 次は、Ｗ３ＣのＣＳＳチェックもしてみます。   　　 ほな、さいなら。   　　   ","categories": ["サーバ構築","ブログ"],
        "tags": ["W3C","WordPress"],
        "url": "/2009/03/01/01005051/",
        "teaser": null
      },{
        "title": "ブログのＷ３Ｃ（ＣＳＳ）チェック！",
        "excerpt":"　　 昨日、自分の ブログページ のＷ３Ｃチェックを行いましたが、今日はＷ３ＣのＣＳＳの方をチェックしてみました。 エラーは意外と少なく１０個ほどでした。 エラーの内容は、ほとんどがケアレスミスでしたが、他にクロスブラウザ対応の記述部分がエラーになってました。 ＩＥ用の記述部分ですが、ＩＥってかなりのくせものですな～。 Ｗ３Ｃへの対応が遅れているそうな。 普段、自分はＩＥなんて使わないから、あまり意識してなかったけど、、、 時々、もしやと思ってＩＥで表示を確認してみるとやっぱりおかしいってことが非常に多すぎる！ 僕が思うに数々のブラウザの中でも一番やっかいじゃないんかな！？ ま、そんなこんなで何とかＷ３Ｃ（ＣＳＳ）チェックもＯＫになったんで、めでたし。 ちなみにＩＥ対応するのに結構ググって調べて以下のように修正しました。 （正確かどうかは不安だが、とりあえずチェックが通ったんで。。。） ↓↓修正前↓↓ ``` css div.post table.code pre.code { margin: 0px; border: groove 1px #808080; background-color: #333333; padding: 10px; font-size: 1em; line-height: 1.4em; overflow: auto; overflow-y: hidden; _width: 90%; /* for IE4 - IE6 */ *padding-bottom: 25px; /*...","categories": ["サーバ構築","ブログ"],
        "tags": ["CSS","W3C","WordPress"],
        "url": "/2009/03/02/02001050/",
        "teaser": null
      },{
        "title": "ホームページ更新！",
        "excerpt":"　　 久々に ホームページ に項目を追加しました。   「 ARCHIVES 」というコーナーを作りました。 自分の作った文書をアップしていきたいと思います。   とりあえず、 数学関連２つと中村天風の誦句（しょうく）１つのPDFを載せてます。   よかったら、ダウンロードして使ってください。   　　 じゃ。   　　   ","categories": ["サーバ構築","Webサイト"],
        "tags": [],
        "url": "/2009/03/02/02094913/",
        "teaser": null
      },{
        "title": "WordPressに最終更新日！",
        "excerpt":"　　 今日はブログページに最終更新日を表示するようにしたので、その記録です。   調べてみると、もともと ＷｏｒｄＰｒｅｓｓ には最終投稿日を取得するテンプレートが準備されてました。   「 the_modified_date(’d’) 」です。 （詳細は こちら を参照） ’d’ はパラメータで、表示する日付フォーマット。 省略するとＷｏｒｄＰｒｅｓｓの管理画面の「 設定 」 −「 一般 」で設定したフォーマットになります。   ちなみに、 PHP マニュアルの date（日付・時刻）関数 の引数はそのまま WordPress にも使うことができるそうです。   あと、「 the_modified_date() 」 とは別に 「 the_modified_time() 」 という日付・時刻が取得できるものもあります。   当方は以下のようにして、ヘッダ部に埋め込みました。    ``` php   ```     但し、ここで表示される日付は最後に公開（予約公開も含む）した日（？）のようです。 ＷｏｒｄＰｒｅｓｓでは、指定した日時に予約して公開する機能がありますが、その場合は実際に公開される日時ではなく、予約公開した時点の日時になるようです。   　　 では、また。   　　   ","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/03/03/03001017/",
        "teaser": null
      },{
        "title": "サイトの最終更新日を自動で！",
        "excerpt":"　　 今日は、ホームページの「 最終更新日 」についてです。   いつもホームページを更新した際に、よく更新日を修正するのを忘れるので、自動でファイルのタイムスタンプから更新日時を取得させようと考えました。   いろいろ調べてみると、 ＪａｖａＳｃｒｉｐｔ で簡単にできそうなんでやってみました。   ↓↓ こんな感じで。    ``` javascript   ```  しかし、表示はされるもののファイルの更新日時でなく、現在時刻が表示されてしまいます。 いろいろ調べた結果、Ｗｅｂサーバが Ａｐａｃｈｅ だからみたいです。   Ａｐａｃｈｅの設定をかまって、ＳＳＩ（Server Side Include） を使えるようにすれば可能のようですが、サーバにも負荷がかかるみたいだしちょっとだけ面倒なんで、   ＰＨＰ でやってみました。   非常に簡単でした。   ↓↓ ソースサンプルです。    ``` php   ```  上記は表示しようとしているファイルのタイムスタンプを取得して表示するものですが、 特定のファイルを指定してタイムスタンプを取得するのなら「 filemtime 」を使って以下のようになります。   ↓↓ ソースサンプルです。    ``` php   ```  これで、 ファイルをＷｅｂサーバにアップしたときにタイムスタンプがアップした日時に変わるので、 いちいち最終更新日を意識しなくてもよくなりました。   　　 では、また。   　　   ","categories": ["サーバ構築","Webサイト"],
        "tags": ["Apache"],
        "url": "/2009/03/04/04004000/",
        "teaser": null
      },{
        "title": "Apacheのﾊﾟﾌｫｰﾏﾝｽﾍﾞﾝﾁﾏｰｸ！",
        "excerpt":"最近、ＷｏｒｄＰｒｅｓｓの動きが非常に重いので、チューニングしようと考えてます。 （Ａｐａｃｈｅ、ＰＨＰ、ＭｙＳＱＬの最適化等が必要かと） でもその前に、現状を把握しないと話にならないので、Ａｐａｃｈｅのパフォーマンスを測定できるベンチマークテストツール「 ａｂ（Apache Bench） 」をＦｅｄｏｒａサーバで試してみました。（Ａｐａｃｈｅに標準で付属しているツールです） 以下が記録です。 本当はこの「 ａｂ 」を実行するマシンはＷｅｂサーバではなく別のマシンがよいらしい。 （接続に要する時間の測定ができないから） なので、ローカルマシン（Ｗｉｎｄｏｗｓマシン）のＡｐａｃｈｅから実行してみました。 ※リクエストの数が多いと Benchmarking 192.168.11.3 (be patient)...apr_poll: The timeout specified has expired (70007) みたいなタイムアウトエラーがでてしまうんで、リクエストを少なめにしてテストしました。 C:\\Program Files\\Apache Software Foundation\\Apache2.2\\bin&amp;&gt;ab -n 5 -c 2 http://192.168.11.3/wordpress/index.php This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed...","categories": ["サーバ構築","ブログ"],
        "tags": ["Apache"],
        "url": "/2009/03/05/05002048/",
        "teaser": null
      },{
        "title": "LOTO6 No.435",
        "excerpt":"まいど。   まだ今日のうちです。 今日のロト６（第４３５回）の 結果です。 いつものように５等が惜しかっただけでした。 （それも１口だけ・・・）   というわけで、 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/03/05/05234040/",
        "teaser": null
      },{
        "title": "ＭＲＴＧでサーバ監視！",
        "excerpt":"　　 今日は、 うちのＦｅｄｏｒａサーバに、ネットワーク負荷の他に、CPU使用率、空きメモリ量、ディスク使用率の統計をブラウザから監視できるようにするツール「 ＮＥＴ−ＳＮＭＰ＋ＭＲＴＧ 」を導入したので、そのことについてです。   今までも、「 Ｃａｃｔｉ 」というサーバ監視ツールを使ってましたが、「 ＮＥＴ−ＳＮＭＰ＋ＭＲＴＧ 」の方が単純でわかりやすいかなと思ったんで導入してみました。   導入にあたっては、Fedoraで自宅サーバー構築 を参考にさせてもらいました。 導入方法は こちら をご参照下さい。 ※いつもお世話になり、大変助かります。   導入した結果、 こんな画面で監視ができるようになりました。         eth0トラフィック   ＣＰＵ使用率   空きメモリ量   ディスク使用率   の各グラフをクリックすれば、それぞれの日・週・月・年の統計が見られるグラフになります。   でも、ただ自分の目で監視できるだけ。 ※警告とか出せるんかな～？   今回は以上ですが、このＭＲＴＧにハードディスクの温度の監視もできるようにしたいと考え中！（「 ｈｄｄｔｅｍｐ 」を使って）   　　 それでは、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","Linux"],
        "url": "/2009/03/06/06001028/",
        "teaser": null
      },{
        "title": "松江日赤建設中（その２）！",
        "excerpt":"２・３日前の松江赤十字病院です。      １１階（？）くらいまで、鉄骨組まれてますね！   もうチョットしたら、 １２階からヘリポートまでの鉄骨を組むために クレーンがもっと高くなるようだ。   　　 じゃ、また。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/03/06/06021451/",
        "teaser": null
      },{
        "title": "気になるアングル！",
        "excerpt":"おはようございます。   　　 そういえば、昨日外回り中に見かけた風景です。   まあまあ、きれいだったんで撮ってみました。   安来のロンドン （ 正式には安来市赤江町論田（ろんでん）・・・たぶん ） あたりの通称海岸道路からの「 大山 」です。      昨日のローカルニュースの中で、 松江に来ていた観光客が大山を知らなかったんで、敢えて言いますが、 「 だいせん 」です。 （決して「おおやま」ではございません。）   僕は、松江の人間（職場は安来）なんで、大体こんなアングルの大山ですけど、 ときどき違う場所に行ったときにに見る違うアングルの大山も気になるなあ！   　　 じゃ、ごきげんよう。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/03/06/06063050/",
        "teaser": null
      },{
        "title": "ＭＲＴＧでハードディスク温度監視！",
        "excerpt":"今日は、 前回に引き続いて、ＭＲＴＧの話です。 ＭＲＴＧにハードディスクの温度を監視する機能を追加してみました。 ハードディスクの温度は「 ｈｄｄｔｅｍｐ 」というものを使ってモニタできます。 ちなみにＣＵＩベースでのインストールはこんな感じで。 # yum install hddtemp 使い方はこんな感じ。 # hddtemp /dev/sda /dev/sda: Maxtor 6V250F0: 37°C 温度の数字だけを出力するにはこんな感じ。 # hddtemp -n /dev/sda 41 「 hddtemp 」の詳しい使い方は以下でわかります。 # hddtemp --help この「 ｈｄｄｔｅｍｐ 」をＭＲＴＧで使えるようにしてみました。 ※Ｆｅｏｒａ１０にＭＲＴＧインストール済みが前提です。 （ＭＲＴＧインストール方法は こちら を参照） 導入記録 １．シェルスクリプトを作成 例として root に「 hddtemp.sh 」というファイルに以下のように記述。 #!/bin/sh /usr/sbin/hddtemp -n /dev/sda1 /usr/sbin/hddtemp...","categories": ["サーバ構築"],
        "tags": ["Fedora","Linux"],
        "url": "/2009/03/07/07010028/",
        "teaser": null
      },{
        "title": "グラフィックボード購入！",
        "excerpt":"次期自作ＰＣのために、コツコツとパーツをそろえてるんですが、   今回はグラフィックボードを購入しました。   オークションとかも観てるんだけど、 やっぱり今回は新品がいいなと思って、   ＴｗｏＴｏｐ（楽天店）にて購入！   購入したのは、 ASUSTeKの 「 EN9600GT/HTDI/512M/R3　GeForce 9600GT/PCI-E(t162109) 」 です。      とりあえず、ＰＣでゲームはやならいし、 将来地デジを観たり、録画したりするくらいなんで、 ＨＤＭＩ対応のこれで十分と判断しました。   いつものように未開封で保存しときます。 自作開始するときに開封予定！   ASUSのグラフィックボードはこちらからどうぞ！      そしたら、次そろえるのは「電源」かな？   じゃ、また。   ","categories": ["自作PC"],
        "tags": ["ASUS"],
        "url": "/2009/03/08/08015038/",
        "teaser": null
      },{
        "title": "Ｐｏｓｔｆｉｘアップデート！",
        "excerpt":"最近、うちのＦｅｄｏｒａサーバからパッケージのアップデートエラーのようなメッセージのメールが届くので、何でだろうと思って考えてみました。 そのエラーは以下のようなものです。 /etc/cron.daily/yum-check-update: Excluding Packages in global exclude list Finished postfix.i386 2:2.5.6-1.fc10 updates /etc/cron.daily/yum.cron: 2:postfix-perl-scripts-2.5.6-1.fc10.i386 from updates has depsolving problems --&gt; Missing Dependency: postfix = 2:2.5.6-1.fc10 is needed by package 2:postfix-perl-scripts-2.5.6-1.fc10.i386 (updates) postgrey-1.31-1.fc10.noarch from installed has depsolving problems --&gt; Missing Dependency: postfix is needed by package postgrey-1.31-1.fc10.noarch (installed) 2:postfix-perl-scripts-2.5.6-1.fc10.i386 from...","categories": ["サーバ構築"],
        "tags": ["Fedora","Linux","Postfix"],
        "url": "/2009/03/09/09002027/",
        "teaser": null
      },{
        "title": "ＭＲＴＧでＣＰＵ温度監視！",
        "excerpt":"この間、 ＦｅｄｏｒａサーバのＭＲＴＧにＣＰＵの温度を監視する機能を追加してみました。 ＣＰＵの温度は「 lm_sensors 」というパッケージを使ってモニタできます。 Ｆｅｄｏｒａ１０には「 lm_sensors 」はインストールされてました。 もし、インストールされてなければこんな感じで。 # yum install lm_sensors 実施手順 １．センサーを検出 [root@noah ~]# sensors-detect # sensors-detect revision 5249 (2008-05-11 22:56:25 +0200) ・・・（　省略　）・・・ Do you want to overwrite /etc/sysconfig/lm_sensors? (YES/no): Starting lm_sensors: loading module i2c-i801 smsc47m192 sms[ OK ] 途中何ヶ所か[ yes/no ]聞かれるが、全て[ Enter ]でＯＫ！ ２．「 lm_sensors 」動作確認...","categories": ["サーバ構築"],
        "tags": ["Fedora","Linux"],
        "url": "/2009/03/10/10002058/",
        "teaser": null
      },{
        "title": "Windowsサービスをバッチファイルで！",
        "excerpt":"　　 今夜は、 Ｗｉｎｄｏｗｓサービスの開始・停止についてです。 通常、自動スタートにしていない（手動スタートの）Ｗｉｎｄｏｗｓのサービスを開始・停止させる場合、管理ツールのサービス画面を開いて該当のサービスを開始・停止させる思います。 普段はあまり使わず、使いたい時だけに開始させたいサービスとか多々あると思います。 普段不要なサービスを立ち上げておくと無意味にＷｉｎｄｏｗｓが重くなるので・・・ そこで僕はそんな場合、 いちいち管理ツールのサービス画面を開いて該当のサービスを選択して処理するのは面倒なのでバッチファイルを作っています。 （サービス開始用とサービス停止用） そのバッチファイルを実行させるだけでサービスの開始・停止ができるんで、よくこの手法を使っています。 参考までにこんな感じでやってます。 （例として、Ａｐａｃｈｅ２サービスの場合） ※サービスの開始・停止だけなので、特にログ出力はしていません。 Start_Apache2.bat （ファイル名は任意） @TITLE ■Start Apache2 Service ... @NET START \"Apache2.2\" @EXIT /B Stop_Apache2.bat （ファイル名は任意） @TITLE ■Stop Apache2 Service ... @NET STOP \"Apache2.2\" @EXIT /B ■解説■ TITLE XXXX バッチファイルを起動したときに表示させるＤＯＳ窓のタイトルバーに表示させる文字の設定。 NET START “XXXX”　（　NET STOP “XXXX”　も同様　） スタートさせたいサービスを設定する。 サービス名は、管理ツールのサービス画面から該当のサービスを右クリックして、 プロパティ画面を開いて、そこの上部のサービス名のところのもの。 EXIT...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/03/11/11002021/",
        "teaser": null
      },{
        "title": "Windows – ﾃﾞｨｽｸｸﾘｰﾝｱｯﾌﾟ自動化！",
        "excerpt":"また、Ｗｉｎｄｏｗｓのバッチ処理についてです。 バッチ処理って意外とコンピュータの基本だと思ってるのは、、、私だけ！？ 「人間が苦労してやる複雑な処理でも、自動で黙々と決められたとおりにこなす」んで。。。 Ｗｉｎｄｏｗｓを使っていると、知らないうちにブラウザキャッシュや何かの一時ファイルなどがどんどん貯まってディスク領域を圧迫して、動作がなんとなく（？）重くなるような感じになることがあると思います。 そんな時、たいていＷｉｎｄｏｗｓ標準のシステムツールの「 ディスククリーンアップ 」を使うと思います。 でも、それは自分が思いついたときに手動で起動させないといけないので、よく忘れてしまいます。 そこで、僕はそれを自動化させています。 簡単に言うと、 「 ディスククリーンアップ 」をコマンドラインで実行させるためのバッチファイルを作成して、それをタスクスケジューラで定期的に実行させるように設定する。 です。 作業手順 ※動作確認は「 WindowsXP Pro SP3 」でしてます。 １．「ディスククリーンアップ」の設定（１） まず、コマンドプロンプトから以下のように入力。 C:\\&gt;CLEANMGR /sageset:1　　← 0 ～65535 の任意の数字 上記の例は、全てのドライブのディスククリーンアップの設定を「 1 」番に保存するという意味。 もし、複数ドライブがあってＣドライブだけの設定をしたければ、以下のようにすればよい。 C:\\&gt;CLEANMGR /d c: /sageset:1 ２．「ディスククリーンアップ」の設定（２） 「 ディスククリーンアップの設定 」ダイアログが表示されるので、削除させたい項目にチェックをつけ、[ OK ]ボタン押下する。 ※当方は「 ゴミ箱 」は自分で内容を確認しながら整理したいので、「 ゴミ箱 」以外全てにチェックをいれています。 ３．バッチファイルの作成 「 ディスククリーンアップ 」実行用のバッチファイルを作成する。...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/03/12/12002005/",
        "teaser": null
      },{
        "title": "LOTO6 No.436",
        "excerpt":"まいど。   本日のロト６（第４３６回）の 結果です。   だめだなあ～！ なかなか当たらんなあ～！   ま、というわけで、 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/03/12/12221436/",
        "teaser": null
      },{
        "title": "Windows – ﾌｧｲﾙ名を日時にしてﾊﾞｯｸｱｯﾌﾟ！",
        "excerpt":"今日も、Ｗｉｎｄｏｗｓのバッチ処理についてです。 Ｗｉｎｄｏｗｓのファイルをバックアップする時に、世代管理のできるバックアップソフトを使わない限り、たいていはファイルが上書きされてしまいます。 でも実際には、前回のバックアップではなく、もっと前の時点のファイルを復元したいってことがあると思います。 そこで、僕はよく以下のようなバッチファイルを作ってバックアップしています。 （この方法は、「今のこの状態をバックアップしたい」という場合に有効だと思います） ※定期的なバックアップは、別途世代管理のできるフリーのバックアップソフトを使用していますが。。。 【概要】 あるフォルダの内容を、ＬＺｈ圧縮して、ファイル名に日付・時刻を付加して保存。 以下がバッチファイルの例です。 [ 任意のファイル名.bat ] @TITLE ■ 圧縮中... @REM **** 環境変数設定 @SET BAK_DATA=D:\\00_MyDocuments\\01_WWW\\html\\ ↑　バックアップしたいフォルダを設定 @SET BAK_LZH=D:\\20_BAK\\BAK_Noah\\html\\ ↑　圧縮ファイルの保存先フォルダを設定 @SET BAKDATE=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2% ↑　日付を設定(YYYYMMDD形式) @SET BAKTIME=%TIME:~0,2%%TIME:~3,2%%TIME:~6,2% ↑　時刻を設定(HHMMSS形式) @IF \"%TIME:~0,1%\"==\" \" SET BAKTIME=0%TIME:~1,1%%TIME:~3,2%%TIME:~6,2% ↑　時間(HH部分)が１桁のときゼロ埋めする設定 @SET LOGFILE=D:\\03_Bat\\Log\\LZH_HTML.log ↑　ログファイルの設定 @REM **** 圧縮保存 @C: @CD \"C:\\Program Files\\ArchiverDll\\UNLHA32\" C:\\PROGRA~1\\UNDLL\\UNLHA32 a -rd %BAK_LZH%html_%BAKDATE%_%BAKTIME%...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/03/13/13002000/",
        "teaser": null
      },{
        "title": "D945GCLFにケースファン増設！",
        "excerpt":"　　 うちのFedoraサーバは、「 Intel Atom ２３０ 」搭載の「 Intel D９４５GCLF 」というmini-ITX マザーボードを「 Dirac Noah８００ 」 というケースにのせて稼働させています。 しかし、最近ＣＰＵの温度を監視するようになってから、あまりにＣＰＵ温度が高すぎることに気付き、ケースファン「 Noah Fan Kit １７００ 」を増設することを決め、今日増設しました。 （本日商品が届きました（¥３，０００ほどです）） ミニケースのため、ＣＰＵクーラは最初から断念。。。 パッケージ・説明書はこんな感じ。 まず、「 Noah８００ 」のケースをはずしました。 標準ではケース内の空気をケース外へ排出するようになっています。 当方は横置きで使用したいので、「 Noah Fan Kit １７００ 」の説明書にあるように、標準のファンを増設ファンと同様に外気を取り込むように付け替えました。 取り付け方は説明書を参照。 次に、電源コネクタの場所を確認するため、マザーボードの配置図をチェック。 配置図で確認した場所のコネクタをマザーボードから取り外す。 電源コネクタをつなぎかえる。 ①標準でマザーボードにつながっている電源コネクタを「 Noah Fan Kit １７００ 」の分岐ケーブルの一方につなぐ。 ②増設ファン側の電源コネクタを「 Noah Fan Kit １７００ 」の分岐ケーブルのもう一方につなぐ。 ③「...","categories": ["自作PC"],
        "tags": ["Atom","D945GCLF","Dirac","Intel","Noah"],
        "url": "/2009/03/14/14002003/",
        "teaser": null
      },{
        "title": "簿記資料！",
        "excerpt":"　　 僕は今、訳があって親戚の会社で経理をやってるんですが、やっぱり「 簿記 」の資格（日商簿記）を取得しようと思って、勉強中です。   決算も近いし。。。   従業員１００人程なんで、中企業（？）といえると思うけど、まずは３級からと思ってます。   日商簿記３級というのは、個人経営（いわば小企業）用なんですけど、簿記の基本なんでまずはここから。。。   書店で購入したテキストと問題集をやりながら、簿記の内容を配信してくれメルマガも購読してます。   会社で経理をやりながらなんで、普段実務でやっていることの確認もかねて勉強できてるんで、自分にとっては充実＆満足！   いつもは勉強の内容をノートに記入したり、問題集の問題を解いたりしてるんだけど、気になった（大事な）ことを資料（ＰＤＦ）にしました。   自分の サイト にアップしてみました。   自分のメモ程度の資料ですけど、よかったら参考にしてみてください。 （綺麗な資料にしたかったものだけです）   こちら → → → [ http://www.mk-mode.com/archives.php ]   今公開している内容は以下のものです↓↓      BS・PL・勘定記入ルール・二面的分解.pdf （Ａ４・１ページ）   約束手形・為替手形.pdf （Ａ４・２ページ）   有価証券_訂正仕訳_仕訳帳.pdf （Ａ４・１ページ）   決算手続_二重仕訳.pdf （Ａ４・１ページ）   現金過不足.pdf （Ａ４・１ページ）   精算表.pdf （Ａ４・１ページ）   　　 ６月の試験に向けて、まだまだ勉強中です。 もっと資料が増えるかもしれませんが。。。   ３級合格したら、２級目指すつもりです。   　　 じゃあ、また。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/03/15/15002059/",
        "teaser": null
      },{
        "title": "Windows – ﾚｼﾞｽﾄﾘをﾊﾞｯﾁでﾊﾞｯｸｱｯﾌﾟ！",
        "excerpt":"今日は、Ｗｉｎｄｏｗｓで「 レジストリ情報 」をバッチでバックアップすることについてです。 Ｗｉｎｄｏｗｓ使っている方で、レジストリをバックアップされている方もおられると思います。 大抵は、レジストリエディタ「 regedit 」を開いてＧＵＩでエクスポートとかされている思います。 滅多にしないことなんで、別にそれでも十分なんですけど。。。 僕はバッチ処理させています。 いちいち、レジストリエディタを開かずに、バッチファイルを実行させるだけでできるようにしています。 【概要】 レジストリの５種類のルートキーごとにエクスポートし、それらをＬＺｈ圧縮して、ファイル名に日付・時刻を付加して保存。 バッチファイル例 [ 任意のファイル名.bat ] @TITLE ■ BackUp Registory... @REM **** 環境変数設定 @SET BAK_DATA=D:\\20_BAK\\Reg\\ExpData\\ @SET BAK_LZH=D:\\20_BAK\\Reg\\ @SET BAKDATE=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2% @SET BAKTIME=%TIME:~0,2%%TIME:~3,2%%TIME:~6,2% @IF \"%TIME:~0,1%\"==\" \" SET BAKTIME=0%TIME:~1,1%%TIME:~3,2%%TIME:~6,2% @SET LOGFILE=D:\\03_Bat\\Log\\BAK_REG.log @REM **** エクスポートデータを一旦削除 @ECHO DELETE EXP_DATA ... @DEL /Q %BAK_DATA%*.*　　　　←　上書きできないので、一旦ファイルを削除 @ECHO. @REM...","categories": ["PC_Tips"],
        "tags": ["Windows","レジストリ"],
        "url": "/2009/03/16/16002029/",
        "teaser": null
      },{
        "title": "Windows – レジストリでＰＣの時刻補正！",
        "excerpt":"今日は、うちのメインマシン（ＷｉｎｄｏｗｓＸＰ）の時刻補正の間隔をレジストリで変更する方法の紹介（備忘録）です。 普通、Ｗｉｎｄｏｗｓマシンの時刻を自動補正させる場合、「 日付と時刻のプロパティ 」画面の「 インターネット時刻 」タブで設定すると思います。 でもこのインターネット時刻補正の機能は、デフォルトで 7 日 (604,800 秒) ごとにタイム サーバーと同期するように設定されているはずです。 １週間もあるので数秒ズレてしまうことが多々あると思います。 ほぼきっちりと時刻を合わせたい場合に、レジストリの値を設定することで任意の間隔で時刻補正をすることができます。 ※レジストリを簡単に変更できるフリーソフトなどありますが、本質を理解するためには重要なことだと思っています。 以下がその方法 ※レジストリを修正する際は、必ずバックアップをとっておいてください。 また、以下は自分のための記録です。 以下を参考にしてレジストリを変更したためにＰＣが動作不能となっても当方は保証できません。 自己の責任のもと、作業を行ってください。 １．レジストリ エディタ「 regedt.exe 」の起動 ＷｉｎＸＰの場合、「 C:\\WINDOWS 」フォルダに 「 regedit.exe 」があると思います。 当方は、わかりやすい所にショートカットを作っています。 ２．「 SpecialPollInterval 」値の場所を確認 レジストリ キー 「 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpClient 」 を探っていって、 「 SpecialPollInterval 」値の場所を見つけたらクリックする。 ３．「 ＤＷＯＲＤ値の編集 」画面を表示 「 編集 」メニューの「...","categories": ["PC_Tips"],
        "tags": ["Windows","レジストリ"],
        "url": "/2009/03/17/17002000/",
        "teaser": null
      },{
        "title": "Windows – ﾃﾞｽｸﾄｯﾌﾟにﾊﾞｰｼﾞｮﾝ情報表示！",
        "excerpt":"今日もＷｉｎｄｏｗｓＸＰのレジストリ関連の話題です。 今回はデスクトップにＷｉｎｄｏｗｓのバージョン情報を表示させる設定です。 表示させる場所はデスクトップの右下です。 これもレジストリを簡単に変更できるフリーソフトでできるものの一つだと思いますが。。。 レジストリの設定方法 ※レジストリを修正する際は、必ずバックアップをとっておいてください。 また、以下は自分のための記録です。 以下を参考にしてレジストリを変更したためにＰＣが動作不能となっても当方は保証できません。 自己の責任のもと、作業を行ってください。 １．レジストリ エディタ「 regedt.exe 」の起動 ＷｉｎＸＰの場合、「 C:\\WINDOWS 」フォルダに 「 regedit.exe 」があると思います。 当方は、わかりやすい所にショートカットを作っています。 ２．「 PaintDesktopVersion 」値の場所を確認 レジストリ キー 「 HKEY_CURRENT_USER\\Control Panel\\Desktop 」 を探っていって、 「 PaintDesktopVersion 」値の場所を見つけたらクリックする。 ３．「 ＤＷＯＲＤ値の編集 」画面を表示 「 編集 」メニューの「 修正 」をクリックします。 もしくは「 PaintDesktopVersion 」右クリックで「 修正 」をクリックする。 ４．値の設定 「 表記 」は「...","categories": ["PC_Tips"],
        "tags": ["Windows","レジストリ"],
        "url": "/2009/03/18/18002043/",
        "teaser": null
      },{
        "title": "玄箱ＨＧをＦｅｄｏｒａ９にｱｯﾌﾟｸﾞﾚｰﾄﾞ･失敗！",
        "excerpt":"今日は、うちの玄箱「 KURO-BOX/HG 」の「 Ｆｅｄｏｒａ８ 」を「 Ｆｅｄｏｒａ９ 」にアップグレードしてみました。 うちの玄箱には、各種サービスをインストールしてるんですが、結局はファイルサーバとして使用しているだけです。 ※色んなサービスを動かすとあまりに動作が重くなり不安定だったんで。。。 「 Ｆｅｄｏｒａ９ 」にアップグレードするに当たって、一から「 Ｆｅｄｏｒａ９ 」をインストールし直すことも考えてみましたが、「 KURO-BOX/HG 」を「 Ｆｅｄｏｒａ８ 」化するときに結構苦労したんで、アップグレードをしてみることにしました。 ※ちなみに玄箱の「 Ｆｅｄｏｒａ８ 」化は「 玄箱でFedoraサーバーを構築 」を参考に「 Ｆｅｄｏｒａ７ 」を導入後に、「 Ｆｅｄｏｒａ８ 」にアップグレードしました。（たしか） Ｆｅｄｏｒａ９化の手順（もちろんＣＵＩベース） 【前提条件】 ・「 KURO-BOX/HG 」に「 Ｆｅｄｏｒａ８ 」インストール済み。 ・「 KURO-BOX/HG 」へのリモート接続ができる。 ・基本的なＦｅｄｏｒａの知識と玄箱の知識がある。 １．バックアップ 現在、ファイルサーバとして使用しているので、もしもの時の事を考えて、別のマシン等へ大切なファイルを退避させておく。 ２．玄箱への接続 ローカルマシンから「 KURO-BOX/HG 」へリモート接続する。 （当方は、「 Poderosa 」というのを使用しています） ３．ルートユーザになる 当然のごとくルートユーザになる。 [masaru@KURO-BOX...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/03/19/19002026/",
        "teaser": null
      },{
        "title": "LOTO6 No.437",
        "excerpt":"まいど。   ぎりぎり日がかわってしました。 昨日ののロト６（第４３７回）の 結果です。   私の結果はいつもどおりで～す！   ま、というわけで、 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/03/20/20000143/",
        "teaser": null
      },{
        "title": "玄箱ＨＧにＦｅｄｏｒａ７インストール！",
        "excerpt":"昨日、うちの玄箱 KURO-BOX/HG の Fedora 8 を Fedora 9 にアップグレードしたら、ちょっと調子が悪い。 原因は多分以下の２つだと思ったところ。 ダウンロードしたパッケージが ppc でなく、i386 だった。 ntp を設定していないため、時刻が狂いすぎ。 （どっかにそんな記載のあるサイトがあったんで） なので、Fedora を一から入れなおそうと思います。 最終的には KURO-BOX/HG を Fedora 10 化してファイルサーバにするつもりです。 玄箱の Fedora 化はいつも「 できる！玄箱 Fedora化！！ 」を参考にさせてもらっています。（というか、こちらで提供されているインストールキットがないと Fedora 化は難しいんで） あと、こちらの「 玄箱でFedoraサーバーを構築 」も参考にさせてもらっています。 「できる！玄箱 Fedora化！！」には Fedora 7 のインストールキットがあります。Fedora 7 のインストールキットでインストール後、徐々にグレードアップして Fedora 10 化しようと思っています。 ということで、とりあえずは Fedora 7 化してみます。...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/03/20/20002013/",
        "teaser": null
      },{
        "title": "玄箱ＨＧにＦｅｄｏｒａ７・その２！",
        "excerpt":"前回は、うちの玄箱 KURO-BOX/HG に Ｆｅｄｏｒａ７ を導入しました。 が、「 できる！玄箱 Fedora化！！ 」のインストールキット「 F4K Install Kit 」で導入した場合、「 yum 」が古いようで、先々不都合がでるようです。 そこで、こちらの「 玄箱でFedoraサーバーを構築 」を参考に「 yum 」の入れ替えを行いました。（詳細はそちらをご覧下さい） あくまでも自分用の記録です。若干環境等異なる場合もあるかもしれません。ご了承下さい。 作業記録 【前提条件】 ・Ｆｅｄｏｒａ化する玄箱は「 KURO-BOX/HG 」。 ・「 KURO-BOX/HG 」には３２０ＧＢのハードディスクを組み込んでいる。 ・「 KURO-BOX/HG 」のＩＰアドレスは [ 192.168.11.2 ] ・「 KURO-BOX/HG 」に「 できる！玄箱 Fedora化！！ 」のインストールキット「 F4K Install Kit 」でＦｅｄｏｒａ７導入済み。 ・インストール作業を実行させるマシンはＷｉｎｄｏｗｓＸＰ（ＰｅｎｔｉｕｍＭ） １．現状の「 yum 」を削除 以下のようにして現状の「...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/03/21/21002019/",
        "teaser": null
      },{
        "title": "玄箱ＨＧにＦｅｄｏｒａ７・その３！",
        "excerpt":"今日は、とりあえず Ｆｅｄｏｒａ７ になったうちの玄箱 KURO-BOX/HG に最低限必要そうなもの（？）を導入しました。 別になくてもよいものもありますが・・・ 今回もこちらの「 玄箱でFedoraサーバーを構築 」を参考にさせてもらいました。（詳細はそちらをご覧下さい） あくまでも自分用の記録です。若干環境等異なる場合もあるかもしれません。ご了承下さい。 作業記録 【前提条件】 ・Ｆｅｄｏｒａ化する玄箱は「 KURO-BOX/HG 」。 ・「 KURO-BOX/HG 」には３２０ＧＢのハードディスクを組み込んでいる。 ・「 KURO-BOX/HG 」のＩＰアドレスは [ 192.168.11.2 ] ・「 KURO-BOX/HG 」に「 できる！玄箱 Fedora化！！ 」のインストールキット「 F4K Install Kit 」でＦｅｄｏｒａ７導入済み＆「 yum 」入れ替え済み。 ・インストール作業を実行させるマシンはＷｉｎｄｏｗｓＸＰ（ＰｅｎｔｉｕｍＭ） １．「 yum 」のユーテリティをインストール [root@KURO-BOX ~]# yum -y install yum-utils ・・・　途中省略　・・・ Installed: yum-utils.noarch 0:1.1.11-1.fc7...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/03/22/22002021/",
        "teaser": null
      },{
        "title": "玄箱ＨＧをＦｅｄｏｒａ８にｱｯﾌﾟｸﾞﾚｰﾄﾞ！",
        "excerpt":"今回は、昨日 Ｆｅｄｏｒａ７ をインストールした KURO-BOX/HG を Ｆｅｄｏｒａ８ にアップグレードしてみました。 いつもながら、これはあくまでも自分用の記録です。若干環境等異なる場合もあるかもしれません。ご了承下さい。 作業記録 【前提条件】 ・Ｆｅｄｏｒａ化する玄箱は「 KURO-BOX/HG 」。 ・「 KURO-BOX/HG 」には３２０ＧＢのハードディスクを組み込んでいる。 ・「 KURO-BOX/HG 」のＩＰアドレスは [ 192.168.11.2 ] ・「 KURO-BOX/HG 」に「 できる！玄箱 Fedora化！！ 」のインストールキット「 F4K Install Kit 」でＦｅｄｏｒａ７導入済み＆「 yum 」が最新版に入れ替え済み。 ・インストール作業を実行させるマシンはＷｉｎｄｏｗｓＸＰ（ＰｅｎｔｉｕｍＭ） １．玄箱への接続 ローカルマシンから KURO-BOX/HG へリモート接続し、rootユーザになる。 （当方は、「 Poderosa 」というのを使用しています） ２．パッケージダウンロード 「 http://download.fedora.redhat.com/pub/fedora/linux/releases/8/Fedora/ppc/os/Packages/ 」にある 「 fedora-release-8-3.noarch.rpm 」と 「...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/03/23/23002021/",
        "teaser": null
      },{
        "title": "ホームページに雨雲レーダ！",
        "excerpt":"　　 ちょっと前に、うちのホームページ mk-mode SITE のトップページに雨雲レーダのパーツを追加したんで、お知らせです。   天気予報は前から載せてたけど、雨雲の様子も載せた方が便利かなと思ったんで載せてみました。   天気予報と同じく tenki.jp から拝借しました。 ※無料ですので、ご安心を！   ↓↓ こんな感じです　↓↓  更新は１０分か２０分間隔のようです。 （イマイチはっきりしないけど）   今後の予想が知りたければ、画像をクリックして tenki.jp のサイトから確認できます。   自分のサイトをポータルとしてブラウザに登録しておけば、意外と便利では？   グーグル検索なんかはブラウザにツールバーにしているんで問題ないし。   しかし、個人的に雨雲レーダを自由に見れるなんて、いい時代になったもんですなあ～！   　　 じゃ、また。   　　   ","categories": ["Webサイト"],
        "tags": [],
        "url": "/2009/03/24/24002020/",
        "teaser": null
      },{
        "title": "玄箱ＨＧをＦｅｄｏｒａ９にｱｯﾌﾟｸﾞﾚｰﾄﾞ･成功！",
        "excerpt":"今回は、前回 Ｆｅｄｏｒａ８ を入れたうちの KURO-BOX/HG を同様な方法で Ｆｅｄｏｒａ９ にアップグレードしてみました。 前回、Ｆｅｄｏｒａ８ から Ｆｅｄｏｒａ９ へのアップグレードに失敗してるんで、ちゃんとできるかドキドキもんですが。 いつもながら、これはあくまでも自分用の記録です。若干環境等異なる場合もあるかもしれません。ご了承下さい。 作業記録 【前提条件】 ・Ｆｅｄｏｒａ化する玄箱は「 KURO-BOX/HG 」。 ・「 KURO-BOX/HG 」には３２０ＧＢのハードディスクを組み込んでいる。 ・「 KURO-BOX/HG 」のＩＰアドレスは [ 192.168.11.2 ] ・「 KURO-BOX/HG 」に「 できる！玄箱 Fedora化！！ 」のインストールキット「 F4K Install Kit 」でＦｅｄｏｒａ７導入済み＆「 yum 」が最新版に入れ替え済み。その後、Ｆｅｄｏｒａ８にアップグレード済み。 ・インストール作業を実行させるマシンはＷｉｎｄｏｗｓＸＰ（ＰｅｎｔｉｕｍＭ） １．玄箱への接続 ローカルマシンから KURO-BOX/HG へリモート接続し、rootユーザになる。 （当方は、「 Poderosa 」というのを使用しています） ２．パッケージダウンロード 「 http://download.fedora.redhat.com/pub/fedora/linux/releases/9/Fedora/ppc/os/Packages/ 」にある...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/03/25/25002019/",
        "teaser": null
      },{
        "title": "玄箱ＨＧをＦｅｄｏｒａ１０にｱｯﾌﾟｸﾞﾚｰﾄﾞ！",
        "excerpt":"今回は、前回 Ｆｅｄｏｒａ９ を入れたうちの KURO-BOX/HG を同様な方法で Ｆｅｄｏｒａ１０ にアップグレードしてみました。 うちの玄箱ＨＧにとって初めて Ｆｅｄｏｒａ１０ になるんで、ちょっと心配ですが・・・ いつもながら、これはあくまでも自分用の記録です。若干環境等異なる場合もあるかもしれません。ご了承下さい。 作業記録 【前提条件】 ・Ｆｅｄｏｒａ化する玄箱は「 KURO-BOX/HG 」。 ・「 KURO-BOX/HG 」には３２０ＧＢのハードディスクを組み込んでいる。 ・「 KURO-BOX/HG 」のＩＰアドレスは [ 192.168.11.2 ] ・「 KURO-BOX/HG 」に「 できる！玄箱 Fedora化！！ 」のインストールキット「 F4K Install Kit 」でＦｅｄｏｒａ７導入済み＆「 yum 」が最新版に入れ替え済み。 ・「 KURO-BOX/HG 」のＦｅｄｏｒａ８をＦｅｄｏｒａ９にアップグレード済み。 ・インストール作業を実行させるマシンはＷｉｎｄｏｗｓＸＰ（ＰｅｎｔｉｕｍＭ） １．玄箱への接続 ローカルマシンから KURO-BOX/HG へリモート接続し、rootユーザになる。 （当方は、「 Poderosa 」というのを使用しています） ２．パッケージダウンロード 「...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/03/26/26002048/",
        "teaser": null
      },{
        "title": "LOTO6 No.438",
        "excerpt":"まいどです。   日付が変わってしまいましたが、 昨日ののロト６（第４３８回）の 結果です。   私の結果は恥ずかしくて言えましぇーん！   ま、というわけで、 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/03/27/27001021/",
        "teaser": null
      },{
        "title": "Ｄ９４５ＧＣＬＦチップセットファン交換！",
        "excerpt":"今日は、 うちの自作ＦｅｄｏｒａサーバにしているＩｎｔｅｌの Ｄ９４５ＧＣＬＦ の チップセットファン についてです。 ＩｎｔｅｌのＤ９４５ＧＣＬＦ（Ａｔｏｍ２３０搭載）をＤｉｒａｃのＮｏａｈ８００シリーズのケースに入れて稼働させているんですが、この間チップセットファンが回ってないことに気づき、最近はケースファンだけでエアフローを確保していた次第です。 チップセットファンをとめるネジを締め付けるとファンの周りがよじれて引っかかってしまう。ネジを緩めるとファンは回るんだけど、それだとカタカタしてしまう。 今の時期はまだ何とか大丈夫そうだったんだけど、ボチボチ暖かくなってくるし、ＣＰＵも最近なんだか熱い感じなんで、思い切って、チップセットファンを交換しました。 ちなみに今現在の状態はこんなんです↓↓ 標準で装備されていたチップセットファンは４ｃｍの回転数が６０００ｒｐｍのもので、意外とうるさいんで、今回は回転数４０００ｒｐｍの超静音といわれるものを取り付けてみました。 うちの地元にもできた パソコン工房 に希望のものがありました。 ａｉｎｅｘの「 ＡＤＤＡ ＣＦ−４０ＳＳ 」というのです。 ¥1,200くらいでした。 これ↓↓ これをＤ９４５ＧＣＬＦ標準のものと交換し、ついでにケース内のエアフローも考え直してみました。 実施手順 ※もちろん、電源落として、各種ケーブル類を取り外してからです。 １．ケースカバーの取り外し 今はケースファン増設し、２つのファンでケース内に空気を取り込み、反対側から排出するようにしてます。 （ケース横置きが前提です） ２．ケースファンの向き変更 今度はケース内の空気をケース外へ排出するようにするため、２つのファンの向きを変えました。 ３．標準のチップセットファン取り外し 既存のチップセットファンを取り外す。 ４．新しいチップセットファンを取り付け 新しいチップセットファンを結束バンドで取り付ける。 既存のビス、新しいファン付属のボルトでは取り付けられなかったんで。。。 ５．ケースカバーの取り付け等 ケースカバーを取り付け、各種ケーブルを取り付ける。 そして、電源オン！ 作業は以上です。 これで、チップセットファンの風がケース外へ向かって流れるときにＣＰＵをかすめるんで、ＣＰＵも若干冷えるんじゃないかな、と。 １日様子をみてみよう！ ・・・ そして１日後。（早っ！） 結果は。。。 騒音レベルについて 測定器がないんであれですが、チップセットファンが回ってなかった時（ケースファンだけの時）と変わらないくらい静かです。 全然気にならないくらいです。 ケース内の温度について 昨日より気温が低いからか・・・、まあまあな感じ。。。 やっぱ、もうちょっと様子をみることにします。。。 その結果で、またエアフローを考え直します。 そんじゃ、また。...","categories": ["自作PC"],
        "tags": ["Atom","D945GCLF","Intel"],
        "url": "/2009/03/28/28002009/",
        "teaser": null
      },{
        "title": "玄箱ＨＧにファイルサーバ！",
        "excerpt":"今回は、一応 Ｆｅｄｏｒａ１０ になったうちの KURO-BOX/HG にファイルサーバ Ｓａｍｂａ をインストールしました。 うちの玄箱ＨＧにとって初めてのＦｅｄｏｒａ１０の上への Ｓａｍｂａ のインストールなんで、ちょっとだけ心配ですが・・・ いつもながら、これはあくまでも自分用の記録です。若干環境等異なる場合もあるかもしれません。ご了承下さい。 作業記録 【前提条件】 ・Ｆｅｄｏｒａ化する玄箱は「 KURO-BOX/HG 」。 ・「 KURO-BOX/HG 」には３２０ＧＢのハードディスクを組み込んでいる。 ・「 KURO-BOX/HG 」のＩＰアドレスは [ 192.168.11.2 ] ・「 KURO-BOX/HG 」に「 できる！玄箱 Fedora化！！ 」[ http://www.shinkr-webpj.jp/ ]のインストールキット「 F4K Install Kit 」でＦｅｄｏｒａ７導入済み＆「 yum 」が最新版に入れ替え済み。 ・「 KURO-BOX/HG 」のＦｅｄｏｒａ７ → Ｆｅｄｏｒａ８ → Ｆｅｄｏｒａ９ → Ｆｅｄｏｒａ１０にアップグレード済み。 ・インストール作業を実行させるマシンはＷｉｎｄｏｗｓＸＰ（ＰｅｎｔｉｕｍＭ） １．玄箱への接続...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora","Samba"],
        "url": "/2009/03/29/29002019/",
        "teaser": null
      },{
        "title": "Windows – ﾚｼﾞｽﾄﾘでﾒﾆｭｰ展開時間変更！",
        "excerpt":"今日は、Ｗｉｎｄｏｗｓマシンのレジストリのカスタマイズについてです。 その中でも今回は、各種メニューにマウスカーソルが乗った時にサブメニューが開くまでの時間を設定する方法です。 Ｗｉｎｄｏｗｓのスタートボタンからのメニュー表示だけでなく、エクスプローラとかエクセルとか、ほぼ大体対応していると思います。 標準では、マウスカーソルがメニューのある項目上に乗った時、１・２秒くらいしてからサブメニューが展開すると思います。 これがレジストリの設定で即展開されるようになります。 設定手順 ※レジストリを修正する際は、必ずバックアップをとっておいてください。 動かなくなった場合に、ＰＣ自体が動かないのに、リカバリできるかどうかも不明ですが・・・ また、以下は自分のための記録です。 以下を参考にしてレジストリを変更したためにＰＣが動作不能となっても当方は保証できません。 自己の責任のもと、作業を行ってください。 今回は、マウスカーソルが乗ったら即サブメニューが展開されるような設定を試しています。 １．レジストリ エディタ「 regedt.exe 」の起動 ＷｉｎＸＰの場合、「 C:\\WINDOWS 」フォルダに 「 regedit.exe 」があると思います。 当方は、わかりやすい所にショートカットを作っています。 ２．「 MenuShowDelay 」値の場所を確認 レジストリ キー 「 HKEY_CURRENT_USER\\Control Panel\\Desktop 」 を探っていって、 「 MenuShowDelay 」値の場所を見つけたらクリックする。 ３．「 ＤＷＯＲＤ値の編集 」画面を表示 「 編集 」メニューの「 修正 」をクリックします。 もしくは「 MenuShowDelay 」右クリックで「 修正 」をクリックする。 ４．値の設定...","categories": ["PC_Tips"],
        "tags": ["Windows","レジストリ"],
        "url": "/2009/03/30/30002033/",
        "teaser": null
      },{
        "title": "Windows – 「最近使ったﾌｧｲﾙ」の履歴削除！",
        "excerpt":"今日も、ＷｉｎｄｏｗｓＸＰマシンのレジストリのカスタマイズについてです。 今回は、「最近使ったファイル」の履歴をＰＣ再起動時に削除するレジストリ設定です。 設定手順 ※レジストリを修正する際は、必ずバックアップをとっておいてください。 動かなくなった場合に、ＰＣ自体が動かないのに、リカバリできるかどうかも不明ですが・・・ また、以下は自分のための記録です。 以下を参考にしてレジストリを変更したためにＰＣが動作不能となっても当方は保証できません。 自己の責任のもと、作業を行ってください。 １．レジストリ エディタ「 regedt.exe 」の起動 ＷｉｎＸＰの場合、「 C:\\WINDOWS 」フォルダに 「 regedit.exe 」があると思います。 当方は、わかりやすい所にショートカットを作っています。 ２．設定する場所を確認 レジストリ キー 「 HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer 」 を探っていく。 ３．ＤＷＯＲＤ値項目を新規作成 デフォルトでは存在しないので、右側の何も無いところでマウスを右クリックし、「 新規 」−「 DWORD値 」とクリックしていくと、「 新しい値 #1 」という項目ができるので、名前を「 NoRecentDocsHistory 」に変更する。 ４．ＤＷＯＲＤ値の設定 先程作成した項目をダブルクリックして編集画面を開く。 「 表記 」は「 １６進数 」でも「 １０進数 」もどちらでもよい。 「 値のデータ 」ボックスに「 1...","categories": ["PC_Tips"],
        "tags": ["Windows","レジストリ"],
        "url": "/2009/03/31/31002034/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａサーバのクローン化のために！",
        "excerpt":"　　 今、うちのＦｅｄｏｒａ１０サーバは単独で稼働させてて、大事なファイル・フォルダは１日１回自動でバックアップさせています。 バックアップファイルはＷｉｎｄｏｗｓマシン側からＦＴＰダウンロードして保存しています。（これもタスクで自動化）   仮にサーバがダウンして復旧に時間がかかりそうな場合は、実サーバ構築前に仮構築していた仮想マシン（ＶＭｗａｒｅＰｌａｙｅｒ）上のＦｅｏｄｒａ１０に実サーバの設定ファイル等をコピーして仮稼働させようと考えていました。   でも、意外と手間がかかりそう・・・   ってことで、実サーバを丸ごとコピーして全く同じ状態のクローンを作るようにしておけば、復旧も楽ではないかと、考えた次第です。   Ｗｉｎｄｏｗｓと違ってレジストリとか使ってないんで、フォルダ・ファイルの全コピーでクローンができるみたい。。。 ホントかどうかは今のところ不明ですが・・・   そこでそのクローンを作るマシンですが、今ある別のマシンを使いたくないんで、やっぱり仮想マシンＶＭｗａｒｅＰｌａｙｅｒに作ってみることにしました。   概要としては、      仮想マシンにＦｅｄｏｒａ１０を最小限のインストール。   実サーバの内容を丸ごとコピーするフォルダを作りそのフォルダにミラーリングコピー。   で、仮に実サーバがダウンした場合は、ミラーリングコピーしていたフォルダの内容を本当の階層にコピーして稼働させる。   です。   最初から実サーバと同じフォルダ構成でミラーリングコピーするとＩＰアドレスとかもコピーされて実サーバとかぶるんじゃないかと思って、丸ごとコピー用のフォルダにコピーするように考えています。   本当は仮想マシンじゃなくて、本物のマシンでやりたかったけど、今のところ使えるマシンが余ってなかったんで。。。   　　 ということで、 次からはＶＭｗａｒｅＰｌａｙｅｒにＦｅｄｏｒａ１０を構築するところから、記録しながらやってみようと思ってま～っす。。。   ちなみに、うちの職場でも訳あって、経理で仮想マシンを使用してるんだけど、上司の年配の女性の人は仮想マシンのことをいつも「 偽装マシン 」と言ってます。 なんか、いやなイメージ。。。   　　 じゃ、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2009/04/01/01002051/",
        "teaser": null
      },{
        "title": "ＶＭｗａｒｅにＦｅｄｏｒａ１０！",
        "excerpt":"うちのＦｅｄｏｒａ１０サーバを仮想マシンＶＭｗａｒｅでクローン化するための準備として、まずはフリーの ＶＭｗａｒｅＰｌａｙｅｒ にディスクイメージを作成するための Ｑｅｍｕ というソフトを使用してＦｅｄｏｒａ１０をインストールします。 フリーの ＶＭｗａｒｅＰｌａｙｅｒ をはじめ、ＶＭｗａｒｅＷｏｒｋｓｔａｔｉｏｎ とかはシステム開発の現場とか、自宅サーバ構築の仮環境用として、非常にお世話になっているんで、感謝感謝です。 自宅サーバで実際にＷｉｎｄｏｗｓＸＰ上にＦｅｄｏｒａを構築してサーバ運用していた時期もありました。 （当時のマシンのメモリが貧弱だったんですぐにあきらめましたが・・・） 昔、どっかのサイトを参考にして作成したＶＭｗａｒｅＰｌａｙｅｒ用のＶＭＸファイルをずっと流用しているんで、今回も流用しました。 ＶＭｗａｒｅＰｌａｙｅｒ は「 2.5.1 build-126130 」とかにアップデートしてます。（たしか数ヶ月前） でも、一応今回は最初から導入しなおしてみようと思ってるんで、ＶＭｗａｒｅＰｌａｙｅｒ とか Ｑｅｍｕ とか、インストールするところから記録として残しておこうと思います。 作業記録 １．ＶＭｗａｒｅＰｌａｙｅｒのセットアップ 当然これが必要です。下記からダウンロードしてインストールする。 こちら → http://www.vmware.com/download/player/ 当記事執筆時点では、当方には最新バージョン（ 2.5.1 build-126130 ）がインストール済みでした。 ２．Ｑｅｍｕのダウンロード＆展開 QEMU on Windows から最新版をダウンロードしＺＩＰファイルを展開する。。 当記事執筆時点では、当方には最新バージョン（ qemu-0.9.0-windows.zip ）がダウンロード＆展開済みでした。 ３．ＶＭｗａｒｅディスクイメージの作成 上記で展開されたフォルダ内の qemu-img.exe をＤＯＳコマンド画面で以下のように実行する。 下記では「 qemu-img.exe 」のあるフォルダで実行しています。 ディスクイメージの作成先は「 D:\\VMware 」フォルダでファイル名は「 fedora.vmdk...","categories": ["サーバ構築"],
        "tags": ["Fedora","VMware"],
        "url": "/2009/04/02/02002016/",
        "teaser": null
      },{
        "title": "LOTO6 No.439",
        "excerpt":"まいどです。   日付が変わって昨日ののロト６（第４３９回）の結果です。   私の結果についてはいつもどおりです！   そんなこんなで、いつもどおり ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/04/03/03014038/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０にミラーリングツール！",
        "excerpt":"前回は実サーバの完全バックアップ（クローン化）のために ＶＭｗａｒｅＰｌａｙｅｒ に Ｆｅｄｏｒａ１０ をインストールしました。 今回はいよいよミラーリングツールを導入してみます。 【前提条件】 ・実サーバはＦｅｄｏｒａ１０でＷｅｂサーバ、メールサーバ、ＦＴＰサーバ等が稼動中。 ・バックアップ側はＷｉｎｄｏｗｓＸＰＰｒｏ（ＳＰ３）上のＶＭｗａｒｅＰｌａｙｅｒにインストールしたＦｅｄｏｒａ１０。 ・バックアップ側は Fedoraで自宅サーバー構築 を参考に初期設定まで済み。 ・実サーバのＩＰアドレスは 192.168.11.3 、バックアップ側（ＶＭ）のＩＰアドレスは 192.168.11.101 。 ・実サーバ、バックアップ側（ＶＭ）どちらも「 Poderosa 」によるリモート接続による操作。 （実サーバはＳＳＨ２接続・鍵認証、バックアップ側（ＶＭ）はＳＳＨ２接続・パスワード認証） 導入手順 ※ Fedoraで自宅サーバー構築 の リアルタイムミラーリングツール導入(lsyncd+rsyncd) を参考にさせてもいました。 １．ミラー先（Fedora10 on VMware）の起動 ミラー先となるＷｉｎｄｏｗｓ上の ＶＭｗａｒｅ・Ｆｅｄｏｒａ１０ を起動させる。 ※本来の目的はミラーリングコピーなんで、常時起動させていないと意味がないんだけど、ＶＭｗａｒｅ起動させてると他の処理が非常に重くなるし、とりあえずは試験的の運用なんで、今のところ普段は起動させてません。 ２．ミラー先にrsyncサーバー設定 「 Poderosa 」により ＶＭｗａｒｅ・Ｆｅｄｏｒａ１０ にリモート接続し、rootユーザになっておく。 そして以下のように設定。 [root@vm-fedora ~]# mkdir /tmp/mirror　←　ミラー先ディレクトリの作成 [root@vm-fedora ~]# chown nobody:nobody /tmp/mirror　←　ミラー先ディレクトリ所有者をnobodyに変更...","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2009/04/04/04002059/",
        "teaser": null
      },{
        "title": "まるごとＲｕｂｙ購入！",
        "excerpt":"　　 最近、 「 Ｒｕｂｙ 」が気になって仕方ないので、   本屋で「 Ｒｕｂｙ 」の本で、 初心者向け＆実用的そうなのを 探してみました。   やっぱり、 インプレスジャパンの「まるごとシリーズ」のムックを 買いました。 「 まるごとＲｕｂｙ 」です。   前回は同じシリーズの「 まるごとＰＨＰ 」を買っています。   今回は、まだ新しい方の書籍なんで、地元の書店にありました。   なぜ、Ｒｕｂｙが気になっているかというと、 Ｒｕｂｙ開発者がうちの地元在住だった（？）方、アンド、その方が日本リナックス協会会長だった（？）ということで、うちの地元がオープンソースでのソフト開発等々に意外と力を入れているんで、自分も知っておかないとと思っているところだからです。   楽天市場とか、医師会の医事会計（レセプト）システムなんかのシステムもＲｕｂｙだそうだし、今、世界標準化へ向けて準備中の模様です。   実際は、まだ Ｒｕｂｙ には触れてませんが、近いうちに触れてみようかと考えている次第です。   でも、今、会社の方が決算時期とかで、いくら不況下でも忙しい時期なんで、なかなか手がつけられませんが・・・   近いうちに（？）触っては見たいと思ってます。   　　 それじゃ、また。   　　   ","categories": ["その他"],
        "tags": ["Ruby"],
        "url": "/2009/04/05/05025423/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ・Ｆｅｄｏｒａ１０にミラーリングツール！",
        "excerpt":"前回は実サーバの完全バックアップ（クローン化）のために ＶＭｗａｒｅＰｌａｙｅｒ に Ｆｅｄｏｒａ１０ をインストールして、ミラーリングするようにしました。 でも、今のところ ＶＭｗａｒｅ は常時稼働させているわけでもありません。やっぱり、常時稼働の別マシンへのミラーリングを試みてみようと考えました。 うちの稼動中のサーバとは別に、ほぼ録画＆バックアップ専用の玄箱ＨＧ（Ｆｅｄｏｒａ１０導入済み＆２４時間稼動中）があるんで、そいつをミラー先としてやってみることにしました。 導入手順 ※またまた Fedoraで自宅サーバー構築 の リアルタイムミラーリングツール導入(lsyncd+rsyncd) を参考にさせてもらってます。 【前提条件】 ・実サーバはＦｅｄｏｒａ１０でＷｅｂサーバ、メールサーバ、ＦＴＰサーバ等が稼動中。 ・バックアップ側もＦｅｄｏｒａ１０で、ＮＴＰサーバ、Ｓａｍｂａサーバが稼動中。 ・実サーバのＩＰアドレスは 192.168.11.3 、バックアップ側（玄箱ＨＧ）のＩＰアドレスは 192.168.11.2 。 ・実サーバ、バックアップ側（玄箱）どちらも「 Poderosa 」によるリモート接続による操作。 （実サーバはＳＳＨ２接続・鍵認証、バックアップ側（玄箱ＨＧ）はＳＳＨ２接続・パスワード認証） １．ミラー先（玄箱ＨＧ）の起動 ミラー先となる 玄箱ＨＧ・Ｆｅｄｏｒａ１０ が起動していることを確認。 ２．ミラー先にrsyncサーバー設定 「 Poderosa 」により 玄箱ＨＧ・Ｆｅｄｏｒａ１０ にリモート接続し、rootユーザになっておく。 そして以下のように設定。 [root@KURO-BOX ~]# mkdir /tmp/mirror　←　ミラー先ディレクトリの作成 [root@KURO-BOX ~]# chown nobody:nobody /tmp/mirror　←　ミラー先ディレクトリ所有者をnobodyに変更 [root@KURO-BOX ~]# vi...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/04/06/06002020/",
        "teaser": null
      },{
        "title": "Windows – ﾚｼﾞｽﾄﾘでﾊﾞﾙｰﾝ表示制御！",
        "excerpt":"今日は、Ｗｉｎｄｏｗｓマシンのレジストリのカスタマイズについてです。 Ｗｉｎｄｏｗｓインストールした後の標準の状態だと、大抵はタスクトレイとかで バルーン表示 がされると思います。 こんなの↓↓ これって、意外とウザいんで、僕はレジストリで非表示させています。 レジストリをカスタマイズできるツールを使えば、簡単なことですが、やっぱり基本に返って自らレジストリを操作してみましょう！ 設定手順 ※いつものように、レジストリを修正する際は、必ずバックアップをとっておいてください。 動かなくなった場合に、ＰＣ自体が動かないのに、リカバリできるかどうかも不明ですが・・・ また、以下は自分のための記録です。 以下を参考にしてレジストリを変更したためにＰＣが動作不能となっても当方は保証できません。 自己の責任のもと、作業を行ってください。 1. レジストリ エディタ「 regedt.exe 」の起動 ＷｉｎＸＰの場合、「 C:\\WINDOWS 」フォルダに 「 regedit.exe 」があると思います。 当方は、わかりやすい所にショートカットを作っています。 2. 作成する場所を確認 レジストリ キー 「 HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced 」 の場所を探っていく。 3. 「 EnabelBalloonTips 」項目の作成 「 編集 」-「 新規 」-「 DWORD値 」をクリックし「 EnabelBalloonTips 」を作成する。 4. 値の設定 「 EnabelBalloonTips...","categories": ["PC_Tips"],
        "tags": ["Windows","レジストリ"],
        "url": "/2009/04/07/07015841/",
        "teaser": null
      },{
        "title": "電卓購入！",
        "excerpt":"　　 今日は電卓について。   昔、総合病院の事務の仕事で、保険請求とかで早打ちのできる電卓を使ってて、今でも経理の仕事でそれを使ってます。 その電卓は、１２桁表示だけど税計算ボタンがないやつです。   やっぱり、今の経理の仕事では税計算は必須となってくるんで、いちいち、５％の計算をさせるのが面倒くさく感じるようになってきました。   そこで、税計算のできる電卓で早打ちできる電卓、かつ簿記の試験に使える（人気のある、というか、お勧めの）電卓を探していたら、カシオの「 JS-20WK 」シリーズがありました。   そして、もうちょっと調べてみると、なんとカシオの電卓販売１０億台突破記念のブラックモデルが出ているようだったんで、その１０億台突破記念ブラックモデルを探してみました。   楽天でも意外と売り切れの店舗がありましたが、何とか在庫のある店舗を見つけました。しかも、値段も通常税込で¥１３，２２０するものが、なんと、¥５，８００ででてました。   送料含めて、かつ、楽天ポイント使って¥６，０００で購入しました。   こいつです↓↓         黒い箱に入ってて、若干ですけど高級感も・・・   本体の左右両サイドはラバー仕様で持ち運び時に滑りにくくなってる。   いいんじゃないっすか！？   ちなみに、こちらから買いました。      まえ、ソフト開発の仕事していた時の会社の本社の近くだったんで、迷わず買っちゃいました。 一番安かったし。。。 他にもステーショナリ系が充実してそうだし、またいいもん探してみたいって感じです。   　　 そして、いざ購入して手にしてみると、実はこいつは職場の上司が使ってるのと同じ（色違い）ものでした。   やっぱ、人気商品なんですね。   実際に使ってみても、打ち心地もいいんで。   でも、今まで使っていたのより、若干キーピッチが狭いので慣れるまでちょっと時間がかかるかもしれないけど。。。   １０億台突破記念モデルだし、ま、とりあえずは、満足、満足！   　　 じゃ、また。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/04/08/08031927/",
        "teaser": null
      },{
        "title": "WordPress – 記事印刷プラグインを導入！",
        "excerpt":"今日は、久々にＷｏｒｄＰｒｅｓｓのプラグインを追加してみました。 以前から、自分の投稿した記事を綺麗にＰＤＦ化して保存したいと考えてましたけど、いざ印刷しようとすると、記事以外のもの（ヘッダとかサイドバーとか）も印刷されてしまいますよね。 そんなのはいらないんで、記事だけ（もしくはコメントも含めて）印刷できるプラグインを探してみたら、、、ありました。 多分、おなじみのプラグインかもしれませんけど。。。 「 ＷＰ−Ｐｒｉｎｔ 」というのです。 ブラウザ上に印刷用のページを作成してくれるものです。 あとはそのページを印刷（ＰＤＦ化）すればよいです。 導入手順 １．プラグインのダウンロード こちら[ http://wordpress.org/extend/plugins/wp-print/ ]からダウンロードする。 ※当記事執筆時点では、wp-print.2.40.zip が最新でした。 ２．プラグインの展開 先程ダウンロードしたＺＩＰファイルをどこか適当な場所に展開する。 ３．アップロード 展開したプラグインを wp-print フォルダごと、Ｗｅｂサーバへアップロードする。 アップロード先は、当方の場合、/var/www/wordpress/wp-content/plugins です。 ４．アップロードの確認 当方の環境の場合、アップロードしたフォルダの所有者を変更しないといけなかったんで変更。 [root@noah ~]# chown -R apache:apache /var/www/wordpress/wp-content/plugins/wp-print ５．プラグインの有効化 ＷｏｒｄＰｒｅｓｓの「 プラグイン管理画面 」で [ WP-Print ]を 有効化 する。 ６．WP-Printの設定 ＷｏｒｄＰｒｅｓｓの 「 設定 」-「 Print 」画面で各種設定をする。 ７．リンクの表示設定 「...","categories": ["ブログ"],
        "tags": ["WordPress","プラグイン"],
        "url": "/2009/04/09/09002054/",
        "teaser": null
      },{
        "title": "LOTO6 No.440",
        "excerpt":"まいどです。   いつものように、日付が変わってしまって、昨日ののロト６（第４４０回）の結果です。   私の結果については、敢えて言いません！   というか、恥ずかしくて言えません！   ま、いつもどおり、 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/04/10/10001032/",
        "teaser": null
      },{
        "title": "玄箱ＨＧへミラーリングコピー・その後！",
        "excerpt":"この間、うちのＦｅｄｏｒａ１０サーバを玄箱HGサーバへミラーリングコピーするように設定したんだけど、、、 こちらを参考にして　→　Fedoraで自宅サーバ構築 » リアルタイムミラーリングツール導入(lsyncd+rsyncd)   数日経った今、ホントにミラーリングコピーされているか、ミラー先の玄箱ＨＧをチェックしてみました。   しかし、ミラーリングコピーを導入した日のままで全然更新されてませんでした。   あれ？   念のため、ミラー元のサービスの稼働状況を調べてみました。   そしたら、、、   [root@noah ~]# /etc/rc.d/init.d/lsyncd status lsyncd is not running   なんと、「 not running 」とは・・・ 止まってるではないか！！   ならば、再開   [root@noah ~]# /etc/rc.d/init.d/lsyncd start [root@noah ~]# /etc/rc.d/init.d/lsyncd status lsyncd (pid 5956) is running...   なんか、コピーが始まりました。   ミラー先を見てみると、ちゃんと更新されてました。 とりあえずは、安心！   でも、ホントにチャント動くんだろうか？？？   とりあえず、これでまたもうちょっと様子みてみよっと。   結果は、乞うご期待ということで。   じゃ。   ","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/04/11/11002012/",
        "teaser": null
      },{
        "title": "NOAH-800 + D945GCLF エアフローその後！",
        "excerpt":"　　 うちのＦｅｄｏｒａ１０サーバはＩｎｔｅｌ Atom搭載の Ｄ９４５ＧＣＬＦ を Ｄｉｒａｃ の Ｎｏａｈ−８００ のケースに入れて稼働させています。   この間、チップセットファンがうるさいので、静音の低回転の４ｃｍファンに交換し、ケースファンも１つ追加して、エアフローを考えたつもりです。   ケースファンは標準装備のもの、追加したものどちらもケース内の暖気をケース外へ掃く出すようにしました。   それでしばらく様子をみてみました。   その結果は、、、以下のとおりです。         最近、気候がよいせいか、ＣＰＵの温度も５０度近くまで上がってます。 いいんでしょうか？ （もともと、低発熱のＣＰＵ（ＩｎｔｅｌAtom）なんでＣＰＵ自体にはファンが付いてなく、すぐとなりのチップセットファンのおこぼれで若干冷やされる程度です）   ま、エアフロー考える前（チップセットファンが止まってた時）とかに比べれば、まだまだ余裕ですが。。。   常時５０度を超えるようなら、また別のエアフローを考えてみることにします。   また、お知らせ（記録）します。   　　 じゃ、また。   　　   ","categories": ["自作PC"],
        "tags": ["Atom","D945GCLF","Dirac","Intel","Noah"],
        "url": "/2009/04/12/12002025/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０にﾐﾗｰﾘﾝｸﾞﾂｰﾙ・その２！",
        "excerpt":"チョット前にうちのＦｅｄｏｒａ１０サーバを玄箱ＨＧ（Ｆｅｄｏｒａ１０）に丸ごとミラーリングバックアップするようにしたんですが、ミラー元に変更があっても即ミラーリングされない（多分、設定がおかしいんだけど）んで、ちょっとやり方を変えてみることにしました。 常時丸ごとミラーリングとなると、サーバに負荷がかかるんで、ミラーリングツールを１日１回定期的に実行させるようにしてみようと思います。 導入手順 【前提条件】 ・実サーバ（ミラー元）はＦｅｄｏｒａ１０でＷｅｂサーバ、メールサーバ、ＦＴＰサーバ等が稼動中。 ・バックアップ側（ミラー先）は玄箱ＨＧのＦｅｄｏｒａ１０。 ・実サーバ（ミラー元）のＩＰアドレスは 192.168.11.3 、バックアップ側（ミラー先）のＩＰアドレスは 192.168.11.2 。 ・実サーバ、バックアップ側どちらも「 Poderosa 」によるリモート接続による操作。 （実サーバはＳＳＨ２接続・鍵認証、バックアップ側はＳＳＨ２接続・パスワード認証） 実サーバ操作の場合は　・・・　[root@noah ~]# バックアップ側操作の場合は　・・・　[root@KURO-BOX ~]# で、判断してください。 １．公開鍵作成 今回は実サーバからバックアップ側への接続に鍵認証で行いたいので、実サーバ側で公開鍵を作成します。 [root@noah ~]# ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): Created directory '/root/.ssh'. Enter passphrase (empty for no passphrase):...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/04/13/13012833/",
        "teaser": null
      },{
        "title": "電卓購入・その２！",
        "excerpt":"　　 先日、実務＆簿記試験対応にと新しい電卓を購入したんですが、、、 こいつ↓↓ ＣＡＳＩＯ電卓販売１０億台突破記念モデル・ＪＳ−２０ＷＫ−ＢＫ いざ使い出してみると、なんか打ちにくい（ブラインドタッチしにくい）！ なんと、今まで愛用してきた電卓とキーの配列が違うではありませんか！ ※今までのもＣＡＳＩＯの電卓で、税計算キーはないが検算機能のあるヤツで、色は濃いグレー。 （会社に置いてきてるんで、今は型番はわかりませんが） 今までの電卓との違うところは、 「 ＋ 」キーと「 ＝ 」キーが逆だったり、 「 ０ 」キー・「 ００ 」キー・「 ・ 」キーが１つずつ左にずれてたり、 バックスペースキーの位置が全然違ったり、 「 Ｃ 」キーと「 ＡＣ 」キーの場所が違ってたり、等々、、、 一番の違いは、キーとキーの間隔が狭い！ １０年近く愛用してきた電卓だったんで、その慣れというのはなかなか取れないもんで、 「 ００ 」キーを押したつもりが「 ・ 」を押してしまったり、 間違えてとなりのキーを押してしまったりしてしまいます。 キーの配列がそんなに違うとは考えもせず、 ただ売れ筋モデルの限定カラーモデルということだけに引かれて買ってしまったことにちょっとショック！ ということで、 今まで使っていた電卓とキー配列が同じで税計算・検算機能がついてて、早打ちできるヤツで横幅が今までのものと同じモデルを調べてみたら、「 ＤＳ−２０ＷＫ 」というのが一番自分に合ってる。 ※税計算キー部分・色合い以外はほとんど同じ。 多分、今まで愛用してた電卓の後継機の系統です。 早速、今日ヤマダ電機にて買いました。 コイツです↓↓ やっぱり、今まで使ってたのとほとんど同じなんで、打ちやすい！！ （パソコンのテンキー部分と同じようなキーピッチです） 当分、これでやっていくことにします。 今のところ、愛用できる自信アリです！ ちなみに、ＪＳ−２０ＷＫ...","categories": ["その他"],
        "tags": [],
        "url": "/2009/04/14/14002025/",
        "teaser": null
      },{
        "title": "電卓について（追記）！",
        "excerpt":"　　 昨日、新しい電卓について書きました。   今日は、会社で使ってみました。   やっぱり、今までと変わらない感じで打ちやすかったです。   そこで、今日は今まで愛用していた電卓を持って帰りました。   コイツです↓↓      ＣＡＳＩＯ の ＤＳ−２０Ｋ っていうヤツでした。 ※昨日買ったのは、ＤＳ−２０ＷＫ ってヤツ。   現在は、カシオのサイトにも載ってないんで、今は多分製造してないんでしょう！   でも、１０年くらい使ってるけど意外と綺麗だし、まだまだ打ちやすい！   新しく購入した電卓との違いは、 税計算ができない、 小数点セレクタが５桁までじゃなく４桁まで、 あと、底面のすべり止めのゴム部分が小さい、 ってことくらい。   今度、日商簿記３級の試験を受けようと思って、実務＆簿記用に新しい電卓買ったけど、 試験では税計算も必要ないし、この電卓で試験受けてもいいかなと思ってるとこです。   あっ、そういえば、 日商簿記検定のＷｅｂ申し込み開始してるはず。。。 申し込まなければ・・・   　　 じゃ～！   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/04/15/15002038/",
        "teaser": null
      },{
        "title": "日経ＰＣ２１・縮刷版！",
        "excerpt":"　　 最近の製造業を中心とした経営悪化で、うちの会社（工場）も非常にあおりを受けており、仕事が少なくなっている次第です。   ２０名以上居た派遣さんも数名以外は辞めていただき、正社員も２０名近く辞めていただきました。 （非常に心苦しいところです）   今は、色々と活用できる助成金制度を利用しながら、一時帰休したり、教育訓練したりする機会が増えてきている状態です。   そんな色々と教育訓練をしている中、先日は当社でもパソコン講習をしました。   パソコン（エクセル・ワード）のできる社員が数名講師となって、社員に教育するというものです。   まず、例題となる表を渡して、何も言わずをエクセルで作成させてみて、各人のレベルを判断。 そして、 すぐにできた人は、エクセルの関数等を活用した生産管理に応用できそうなものを作成するちょっとレベルの高いコースへ。 なかなかできない人はパソコンの基本操作を習得する初級コースへ。   僕は、ハイレベルコースのサポート役でしたが、 そこでは、「 日経PC２１ 」の昔の記事になっていたエクセルの問題を教えるというものでした。   普段エクセルを使っている人でもチョット敷居が高いかな？と思うようないい問題ばかりでした。   その「 日経PC２１ 」ですが、 普段僕は、書店で立ち読みする程度でしたが、 よくよく読んでみると意外と奥が深いというか、実践で役立つような情報が満載で、あらためて感心しました。   毎月、買う価値は十分あると感じました。   早速、最新号の０９年５月号は買いましたが、やっぱり過去のものも気になってしまうんで、 日経ＢＰのサイトを見ていたら、縮刷版のＤＶＤが出ていたんで、さっそく買いました。         ３年分の記事が丸ごとＰＤＦ化されていて¥６，０００でした。 １冊（ひと月）¥６８０だから、雑誌を３年（３６ヶ月）分買うと¥２４，４８０もするんで、かなりお買い得！ （でも、ＤＶＤで買うなら３年待たないといけないけどネ）   パソコンにインストールして閲覧できるんで、一旦インストールしてしまえば、いちいちＤＶＤ使わなくてもいいんで結構いいかも！？         僕がよく買うＰＣ系の雑誌は意外と日経系多いんです。 多分、実用的な記事が多くて参考になるものが多いからだと思ってます。   「 日経ＷｉｎＰＣ 」とか「 日経Ｌｉｎｕｘ 」とか。。。 ※雑誌以外でも、実用書とかでも日経系が多いかも！   　　 じゃ、また。 （突然ですけど）   　　   ","categories": ["PC_Tips","その他"],
        "tags": [],
        "url": "/2009/04/16/16002053/",
        "teaser": null
      },{
        "title": "LOTO6 No.441",
        "excerpt":"まいどです。   昨日ののロト６（第４４１回）の結果です。   私の結果は、いつもどおりです！   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/04/17/17001034/",
        "teaser": null
      },{
        "title": "簿記３級試験申し込み！",
        "excerpt":"　　 以前、僕は「 病院の事務職 」したり、本命の「 システムエンジニア 」の仕事をしたりとしていましたが、 今は、親族内の都合で親戚の会社（今最悪の製造業）の「 経理 」をしています。   そこで、 最近不況のせいで現場も仕事がかなり少なく、それに比例してとまではいきませんが、１年前よりは事務部門もチョット余裕ができたんで、簿記の試験を受けてみようと思い、少しずつですが勉強しているところです。   そして先日、地元の商工会議所でもWeb申し込みが開始されたんで、一昨日Web申し込みをしました。 そしたら、昨日連絡先にしていた携帯に申し込み受付完了のメールが送れなかったんで、電話にて振込みの案内がありました。 （留守電でしたけど、夜気が付きました。）   あとで、家に帰ってから確認しましたけど、確かに自分のメールアドレスを申し込みのときに入力しています。 何でだろう？？？   Web申し込み開始日時も予定より１・２日送れてたらから、Webのシステムの問題では？ と、勝手に思った次第ですが。   ま、でも、とりあえず期日内に検定料を振り込んでくれということだったんで、さっき振り込みました。 ３級 は ２,５００円 でした。   試験は ６月１４日（日） なんで、まだあと２ヶ月ほどあるんで、 なんとか合格レベルまで到達できるようかんばりスマッシュ！です。   でも、息抜きのために（？） 自作ＰＣも完成させたいなあ～！ 自転車も乗りたいな～！ ルービックキューブの練習もしたいな～！ あれもしたいな～！ これもしたいな～！   仕事終わってから、 家に帰って、晩飯食って、 風呂に入って、 その日１日のまとめの記録（手帳にとってるんです）とって、 ちょっと、ブログの記事を書いてたら、 もう午前様！！！ 次の日は朝６には起きないといけないし、 不況、不況とは言ってもホントに時間がとれない！！！   ま、踏ん張り時ということで、なんとかガマン、ガマン！   　　 じゃ、また。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/04/18/18002031/",
        "teaser": null
      },{
        "title": "メールソフト！",
        "excerpt":"こんにちは。   　　 久々の昼間の投稿です。   今日はメールソフトについてです。   みなさんは、メールソフト（Ｗｉｎｄｏｗｓ版）に何を使われてますでしょうか？   僕は（今は） ＭｏｚｉｌｌａＴｈｕｎｄｅｒｂｉｒｄ を使っています。   （会社では、強固なセキュリティのかかったネットワーク上でＯｕｔｌｏｏｋＥｘｐｒｅｓｓを使わざるを得なかったので、仕方なく使ってました）   なんか、ＯｕｔｌｏｏｋＥｘｐｒｅｓｓ は使いにくいっ！って思っているのは私だけ？   Ｔｈｕｎｄｅｒｂｉｒｄを選んだ理由はＷｅｂブラウザにＭｏｚｉｌａＦｉｒｅｆｏｘを使っているのあるし、ＴｈｕｄｅｒｂｉｒｄはＬｉｎｕｘ版もあるので、仮にＬｉｎｕｘ側で使う状況が発生した場合にもすぐになじめる（？）から！ 別にうちのサーバは今ＧＵＩでは使用できませんが（というかＧＵＩで使用つもりも今のところありませんが）。。。   Ｔｈｕｎｄｅｒｂｉｒｄを使ってて特に便利だと感じたのは、「 メールフィルタ（振り分け）機能 」が充実している。 ・振り分け後、どのように処理するのかも設定できる。 ・読まずに即既読にしたい場合なんか特に便利！      不満はメールの自動送信（指定した時刻に送信する機能）が多分ない（プラグインとかあるのかもしれんけど）って事くらいかな！   ただ、昔、仕事でもプライベートでも使用していた Ｂｅｃｋｙ が最近また気になりだしたんで、また使ってみようかとも思っているところ。 （だいぶパージョンアップもされてきたみたいだし・・・）   実は、会社のネットワークも親会社のイントラネットからはずして、うちの会社独自のネットワークに切り替わるんで、メールソフトもＯｕｔｏｌｏｏｋＥｘｐｒｅｓｓ以外が使えるようになります。   いっそ、Ｔｈｕｎｄｅｒｂｉｒｄ か Ｂｅｃｋｙ に使用かと考えています。   その前に、うちで、Ｔｈｕｎｄｅｒｂｉｒｄ か Ｂｅｃｋｙ の自分にとっての使いやすさを検証しておきます。   　　 じゃ、また。   　　   ","categories": ["PC_Tips","その他"],
        "tags": ["Windows"],
        "url": "/2009/04/19/19115121/",
        "teaser": null
      },{
        "title": "Thunderbird → Becky へ移行！",
        "excerpt":"今日は、今使っているメーラ ＭｏｚｉｌｌａＴｈｕｎｄｅｒｂｉｒｄ を昔よく使っていた Ｂｅｃｋｙ に戻してみようと思い、移行してみました。 以下に手順を記録として残しておきます。 作業手順 １．Ｔｈｕｎｄｅｒｂｉｒｄ の最適化 コピー元の Ｔｈｕｎｄｅｒｂｉｒｄ のデータを軽くしておくため、各フォルダを最適化しておく。 ※上位フォルダを最適化しても、下位のフォルダまでは最適化されないみたいなので、各フォルダでこの作業が必要となります。 メールの数がさほど多くなければ、最適化自体も不要だとは思いますが。。。 （フォルダ分けしていなければ、作業は楽です） ２．Ｂｅｃｋｙ にフォルダ作成 フォルダ分けしているので、コピー先となる Ｂｅｃｋｙ にもフォルダを作成しておく。 でも、途中で気が付いたが、Ｂｅｃｋｙ 側にはフォルダを作成しておかなくてもよかったみたい。 Ｔｈｕｄｅｒｂｉｒｄ とフォルダ名を変えなければ、フォルダは作成されるみたい！ ３．Ｂｅｃｋｙ にインポート ａ．Ｂｅｃｋｙ 側のインポートしたいフォルダを選択してから、「 ファイル 」メニューの「 インポート 」を選ぶ。 ｂ．「 インポート・エクスポートフォーマット 」のダイアログが表示されるので、「 UNIX mbox形式 」をチェックして「 ＯＫ 」ボタンをクリック。 ｃ．今選択中のフォルダにインストールするかどうかの確認画面が表示されるので、「 いいえ 」を選択。 フォルダを事前に作成していなければここで「 はい 」を選択すれば、フォルダを作成してインポートされるみたいです。 ｄ．インポートするファイルを選択する画面となるので、指定して、「 開く 」をクリック。 これで、インポートが始まります。...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/04/20/20002016/",
        "teaser": null
      },{
        "title": "ﾄﾞﾒｲﾝからﾜｰｸｸﾞﾙｰﾌﾟへの変更時の盲点！",
        "excerpt":"　　 今日は、うちの会社は休みだったんだけど、親会社のイントラネットからうち独自のネットワークへの切り替えの作業のため出勤してました。   うちの会社は工場なんで、生産管理をするためのイントラネット経由のＰＣがどうしても必要なので、必要な数台のみ以外はうち独自のネットワークへ切り替えました。   しかし、意外な落とし穴がありました。   まず、１つ目は。。。 今までは、親会社系列のイントラネットだったんで、ワークグループではなくドメインでのメンバ管理でした。 それをワークグループでの管理に切り替えるために設定をドメインからワークグループにして、アドミニストレータでログインしようとしたときに、パスワードがわからなくなってしまい、まったくログインできなくなってしまいました。 （そんな減少に陥ってしまったのは２台ですが、他のほとんどのＰＣでは、パスワードを確認してから作業したのでＯＫでしたが） ワークグループを設定する前にアドミニストレータのパスワードを確認するなり、削除するなりしておけばよかったんですが。。。   もうひとつ、ちょっとした落とし穴がありました。 うちの会社の独自のネットワークではいままでＤＨＣＰでＩＰアドレスを管理していたんですが、ＤＨＣＰで管理できるのは１６台に設定していたようで、今回台数が急激に増えたため、ＩＰアドレスの競合問題が発生しました。 最初はなかなか原因に気づきませんでしたが、ふと思い出して確認してみたら、案の定ＤＨＣＰの設定が１６台しかなかった！ 急遽、数を増やしました。 成功！！！   今回の移行は、うちの会社でもパソコン系にまあまあ強いものが２人がかりで作業しました。 他の社員たちは意外とＰＣ系にうとい人たちばかりなので、うちらが会社の休みの間にしておいてあげる、というものです。   以前、僕が働いていたソフト開発の現場ではみんな自分で自分のマシンの設定はしていましたが。 やっぱり、普通の会社ではそうはいかないでしょう、って実感した次第です。   ま、還暦まじかの人や還暦過ぎた人、また家ではパソコン使わない人、などが多いんで、それが普通かも知れませんねえ！   さ、明日は、いろいろと問い合わせがあるぞ～！ 「あれが動かない！」とか、「あれはドコいった？」とか、、、   あっ、アドミニストレータでログインできないのはどうしよう？！ （グループ会社のシステムの人に相談だなっ！） パスワードリセットディスクとかも作ってないんで、最悪Ｗｉｎｄｏｗｓの再インストールも覚悟。 データを無くさないよう、念のためうちから「 Ｋｎｏｐｐｉｘ 」のディスクも持っていっとこっと！   　　 じゃ、その後の結果はまた！   　　   ","categories": ["PC_Tips","その他"],
        "tags": ["Windows"],
        "url": "/2009/04/21/21002058/",
        "teaser": null
      },{
        "title": "Administratorのパスワード解除！",
        "excerpt":"　　 うちの会社のＷｉｎｄｏｗｓマシンを昨日ドメイン管理からワークグループ管理へ変更した際にＡｄｍｉｎｉｓｔｒａｔｏｒでのログインでパスワードがわからず、困っていた今日、あれこれ試してみました。   まず最初は、 グループ会社のシステムの人に聞いてみたが、Ｗｉｎｄｏｗｓの再インストールするくらいしかないとのこと。 （ホントは難しいことをすればできるかもしれないが、うちらのことは素人程度に見ておられるので、、、） 再インストールするにも、メーカー製のマシンの場合、リカバリディスクでは工場出荷時に戻るのでは？ そうなると、既存のデータがなくなってしまうので、ハードディスクをケースから取り出して、別のＷｉｎｄｏｗｓマシンからデータを吸い上げておく必要がある。   そして次の案として、 ＣＤブートのＬｉｎｕｘ「 Ｋｎｏｐｐｉｘ 」で「 C:\\WINDOWS\\system32\\config 」フォルダにある「 ＳＡＭ 」というファイルを削除する、という方法。これでパスワードなしでログインできるみたい（ホントかどうかは不明） 但し、「 Ｃａｐｔｉｖｅ 」っていうツールで、ＮＴＦＳ書き込みできる属性に変更してからでないとできない、らしい。 今回の作業時点ではこの「 Ｃａｐｔｉｖｅ 」の使い方をイマイチ把握してなかったので、試せなかった。 ※あとでググってみたら、「 Ｃａｐｔｉｖｅ 」のことについて記載してあるサイトがあった。。。 今度は試してみよう！   そしてまた次の方法としては、 パスワード解析ツールを使用しての解析。 一緒に作業している人が持っていたもので、名前は忘れたが、それが使えた！！！ （でも、別の同じ現象のマシンでは使えなかった。ハード的に相性があるみたい）   何はともあれ、なんとかＡｄｍｉｎｉｓｔｒａｔｏｒのパスワードがわかったんで、ログインができました。 ちょー、安堵。。。   　　 ま、こんな作業自体が普段しない作業なんで、慣れている人もあまりいないと思うけど、自分的には結構いい経験になりました。   　　 じゃ、また。   　　   ","categories": ["PC_Tips","その他"],
        "tags": ["Windows"],
        "url": "/2009/04/22/22002616/",
        "teaser": null
      },{
        "title": "ウイルス対策ソフト！",
        "excerpt":"　　 先日、うちの会社のネットワークを親会社のイントラネットから当社独自のネットワークに切り替えたんですが、ウイルス対策のことを考えていなかった！！！   以前の親会社のイントラネットではシマンテックのソフト（詳しいことは不明だけど、企業用のやつ）だったんだけど、ネットワークを切り替えたため、今はウイルス定義ファイルが更新されない状態です。   さて、困った。   この際、新たにうちの会社用に４０ライセンス近くのウイルス対策ソフトを購入するとなると、１０万円以上かかる。 （いつもお世話になっているところで見積もりをとってみた結果がそうでした）   この不景気の時期です。 あまりお金はかけられません。   結局、社内数名（社長（社長はあんまりわかってないけど・・・）含め）検討した結果、当面の間はフリーのソフトで対応して、ちょっとうちの会社も世間も落ち着いたら、ちゃんとしたライセンスを購入するということに。。。   ついでにファイアウォールの機器も勧められているけど、こいつもまたの機会にということで。。。   で、そのフリーのウイルス対策ソフトですが、世界的にも有名なフリーソフト「 ・・・ 」にしました。 どうでしょう！？ ※まだ、そのソフトの詳細を把握していないので（問題があるといけないので）、敢えてソフト名は公表しませんが・・・   いままでも、当社のある部署ではそのソフトを使用していて、特に問題が無かったようなので、、、   取り急ぎ、インストールしておくつもりです。。。 そのソフトがインストールされていないのが２０台近くあるんで、そんな作業を２０台近くしていかないといけないですが・・・   ネットワークを切り替えた為に、あちこちでいろんな問題も発生しつつあるし・・・   はぁ～っ、て感じ。   でも、そんなことも言ってられないこのご時世！   ま、やってみます。   　　 じゃ、また。   　　   ","categories": ["その他"],
        "tags": ["Windows","ウイルス対策"],
        "url": "/2009/04/23/23002033/",
        "teaser": null
      },{
        "title": "LOTO6 No.442",
        "excerpt":"まいどです。   昨日ののロト６（第４４２回）の結果です。   私はいつになったら当たるんでしょう？！   気長にコツコツとやるしかないんかな？   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/04/24/24001024/",
        "teaser": null
      },{
        "title": "OEからBecky2へのﾃﾞｰﾀ移行！",
        "excerpt":"　　 最近、会社のネットワークが一部を除いて親会社のイントラから別れて、うちの会社独自のネットワークへ切り替わったので、結構融通が利くようになりました。   そこで、今まで「 ＯｕｔｌｏｏｋＥｘｐｒｅｓｓ 」しか使えなかったのが他のメーラも使えるようになりました。 ※勝手に自分でそう理解しているだけ？   で、このたび「 Ｂｅｃｋｙ 」か「 Ｔｈｕｎｄｅｒｂｉｒｄ 」へでも変更しようかと考えているところです。   ところが、「 ＯｕｔｌｏｏｋＥｘｐｒｅｓｓ 」から他のメーラへ移行するツールって意外と無いことにちょっとショック！   とりあえず、「 Ｂｅｃｋｙ 」へ移行してみようかと思ってるけど、探してみたら 「 OutlookExpress-To - OE5/6 Multi Converter 」とかいうのがありました。   今日はもう疲れたんで、明日会社か、会社から帰ってから自宅で試してみます。   「 ＯｕｔｌｏｏｋＥｘｐｒｅｓｓ 」って、意外とセキュリティホールの問題があるんで、あまり好きじゃなかったんで。 ちゃんとした（セキュアな）環境（今までのイントラは非常にセキュアな環境でしたが）では、悪くはないと思いますが、僕にはちょっと使いずらいので、今回いっそのことメーラを変更してみることにしました。   　　 結果は、また。   じゃ。   　　   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/04/25/25010720/",
        "teaser": null
      },{
        "title": "ﾀｯｸｲﾝﾃﾞｯｸｽの作り方！",
        "excerpt":"　　 今日は会社で ＯｕｔｌｏｏｋＥｘｐｒｅｓｓ のデータを Ｂｅｃｋｙ に移行することを試してみたかったんだけど、異常に急がしくて会社ではそれはできませんでした。   僕は、経理の仕事がメインなので、今の時期は年度末で普段の仕事以外の仕事もあるんですが、その１つに１年分の各種帳票を出力しておかなくてはならなくて、Ａ４の両面印刷でも５００枚以上あるようなものを印刷しています。 経理をしておられる方ならわかると思いますが、１年分の金銭的な取引の履歴となるものです。 印刷自体は会計ソフトで簡単に出力できるんですが、そいつを参照するときに見やすいようにインデックスをつけないといけないんです。   今までは、市販のタックインデックスに、横長のゴム印をタックインデックスに左半分は上段・右半分は下段に押してを作成していました。それも、表だけでなく裏になる部分もです。 インデックスの数も半端じゃないんで、非常に面倒くさい！！！   とういことで、今回は市販のタックインデックス用の印字ツールがそのメーカーから公開されているので、そいつを使ってみることにしました。   印字するデータ自体は会計ソフトからエクポートしているんで、、、どうか楽でありますように・・・   この日・月に自宅でやってみます。 うちのインクジェットプリンタ、最近使ってないけど動くのかな～？！   来週、会社であまりに綺麗にできていて上司がビックリするのを期待して。。。   　　 でも、まず日曜は散髪だ。 なかなか、散髪にいけなかったんで。   　 じゃ、また。   　　   ","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2009/04/26/26005326/",
        "teaser": null
      },{
        "title": "OEからBecky2へのﾃﾞｰﾀ移行試行！",
        "excerpt":"今日は、休みで時間があったので、OutlookExpress から Becky2 へメールデータの移行をしてみました。 といっても、自宅では Becky 使ってるので必要ないんですが、会社で以前指定されていた OutlookExpress を変更できるようになったんで、ためしにうちで Becky への移行を試してみたところです。 ググって探してみたら、「 OutlookExpress-To - OE5/6 Multi Converter 」というのがありました。 こいつで試してみました。 作業手順 ※動作確認は「 OutlookExpress6 」、「 Becky Ver2.50.06 」で行いました。 １．ソフトダウンロード 「 OutlookExpress-To - OE5/6 Multi Converter 」からフリーソフトをダウンロード。 ２．インストール 先程ダンロードしたファイルを実行してインストール。 ３．「 OutlookExpress-To - OE5/6 Multi Converter 」の起動 OutolookExpress 、Becky が起動していないことを確認して、「 OutlookExpress-To - OE5/6 Multi...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/04/27/27002008/",
        "teaser": null
      },{
        "title": "ﾀｯｸｲﾝﾃﾞｯｸｽの印字実践！",
        "excerpt":"　　 今日は、タックインデックスをパソコンから印字することをしてみました。   会社で必要なインデックスなんですが、１００枚近くあるので、既存のゴム印押すのも面倒だし、ましてや手書きももっと面倒なんで、既にあるデータを活用してインデックスを作れないか考えていました。   インデックスシールは手書き用（パソコン印刷対応でない普通のヤツ）です。   そのインデックスシールはＫＯＫＵＹＯさんのなので、確か印字ツールがＫＯＫＵＹＯさんのサイトにあったはず。。。   ありました。   早速そいつをインストールして使ってみました。   差込印刷もできるしいいんじゃない！？ と思ってました。   、、、が、、、しかし、、、   対応する書式がないっ！！！   そうです。タックインデックスはパソコン対応用のもの（しかもＫＯＫＵＹＯさん限定）を準備しなければいけなかったみたいです。   今印刷したいと思っているやつと似ているけど、サイズが若干ちがう。 合わせようもない（できない）   残念。無念！！！   ということで、仕方ないので、他のフリーソフト等を探してみたけれど、適当なのがないので、結局Ｅｘｃｅｌで自分で作りました。   位置合わせ等で何回も調整しながら、やっとできました。   うちのインクジェットプリンタも古いんで、ハード的なトラブルも多々ありましたが、何とかできました。 （最近、うちでは何年もプリンタ使ってないし。年賀状とかもＷｅｂ上のサービスを利用してるし）   とりあえず、完成したんでチョー安堵（あんど）！！！ どうにもならなければ、手書きするところでした。。。 ※次からは、パソコン印刷対応のタックインデックスを準備することを忘れないようにしないと。。。   プリンタを複合機に変えたいなぁ～。 でも、そのまえに自作マシンも完成させたいなぁ～。 あっ、でもそのまえに液晶ディスプレイも色合いが時折おかしくなるんでそっちが先かなぁ～。   あ～っ、やりたいこともしなきゃいけないこともいっぱいありすぎだぁ～！ 困ったもんだ。   　　 じゃ～ネ。   　　   ","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2009/04/28/28002002/",
        "teaser": null
      },{
        "title": "ｻｰﾊﾞﾐﾗｰﾘﾝｸﾞﾃﾞｰﾀを世代管理圧縮保存！",
        "excerpt":"うちの稼動中のサーバの大事なデータを玄箱ＨＧ（Ｆｅｄｏｒａ１０）へミラーリングコピーしているんですが、そいつらを世代管理して圧縮保存するようにしてみました。 ※なぜなら、サーバがトラブった時、「あの日に戻れたら！」なんてことがあるからです。 導入手順 ※いつものように Fedoraで自宅サーバー構築 の 自動バックアップ運用(tar+GnuPG+rsync/ftp) を参考にさせてもらいました。 【前提条件】 ・実サーバはＦｅｄｏｒａ１０でＷｅｂサーバ、メールサーバ、ＦＴＰサーバ等が稼動中。 ・バックアップ側もＦｅｄｏｒａ１０で、ＮＴＰサーバ、Ｓａｍｂａサーバが稼動中。 ・実サーバのＩＰアドレスは 192.168.11.3 、バックアップ側（玄箱ＨＧ）のＩＰアドレスは 192.168.11.2 。 ・実サーバ、バックアップ側（玄箱）どちらも「 Poderosa 」によるリモート接続による操作。 （実サーバはＳＳＨ２接続・鍵認証、バックアップ側（玄箱ＨＧ）はＳＳＨ２接続・パスワード認証） ・実サーバの大事なデータを玄箱側の「 /tmp/mirror 」フォルダ配下へミラーリングコピーするように設定済み。 ※今回は全て、バックアップ（玄箱ＨＧ）での作業です。 １．玄箱ＨＧにリモート接続 「 Poderosa 」により 玄箱ＨＧ・Ｆｅｄｏｒａ１０ にリモート接続し、rootユーザになっておく。 ２．圧縮スクリプトを作成 以下のように世代管理して圧縮保存するスクリプトを作成する。 [root@KURO-BOX ~]# vi backup.sh #!/bin/bash # # ローカル内でバックアップ # LANG=C # # 設定開始 # # 圧縮対象リスト名 # ※圧縮対象をフルパスで記述したリスト...","categories": ["サーバ構築"],
        "tags": ["Windows"],
        "url": "/2009/04/29/29002002/",
        "teaser": null
      },{
        "title": "職場から自宅ｻｰﾊﾞへ！",
        "excerpt":"　　 最近、職場のネットワークが融通が効くようになったんで、いろいろ試している今日この頃。   メーラはＯｕｔｌｏｏｋ Ｅｘｐｒｅｓｓ から Ｂｅｃｋｙ に変更済み。 やっぱり、使い慣れているせいか非常に使いやすくて業務の効率化になってる感じ（とりあえず自分だけ）。   次に考えているのは、今仕事で必要なデータとかバックアップデータとかをＵＳＢメモリに入れているのを、自宅サーバにコピーすることをことを考えています。   具体的には、うちでＦＴＰサーバを立てているので、職場ＰＣからそこへのアップロードする、か、ＦＴＰサーバでなくＷｅｂＤＡＶサーバ（外部からネットワークドライブのように扱える仕組み）を構築して職場からは普通のネットワークドライブのように扱ってファイルをコピーできるようにすること。です。   どっちも、昔していたことがあるので、可能だと思います。 近いうちに試してみます。   　　 じゃ。   　　   ","categories": ["PC_Tips","サーバ構築"],
        "tags": ["FTP"],
        "url": "/2009/04/30/30002026/",
        "teaser": null
      },{
        "title": "LOTO6 No.443",
        "excerpt":"まいどです。   昨日ののロト６（第４４３回）の結果です。   私の結果は何か当たったときにだけ、お知らせすることにします。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/05/01/01024003/",
        "teaser": null
      },{
        "title": "松江日赤の現況！",
        "excerpt":"　　 今月は赤十字運動月間（５／１は日本赤十字発足の日）なんで、いま新病棟建設中の松江赤十字病院についての情報っす。   実は以前松江日赤関係者だったんで、非常に注目しているんです。   今日は仕事が定時終えれたので、明るいうちに帰宅できたんで、帰路途中で撮影してみました。      もう、１４階まで鉄骨は組まれていますね。 ヘリポートはもう少しって感じでしょうか？   ちなみに、あのクレーンは国内でも最大級だそうです。 たしかに、東京とか大阪とかの高層ビル建設現場で見るのとおんなじっぽいかな？！   下層階は壁もできています。 下層階は同時に内装等の作業が進んでいるようです。 見た感じですけど、順調みたい！   ま、まだ高層棟だけの話ですが、、、   先は長いですわ。   高層棟ができてから、現在の新館（新高層棟の南側の１０階建て）を解体して新しい低層棟を建設、さらに本館（新高層棟の北側の６階建て）を解体して、救命救急センターの入り口とか広場みたいなの整備、そして最後に外回り（側溝棟）の整備があるようです。 完全に工事が終わるのは平成２４年７月の予定です。   現在地で現状業務を続けながらの工事なんで仕方ないですね。 （やっぱり、あの場所でないといけない、って市民等の意見もあったし）   次の日赤情報はヘリポートが出来てからになるかな？   　　 じゃ。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/05/02/02002038/",
        "teaser": null
      },{
        "title": "外部から自宅ＦＴＰサーバへアクセス！",
        "excerpt":"　　 うちの職場で、ネットワーク関係が比較的自由に使えるようになったんで、職場からうちの自宅サーバ（ＦＴＰ）への接続を試してみました。   昔、ソフト開発の仕事をしていると時にはよくやっていたので、すぐできるものだと考えていました。   が、今日職場から接続してみたら、ファイルリストが所得できないみたいなエラーがでました。。。   ポートも解放されているのを確認できているので、多分サーバ側の設定でしょう！   今さっき、自宅で設定をちょっと修正してみました。   これで、また、明日職場で試してみます。   ＦＴＰサーバもいいけど、自宅サーバを外部から操作できる設定もしてみようと思っています。 （こちらも昔したことがあるけど、なんとなく覚えている程度ですが・・・）   　　 じゃ、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","FTP"],
        "url": "/2009/05/03/03002042/",
        "teaser": null
      },{
        "title": "外部から自宅FTPｻｰﾊﾞへｱｸｾｽ･その後！",
        "excerpt":"　　 この間、会社から自宅ＦＴＰサーバへアクセスしてみたら、うまくリストの一覧が取得できなかった。   ＦＴＰサーバはあんまり使ってなかったんで、今回インストール＆設定のやり直ししました。   あと、Ｆｅｄｏｒａサーバでファイアウォールの設定が動作していたのも発覚したんで、動作を停止。 （ファイアウォールはルータでのみやることに）   ただ、PASVモード用のポートが外部から開放確認できない！   ま、とりあえず今度職場からアクセスを試してみることに。   　　 じゃ、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","FTP"],
        "url": "/2009/05/04/04002019/",
        "teaser": null
      },{
        "title": "ウイルス対策ソフト・その後！",
        "excerpt":"　　 以前 こちら でも記載したとおり、このたび、職場のネットワーク環境が変更になったため、今まで使用していたウイルス対策ソフトが使用不可（定義ファイルがアップデートされない）になってしまったので、新たにウイルス対策をしなければならなくなりました。   本来なら、企業ですので端末台数分のライセンスを購入して使用できる有償のものを使うべきですが、この不況のおりです。 台数分といっても１０万以上かかります。   そこで、社内数名で検討した結果、当面はフリーのウイルス対策ソフトでしのぐことになりました。   ためしに使用してみることにしたのは、「 Kingsoft Internet Security U SP1 」です。   有償版もありますが、とりあえずは無償版で。   で、みんなのＰＣにインストールする前に、自分のＰＣにインストールして使用してみました。   印象としては、セキュリティ対策上はいいんじゃない？！って感じです。 意外と人気もあるみたいですし。。。 無償版なんで、時折１分間くらい閉じようのない広告が表示されますが・・・   もうちょっと様子をみて、会社のみんなのＰＣにインストールします。 ※こんなソフトのインストール作業はたいして難しくありませんが、うちの職場は製造業なんでＰＣ系に疎い方が多く、自分＋もうひとりくらいでインストールして歩かないといけないんです。。。   　　 今日は、このへんで。   　　   ","categories": ["PC_Tips","その他"],
        "tags": ["Windows","ウイルス対策"],
        "url": "/2009/05/05/05002013/",
        "teaser": null
      },{
        "title": "こいのぼり！",
        "excerpt":"　　 うちの会社は世間とゴールデンウィークがずれているんで、今日（正確には昨日）も仕事でした。   でも、世間がゴールデンウィークなんで、職場も外部からの電話とか来客とかほとんど無くて自分の仕事がはかどり、今日は定時で帰宅しました。   で、帰りに書店へ寄ったんでいつもと違うルートを明るい時間帯に通った際、こんな風景に出くわしました。   よく、田舎の川を横断する「 こいのぼり 」みたいに、街中でビルとビルの間を横断する「 こいのぼり 」を発見！！！   コイツです。      これは、うちの地元の市内にあるホテルの本館と別館を結んだ「 こいのぼり 」でした。。 初めて見たって感じだし、ちょうど信号待ちでいい角度だったんで思わず撮影しました。   あ、そういえば全国的に今日は「 こどもの日 」でしたね。   　　 ※正式にはうちの地元では１ヶ月ずれますけど。。。 　出雲地方なんで。。。   　　 じゃ、また。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/05/06/06002058/",
        "teaser": null
      },{
        "title": "ＰＣ電源購入！",
        "excerpt":"　　 うちの新しいＷｉｎｄｏｗｓマシン自作のために、コツコツと少しずつパーツをそろえているところです。 今回は、電源を購入しました。 80PLUS認証 のあるので 静音 のを探していました。 結局、ENERMAX の「 ECO80+ EES500AWT 」にしました。 意外と新製品です。 地元の パソコン工房 にありました。 価格は税込で \\11,980 でした。 ネット上で安いところでも \\11,000 台だったんで、送料のことを考えれば、いいんじゃないっすか。。。 パッケージはこちらです↓ 中身はこちら↓ オレンジ色のファンがカッコイイ！ （ケースに格納したらわかりませんが・・・） ※まだ袋からは開封しません。 実際に自作するときに開封します。 特徴とスペックはこちら↓ 　　 今までに新しいマシン自作のためにそろえたパーツは、 ・マザーボード 　ASUSTek 　　P5Q-Deluxe ・ハードディスク 　HGST 　　HDT721010SLA360 (1TB SATA300 7200) ・メモリ 　マスタードシード 　　Pulsar DCDDR2-4GB-800 ・グラフィックボード 　ASUSTek 　　EN9600GT/HTDI/512M/R3 ・電源 　ENERMAX 　　ECO80+...","categories": ["自作PC"],
        "tags": ["ENERMAX"],
        "url": "/2009/05/07/07002028/",
        "teaser": null
      },{
        "title": "Loto6 No.444",
        "excerpt":"まいどです。   昨日ののロト６（第４４４回）の結果です。   実は一昨日、昨日と、自分の車が鳥のフンにやられたので、もしかして「 運 」がついているのかな、と勝手に思っていたけど、やっぱダメでした。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/05/08/08002033/",
        "teaser": null
      },{
        "title": "コマ大数学科ＤＶＤＢＯＸ１！",
        "excerpt":"　　 チョー、久々に数学関連の話題です。   小学校・中学校とそろばん習っていたし、   高校も数学が好きで理数科だったし、   大学も数学が好きで理学部数学科だった僕。   自慢じゃないけど、大学入試センター試験も２００点満点中２００点だったし。。。   なので今でも数学は好きで、毎月「 数学セミナー 」という数学専門誌も買っています（でも、時間が無くてあんまり読めていないけど）。   で、テレビで ＮＨＫ教育テレビ 以外ではめずらしい数学の番組をやっているのご存知でしょうか？   フジテレビ系で夜中にやっている「 たけしのコマネチ大学・数学科 」。 僕はいつもほぼ欠かさず見ています。   こちらは地方なので数週間遅れていますが。。。   ちなみに、本は既に購入済みです。。。こんなの↓   番組は一応録画もしていましたが、ＤＶＤが発売されているのを知り、早速Ｖｏｌ．１から買ってみることにしました。   ※録画はしていてもアナログで画質もチョット悪いし、時折録画し忘れている（突然の番組編成の変更等も含めて）回もあるんで、、、 「 たけしのコマ大数学科 DVDBOX 1 」を Amazon で購入しました。 こちら↓↓   そして、本日届きました。   ２本セットで、初回限定コマ大ノートもついていました。         まだ、内容はチェックしていませんが、一応保存用と考えています。   いつか、時間ができた時に観ます！   　　 じゃ、また。   　　   ","categories": ["数学"],
        "tags": [],
        "url": "/2009/05/09/09002013/",
        "teaser": null
      },{
        "title": "外部から自宅サーバへアクセス！",
        "excerpt":"　　 最近、職場でもチョビっと時間ができることがあるんで、職場から自宅のFedoraサーバへのアクセスを試みています。   もちろん、Webサーバ（自分のWebサイト、ブログサイト）は見れます。   次にＦＴＰサーバにアクセスできるか試してみました。 自宅で、あらゆる設定を確認・修正後、職場からアクセスしてみました。   結果、一応（？）アクセスできました。   本当はPASVモードでアクセスしたかったんだけど、PASVではなぜかアクセスできませんでした。 多分、微妙な設定の違いだと思っています。   でも、自宅サーバでＦＴＰサーバを立てるのはあまりお勧めではない、この世の中です。 （FTPは平文なんでハッキングされやすい、から）   なので、ＳＳＨ方式によるアクセスを試してみました。   「 WinＳＣＰ 」というSSH対応のファイル転送ソフトです。   自宅でサーバにファイル転送するときなんかには使用しています。 職場のＰＣに「 ＷｉｎＳＣＰ 」をインストールし、自宅で使用している「 ＷｉｎＳＣＰ 」用の秘密鍵を指定して、起動＆アクセス。   すんなり、アクセスできました。 試しに、自宅サーバ内のファイルをダウンロードしていましたけど、できました。   やっぱ、職場からＦＴＰでのアクセスはヤメにして、「 ＷｉｎＳＣＰ 」を使うことにします。。。   これで、ファイル転送については、一段落。。。   　　 今度は、「 Ｐｏｄｅｒｏｓａ 」というターミナルエミュレータを使用して、職場から自宅サーバをリモート操作してみます。 ※これも以前したことあるんで、多分（？）できるはずです。   　　 結果は、また。   　　 じゃ。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","FTP","SSH"],
        "url": "/2009/05/10/10002028/",
        "teaser": null
      },{
        "title": "外部から自宅サーバへリモート接続！",
        "excerpt":"　　 先日は、職場から「 ＷｉｎＳＣＰ 」による接続（ファイル転送）を試みて、とりあえずうまくいきました。   今回は、ターミナルエミュレータ「 Ｐｏｄｅｒｏｓａ 」による リモート接続 に挑戦しました。 以前やったことあるし、うまくいっていたんで、心配はしていませんでした。 ※ターミナルエミュレータには「 TeraTerm 」とか「 Ｐｕｔｔｙ 」とかありますが、いずれも試したことあります。   今回、ターミナルエミュレータに「 Ｐｏｄｅｒｏｓａ 」を選んだ理由は、今自宅のＷｉｎｄｏｗｓマシンからＦｅｄｏｒａサーバへのリモート接続も「 Ｐｏｄｅｒｏｓａ 」を使ってるんで、同じ方が操作も慣れているしいいかな、と思ったからです。   そして、実際に職場のＰＣに「 Ｐｏｄｅｒｏｓａ 」をインストールしました。 さらにグローバルＩＰとかの設定をし、自宅Ｗｉｎｄｏｗｓマシンから 鍵方式 で接続するときに使用している 秘密鍵 を職場ＰＣへコピーして使い、いざアクセス。。。   なんと、 イッパツでつながりました。   でも、普段は職場から自宅Ｆｅｄｏｒａサーバへリモート接続することもないとは思うけど・・・ いざという時のため、ということで。。。   　　 じゃ。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","SSH"],
        "url": "/2009/05/11/11002032/",
        "teaser": null
      },{
        "title": "VisualStudio2008！",
        "excerpt":"　　 僕は昔、ソフト開発の仕事をしていました。 その時は開発ツールとして「 VisualBasic 」、「 VisualC++ 」、「 Pro*COBOL 」、「 Java 」、「 JSP 」等さまざまな言語で設計・開発していました。   仕事では、一応有償版を使用していましたが、いざ自宅で個人的に使用するとなると、やっぱり無償版でしょ。   無償版でも、個人使用のレベルでは充分なんで、全然不満はありません。   そこで、今まで自宅の「 VisualBasic 」は「 ２００５ExpressEdition 」を使用していましたが、このたび、「 ２００８ＥｘｐｒｅｓｓＥｄｉｔｉｏｎ 」が気になったんでダウンロードしました。 ※ついで（？）に、「 ＳＱＬＳｅｒｖｅｒ２００８ＥｘｐｒｅｓｓＥｄｉｔｉｏｎ 」もダウンロードしました。   そして、ＩＳＯ版（ＤＶＤ版）をダウンロードしてＤＶＤに焼きました。 で、いざインストールしようと思いましたが、、、   今まで自分で作成した２００５ＥｘｐｒｅｓｓＥｄｉｔｉｏｎのプログラムのこともあるんで、やっぱ、２００８ＥｘｐｒｅｓｓＥｄｉｔｉｏｎのインストールは保留にしました。   今も２００５ＥｘｐｒｅｓｓＥｄｉｔｉｏｎで作ったプログラムを使用しているし、改良中なんで。。。 それに、うちのメインマシンもそろそろ作り変え（自作）しようと思ってるし。。。   あっ、そういえば「 Ｒｕｂｙ 」も触ってみたい！ ま、それはいつか時間ができたら・・・   　　 じゃ、また。   　　   ","categories": ["PC_Tips"],
        "tags": ["VisualStudio","Windows"],
        "url": "/2009/05/12/12002011/",
        "teaser": null
      },{
        "title": "自前で名刺作成！",
        "excerpt":"　　 今日は、「 名刺 」の作成についてです。 仕事で使う名刺なんですが、最近会社で発注していた名刺を作ってくれるグループ会社がこの不況のせいか「 名刺 」の作成業務を止めてしまいました。 で、どうしようということなんですが、、、 地元のハンコ屋さんが「 名刺 」を作ってくれるんで、今即必要な「 名刺 」を依頼中です。 でも、色々と技術が進んできた昨今。 よく自前で「 名刺 」を作成している方がおられます。 別にうちでもできるんじゃない？！ どう考えてもできるはず！ というわけで、会社の人たちの今後の名刺のこともあるんで、自前で作成することを考えてみました。 そのためには、まず名刺用の用紙を準備しなければなりません。 で、いろいろ調べた結果、いろんな自社の用紙・ラベルに自分でデザインして印刷できるソフトが目に付いた「 ＫＯＫＵＹＯ 」さんの用紙を使おうと自分のなかで決めました。 早速、地元の文具屋さんとか、家電ショップの用紙売り場とかで探してみましたが、、、 「 ＫＯＫＵＹＯ 」さんの用紙はほとんどありませんでした。 一番オーソドックスな選択だと思ってたのに・・・ お店に並んでいるのは、「 Ａ−ｏｎｅ 」さんが一番多かったです。 （次が「 エレコム 」さん、って感じでした） ※うちらの地元では、意外と世の中で王道的なものが売れていないんです。 だから、ネットショップに頼ってしまい、地元の企業が衰退していくんです。 ※いつも思うんですが、田舎になればなるほど、売れないものを一生懸命売ろうとしている。 売れるものを売りましょうよ、って感じです。 そうか、「 Ａ−ｏｎｅ 」か。 「 ＫＯＫＵＹＯ 」さんの用紙ばかり探し回っていた僕がバカでした。。。 そう言えば、昔「 Ａ−ｏｎｅ 」のラベルに「 Ａ−ｏｎｅ 」のソフトを使用して自分で印字していたこともあったっけ。...","categories": ["その他"],
        "tags": [],
        "url": "/2009/05/13/13002022/",
        "teaser": null
      },{
        "title": "自前で名刺作成・その２！",
        "excerpt":"　　 この間は「 ＫＯＫＵＹＯ 」さんのラベル作成ソフト「 合わせ名人 」を使用して「 ＫＯＫＵＹＯ 」さんの用紙に名刺を作成しようと思って失敗に終わりました（「 ＫＯＫＵＹＯ 」の用紙が地元では手に入らなかった）。   「 Ａ−ｏｎｅ 」さんの用紙は意外とあちこちに売れていましたんで、「 Ａ−ｏｎｅ 」さんの用紙に「 Ａ−ｏｎｅ 」さんのラベル作成ソフト「 ラベル屋さんＨＯＭＥ 」を使用して名刺を作成することにしました。   購入した用紙はこちら。      インクジェットプリンタでも、レーザプリンタでもＯＫの用紙です。   早速、ラベル作成ソフト「 ラベル屋さんＨＯＭＥ 」で作成しました。 そんなに凝った名刺ではないんで、意外と簡単にできました。 ※ただ、ロゴマーク等の画像でＧＩＦは使用できないんで、ＪＰＥＧ等に変換しないといけませんでしたが。。。   あとは印刷なんですが、自宅にはものすごく古いインクジェットしかないんで、こんど会社のカラーレーザで印刷を試してみます。 ほんとは、上等なインクジェットでやりたいんですが。。。   　　 じゃ、また   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/05/14/14002017/",
        "teaser": null
      },{
        "title": "Loto6 No.445",
        "excerpt":"まいどです。   昨日ののロト６（第４４５回）の結果です。   最近、当たる気配なし・・・です。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/05/15/15002034/",
        "teaser": null
      },{
        "title": "Tips - USBメモリ・その１！",
        "excerpt":"　　 今日は、ＵＳＢメモリについての話です。   ＵＳＢメモリって、普通パソコンに挿すとエクスプローラとかで見ると名前が「リムーバブルディスク」とかになって、わかりにくいことがありますよね。 ※自分のよく使うＵＳＢメモリの場合は「リムーバブルディスク」じゃなくて「ボリューム」になるけど。。。      わかりにくいんで、名前を変えてみました。 ※別に知らなかったわけではないけど、ある雑誌に載っていたので、やり方をご紹介って感じです。   別になんてことないです。 普通にボリュームラベルを変更するだけです。 ＵＳＢメモリに限らずよくやることです。 ま、ＵＳＢメモリでも同様にできますよってことです。   ＵＳＢメモリを右クリックして「プロパティ」を選択すると↓↓      「全般」タグで名前を変更↓↓      以下のように変更されているはずです↓↓      念のため、ＵＳＢメモリを一旦抜いて、再度挿してみても大丈夫でした。   これで、複数のＵＳＢメモリを挿したり、カードリーダとか挿しているときでも、迷わずに済むでしょう！！   　　 じゃ、また。   　　   ","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2009/05/16/16002014/",
        "teaser": null
      },{
        "title": "Tips - USBメモリ・その２！",
        "excerpt":"　　 今日もＵＳＢメモリについての小技です。   普通、ＷｉｎｄｏｗｓＸＰでＵＳＢメモリをフォーマットする時、ファイルシステムが「ＦＡＴ３２」か「ＦＡＴ」しか選択できないと思います。   ＷｉｎｄｏｗｓＸＰ自体は「ＮＴＦＳ」でフォーマットされているのに、なんでＵＳＢメモリは「ＮＴＦＳ」でフォーマットできないんだろうと思ったことがありました。   でも、ＵＳＢメモリも「ＮＴＦＳ」でフォーマットできるみたいです。 知りませんでした。   ※「ＮＴＦＳ」だとＵＳＢメモリに４ＧＢ以上のファイルもコピーできるようになります。   一応、記録として残しておきます。   ・まず、エクスプローラでＵＳＢメモリを右クリックして「プロパティ」を選択します。      ・次に、「ハードウェア」タグの中のＵＳＢメモリを選択して「プロパティ」ボダンをクリックします。      ・そして、「ポリシー」タグの中の「パフォーマンスのために最適化する」を選択して「ＯＫ」ボタンをクリックします。      ・すると、パソコンがＵＳＢメモリを認識しなおします。ＵＳＢメモリのフォーマット画面を開くと「ファイルシステム」のドロップダウンに「ＮＴＦＳ」が追加されているはずです。      ただ、不思議なことが。。。 「ＦＡＴ」が無くなり、Ｖｉｓｔａ用の「ｅｘＦＡＴ」がある。。。   「ｅｘＦＡＴ」に関しては何もしていないはずなんだが・・・ ※Ｗｉｎｄｏｗｓのアップデートでいつの間にかできたんかな？！？！   ま、「ｅｘＦＡＴ」を使わなければいいか？   　　 じゃ。   ","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2009/05/17/17002036/",
        "teaser": null
      },{
        "title": "ＰＣ自作のために！",
        "excerpt":"　　 自分のあたらしいマシン自作に向け、パーツもだいぶ揃ってきました。 とは言ってもメインのＰＣケースとＣＰＵはまだですが。。。   でも、間違いなく自作できる時期が迫ってきています。 （なんかワクワク！）   そこで、自作にはドライバが必要なんですが、この際新しいのを購入することにしました。 いままでのも先がだいぶ潰れてきてるし、気分も一新したいし。。。   近くのホームセンターで買いました。 やっぱ、「ＶＥＳＳＥＬ」でしょ！      ＰＣ自作にマイナスドライバは不要だったかも？！ （ま、セットということで・・・）   なかでも、定番の「ボールグリップ式」。   そして、軸がグリップの先まで貫通しているものにしました。      （力が伝わり安くするために貫通しているものだと思ってますが・・・）   あと、このドライバの気に入っている特徴としては、 ・グリップがボール上なので、握りやすく、力を入れやすい。 ・刃先が（高精度とかって書いてあるんで）強そう。 ・刃先にマグネット入っているので、ネジを落としにくい。   　　 自作できる時期は自分ではあと１・２ヶ月以内と考えています。   　　 パーツ購入・自作については、またその時に。。。   　　 じゃ。   　　   ","categories": ["自作PC"],
        "tags": [],
        "url": "/2009/05/18/18002052/",
        "teaser": null
      },{
        "title": "自前で名刺作成・その３！",
        "excerpt":"　　 先日、自前で名刺を作成するために用紙を購入し、その用紙メーカーのホームページからソフトをダウンロードして、デザインするところまでは済ませました。 （その名刺とは、上司の商用以外で使用する名刺（個人的な趣味の活動で使用する名刺）です。。。）   そして、いよいよ印刷です。   昨日、会社のカラーレーザプリンタで印刷してみました。   結果は。。。   大成功！！ ※そのプリンタはまあまあのスペックの複合機だったのが、何よりの救いでした。   一応、購入した名刺用の用紙に印刷する前に普通のコピー用紙に印刷してみて、意外とキレイだったんで、そのまま専用用紙に印刷してみました。   しかも、印刷後１枚１枚切り離すのも簡単です。 最近はミシン目を切り離すんじゃなくて、クリアカットとかクリアエッジとか言って最初から切れているんです。 印刷後に裏っ側のくっ付いている薄皮みたいなもの（シール状のもの）から剥ぎ取ればいいだけです。   印刷結果は、プライバシー等の問題があるんで、お見せできませんが・・・   プリンタの用紙設定は「ラベル用紙」か「厚紙」か迷ったけど、普通紙よりは厚いんで「厚紙」に設定して印刷しました。   非常にキレイに印刷できました。   文字もロゴもキャラクタの画像も。   上司は大喜びでした！！   とりあえず、２０枚（Ａ４（１０枚分）×２シート）ほど印刷しました。 また、不足しそうになったら印刷することにして。   こんなにキレイにできるんだったら、会社の名刺も自前でできるじゃん！！！ 専用の用紙も１００枚（Ａ４×１０枚）で¥５００もしないし。   でも、会社の名刺で使用しているロゴマークの元画像が手に入るかどうかが問題だ？！   このご時世、自前で名刺作成する人が多いんじゃないでしょうか？ 印刷屋さんは大変だ～！   　　 じゃ。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/05/19/19002020/",
        "teaser": null
      },{
        "title": "Windows – フォルダ共有制限！",
        "excerpt":"今日は、Ｗｉｎｄｏｗｓのフォルダ共有についてです。   先日、職場のネットワーク環境を整備したため、各自のマシンで共有しているフォルダのアクセス制限を細かく設定する必要がでてきました。 今までは、厳密にアクセス制限していなかった。 （共有させてていても、誰もが見れる状態だった）   見せてもいいユーザ、見せてはいけないユーザ等の設定をしないといけないんです。 とりあえず、今回やってることを忘れないように記録しておきます。   作業記録   ※ちなみに、ＷｉｎｄｏｗｓＸＰ・Ｐｒｏでの設定です。 （ＷｉｎｄｏｗｓＸＰ・Ｈｏｍｅやその他のＷｉｎｄｏｗｓでは設定が異なります）   １．共有フォルダを作成するＰＣに、見せてもいいユーザのアカウントを作成する。   （１）「ユーザアカウント」設定画面から「新しいアカウントを作成する」をクリック。      （２）新しいアカウントに名前をつける。      （３）アカウントの種類を選ぶ。      ２．新しく作成したアカウントにパスワードを設定する。   （１）「ユーザアカウント」の画面からパスワードを作成するアカウントを選択する。      （２）「パスワードを作成する」をクリックする。      （３）パスワードを設定する。      ３．フォルダオプションの設定。   （１）エクスプローラの「フォルダオプション」画面を開き、「簡易ファイルの共有を使用する（推奨）」のチェックをはずす。      ４．フォルダ共有設定。   （１）共有するフォルダを右クリックし「共有とセキュリティ」もしくは「プロパティ」から「共有」タブを開く。 そして、「このフォルダを共有する」を選択し、共有名も入力する。      ５．アクセス制限の設定   （１）上記の画面内の「アクセス許可」ボタンをクリックして開いた画面で、アクセスを許可するユーザを追加、アクセス許可を「フルコントロール」にする。 また、アクセス許可をしないユーザ等は全て削除する。      ６．動作確認   （１）別のマシンから上記でアクセス許可を設定したユーザ以外のユーザで共有フォルダにアクセスしようとすると、以下のように拒否されます。      ちなみに、共有されるＰＣに設定したアカウントとユーザアカウント名は同じでパスワードが違う場合は、共有フォルダにアクセスする際にパスワードの入力を求めるダイアログが表示されます。     以上です。   本当はファイルサーバを立てて、共有するファイルはそこで管理するのが、アクセス制限とかの設定も楽なのですが。   現時点は、うちの会社にはサーバといえるマシンがないんで。。。   じゃ、また。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/05/20/20002028/",
        "teaser": null
      },{
        "title": "Windows – ﾕｰｻﾞｱｶｳﾝﾄのｺﾋﾟｰ！",
        "excerpt":"今日は、新しいユーザアカウントに既存のユーザアカウントをコピーする方法についての記録です。   全く同じ状態のものができます。 マイドキュメントとか、デスクトップとか、インストールされているアプリとか。。。   作業記録   １．ユーザアカント作成   （１）「ユーザアカウント」の画面から「新しいアカウントを作成する」をクリック。      （２）アカウントの名前を入力する。      （３）アカウントの種類を選択して、「アカウントの作成」ボタンをクリックする。 （今回は複写が目的なので、コピー元と同じ種類を選択する）      （４）一旦、上記で作成したアカウントでログオンし、そのままログアウトする。 そして、コピー元でもコピー先でもないアカウントでログオンする。（今回はadministrator） ※一旦、新アカウントでログオンすることで、「 C:\\Documents and Settings 」フォルダに新アカウント用のフォルダが作成されます。   ２．ユーザアカントコピー   （１）「システムのプロパティ」画面の「詳細設定」タグの中の「ユーザプロファイル」の「設定」ボタンをクリックする。      （２）ユーザプロファイルのコピー元を選択して、「コピー先」ボタンをクリックする。      （３）「参照」ボタンクリックでコピー先を指定する。      （４）「ＯＫ」ボタンでファイルのコピーが始まります。      （５）コピー先が既に存在するので上書きしてよいかどうかの確認画面が表示されるので、「はい」をクリックする。      ３．動作確認   （１）新しく作成したユーザアカウントでログオンしてみて、コピー元と同じ状態で起動すれば、成功です。     以上が、今回やった手順ですが、   １−（４）で新アカウントで一旦ログオンしなかった場合、２−（２）・（３）のところでフォルダを参照できないので、直接フォルダ名（新しいアカウント名）を入力してもできるのではないかと思います（未確認ですが・・・）   ま、めったにユーザアカウントをコピーすることなんて無いかと思いますが、動きが遅くなったマシンでこの作業を行えば、動きが若干軽くなるということがあるみたいです。 参考までに。。。   じゃ、また。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/05/21/21002007/",
        "teaser": null
      },{
        "title": "Loto6 No.446",
        "excerpt":"まいどです。   昨日ののロト６（第４４６回）の結果です。   最近、どんどんとヒットする数字が少なくなってきている今日この頃。。。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/05/22/22002052/",
        "teaser": null
      },{
        "title": "CPU購入！",
        "excerpt":"　　 今度新しいＰＣを自作するためにこの間は地元のパーツショップで電源を購入しました。   まあまあの値段の買い物は１ヶ月に１度と決めていたんだが、 今回は１ヶ月待てなくて、 ついに、、、   ＣＰＵ   を購入しちゃいました！！   Ｉｎｔｅｌ の 「 Core2Duo E8500 」 にしました。 ※ＰＣでゲームはしないんで、とりあえずはこれで充分と判断。。。   こちら↓↓            既に購入済みのマザーボードには 「 Core2Quad 」 でもいいんだけど、 やっぱ、まだチョット高いんで、１万の違いは大きいかな！ （今までのマシンスペックに比べれば「 Core2Duo E8500 」でも充分すぎるほど）   今回はＳｏｆｍａｐのサイトで購入しました。 ¥１８，２８０ （税込み・送料込み） でした。（自分がよく使うショップの中では最安でした）   今月はまだ自動車税も納めなきゃいけないんで、次は来月、いざＰＣケース！！   　　 自作パーツの話はまた今度。   　　 じゃ。   　　   ","categories": ["自作PC"],
        "tags": ["Core2Duo","Intel"],
        "url": "/2009/05/23/23002053/",
        "teaser": null
      },{
        "title": "Kingsoft Internet Security ｵﾌﾗｲﾝｱｯﾌﾟﾃﾞｰﾄﾞ！",
        "excerpt":"先日、職場のネットワーク環境を変更した際にウイルス対策ソフトもフリーの「Kingsoft Internet Security U SP1」に変更しました。   しかし、大抵のマシンはエンジン・ウイルスパターンはオンラインアップデートができるんですが、事情があって数台はネットに接続できない（フィルタかけてる）ので、初期インストール後にオフラインでアップデートしました。   そいつらは定期的に手動でアップデートしてやらないといけないんです。（僕が・・・）   なので、調査して実践した作業を忘れると次が困るんで、記録しておくことにしました。   作業手順   １．オンラインアップデートができているマシンでの作業   ①エンジン・パターンファイルを取り出す。 デスクトップ上のアイコン「Kingsoft_AntiVirus」を右クリック →「プロパティ」 →「ショートカット」タブ →「リンク先を探す」 の順にクリックすると、 「Kingsoft_Internet_Security_U」のフォルダが開く。   ②「Kingsoft_Internet_Security_U」のフォルダ内から「update」フォルダを探す。 （パターンファイルが格納されている）   ③「update」フォルダ自体をUSBメモリなどーにコピーする。   ２．オンラインアップデートができないマシンでの作業   ①１−③でUSBメモリなどにコピーしたファイルを任意の場所に保存する。   ②パソコン画面の右下、通知領域内の「Kingsoft_AntiVirus」アイコン(青い十字のアイコンです)を右クリックする。   ③「オンラインアップデート」を選択すると、「オンラインアップデート」のメイン画面が表示される。   ④「メイン画面」→「カスタムアップデート」→「次へ」→「ローカルまたはLAN経由」の順に選択する。   ⑤「参照」ボタンをクリックし、パソコン内に保存したパターンファイルを選択して、「次へ」をクリックする。   ⑥パターンファイルの更新が行なわれる。   ⑦更新の完了後、画面に結果が表示される。   ⑧パターンファイルが更新されていることを確認する。     作業は以上です。   ※なお、「Kingsoft_Internet_Security_2007」と「Kingsoft_Internet_Security_U」との間、【無料版】と【有料版】との間では互いのファイルを利用できないようです。（同じバージョンのソフトの間でのみ利用可能みたい。。。）   とりあえず、参考までに、という感じです。   それでは、また。   ","categories": ["PC_Tips"],
        "tags": ["Windows","ウイルス対策"],
        "url": "/2009/05/24/24002036/",
        "teaser": null
      },{
        "title": "クイックペイ！",
        "excerpt":"　　 最近、コンビニやスーパーでは電子マネーのおかげで小銭を出す必要がなくなり、便利な時代になったもんだと実感しているところです。   今までに僕が使用してきた電子マネーは、   ・Edy （カード２枚＋携帯） ・Waon （カード１枚＋携帯） ・ｉＤ （携帯） （厳密には、コカコーラ独自の電子マネー「Ｃ−ｍｏｄｅ」も持っていますが、未使用）   でした。   そして、今回は 「 ＱＵＩＣＰａｙ 」を申し込んで、今日携帯に登録完了しました。 （たまたま、ＱＵＩＣＰａｙに使用できるクレジットカードを持っていたんで）   「 ＱＵＩＣＰａｙ 」もうちの地元でも意外と普及している感じです。 近いうちに使ってみます。。。   ※相互のポイントの関連とか、クレジットの利用額とかを常に考えて支払をしないといけないですが。。。   　　 じゃ。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/05/25/25002036/",
        "teaser": null
      },{
        "title": "Windows – ﾊﾞｯﾁﾌｧｲﾙで休止状態に！",
        "excerpt":"今日は、Ｗｉｎｄｏｗｓでバッチコマンドを使って、ＰＣを休止状態にする方法です。 通常、Ｗｉｎｄｏｗｓでバッチコマンドを使って、ＰＣをシャットダウンしたり、再起動したりする場合は、「 shutdown 」コマンドを使用しますが、コマンドの引数には「 休止状態 」にするものがありません。 つまり、「 shutdown 」コマンドではＰＣを「 休止状態 」にすることは不可能です。 以下参照。 使用法: shutdown [-i | -l | -s | -r | -a] [-f] [-m \\\\コンピュータ名] [-t xx] [-c \"コメント\"] [-d up:xx:yy] 引数なし このメッセージを表示します (-? と同じです) -i GUI インターフェイスを表示します。このオプ ションは最初に指定する必要があります -l ログオフ (-m オプションとは併用できません) -s コンピュータをシャットダウンします -r コンピュータをシャットダウンして再起動します -a システム...","categories": ["PC_Tips"],
        "tags": ["Windows","バッチ"],
        "url": "/2009/05/26/26002019/",
        "teaser": null
      },{
        "title": "Becky設定バックアップ！",
        "excerpt":"今日は、メーラ「 Ｂｅｃｋｙ Internet Mail V2 」の設定情報のバックアップについてです。 「 Ｂｅｃｋｙ 」のメールデータのバックアップは別途バックアップツールで定期的に自動バックアップしているんですが、どうせなら設定情報もバックアップしたいと思い、バッチファイルを作成しました。 ま、単純にレジストリをエクスポートするだけですが。。。 バックアップすべきレジストリは、 HKEY_CURRENT_USER\\Software\\RimArts\\B2 です。 以下のようなバッチファイルを作成しました。 @TITLE ■ BackUp Registory of Becky... @REM **** 環境変数設定 @SET BAK_DATA=D:\\20_BAK\\Reg\\Becky\\ @SET BAKDATE=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2% @SET BAKTIME=%TIME:~0,2%%TIME:~3,2%%TIME:~6,2% @IF \"%TIME:~0,1%\"==\" \" SET BAKTIME=0%TIME:~1,1%%TIME:~3,2%%TIME:~6,2% @SET LOGFILE=D:\\03_Bat\\Log\\BAK_REG_Becky.log @REM **** レジストリのエクスポート @ECHO EXPORT REG Becky ... @REG EXPORT HKEY_CURRENT_USER\\Software\\RimArts\\B2 %BAK_DATA%EXP_Becky_%BAKDATE%_%BAKTIME%.reg @ECHO. @IF...","categories": ["PC_Tips"],
        "tags": ["Windows","バッチ"],
        "url": "/2009/05/27/27002023/",
        "teaser": null
      },{
        "title": "ＣＯ２排出量 - 電力編！",
        "excerpt":"今日は、ちょっと環境関連の話題です。 よく「電気をいくら使用するとＣＯ２排出量がいくら」ってメディア等で耳にしたり目にしたりするけど、一体どうやって計算するんだろう？って思い、ちょっと調べてみました。 ＣＯ２を排出するものって 電気、都市ガス、プロパンガス、水道、灯油、ガソリン、軽油、もえるごみ などがありますが、 今回は「電力」についてです。 電力をいくら使用するとどれくらいのＣＯ２が排出されるか、その計算方法です。 計算式はこちら ＣＯ２排出量(t-CO2) ＝ 電力使用量(kWh) × ＣＯ２排出係数(t-CO2/kWh) 単位 ( t-CO2 )に1,000を掛ければ ( kg-CO2 )となります。 で、「ＣＯ２排出係数」って何？ 電力については、各電力事業者によって、また、年度によって異なるようです。 環境省が発表している資料によると、 事業者名 排出係数(t-CO2/kWh) ----------------------------------------------- 北海道電力(株) 0.000517 東北電力(株) 0.000473 東京電力(株) 0.000425 中部電力(株) 0.000470 関西電力(株) 0.000366 四国電力(株) 0.000392 九州電力(株) 0.000387 イーレックス(株) 0.000414 エネサーブ(株) 0.000411 (株)エネット 0.000427 サミットエナジー(株) 0.000538 ＧＴＦグリーンパワー(株) 0.000289...","categories": ["その他"],
        "tags": [],
        "url": "/2009/05/28/28002051/",
        "teaser": null
      },{
        "title": "Loto6 No.447",
        "excerpt":"まいどです。   　　 昨日ののロト６（第４４７回）の結果です。   ボチボチ本気でやり方を考え直さないと。。。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/05/29/29002037/",
        "teaser": null
      },{
        "title": "自動車税納付完了！",
        "excerpt":"　　 そういえば、１ヶ月くらい前に届いていた「自動車税納税通知書」。   意外と忘れていました。   職場の人が話しているのを聞いて思い出しました（ぎりぎり）。   僕の保有している車は、僕のホームページにも乗せていますが、四駆の車です。   そして、税額は¥５８,０００です。 高っ！ （もっと高い人もおられるでしょうが。。。）   なんか、まわりではボーナスが入ってから納付するっていう人がいますが、本当に期限が過ぎても大丈夫なものかどうか、僕的にはイヤなんで、先程納付しました。 ※聞くところによると、多少期限が過ぎても延滞金はかからないみたい？（ホントかどうだか？？？）   インタネットバンキングで納付してしまいました。   ヒジョーに便利ですネェ！   イチイチ、金融機関の窓口へいかなくてもいいし、いつでも納付できてしまうし。。。   でもやっぱ、このご時世の自動車税納付って、結構きついねぇ？！   ま、うちの会社もなんとか今度の夏のボーナスは出るみたい！！！ （でも額は何割かカットみたいだけど・・・）   ボーナスがない会社とかにくらべれば、恵まれている方？   　　 じゃ、また。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/05/30/30002000/",
        "teaser": null
      },{
        "title": "「Ｙａｈｏｏ！ゆうパック」終了！",
        "excerpt":"　　 ときどき、Ｙａｈｏｏ！オークションを利用しているんですが、   ひさびさに商品を出品して落札していただいたんで、   今朝うちの近くのファミリーマートから「Ｙａｈｏｏ！ゆうパック」で発送はしました。   しかし、なんとファミリーマートの端末操作中に「Ｙａｈｏｏ！ゆうパック」終了の案内が！！！   なんと、「Ｙａｈｏｏ！ゆうパック」は５月３１日を最後に発送ができなるようです。 ファミマだけとういんじゃなくて、「Ｙａｈｏｏ！ゆうパック」サービス自体がなくなるようです。 （配送履歴の参照は、７月１日まで）   Ｙａｈｏｏ！オークションをしている人には結構便利でよかったんですが、なんでですかねぇ？   詳細は未確認ですが、何か事情があるんでしょう！   薬の通販も規制がかかってくるし、便利になってきたものが、不便にもどりつつあるのはなぜ？ （他では不便だったものが、便利になってきてるんで、なんとも言いようがないですが）   ま、しょうがないか。 よくわかっている関係者が決めたことなんで。 おそらく（？）それが最善なのでしょう？！   　　 今日はこの辺で。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/05/31/31002036/",
        "teaser": null
      },{
        "title": "ＥｘｃｅｌＶＢＡ – 文字列比較！",
        "excerpt":"　　 今日は、ＥｘｃｅｌのＶＢＡについてです。 よく仕事なんかでＥｘｃｅｌを使って複雑な表を作ったりすると思います。 ある程度のことなら、Ｅｘｃｅｌの関数を駆使すればできます。 しかし、関数だけではチョット難しいことも多々あると思います。 そんな時、ＶＢＡを使って処理をさせたりするんですが、そこで僕が「文字列を比較する」際によく利用する小技です。 具体的には以下のような例。 「Ａ　　１００ａ」（全部全角文字(スペースは全角２個)） と 「A 100a」（全部半角文字(スペースは半角１個)） を同じものとして扱いたい。 同じＥｘｃｅｌシートを複数の人が使用する場合、同じコード類でも人によって微妙に入力が違ってしまうことがあります。 全角文字を半角に、全角・半角スペースを削除することによって実現できます。 実際には以下のような記述。 １．StrConv(Replace(Replace(“Ａ　　１００ａ”, “ “, “”), “　”, “”), vbNarrow) = “A100a” ２．StrConv(Replace(Replace(“A 100a”, “ “, “”), “　”, “”), vbNarrow) = “A100a” １、２ともに結果は”A100a”（全部半角）となります。 スペースを削除するにはＴｒｉｍ関数もありますが、これでは、 ３．StrConv(Trim(“Ａ　　１００ａ”), vbNarrow) = “A 100a” ４．StrConv(Replace(Replace(“A 100a”, “ “, “”), “　”, “”), vbNarrow) =...","categories": ["PC_Tips"],
        "tags": ["Excel","Windows"],
        "url": "/2009/06/01/01002018/",
        "teaser": null
      },{
        "title": "Windows – Administrator のパスワードを忘れた時！",
        "excerpt":"今日は、ＷｉｎｄｏｗｓＸＰで、Administratorのパスワードを忘れてしまった時の対処方法です。 まあ、ほとんどそんなことは無いかと思いますが、、、 まれに、ネットワークにドメイン管理で接続していたマシンをワークグループ管理で接続するように設定しなおしたときなんかは、ドメイン管理していたときのユーザアカウントではログインできませんので、Administratorでないとログインできなくなります。 自分のマシンならAdministratorのパスワードは覚えているんだけど、他人のマシンや他人が設定したマシンなんかだと、お手上げです。。。 （もし、昔ワークグループ管理していて、既にユーザアカウントを作成してあってパスワードを覚えているのであれば、そのユーザでログインできますが） で、Administratorのパスワードがどうしてもわからなくて、どうにもログインできなくなった場合、以下のようにしてAdministratorのパスワードを削除（C:/WINDOWS/system32/config/SAM を削除）すればＯＫのようです。 使うのはＣＤブート Linux の「Knoppix」です。 （ＤＶＤブートでもＯＫだと思います） もしものときのために、以下に手順を載せておきます。 作業手順 １．KnoppixのＣＤをマシンに入れてＣＤから起動させる （ＣＤから起動できるように BIOS の設定をしてから） ２．コンソール画面「Ｋｏｎｓｏｌｅ」を開く ３．ルートユーザになる $ su - # ４．ディレクトリの移動 SAMファイルのあるディレクトリ「 /media/sda1/WINDOWS/system32/config 」へ移動。 （マウントしないといけない場合はマウントする） # cd /media/sda1/WINDOWS/system32/config　← 「sda1」は当方の場合 # ５．SAMファイルの存在を確認 # ls AppEvent.Evt SECURITY.LOG TempKey.LOG software system.LOG SAM SYSTEM.ALT default software.LOG system.sav SAM.LOG SecEvent.Evt default.LOG software.sav...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/06/02/02002000/",
        "teaser": null
      },{
        "title": "Windows – パスワード解析！",
        "excerpt":"前回は、「Ｋｎｏｐｐｉｘ」を使って、ＷｉｎｄｏｗｓＸＰのＡｄｍｉｎｉｓｔｒａｔｏｒのパスワードを削除する方法を掲載しました。   今回は、ＷｉｎｄｏｗｓＸＰの各ユーザアカウントのパスワードを解析する方法をご紹介、というか自分の今後のための記録です。   あるフリーソフトをＣＤに焼いてＣＤブートさせればパスワードが解析できてしまうというものです。   それは「Ｏｐｈｃｒａｃｋ」というものです。   ※もしものときのための非常手段として、また、自分のセキュリティの弱さを実感するために使用しましょう？ ※決して悪用しないで下さい。   作業手順   １．ＩＳＯファイルのダウンロード   「Ｏｐｈｃｒａｃｋ」のページの「Download ophcrack LiveCD」から「ophcrack-xp-livecd-2.1.0.iso」をダウンロードする。 （今回はWindowsXP版。WindowsVista版もあります。） ※４５２ＭＢほどあります。   ２．ＩＳＯファイルをＣＤへ焼付け   ダウンロードしたＩＳＯファイルをＣＤへ焼き付ける。   （ファイルとして焼き付けるのではなく、ＣＤ起動可能となるように（トラックとして）焼き付ける。） ※当方の場合「Ｂ’ｚＲｅｃｏｒｄｅｒＧｏｌｄ８Ｓｅｃｕｒｉｔｙ」でトラックとして焼き付けました。   ３．マシンをＣＤから起動   ＣＤをセットして、マシンを再起動。 （ＢＩＯＳでＣＤから起動するような設定にしてください）   ４．メニュー選択   ＣＤから起動したら、「Ophcrack Graphic mode」を選択（クリック）。      ５．結果確認   しばらくすると（当方の場合は３０分（長い？））、全ての結果が表示されます。 （Ｗｉｎｄｏｗｓでユーザアカウントとして自分が認識しているもの以外もありますが。。。）      ※しかし、Ａｄｍｉｎｉｓｔｒａｔｏｒのパスワードが「empty」。。。   なぜでしょう？？？ ネットで調べてみたら、１５文字以上は解析不可能みたい！！！ たしかに、ギリギリ１５文字でした。   ためしに、Ａｄｍｉｎｉｓｔｒａｔｏｒのパスワードを１４文字にしてみました。   同じように解析してみました。      結果は、大成功！！！ 見事に解析できてました。   ※１５文字以上は解析不能とは、、、意外な落とし穴？！かも！     今回は以上。   それでは、また。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/06/03/03002018/",
        "teaser": null
      },{
        "title": "別のマシンからＬＡＮ経由で起動！",
        "excerpt":"今日は、「ＷａｋｅＯｎＬａｎ」についての実験結果です。 「ＷａｋｅＯｎＬａｎ」（以後、ＷＯＬ）とはＬＡＮ上の別のマシンから「ＭａｇｉｃＰａｃｋｅｔ」というパケットを送信して、目的のマシンの電源をオンにする機能のことです。 ＷＯＬはＯＮさせられる側のマシンのＬＡＮボードの機能として備わっていないといけません。 今、うちのメインで使用しているマシンはその機能があります。 デバイスマネージャでＬＡＮボートのプロパティで確認できます。 （ＷＯＬみたいな記述があればＯＫっぽいです。） 詳しいことは不勉強ですが、 対応していれば、別マシンに「ＭａｇｉｃＰａｃｋｅｔ」を送信するフリーソフト（多種あります）で ＭＡＣアドレスやＩＰアドレス等を設定すれば、ＬＡＮ経由で眠っているマシンを起こすことが可能です。 ＭＡＣアドレスとは、ネットワーク機器固有の物理アドレスです。 自分のマシンのＭＡＣアドレスの確認方法はコマンドプロンプトから以下のようにすれば可能です。 &gt; ipconfig /all Ethernet adapter ローカル エリア接続: Connection-specific DNS Suffix . : Description . . . . . . . . . . . : Broadcom NetLink (TM) Gigabit Ethernet Physical Address. . . . . . . ....","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/06/04/04002006/",
        "teaser": null
      },{
        "title": "Loto6 No.448",
        "excerpt":"まいどです。   　　 昨日ののロト６（第４４８回）の結果です。   なかなか、新しい手法を考える時間がなくて、困り気味な今日この頃。。。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/06/05/05002023/",
        "teaser": null
      },{
        "title": "サーバ連続稼働記録更新！",
        "excerpt":"　　 今夜はチョット疲れてるんで、簡単な話です。   最近、仕事であんまりＰＣまわりのところに集中できずにすごしているですが、 うちのサーバがいつの間にか１ヶ月以上稼働し続けていることに気づきました。   ま、特に変わったこと（難しいこと、サーバに負荷のかかるようなこと）はしていないんで、当然のことか？！ Ｌｉｎｕｘだからできているものとも思っています。 （というかＷｉｎｄｏｗｓ系のサーバは個人では使ったこと無いんでアレですが・・・）   ちなみに今現在の状況はこんなところです。      それと、アクセスカウンタも数字を取り始めてからいままで、２万を超えていました。      どんどん、記録を更新していきたいものです。   　　 あっ、１週間後の簿記の試験の勉強もしなければ・・・   でも、眠いんで、今日はこの辺で。   　　 おやすみなさい。   　　   ","categories": ["サーバ構築","ブログ"],
        "tags": ["Fedora"],
        "url": "/2009/06/06/06002050/",
        "teaser": null
      },{
        "title": "商工会議所から封筒が！",
        "excerpt":"　　 今日、帰宅したら自分宛に地元の「商工会議所」から封筒が届いてました。   あ、そういえば、今度の「簿記検定」の受験票だ！！！   案の定、受験票でした。   平日は仕事で疲れてて、勉強してなかったけど、 休みの日の午前中だけ（？）は、勉強しています。   でも、もうあと１週間だ。   ちょっと、心配になってきました。   明日から（今日じゃない？）、毎日少しでもテキスト・問題集を見直すようにしよっと。。。   ３級なんで、うかるつもりでいますが・・・ あまいでしょうか？？？   　　 ま、なんくるないさ～！   　　 じゃ、また。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/06/07/07002050/",
        "teaser": null
      },{
        "title": "Ｗｅｂサイト － セキュリティ警告！",
        "excerpt":"　　 今日はうちのＷｅｂサイトについて。   このブログとは別にホームページも作って公開しています。   mk-mode SITE [ http://www.mk-mode.com/ ] で公開していましたが、そういえば、”http” でなくセキュアな “https” で見れるように設定してはず、と思い出し。 [ https://www.mk-mode.com/ ] に接続してみました。   サイトは表示されるものの、なにやらメッセージが。      そして、ブラウザ（ FireFox ）の右下にもなにやらマークが。      そのマークをダブルクリックしてみると。      どうやら、暗号化されないコンテンツがあるみたい！ 詳しくは、ブログパーツか他サイトへのリンクを張っているページでこの現象が出ている。   とりあえずは、自分の設定が原因ではないとして、ほっとくことに。   同様に自分のこのブログサイト mk-mode BLOG [ http://www.mk-mode.com/wordpress/ ] も [ https://www.mk-mode.com/wordpress/ ] に接続してみたところ、同様な一部暗号化されないコンテンツがあるという警告が出ました。   チョット調べてみると、リンク先として “http://・・・” みたいなものがあると、そんな警告が出るみたい。。。 詳細は未確認ですが・・・ ま、たしかに、”https://・・・” のページなのに、”http://・・・” があれば、警告になるのかな、と思ったところ。   とりあえずは、ＯＫとしましょう。。。   　　 じゃ、また。   　　   ","categories": ["サーバ構築","ブログ","Webサイト"],
        "tags": ["Windows"],
        "url": "/2009/06/08/08002043/",
        "teaser": null
      },{
        "title": "携帯で自宅ＰＣをリモート操作！",
        "excerpt":"　　 今日は、携帯から自宅のＷｉｎｄｏｗｓマシンをリモート操作する方法についてです。   よく、外部のマシンからリモートするのに “RealVNC” とかWindowsの “リモートデスクトップ接続” とか使用しますが、携帯電話のアプリでそれができないものかと調べたことがあり、今も使用しています。   自分はよく会社のＰＣから “RealVNC” を使って、自宅のＷｉｎｄｏｗｓマシンを操作したことがあったんで、 “RealVNC” の携帯版（？）みたいな “UltraVNC” なるものがあることを発見したときは、うれしくて仕方がありませんでした。   しかし、そいつはドコモは未対応でした。。。   そこで、他にも探してみたら、 ＲＣＧａｔｅというものを見つけました。   チョット使ってみました。 意外とよかったです。   そして、他にはないものかとさがしたら、   mobile2PC というのもありました。 これもチョット使ってみました。 こいつもよかったです。   ※商品の詳細は各サイトでご確認下さい。   そして、どちらも試用してみた結果、 mobile2PCを今後も試用していこうと決め、ユーザ登録もしました。   ま、でも外部から携帯で操作するにも、ＰＣの電源が入ってないと意味ないですが・・・   というか、このmobile2PCで、”MagicPacket” を使って遠隔でスタンバイ・休止状態のマシンを復帰させることもできるようですが、外部からそのような操作をするには自宅のルータに “MagicPacket” を通過させる機能がないとできません。 残念ながら、うちのルータにはそのようなことができません。   ま、携帯でリモート操作する有効的な使用方法は今後見つけることにします。   　　 じゃ。   　　   ","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2009/06/09/09002036/",
        "teaser": null
      },{
        "title": "Windows – CCleaner！",
        "excerpt":"　　 今日は、チョット動作が重くなったＷｉｎｄｏｗｓマシンをチョット軽くすることができるフリーのツールについてです。   僕が最近よく使っているものです。   それは、   CCleaner （クラップクリーナー）というものです。 素早くHDD内の不要ファイルを掃除してくれるフリーのソフトです。 不要なファイルを削除してくれたり、不要なレジストリも削除してくれます。   CCleaner からソフトを普通にダウンロードして、普通にインストールしてしようできます。   起動すると、まずこんな画面が表示されます。      クリーナーの画面ですんで、「解析」ボタンをクリックするとチェックがついているものでこれから削除するものの一覧が表示されます。      次に、「クリーンアップ開始」ボタンをクリックすると、ファイル類が削除されます。      そして、さらに「クリーンアップ開始」ボタンをクリックすると、完全に削除されます。 （というかさっきので削除された思ってましたが）      次は、レジストリの整理についてです。 まず、メニューで「レジストリ」をクリックして、さらに「問題点をスキャン」ボタンをクリックすると次のような画面になります。      レジストリで問題のあるものが一覧で表示されます。 ※当方の場合、既に何回もレジストリスキャンしているので、今回は１件だけでした。。。   次に、右下の「問題点を解決」ボタンをクリックすると、レジストリのバックアップを行うかどうかの確認ダイアログが表示されるので、念のためバックアップはとっておきます。      次に、レジストリの問題点を解決するかどうかの確認が表示されるので、「これを解決」ボタンをクリックします。      しばらくすると、「問題は解決しました」と表示されるので、これでＯＫです。      以上が、「ＣＣｌｅａｎｅｒ」の主な使用方法でした。 後は、インストール済みのアプリケーションの整理ができたり、「ＣＣｌｅａｎｅｒ」をＰＣ起動時に自動で作動させたりというオプションを設定できたりできます。   個人的に試用してみての感想ですが、若干マシンの動作が軽くなった気（？）がします。 一度、使ってみてください。   　　 今度は、レジストリ情報をデフラグするツールを紹介してみたいと思います。   　 じゃ、また。   　　   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/06/10/10002030/",
        "teaser": null
      },{
        "title": "Windows – RegDefrag！",
        "excerpt":"　　 今夜は、予告どおり、レジストリのデフラグツールについてです。   ハードディスク同様にレジストリも断片化が進むみたいです。 これが原因で、マシンの動作が重くなったりするみたい。。。   そこで、僕が最近使用しているレジストリの断片化を修復するフリーツールは Quicksys RegDefrag というのです。   こちらの Downlod ページから普通にダウンロードして、普通にインストールすれば使用できます。   使用方法は、以下のとおりです。   まず、起動すると以下のような画面が表示されので、「レジストリのデフラグ」ボタンをクリックします。      そして、「分析」ボタンをクリックします。      確認ダイアログが表示去るので、「Ｙｅｓ」をクリックする。      レジストリの分析が始まります。      分析が終了すると分析結果画面が表示されるので、「デフラグ」ボタンをクリックします。      しばらくすると、デフラグが終了するので、「再起動」ボタンでＰＣを再起動します。      以上が基本的な使用方法でした。 オプションでデフラグを開始する前にレジストリのバックアップをとることも可能です。   このツールのおかげで、なんだかマシンが軽くなったような気（？）がします。 気（？）がするだけかも。。。   ま、いいや。   　　 じゃ。   　　   ","categories": ["PC_Tips"],
        "tags": ["Windows","レジストリ"],
        "url": "/2009/06/11/11002006/",
        "teaser": null
      },{
        "title": "Loto6 No.449",
        "excerpt":"まいどです。   　　 昨日ののロト６（第４４９回）の結果です。   今回は、４口買ってヒットがたったの１個。。。。。。。。 どういうこと？？？   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/06/12/12002018/",
        "teaser": null
      },{
        "title": "WindowsXP – 高速化！",
        "excerpt":"　　 数日前に、Ｗｉｎｄｏｗｓマシンを高速化するために、ＣＣｌｅａｎｅｒ とか ＲｅｇＤｅｆｒａｇ とかをインストールして使用していることを掲載しましたが、ＣＣｌｅａｎｅｒ よりもよさそうなツールを知ってしまいました。 それは、日経ＰＣ２１・７月号で紹介されていたものですが、 「 Ａｄｖａｎｃｅｄ Ｓｙｓｔｅｍ Ｃａｒｅ Ｆｒｅｅ 」というものです。 （もっと上位の有償版の “Ｐｒｏ” バージョンもあるようです） IObit.com の製品（外国製）のようです。 IObit.com のページの”Download” から「 Ａｄｖａｎｃｅｄ Ｓｙｓｔｅｍ Ｃａｒｅ Ｆｒｅｅ 」を普通にダウンロードして、普通にインストールすれば、使用可能です。 外国製なんですが、日本語にも対応しています。 そして、使用してみました。 まず起動すると、カッコイイ画面が表示されます。 （黒系か白系かテーマが選択できます） そして、”Ｃａｒｅ！” の表示の上部の”ウィンドウズ管理” をクリックして、「スキャン」ボタンをクリックすると、スキャンが開始され、しばらくするとスキャン結果が表示されます。 （確か、初回起動時は自動でスキャンが開始されます。当方は自動スキャンを停止させて、手動でスキャンするような設定に変更しました） そして、上記のようにオレンジ色で “問題” が表示されたら、「修復」ボタンをクリックします。 問題が修復されるはずです。 （レジストリのクリーンアップや不要な痕跡を削除します） 次は、”Ｃａｒｅ！” の表示の右側の”システム診断” をクリックして、「スキャン」ボタンをクリックすると “システムの最適化” や “ディスクのデフラグ” などが実行されます。 そして最後に、”Ｃａｒｅ！” の表示の下部の “ユーティリティ” をクリックすると、ディスククリーンアップや、リンク切れショートカットの整理などいろんなことができます。...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/06/13/13002055/",
        "teaser": null
      },{
        "title": "ハードディスク追加購入！",
        "excerpt":"　　 ぼちぼち、自分のメインマシンを本格的に自作したいなと思っている今日この頃。   あんまりパーツをコツコツ過ぎるくらい時間をかけて集めていると、いつの間にか集めたパーツも古くなってしまう！！   急がなければ、と思い真剣に考え中です。   あとは、ケースがあれば、とりあえずは自作できると思っていたんですが、 （のちのち、グレードアップするにしても）   ハードディスクがどうしても、もう１つ欲しくなり、買ってしまいました。   新しいマシン用に１ＴＢの新品ディスクは購入済だっただけど、 ハードディスク１つでは寂しいし、そのディスクもデータ保存用にしたいな、と思ったんで。。。   とりあえず５００ＧＢを購入しました。   コイツ↓↓      当然、未開封です。あしからず。   日立の「 Deskstar P7K500 」シリーズの「 HDP725050GLA360 」（ 500GB/7200rpm/Serial ATA ）です。   ＴＷＯＴＯＰ・楽天市場店で、楽天スーパーポイントも使用して、送料込み¥５，０００で購入しました。   この５００ＧＢのディスクにＯＳとか各種アプリとかインストールするつもり。。。   新ＰＣ自作まであと１ヶ月を目標としよっ、と！   　　 というか、明日（もう今日か）の日曜は、試験があった！！！ 日商簿記検定だ。   あんまり、勉強できなかったけど、とりあえず、受験はしときます。   結果はまた。   　　 じゃ。   　　   ","categories": ["自作PC"],
        "tags": [],
        "url": "/2009/06/14/14002005/",
        "teaser": null
      },{
        "title": "株価上昇！？",
        "excerpt":"今日は、株のお話です。   といっても、難しい話ではないです。   株は、２年くらい前からちょくちょく取引してるんですが、 （週１回くらい。時々仕事中）   最近は、チョットだけですが、上向き状態って感じがして、ビミョーにうれしいです。 とは言っても、資金がすくないんで、１回の取引金額はだいたい１０万円以内です。。。   株については、あんまり勉強していないんですが、   チョット前まではこれから上昇すると思って現物買した直後に、 ドンドンと下降するといったことが、多々ありました。   しかし、最近はやっぱ底をついた感があるのか、 気になった株は買ったあとに上昇するような傾向があるような（気がするだけ？）。   たしかに、日経平均もやっと¥１０，０００を超えるようになったし。 （今だけだったりして）   ま、ホントはじっくりと考えて取引をすれば、もっと効率的に利益がでると思うんだけど。   でも、株をやるってことは経済状況の勉強にもなるし、スリルもあるんで、おもしろいと思うな。 今日はこの辺で、じゃ。   ","categories": ["その他","株式"],
        "tags": [],
        "url": "/2009/06/15/15002039/",
        "teaser": null
      },{
        "title": "WordPress – 2.8へアップデート！",
        "excerpt":"そういえば最近、「 ＷｏｒｄＰｒｅｓｓ 」のアップデートをしろと、表示が出てたんで、   今日アップデートしました。   （　２．７．１　→　２．８　）   やり方は、簡単。   当ブログの以前の投稿、WordPressを2.7.1にアップグレード！ を参考にしました。   簡単に言うと。   １．念のため、データベース、ファイルをバックアップしておく。   ２．使用中のプラグインを全て停止させる。   ３．ＷｏｒｄＰｒｅｓｓを自動アップデートする。   ※実際には上記の操作ではとりあえずアップデートはされるものの、日本語化はまだできていないみたい。  （まだアップデートせよ！のメッセージが出てるんで）   もう１回上記と同じように自動アップデートすると、完了します。   ま、今日は以上です。   久々にＷｏｒｄＰｒｅｓｓそのもののお話でした。   じゃ。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/06/16/16002011/",
        "teaser": null
      },{
        "title": "ＣＯ２排出量 – ガソリン編！",
        "excerpt":"以前、ＣＯ２排出量 – 電力編！では、電力をどれくらい使用したら、ＣＯ２がどれくらい排出されるか？という話をしました。   今日は電力以外でＣＯ２を排出するもので、ガソリンに注目してみました。   ガソリンをいくら使用するとどれくらいのＣＯ２が排出されるか、その計算方法です。   計算式は、ＣＯ２排出量 – 電力編！と同様に ＣＯ２排出量(kg-CO2) ＝ ガソリン使用量(L) × ＣＯ２排出係数(kg-CO2/L)   という感じです。   で、ガソリンの ＣＯ２排出係数 ですが、 最近のいろんな資料によると「 ２．３２ (kg-CO2) 」っていうのが、一番多かったんで、「 ２．３２ (kg-CO2) 」で考えることにします。 ※電力は、各電力事業者によって、また、年度によって異なっていたけど。。。   で、実際に計算してます。 たとえば、月に１００(L)のガソリンを使用した場合、   ＣＯ２排出量 ＝ １００ (L) × ２．３２ (kg-CO2/L) 　　　　　　 ＝ ２３２ (kg-CO2)   となります。   あ、ガソリン、ガソリンと言ってましたけど、レギュラーのことですので、あしからず。   ハイオクや軽油については、わかったら報告します。   今日は、ガソリン使用量からＣＯ２排出量を計算してみました。   今度は、何に注目してみようかなあ？！   じゃ、また。   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/06/17/17002010/",
        "teaser": null
      },{
        "title": "ＣＯ２排出量 – 軽油編！",
        "excerpt":"昨日は、「ガソリン」をどれくらい使用したら、ＣＯ２がどれくらい排出されるか？という話をしました。   ちなみに、「ハイオクガソリン」のＣＯ２排出係数は「ガソリン」とさほど変わらないとのことでした。   今日は、「軽油」をどれくらい使用したら、ＣＯ２がどれくらい排出されるか？について調べてみました。   で、「軽油」の ＣＯ２排出係数 ですが、 最近のいろんな資料によると「 ２．６１９ (kg-CO2) 」っていうのが、一番多かったんで、「 ２．６１９ (kg-CO2) 」で考えることにします。   で、実際に計算してます。 計算方法は「ガソリン」の時と同じです。 たとえば、月に１００(L)の「軽油」を使用した場合、   ＣＯ２排出量 ＝ １００ (L) × ２．６１９ (kg-CO2/L) 　　　　　　 ＝ ２６１．９ (kg-CO2)   となります。   自分も自動車（ガソリン車）に乗るので、いつか自分の自動車がどれくらいＣＯ２を排出しているのか？ 計算してみたいとも思いました。   じゃ、また。   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/06/18/18002058/",
        "teaser": null
      },{
        "title": "Loto6 No.450",
        "excerpt":"まいどです。   　　 昨日ののロト６（第４５０回）の結果です。   今回は、チョー久々に１口当たりました。   ¥１，０００が１口ほどですが。。。   ま、４口購入したうちの１口なんで、ほんの¥２００のプラスです。   ※実は、今回は何か当たりそうな気がしていたんで。（いつもだったりして・・・）   　　 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/06/19/19002014/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１１リリース！",
        "excerpt":"　　 今、うちのサーバはＦｅｄｏｒａ１０（コードネーム：Ｃａｍｂｒｉｄｇｅ）で稼動中です。 そして、玄箱ＨＧもＦｅｄｏｒａ１０でファイルサーバ（Ｓａｍｂａ）を稼動中です。   でも、今日気がついたんですが、Ｆｅｄｏｒａ１１がリリースされていました。   ２００９／６／９にコードネーム「 Ｌｅｏｎｉｄａｓ 」でリリースされていたようです。   ちなみにコードネーム：Ｌｅｏｎｉｄａｓ （レオニダス）とは、よくわからんけど、 「アギス朝のスパルタ王」みたいです。 アギス朝？　　スパルタ王？ ※高校時代、世界史を履修していないんで（言い訳？）。。。   ま、詳しいことは知らなくても「Ｆｅｄｏｒａサーバ」構築には関係ないか！？   で、うちのサーバはどうしようか？   そんなに慌ててアップグレードしなくてもいいか？   　　 それよりも、今やりたいこと、 メインマシンの自作！   あと、ＰＣケース（ついでにＣＰＵクーラ）が揃えば、自作作業に取り掛かれるんですが・・・   もうちょっと。。。   早くしないと、今までコツコツそろえたパーツが「浦島太郎」になってしまう・・・   それと、新作自作ＰＣに入れるＯＳについても、真剣に考えなければ！！！   本心では、「Ｗｉｎｄｏｗｓ７」を入れたい！ けど、リリースまだなんで、ＸＰ？   最終的には「Ｗｉｎｄｏｗｓ７」を入れたいんで、今持っていない「Ｖｉｓｔａ」は全然考えてないっす。 もう１つ考えているのは、 「Ｗｉｎｄｏｗｓ７」が正式リリースされるまでの間、 Ｌｉｎｕｘ系（Ｆｅｄｏｒａとか、Ｕｂｕｎｔｕとか、Ｄｅｂｉａｎとか・・・）ってのも。   ま、もうちょっとじっくり考えてみます。   　　 じゃ、また。   　　   ","categories": ["サーバ構築","自作PC"],
        "tags": ["Fedora"],
        "url": "/2009/06/20/20002015/",
        "teaser": null
      },{
        "title": "Windows7 RC ダウンロード！",
        "excerpt":"　　 今度、うちの新しいメインマシン（Ｗｉｎｄｏｗｓマシン）を自作した際に、インストールするＯＳを何にしようか考えた結果、最終的には「Ｗｉｎｄｏｗｓ７」にしようとほぼ確定させました。   今、別のマシンで使用しているＷｉｎｄｏｗｓＸＰは、もちろんライセンス（アクティベーション）の問題があるんで、多分無理でしょう？ というか、今時自作するマシンでＸＰは古いし、力不足？って思うし。。。   ということで、とりあえず自作してすぐは「Ｗｉｎｄｏｗｓ７ＲＣ版」をインストールしてみます。（使用期限があるんで、もちろん試用してみる程度です）   最終的には、本リリース版をインストールしてみるつもりです。   本リリース版が出るまでの間、いろいろＯＳをインストールしてみて、ちょっと遊んでみる！ってのも「あると思います！！！」   というわけで、「Ｗｉｎｄｏｗｓ７ＲＣ」のＩＳＯファイルをダウンロードしてみました。   こちらのページ（ http://www.microsoft.com/japan/windows/windows-7/download.aspx ）へアクセスすれば、ダウンロードできます。   今回は６４ビット版をダウンロードしてみました。   「言語の選択」のコンボボックス（ドロップダウンリスト）で「日本語」を選択して、「ＧＯ」！   ただし、ダウンロードには「Windows Live ID 」というのが必要みたいです。   「MSN Hotmail」、「MSN Messenger」、または 「Passport」 のアカウントが必要とのことなんで、たしか以前登録したことのある「Microsoft Passport Network」のアカウント（メールアドレス）とパスワードを入力してみました。      しかし、ＩＤ・パスワードが違うって拒否されてしまうんで、あらためて「Windows Live ID」を登録しなおしました。      あれこれ、登録にちょっとだけ手間がかかったけど、無事ダウンドードが始まりました。   途中でプロダクトキーが表示されるんで、メモもしくは画面を保存するなどしておく。      でも、ダウンロードが始まったけど、「３．２３ＧＢ」もあるではありませんか？！   うちはＡＤＳＬ環境なんで、何時間かかるんだか・・・   朝起きたら、無事に終わってますように・・・   　　 というか、寝るまでに終わりました。   ２時間チョットでした。   とりあえず、今日はダウンロードだけ。。。   ＩＳＯファイルはまた、ＤＶＤに焼き付けます。   　　 じゃ、また。   　　   ","categories": ["PC_Tips","自作PC"],
        "tags": ["Windows"],
        "url": "/2009/06/21/21002058/",
        "teaser": null
      },{
        "title": "スリムドライブ外付けケース！",
        "excerpt":"　　 今日は、ＤＶＤスリムドライブ用の外付けケースについてです。   今うちのメインマシン（ＷｉｎｄｏｗｓＸＰ）で使用している５インチベイ内蔵のＤＶＤドライブを、 今度新たに自作しようとしているマシンに取り付けたいと思っているところです。 （ホントは新調したいところですが、チョット節約しないといけいなんで）   写真の下側の白いマシンについているＤＶＤドライブのこと。 （写真上側の黒いマシンはＦｅｄｏｒａサーバ）      そこで、上の写真の黒いＦｅｄｏｒａサーバについているＤＶＤスリムドライブを、ＵＳＢ接続の外付けにして、白いＷｉｎｄｏｗｓマシンでも他のマシンでも共用できるようにしたいと思い、外付け用のケースを購入しました。 マーシャルのケースでした。         早速、ＦｅｄｏｒａサーバからＤＶＤスリムドライブを取り外して、外付けケースへ実装してみました。   まず、Ｆｅｄｏｒａサーバを停止させないといけないんですが、前回Ｆｅｄｏｒａサーバをリブートしてから１月半くらい（あとチョットで４９日）安定稼働していたんで、シャットダウンさせるのが非常に心苦しかった・・・ ま、仕方ないか。      こちらがＦｅｄｏｒａサーバから取り出したＤＶＤスリムドライブ。      （スリムドライブ→ＩＤＥドライブ変換コネクタがついています）   ＤＶＤスリムドライブを取り除いたＦｅｄｏｒａサーバは最初についていたフタをして、電源ＯＮ！      （この際なんで、マシン分解時にエアダスタでホコリを吹き飛ばしておきました）   そして、ＤＶＤスリムドライブを外付けケースに取り付けました。         そして、動作確認です。 ＵＳＢバスパワーで動作させるにはＵＳＢケーブル２本（付属）が必要のようです。 ＵＳＢケーブルを２本つなげると、自動で認識しました。      で、ためしにＤＶＤディスクを入れてＤＶＤを鑑賞してみました。 ＯＫでした。   ＵＳＢケーブルで電源が足りないようなら、付属のＡＣアダプタでも使用できるんで安心です。   　　 今日はこのへんで。   　　 じゃ。   　　   ","categories": ["自作PC"],
        "tags": [],
        "url": "/2009/06/22/22002039/",
        "teaser": null
      },{
        "title": "ＣＰＵクーラー、ゲット！",
        "excerpt":"　　 今僕が一番欲しいと思っているＰＣケースが店頭にあれば、実際にこの目で確認してみたい、と思って、この間の日曜日、地元の「パソコン工房」へ行ってみました。   そしたら、ありましたよ。   「 Ａｎｔｅｃ 」の「 Ｐ１８３ 」というやつ。 −−−＞ こちら ＜−−−   やっぱり、カッコイイ！   ますます欲しくなった。   でも、この間は確認だけのつもりだったし、お金も用意してなかったんで、買いませんでした。   そのかわり、もうひとつ欲しいと思っていた、ＣＰＵクーラも店頭にあったんで、 ついそいつを衝動買いしてしまいました。   ＰＣケースに比べれば安いものだったんで。。。   購入したＣＰＵクーラは、 「 サイズ 」の「 ＳＫＢＴ−１０００ 」（通称、兜（かぶと））というの。   パッケージはこんな感じ。      そして、本体はこちら。      すげー。   付属品はこちら。      今まで、あんまりこんなゴッツイＣＰＵクーラを見たこと無かったんで、実物見て感動！ （もっとゴッツイのあるみたいだけど・・・）   なんか、斬新なデザインの現代建築みたい！   このＣＰＵクーラのいいところは、 ・意外と静音。 ・ファンからの風ががＣＰＵに向かって吹き付けるので、冷却効率がいい。  （ＣＰＵの周辺も冷却できる）   でも、高さが意外とあるけど、Ｐ１８３のケースに収まるんだろうか・・・   たぶん、大丈夫でしょう！（勝手に納得）   　　 さ、今度（多分、次の日曜日）は、Ｐ１８３を買うぞ！   　　 今日は、この辺で。   　　 じゃ。   　　   ","categories": ["自作PC"],
        "tags": [],
        "url": "/2009/06/23/23002012/",
        "teaser": null
      },{
        "title": "コマ大数学科ＤＶＤ－ＢＯＸ第２期！",
        "excerpt":"　　 今夜は、久々に「 数学 」関連の話題です。   といっても、ＤＶＤを買ったというだけですが。。。   フジテレビ系で深夜（？、うちの地元では深夜）に放送している 「 コマネチ大学数学科 」 のＤＶＤ第２弾です。   でも、確か今は第５弾（？）位まで発売されているはずですが。。。   ほぼ毎回、テレビは録画はしていますが、やっぱＤＶＤのキレイな画像で保存しておきたいんで、購入しました。   もちろん、「 アマゾン 」で。 こちら↓↓   ※ちなみに、第２期バージョンは、鉛筆２本と消しゴム１個がついていました。   ちょっと、まとまった時間ができたときに鑑賞するつもりで揃えていっているところです。   やっぱ、地上アナログを録画したものより、ＤＶＤはヒジョウーっにキレイっ！   全部、揃える気満々です！   　　 久々の、「 数学 」話題でした。   　　 じゃ。   　　   ","categories": ["数学"],
        "tags": [],
        "url": "/2009/06/24/24002044/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１１ダウンロード！",
        "excerpt":"なんかこの間、「 Ｆｅｄｏｒａ 」の最新版「 Ｆｅｄｏｒａ１１ 」がリリースされたみたいです！   今、うちの「 サーバ 」とか「 玄箱 」とか「 Ｆｅｄｏｒａ１０ 」で稼動中で、意外と安定しているんで、「 Ｆｅｄｏｒａ１１ 」にアップグレードするつもりは無かったんだけど、やっぱダウンロードはしておきたいなと思って、今日ダウンロードしました。   で、ダウンロードサイトへ行ってみたら、 「注意ftpでダウンロードを推奨します。」 なんて注意書きがあったんで、   忠告どおり、こちら（ ftp://ftp.yz.yamagata-u.ac.jp/pub/linux/fedora/linux/releases/11/Fedora/i386/iso/ ）からダウンロードしました。   今回はｉ３８６版のＤＶＤバージョンである 「 Fedora-11-i386-DVD.iso 」 をダウンロードしました。 というか、今ダウンロード中！ （ＡＤＳＬ環境なんで、あと３時間だって）   今日は、ただダウンロードだけにしときます。   明日以降、ＤＶＤに焼き付けて、とりあえず保管。。。   気が向いたら、いつか、ＶＭｗａｒｅなんかにインストールしてみます。   結局、今ＩＳＯファイルをダウンロードしても、 現在稼動中の「 Ｆｅｄｏｒａ１０ 」はこのＩＳＯファイルなんか使わずに、アップグレードしてしまうと思いますが。。。   ま、でも、とりあえずは今稼動中のサーバとかは「 Ｆｅｄｏｒａ１１ 」にアップグレードする気はありません。 やっぱ、まだ、信頼できるかどうか未確認なんで・・・ そいじゃ。。。   ","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2009/06/25/25002021/",
        "teaser": null
      },{
        "title": "Loto6 No.451",
        "excerpt":"まいどです。   　　 昨日ののロト６（第４５１回）の結果です。   今回は、またいつものように「大はずれ」です。   でも、前回とりあえず久しぶりに¥１，０００当たって、「振込」があって、今後に期待という感じです。   「振込」といういのは、僕はいつも「数字選択式宝くじ」は自分が口座をもっている銀行のＡＴＭで自分の口座から購入しているんで、もし当選があれば、口座に振り込まれるようになっているからです。。。   宝くじ売り場ではここ何年と購入していないです。 なぜなら、毎回違う数字を購入するのにイチイチマークシートを記入してなんかおられないから。。。 購入する場所も時間も非常に制限されるし。。。。 また、仮に当選したとしても、売り場やみずほ銀行へ出向かなければいけないし・・・   ま、とういわけで今夏の 　　 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/06/26/26002031/",
        "teaser": null
      },{
        "title": "ISOイメージ破損チェック！",
        "excerpt":"先日、Fedora11 の ISO イメージファイル（DVD/i386版）をダウンロードしたんだけど、ダウンロード中に Windows マシンがスタンバイ状態に移行したりしてたんで、ファイルが正常にダウンロードできているか不安でした。 Fedoraで自宅サーバー構築 を見てみると、ISO ファイルが破損していないかどうかチェックできるツール「CHECKSUM」が紹介してありましたんで、早速実践してみました。 こちら（ Fedora 11インストール ）を参考にさせてもらいました。 以下がその手順です。 １．こちら のファイルを “Fedora-11-i386-CHECKSUM.txt” という名前で ISO ファイルと同じフォルダに保存する。 （当方の場合、「 D:\\70_Soft 」というフォルダです） ２．こちら から “sums.zip” をダウンロード＆解凍し、”sha256sum.exe” というファイルを ISO ファイルと同じフォルダにコピーする。 （当方の場合、「 D:\\70_Soft 」というフォルダです） ３．コマンドプロンプトで以下のように実行させる。 C:\\Documents and Settings\\hoge＞d: # ← 目的のファイルのあるドライブへ移動 D:\\＞cd 70_Soft # ← 目的のファイルのあるフォルダへ移動 D:\\70_Soft＞sha256sum --check Fedora-11-i386-CHECKSUM.txt # ←...","categories": ["サーバ構築"],
        "tags": [],
        "url": "/2009/06/27/27002058/",
        "teaser": null
      },{
        "title": "環境対策で充電池！",
        "excerpt":"　　 今日は、最近個人的に実践しているエコ対策です！   といっても、乾電池は使わずに充電専用の電池を使用しているだけですが。。。   ここ１年くらいは、家庭用コンセントから充電できるキットを購入して、自分の部屋のコンセントから充電池を充電してその電池を色々と使用していました。 こちらで。         ＳＡＮＹＯの「 ｅｎｅｌｏｏｐ 」です。   で、最近ＵＳＢ機器を電池で使用したいと思っていて、 街の電気屋さんで探していたら、 同じ「 ｅｎｅｌｏｏｐ 」シリーズでＵＳＢ充電ができて、しかもそいつにＵＳＢ機器を接続してそのまま使用できるものが販売されていたんで、速攻購入しました。   それは、こちら。            充電はＵＳＢ限定です。 付属のケーブルで充電できます。 で、ＵＳＢ機器はこの機械の充電時とは反対側に接続すれば、使用できるようです。   実は、今日仕事帰りに購入したばかりなんで、まだ実用していませんが、説明書見る限りそんな感じです。   ＵＳＢ機器をパソコンにつながなくても（電池で）使用できるものを探していたんで、とりあえずはバッチリの買い物だったと思ってます。   でも、もっとエコなことを考えれば、 太陽光で充電できて、そのままＵＳＢ機器が使えるものがあるといいんだけど。。。 ※電池を太陽光で充電できるものはあるけど。。。   多分、いつか発売されるでしょう。。。 色々とエコな商品が出ている世の中なんで。。。   　　 それでは、また。。。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/06/28/28002015/",
        "teaser": null
      },{
        "title": "ＮＴＦＳ圧縮の解除！",
        "excerpt":"時々、ＷｉｎｄｏｗｓＸＰマシンでディスククリーンアップを実行していてんですが、この中に古いファイルを圧縮する機能があって、そいつの設定はデフォルトで「 ５０日間 」アクセスが無いファイルを圧縮するようになっています。 ※この機能はディスクがＮＴＦＳフォーマットされている場合限定のようです。   なので、フォルダ内を見てみると、圧縮されたファイル（青字）と圧縮されていないファイル（黒字）が混在していることになります。   昔、容量の小さいハードディスクを使用している時なんかはチョット効果があったかもしれませんが、実はこの圧縮ファイルが混在していると動作が重くなるようです。 混在というか、圧縮ファイルは読み込むときにいちいち展開しながら読み込むから、当然でしょう！   というわけで、自分はＮＴＦＳ圧縮機能は使用しないようにしています。 （というか、そのように戻しました）   ドライブ丸ごと、圧縮を解除するには以下のようにします。   １．エクスプローラでドライブ直下の内容を表示させる。      上記のようにドライブ直下に圧縮されているファイルかフォルダが存在しないといけません。 もしも、ドライブ直下に圧縮されているファイルかフォルダが存在しなければ、手動で何か１つでも圧縮をかけておけばいいです。   ２．ドライブ直下のファイルを全選択、右クリックして「プロパティ」を選択する。      ３．「詳細設定」で「内容を圧縮してディスク領域を節約する」についているチェックをはずす。            ４．「ＯＫ」・「ＯＫ」で確認画面が表示されるので、「選択した項目、およびサブフォルダとファイルに変更を適用する」にチェックがついていることを確認して「ＯＫ」ボタンをクリックする。         ５．圧縮解除が始まるので、小一時間待つ。      以上です。   最近はハードディスクも大容量化しているので、あえて圧縮する必要性も無いように思います。   チョット前のマシンでどうしても容量を確保したい場合にのみ使用してみましょう！ってことか。   それでは。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/06/29/29002040/",
        "teaser": null
      },{
        "title": "ＰＣケース購入！",
        "excerpt":"　　 今日、ついにＰＣケースを購入しました。 Ａｎｔｅｃ の「 Ｐ１８３ 」です。 （ちなみに 「 Ｐ１８３ 」が発売される前までも、同じＡｎｔｅｃの「 Ｐ１８２ 」がいいなと思ってました ） 地元のパソコン工房に有るのを確認済みだったので、他のケースには目もくれず迷わず購入！ 価格は¥２０，０００チョットでした。   外箱の様子はこちら。      意外とデカいです。 幅・高さが６０ｃｍくらい、奥行きが３０ｃｍくらい。 でも、外箱もカッコイイっすね～。   そして、本体を出してみました。      この落ち着いた感じ、高級な感じがいいネェ！ 表面のフィルムは当分付けたままにしときます。 見た目は重そうですが、実際も非常に重いです。 １４Ｋｇくらいあるみたい。   付属品はこちら。      簡単な取説とネジ類他です。   そして、こちらがケースの内部です。      なんか、キレイというか機能的っぽい？ 実際にこのケースに自作してみて、このケースの真の実力が明らかになるとは思いますが、いろんな記事を見てみた限り、エアフローも考えてあるし、マザーボードの裏側に配線を通せるし、電源部分が別に仕切ってあるんで電源の放熱がケース内に充満しないようになっているし。。。   　　 ケースが手に入ったことで、これからやっと自作の作業に取り掛かれます。 （一応、パーツは揃っているはずなんで）   自作作業については、今後随時ご報告（というか記録）してきます。   　　 それでは、また。   　　   ","categories": ["自作PC"],
        "tags": ["Antec","P183"],
        "url": "/2009/06/30/30002040/",
        "teaser": null
      },{
        "title": "Ｐ１８３で自作・その１！",
        "excerpt":"先日、やっとＰＣケースＡｎｔｅｃ「Ｐ１８３」を購入しんたんで、早速自作作業に取り掛かってみました。 ちょっと失敗して作業をやり直したりしてますが、失敗も勉強のうちということで、ご勘弁を！   ちなみに、自作にあたっては各種ＰＣ自作関連の雑誌を参考にしています。 このブログでは、細かいところまでは説明しません。   実際には、一気にチョット先まで作業を進めていますが、少しずつ投稿していきます。   とりあえず、今日は、マザーボードにＣＰＵ・ＣＰＵクーラ・メモリを装着するところまでとします。   では、早速。   作業手順   １．マザーボードの準備   マザーボードを箱から出し、箱の上に乗せる。 （マザーボードの箱を作業台として使用する）      ※このマザーボードは、ＡＳＵＳＴｅｋの「 Ｐ５Ｑ Ｄｅｌｕｘｅ 」です。   ２．ＣＰＵソケットの準備   マザーボードのＣＰＵソケットのカバーを開放する。 （サイドのレバーをはずして、起こす）      ３．ＣＰＵのセット   マザーボードのＣＰＵソケットへ向きに注意してＣＰＵをセットし、ＣＰＵソケットのカバーを閉じる。 （サイドのレバーを元に戻す）         ※このＣＰＵは、Ｉｎｔｅｌの「 Ｃｏｒｅ２Ｄｕｏ Ｅ８５００ 」です。 （Ｃｏｒｅ ｉ７ がはやりつつある昨今で、チョットだけ古いですが、まだまだ何年も使用できると確信しています）   ４．ＣＰＵクーラの準備   今回はＣＰＵ付属のＣＰＵクーラは使用せず、別途購入したＣＰＵクーラを取り付けます。 今回使用するマザーボートへ取り付けるためのアタッチメント（ＬＧＡ７７５用）をＣＰＵクーラへ取り付けます。      ※このＣＰＵクーラは、サイズの「 ＳＫＢＴ−１０００ 」（通称、兜（かぶと））です。   ５．ＣＰＵクーラの取り付け   ＣＰＵへＣＰＵクーラに付属のグリスを薄く均一に延ばし、ＣＰＵクーラを取り付ける。 （ＣＰＵクーラの取り付け方は、ＣＰＵクーラの取説を参照して）         ６．メモリの取り付け   こちらのメモリを、２枚セットで取り付ける。 （２枚セットで取り付けるタイプのマザーボートなので） マザーボードへはメモリを４枚取り付けられるが、今回は「ＤＩＭＭ＿Ａ１」と「ＤＩＭＭ＿Ｂ１」へ取り付ける。 （さらに増設するときには「ＤＩＭＭ＿Ａ２」と「ＤＩＭＭ＿Ｂ２」へ取り付ける）           という感じで、自作を楽しんでいます。   次回はマザーボードをケースに取り付けた後、電源・グラフィックボード・ハードディスクを取り付けるところまでやります。   それでは、また。   ","categories": ["自作PC"],
        "tags": ["Antec","P183"],
        "url": "/2009/07/01/01002036/",
        "teaser": null
      },{
        "title": "商工会議所から封筒が！",
        "excerpt":"　　 そう言えば、６月１４日の日曜日に「 日商簿記検定３級 」の試験を「「 初 」」受験していました。   今だから（？）言えるけど、試験内容は、 普段の経理の仕事の内容そのもの＆チョットした応用、でした。   でも、あんまり勉強ができなかったし、「なんとなく」で解答した箇所もあったんで、期待していませんでした。   なので、地元の商工会議所のホームページとかで合格発表がされていましたけど、確認しませんでした。   合格者には後日、「合格証書」が郵送されるとのことだったので、あまり期待せずに（でもチョット気にはしていましたが）待ってました。   そして、今夜仕事から帰宅したら、商工会議所からチョット大き目の厚紙が入っていそうな封筒が届いていました。   もしかして、っと思っていましたが、なんと   「 合　格　証　書 」   でした。   こちらがその証書です。      合格だったら、商工会議所のホームページの合格発表のページも観てみようと思って観てみました。   もちろん、受験番号がありました。   というわけで、チョット「 テンション」 ＆ 「 モチベーション 」がアップした夕べのひとときでした。   日商簿記「３級」は簿記の基本というか、個人商店向けなんで、 個人商店でない中小企業のうちの職場とかは、やっぱ「 ２級 」でしょ。   というか、「 ２級 」の準備ということでの「 ３級 」受験でした。   という訳で、次は「 ２級 」合格を目指してがんばりスマッシュ！   　　 じゃ。   　　   ","categories": ["その他"],
        "tags": [],
        "url": "/2009/07/02/02002049/",
        "teaser": null
      },{
        "title": "Loto6 No.452",
        "excerpt":"まいどです。   　　 昨日ののロト６（第４５２回）の結果です。   私にとっては今日は非常におだやか（静かな）結果でした。   　　 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/07/03/03002053/",
        "teaser": null
      },{
        "title": "Ｐ１８３で自作・その２！",
        "excerpt":"今、やっと自作マシンを組み立て始めたところで、前回はマザーボードへＣＰＵ・ＣＰＵクーラ・メモリと取り付けるところまでしました。   で、今回はマザーボードをＰＣケースにセットしたところを公開します。   作業手順   １．ＰＣケースの準備   まず、ＰＣケース（ミドルタワー型）の側面のフタをはずします。      実にキレイだ（新品だし・・・） ※使用したＰＣケースはＡｎｔｅｃの「 Ｐ１８３ 」です。   ２．電源の準備   まず、電源を取り付けます。 コイツ↓      赤い羽根がイイね～！ ※使用した電源は、ENERMAX の「 ECO80+ EES500AWT 」です。   ３．電源の取り付け   で、カッコイイ羽根がみえるよう電源を取り付けて見ました。      しかし、ＰＣケース背面をみるとシールが逆になっているではないですか。      だいたい、ＰＣけーすに電源を取り付ける場合、ＰＣケースの天板側に取り付けるからでしょう。 というわけで、赤い羽根が底面になるように取り付けなおしました。      幸い、底面に１ｃｍくらい空きがるんでエアフロー的にも問題ないと判断しました。   ４．バックパネル取り付け   ＰＣケース背面に標準でついているバックパネル      は、取り付けようとしているマザーボートと型が異なるので、マザーボード付属のバックパネルに取り替えます。         ５．ハードディスクの準備   今回は以下の２つのハードディスクを取り付けます。 写真がぼやけていてよくわかりませんが、どっちかが５００ＧＢで、もう一方が１ＴＢのＨＩＴＡＣＨＩのディスクです。      ６．ハードディスクの取り付け   このようにＰＣケースの３．５インチベイがずらせるようになっています。 これは便利だ。      しかも、ずらしたボックスの横にはネジ類を保管できる収納ボックスみたいなのが付いています。      で、３．５インチベイへはトレイにネジ止めする仕様なんですが、シリコンゴムのようなクッションが付いているので、静音仕様だということがわかります。            そして、トレイをボックスへス～っとセットします。      最後にボックスをＰＣケースへ格納します。        先が長いので、とりあえず今日はここまでにしておきます。   次回は、ケーブル類の接続についてになると思います。   では。   ","categories": ["自作PC"],
        "tags": ["Antec","P183"],
        "url": "/2009/07/04/04002011/",
        "teaser": null
      },{
        "title": "Ｐ１８３で自作・その３！",
        "excerpt":"前回は、マザーボードをＰＣケースに取り付けるまで行いました。   と言いながら、マザーボード自体を取り付けるところが抜けてましたね。   ま、ネジ穴に合わせてで固定するだけでした。。。   で、今回は、ケーブル類を接続してみました。   以下の説明ではわかりにくいところがあるかもしれませんが、あくまでも自分用の記録なので、あしからず。です。   作業手順   １．ＰＣケースからマザーボードへの接続   ＰＣケースに備え付けのケーブルをマザーボードへ接続するのですが、このようなアダプタに接続してからまとめてマザーボードへ接続するようです。      ＰＣケースから出ているケーブルをアダプタへ接続します。 今回の場合、電源ＬＥＤ・電源スイッチ・リセットスイッチ・ハードディスクＬＥＤでした。 （元から無いものもありました）         そして、このアダプタをマザーボードのこの部分（下の写真の右下）へ差し込みます。         ２．ＵＳＢケーブルの接続   ＰＣケース内のＵＳＢのケーブルをセットします。            ３．ＳＡＴＡケーブルの接続   ＰＣケース内のＳＡＴＡケーブルをセットします。         ４．オーディオケーブルの接続   ＰＣケース内のオーディオ用ケーブルをセットします。         ５．ハードディスの接続   ＳＡＴＡハードディスクのケーブル（データ用・電源用）をセットします。         ６．電源ケーブルの接続   電源ユニットのメインケーブルをマザーボードへセットします。         電源ユニットの＋１２Ｖケーブルをマザーボードへセットします。 今回使用のマザーボードへは、２つにわかれているケーブルのうち、形に合う方をセットします。 （２つをそろえてセットできるマザーもあるようです）      ７．ケースファン用電源ケーブルの接続   ＰＣけース内のケースファンの電源ケーブルを電源ユニットから出ているケーブルへ接続します。           疲れたんで、今日はこの辺で。   次回は、グラフィックボードを取り付けてみます。   じゃ。   ","categories": ["自作PC"],
        "tags": ["Antec","P183"],
        "url": "/2009/07/05/05052038/",
        "teaser": null
      },{
        "title": ".NET Framework 削除！",
        "excerpt":"　　 最近、ダウンロードしたソフトをインストールしようとしたら、Ｍｉｃｒｏｓｏｆｔ「 .NET Framework 1.1 」が必要とのことだったので、「 .NET Framework 2.0 」や「 .NET Framework 3.0 」はインストール済みだったけど、「 .NET Framework 1.1 」をインストールしようとしました。 Ｍｉｃｒｏｓｏｆｔのサイトから「 .NET Framework 1.1 」をダウンロードして、ＥＸＥファイルを実行させました。 しかし、ほぼインストール作業が終了しているであろうと思う所でインストーラが止まってしまいます。 タスクマネージャで強制終了しようとしてもなぜか終了しない！ 仕方ないのＣＴＲＬ＋ＡＬＴ＋ＤＥＬでマシンを再起動しようとしてもマシンが再起動しない！ （シャットダウンもできない！） なので、マシンのリセットボタンで強制的にリセット。 何回か同じことをしてみたけど、結果は全部同じでした。 もしかして、「 .NET Framework 2.0 」や「 .NET Framework 3.0 」がインストールされているのが悪いのか？ だとしたら、まずアンインストールしてからと思い「 .NET Framework 3.0 」をアンインストールしようとしました。 しかし、こちらもアンインストールがほぼ終了しているであろうと思うところで処理が止まっているではないですか？ ここで、やっとインターネットで調べてみました。 すると、やっぱ不具合があるようでした。 詳しいことはよくわかりませんが、モジュール「 ＫＢ９２８３６５ 」とかっていうのが削除できないようです。 （...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/07/06/06002019/",
        "teaser": null
      },{
        "title": "ＯＣＲソフト！",
        "excerpt":"　　 今日はＯＣＲソフトについてのお話です。 ＯＣＲとは、[ Optical Character Reader ]の略で、日本語では[ 光学式文字読取装置 ]というようす。 スキャナで読み取った画像などから文字を識別して文書に変換することができます。 で、時々昔のワープロで作成・印刷された古い文書を編集したい、というようなケースがあると思います。 データが残っていれば、なんとか変換して今のパソコンで編集できるようになるとは思いますが、データ自体が残っていません。 そんな時、ＯＣＲソフトで読み取って、今のパソコンで編集できるようにします。 今回、そんなケースが発生したので、ソフトを探してみました。 フリーでもありましたが、日本語認識率が非常に悪いみたい！ この手のソフトはフリーでは、ロクなのがないようです。 仕方なく、有償版を探してみました。 「 e.Typist 」というのがよさそうだったので、早速ベクターでダウンロード購入しました。（他にもよさそうなのが何個かありました） 価格は ¥１３，４４０ でした。 （パッケージ版は、¥２０，７９０ なので、ダウンロードがかなりお得です） ダウンロード購入後、ベクターからライセンスキーの案内メールが届くので、メール内のリンクをクリックしてライセンスを取得します。 そして、同じ画面からダウンロードします。 （３００ＭＢ近くあります） ダウンロードが完了したら、普通に解凍して、普通にインストール（et12.exe）します。 （途中で、先程取得したシリアルナンバーを入力します） インストールが正常に終了したので、実際に使用してみました。 こちらが起動直後の画面です。 今回はファイル（ＪＰＥＧのスキャンファイルの切抜きを準備しました）から画像を読み込みます。 ファイルを指定して開くとこのように画像が開きます。 文字を認識させた居場所を指定します。 今回は小さな画像なので自動レイアウト認識を実行しました。 そして、文字認識を実行させます。 うまくできているようです。 認識結果をファイルとして保存します。 確認してみます。 読み込んだスキャン画像と認識結果はこちら。 スキャン画像が意外ときれいだったからか、ほぼ完璧な認識でした。 「 （ 」 が 「 〔 」 になっているくらい。...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/07/07/07002056/",
        "teaser": null
      },{
        "title": "0xc000135 エラー！",
        "excerpt":"　　 今日、自分の作成したVBアプリを動かしたら、こんなエラーが発生！      でも、すぐに見当がつきました。   この間、「 .NET Framework 」の不具合があったために「 .NET Framework 」を完全にアンインストールしていたからだと。   案の定、調べてみたらそのようなことが掲載されているサイトがいくつかありました。   「 .NET Framework 」がインストールされていないからとのこと。   早速、インストールしました。 一応、最新バージョン（３．５）を。 インストール後、ＷｉｎｄｏｗｓＵｐｄａｔｅでサービスパックも適用。 これでOKでしょう！   早速、自作のVBアプリの起動を確認。 動きました。   とりあえず、「 .NET Framework 」の問題は解決しました。。。   　　 じゃ。   　　   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/07/08/08002055/",
        "teaser": null
      },{
        "title": "Ｐ１８３で自作・その４！",
        "excerpt":"今、自作中のP１８３。   今日は、グラフィックボードとＤＶＤドライブをセッティングしました。   今回ＰＣケース「Ｐ１８３」に取り付けるグラフィックボードはこちら。      ASUSTeKの 「 EN9600GT/HTDI/512M/R3　GeForce 9600GT/PCI-E(t162109) 」 です。   このグラボはＰＣＩ−EXPRESSなので、PCケースのPCI−ＥＸＰＲＥＳＳのところのカバーをはずします。 （もちろんマザーボードのPCI−ＥＸＰＲＥＳＳの場所も確認して）      そして、グラフィックボードを取り付けます。 （なぜか、これは写真撮り忘れました）   そして、グラフィックボードにアナログディスプレイを接続するためのアダプタを取り付けました。 （今、所有しているディスプレイはＤＶＩ接続もできますが、そちら側は今メインで使用しているマシンに接続しているんで、他の古いマシンにつながっていたアナログ用ケーブルで接続することにしました。とりあえず）      でも、近い将来（？）、ディスプレイを買い換えるつもりです。 （今使用中のディスプレイがチョットおかしいんで・・・）   そして、こちらがとりあえずパーツ組み込み後のニュー自作マシン「Ｐ１８３」（マザー：ASUSTek「P5Q Deluxe」）です。。。   まだ、ケース外側のビニールっぽいフィルムはつけたままです。。。   ちょっと、安心していたら、ＤＶＤドライブをセットするのを忘れていました。   ＤＶＤドライブをセットします。   ＰＣケース「Ｐ１８３」の５インチベイのプラスチックのカバーをはずすと、まだ金属製のカバーのようなものがついていました。      この金属製のカバーはビミョーにくっ付いているだけなので、何回かよじれば簡単に取れます。      で、今回取り付けるＤＶＤドライブはこちら。      今までメインマシンで使用していたアイオーデータのＤＶＤドライブです。   今回のＰＣケース「Ｐ１８３」へＤＶＤドライブ等を取り付けるには、まずこのようなアダプタのようなものをＤＶＤドライブに取り付けるようです。 これによって、ＰＣケースにネジ止めしなくてよくなります。      こいつをこのようにＤＶＤドライブに取り付けます。      そして、スーっとＰＣケース「Ｐ１８３」へスライドさせて挿入します。      すると、このようにカチャっとケースにきれいにはまります。 （カチャっとはまっても突き出たり、引っ込んだりする場合は、ネジ止めの位置を調整します）      そして、ＩＤＥケーブルと電源ケーブルを接続します。      これで、とりあえずパーツのセッティングは終了だと思います。   いよいよ、次回は、ＯＳ（Ｗｉｎｄｏｗｓ７ＲＣ版）をインストールしてみます。   じゃ、また。   ","categories": ["自作PC"],
        "tags": ["Antec","P183"],
        "url": "/2009/07/09/09002005/",
        "teaser": null
      },{
        "title": "Loto6 No.453",
        "excerpt":"まいどです。   　　 昨日ののロト６（第４５３回）の結果です。   今回は１口当選！！ １０００円ですが。。。 全然、モトがとれましぇ～ん！！！   　　 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/07/10/10002008/",
        "teaser": null
      },{
        "title": "Windows7RCインストール！",
        "excerpt":"　　 今日は、ホヤホヤの自作マシンにＷｉｎｄｏｗ７ - ＲＣ版をインストールしてみました。   前もって、マイクロソフトのサイトからダウンロードしてＤＶＤに焼いていたディスクを使用しました。 こちら。      ３２ｂｉｔ版と６４ｂｉｔ版をダウンロードしてＤＶＤに焼き付けていましたが、今回はとりあえず３２ｂｉｔ版をインストールしてみました。   もちろん、ＢＩＯＳでＤＶＤドライブから起動するようにしてからです。   インストールはこんな感じで。            なんか、異常にすんなりインストール完了でした。   起動後の画面はこちらです。      インストール作業は以上で完了です。   細かな動きは確認していません。   とりあえず、Ｗｉｎｄｏｗｓ７がインストールできるかどうかの確認だけのつもりでした。   やっぱ、ＷｉｎｄｏｗｓＸＰをインストールしてみたいんで、次はＸＰのインストールをしてみたいと思います。   　　 それでは。   　　   ","categories": ["PC_Tips","自作PC"],
        "tags": ["Windows"],
        "url": "/2009/07/11/11002024/",
        "teaser": null
      },{
        "title": "CTRL + ALT + DEL でのログイン！",
        "excerpt":"こんんばんは。 うちのＷｉｎｄｏｗｓマシン達は、ログインするときに「ＣＴＲＬ」＋「ＡＬＴ」＋「ＤＥＬ」を押下しないとログインできないようにしています。 なぜなら、そうしないとセキュリティ上問題があると聞いたことがあるからです。 大体、会社で使用するパソコンって、セキュリティ上ログインするときに「ＣＴＲＬ」＋「ＡＬＴ」＋「ＤＥＬ」を押下するようになっているはずです。 で、一体どんなセキュリティ上も問題があるのかって思ってたんですが、「ログイン画面の偽装」ってのに対応するためみたいです。 その「偽装ログイン画面」というのは、「ＣＴＲＬ」＋「ＡＬＴ」＋「ＤＥＬ」押下しないといけないマシンでは不可能みたいです。 というわけで、「ＣＴＲＬ」＋「ＡＬＴ」＋「ＤＥＬ」を押下しないとログインできないように設定するにはどうしたらよいかというと。 作業手順 １．「 管理ツール 」 − 「 ローカル セキュリティ ポリシー 」 画面を開く。 ２．「 セキュリティの設定 」 − 「 ローカル ポリシー 」 − 「 セキュリティ オプション 」 を開く。 ３．「 対話型ログオン：Cｔｒｌ ＋ Alt ＋ Del を必要としない 」 の設定を 「 未定義 」 から 「 無効 」 に修正する。 （...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/07/12/12002053/",
        "teaser": null
      },{
        "title": "自作マシンにＷｉｎｄｏｗｓＸＰ！",
        "excerpt":"　　 先日、念願の自作したマシンにＷｉｎｄｏｗｓ７ＲＣ版をインストールできることは確認できました。   これで、本リリース時には安心してインストールできると思います。   しかし、今Ｗｉｎｄｏｗｓ７ＲＣ版をインストールしても、使用期限があるので、メインマシンのＯＳとしては使えません。   そこで、今まで使用していたマシンのＷｉｎｄｏｗｓＸＰ・Ｐｒｏをインストールしてみました。   別にインストール方法はここで説明しません。   普通にインストールするだけです。   インストールはすんなり完了！   で、心配なのが、「 アクティベーション 」。   使用中のWindowsＸＰが正規の製品かどうかの認証です。   普通、別のマシンにＸＰをインストールすると、オンライン認証ができず、電話でセンターに問い合わせないといけないんですが、、、   なんと、うまく認証されました。   実は、今まで使用していたマシンのＤＶＤドライブを新しい自作マシンに移設していたのがよかったのかもしれません。 （ハードの構成をチェックして、認証しているようなのですが、ＤＶＤドライブだけでよかったのか？？？）   ま、とりあえずはＯＫということで。。。   これから、今までのメインマシンの環境を新しい自作マシンでなるべくそのまま再現できるようにセットアップしていくことにします。   　　 今日はこのへんで。   　　 じゃ。   　　   ","categories": ["自作PC"],
        "tags": ["Windows"],
        "url": "/2009/07/13/13002033/",
        "teaser": null
      },{
        "title": "ﾌｧｲﾅﾙﾌｧﾝﾀｼﾞｰでベンチマーク！",
        "excerpt":"　　 今日は、ニュー自作マシンのベンチマークテストをしてみました。 昔、使ったことのあるソフトで 「 ファイナルファンタジー 」 の 「 オフィシャルベンチマークソフト 」 というのです。 （ こちら を参照 ） まずはソフトをダウンロードします。 こちら の説明の中にあるダウンロードサイトの中のどこかからダウンロードできます。 ダウンロードしたら、普通にインストールします。 そして、実行させます。 （ 途中、「 同意する 」 ・ 「 同意しない 」 が表示されたら、もちろん 「 同意する 」 を選択 ） するとこのような画面が表示されます。 とりあえず、高解像度でベンチマークテストを行いたかったんで、このような設定で実行させてみました。 鮮やかな映像とともにスコアがどんどん上がっていきます。 ５分くらいで終了しますが、画面がすぐに消えてしまいます。。。 スコアがいくらだったのかわかりません。。。 （ 最後にテスト結果のような画面が表示されると思ってたのに・・・ ） そこで、もう１回！ スコアを見逃さないように。 でました。 「** ９８９２ポイント** 」 このスコアがどうか？というと。 こちら...","categories": ["PC_Tips","自作PC"],
        "tags": ["Windows"],
        "url": "/2009/07/14/14002050/",
        "teaser": null
      },{
        "title": "WordPress – 2.8.1へアップデート！",
        "excerpt":"この間くらいから、ＷｏｒｄＰｒｅｓｓ が 「 ２．８．１ 」へアップデート可能のメッセージが出ていたので、今日、アップデートしました。   今まで使用していた「 ２．８ 」はなにやら不具合があったみたいですが、それらの不具合も解消されているようです。 （ どんな不具合があったのか、当方では発症しなかったで、よくわかりませんでしたが・・・ ）   例によって、データベースをバックアップし、ファイル類を丸ごとローカルにバックアップして、 稼動中のプラグインをすべて停止してから、自動アップデートを行いました。   すんなり終了！   プラグインを元通りに開始させて、いつもどおりの状態に。   簡単でいいですね～！   ちなみに、このブログサイトがＷｏｒｄＰｒｅｓｓのどのバージョンで運用されているかは、このサイトの右サイドバーの一番下に記載されています。 ＰＨＰソースに以下のコードを埋め込めばできます。 （ ＷｏｒｄＰｒｅｓｓ限定（？） ）    ``` php   ```   ま、今日はそれだけですワ。 簡単ですんまソン！   じゃ。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/07/15/15002023/",
        "teaser": null
      },{
        "title": "N-BENCHでベンチマーク！",
        "excerpt":"先日は、ニュー自作マシンを「 ファイナルファンタジー 」のベンチマークマークソフトでベンチマークテストを行いました。 今日は、「 Ｎ−ＢＥＮＣＨ 」という３Ｄベンチマークテストのフリーソフトでベンチマークテストを行ってみました。 ソフト自体は「 窓の杜 」からダウンロードしました。 インストールも普通にしました。 で、実行すると。 この画面の「 Run Benchmark 」ボタンをクリックすると、次々といろんなテストが始まります。 （ どんなテストが行われているのかは、不勉強でお答えできませんが・・・ ） １、２分するとテストが完了し、以下のような結果画面が表示されます。 比較対照の「 ＡＭＤ Ａｔｈｌｏｎ 」と比べると非常にいいんじゃないですか？（たぶん？） この画面で「 Ｓａｖｅ Ｆｉｌｅ 」ボタンをクリックすると、テキストファイルで保存ができます。 こんな感じで。 N-Bench Ver 3.1 Results File ------------------------------------------------------------------------------ [Info] ------------------------------------------------------------------------------ 2009/07/12 19:52:36 1305816344 ------------------------------------------------------------------------------ [System] ------------------------------------------------------------------------------ Processor Type Intel(R) Core(TM)2 Duo CPU E8500 @...","categories": ["PC_Tips","自作PC"],
        "tags": ["Apache","Windows"],
        "url": "/2009/07/16/16002030/",
        "teaser": null
      },{
        "title": "Loto6 No.454",
        "excerpt":"まいどです。   　　 昨日ののロト６（第４５４回）の結果です。   し～んっ！です。 　　 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/07/17/17002038/",
        "teaser": null
      },{
        "title": "Windows7RC をデュアルブート！",
        "excerpt":"　　 今日は、ＷｉｎｄｏｗｓＸＰ（ＳＰ３）をインストールした自作マシンに、「 Ｗｉｎｄｏｗｓ７ＲＣ版（６４ｂｉｔ） 」をデュアルブートできるようにインストールしてみました。 インストール作業自体は非常に簡単でした。 Ｗｉｎｄｏｗｓ７をインストールするパーティションを間違えないように注意してやれば、あとは流れのままに。。。 で、再起動させると、 「 Windows ブート マネージャー 」が表示されるので、そこで起動させるＯＳを選択できます。 Ｗｉｎｄｏｗｓ７をインストールした直後は、「 Ｗｉｎｄｏｗｓ７ 」がデフォルトになっています。 ＷｉｎｄｏｗｓＸＰを起動させたければ、「 以前のバージョンのＷｉｎｄｏｗｓ 」を選択します。 でも、Ｗｉｎｄｏｗｓ７はテスト的に使用するつもりなので、ＷｉｎｄｏｗｓＸＰ をデフォルトにしたいです。 で、ＷｉｎｄｏｗｓＸＰで「 システムのプロパティ 」 − 「 詳細設定 」 の 「 起動と回復 」 の 「 設定 」 画面で変更しようと思ったら、「 Ｗｉｎｄｏｗｓ７ 」 は選択できません。。。 ちょっとサイトでしらべてみたら、「 Ｗｉｎｄｏｗｓ７ 」側で設定するようです。 「 システムのプロパティ 」 − 「 詳細設定 」 の...","categories": ["PC_Tips","自作PC"],
        "tags": ["Windows"],
        "url": "/2009/07/18/18002028/",
        "teaser": null
      },{
        "title": "Windows7でAdministrator有効化！",
        "excerpt":"　　 この間、デュアルブートインストールした「 Ｗｉｎｄｏｗｓ７ＲＣ 」。 そういえば、ユーザアカウントが自分しか見当たらない。。。 「 Ａｄｍｉｎｉｓｔｒａｔｏｒ 」は？？？ どうやら「 Ａｄｍｉｎｉｓｔｒａｔｏｒ 」は、存在するんだけどデフォルトでは「 無効 」に設定されているみたいです。 「 有効 」化する方法は、 「 コントロールパネル 」 − 「 システムとセキュリティ 」 − 「 管理ツール 」 − 「 コンピュータの管理 」と開き、 「 システムツール 」 − 「 ローカルユーザーとグループ 」 − 「 ユーザー 」 とたどっていき、 「 Ａｄｍｉｎｉｓｔｒａｔｏｒ 」ユーザをダブルクリックします。 そして、「 アカウントを無効にする 」のチェックをはずします。 これで、ログオンしなおすと、「...","categories": ["PC_Tips","自作PC"],
        "tags": ["Windows"],
        "url": "/2009/07/19/19002052/",
        "teaser": null
      },{
        "title": "ﾃﾞｭｱﾙﾌﾞｰﾄのWindows7RCを削除！",
        "excerpt":"今、「 Ｗｉｎｄｏｗｓ７ＲＣ 」を「 ＷｉｎｄｏｗｓＸＰ（ＳＰ３） 」とデュアルブートするようにしているんですが、 この「 Ｗｉｎｄｏｗｓ７ＲＣ 」をインストールしたパーティションを切り直したくて、一旦「 Ｗｉｎｄｏｗｓ７ＲＣ 」を削除します。 「 ＷｉｎｄｏｗｓＸＰ（ＳＰ３） 」側から、「 Ｗｉｎｄｏｗｓ７ＲＣ 」をフォーマットすればいいんじゃないかと思って、フォーマットしようとしたら、できませんでした。（使用中のためにアクセス不能みたいなエラーがでました。） ならば、パーティションを削除すればいいのかな、と思ってパーティションを削除してみました。 すんなり、削除されました。 しかし、再起動すると「 Ｗｉｎｄｏｗｓ７ 」のブートローダが残っているようで、ＯＳ選択画面に「 Ｗｉｎｄｏｗｓ７ 」が残っています。 で、ブートローダを削除するにはどうしたらよいか、ちょっと調べてみたら、やっぱりやり方がありました。 「 ＷｉｎｄｏｗｓＸＰ（ＳＰ３） 」を起動させて、「 Ｗｉｎｄｏｗｓ７ＲＣ（３２ｂｉｔ） 」のＤＶＤをセット。 コマンドプロンプトで、ＤＶＤ内の、「 ¥ｂｏｏｔ 」というフォルダに移動してから、あるコマンドを入力すればＯＫのようです。 実際にはこちら。 （当方は、光学ドライブは「 Ｑ 」ドライブに設定しています） Microsoft Windows XP [Version 5.1.2600] (C) Copyright 1985-2001 Microsoft Corp. C:\\Documents and Settings\\masaru&gt;q: Q:\\&gt;cd boot...","categories": ["PC_Tips","自作PC"],
        "tags": ["Windows"],
        "url": "/2009/07/20/20002015/",
        "teaser": null
      },{
        "title": "ＶＭｗａｒｅにＷｉｎｄｏｗｓ７！",
        "excerpt":"先日は、「 ＷｉｎｄｏｗｓＸＰ 」をインストールした自作マシンに「 Ｗｉｎｄｏｗｓ７ＲＣ 」をデュアルブートでインストールしてみましたが、 そう言えば、「 Ｗｉｎｄｏｗｓ７ＲＣ 」を仮想マシンにインストールできるんだろうか？と思って、調べながらインストールしてみました。 こちら（ 本当に無償で使える「VMware Player」 ）やこちら（ VMware Server 2 をインストール　そして挫折 ）を参考にして。 （「 ＶＭｗａｒｅＰｌａｙｅｒ 」 や 「 ＱＥＭＵ 」 というソフトのインストールについては、やっぱりこちら（ 本当に無償で使える「VMware Player」 ）を参考にしてください。 僕は詳しくは説明しません（説明できません）ので。。。 「 ＶＭｗａｒｅＰｌａｙｅｒ 」なんかはよく「 Ｆｅｄｏｒａ 」 をインストールする練習用として使用しているんで、まあまあ（？）わかっているつもりですが・・・ まず、以下のようにＶＭＤＫファイルを作成しないといけません。 Microsoft Windows XP [Version 5.1.2600] (C) Copyright 1985-2001 Microsoft Corp. C:\\Documents and Settings\\masaru&gt;d: D:\\&gt;cd...","categories": ["PC_Tips","自作PC"],
        "tags": ["VMware","Windows"],
        "url": "/2009/07/21/21002045/",
        "teaser": null
      },{
        "title": "SQLServer2005 – SP3ｲﾝｽﾄｰﾙｴﾗｰ！",
        "excerpt":"　　 うちのニュー自作マシンに、旧マシンと同じような環境を再現させたくて、ＳＱＬＳｅｒｖｅｒ２００５・ＥｘｐｒｅｓｓＥｄｉｔｉｏｎをインストールしました。   で、インストール後、ＭｉｃｒｏｓｏｆｔＵｐｄａｔｅでＳＱＬＳｅｒｖｅｒのＳｅｒｖｉｃｅＰａｃｋ３がインストールされようとします。      しかし、こんなエラーメッセージが出てインストールに失敗します。         「 ＢＰＡ 」って！ とある説明によると、 「 BPAとはBest Practices Analyzerの略で、SQL Server 2005 のインストールまたはアップグレードの対象となるコンピュータが適切に管理および運用されていることをチェックするツール。 」 だそうです。   で、何がいけないかというと、 「 C:\\Program Files\\Microsoft SQL Server\\90\\Setup Bootstrap\\BPA 」フォルダに「 BPAClient.dll 」というファイルがないからみたいです。   「 BPAClient.dll 」というファイルは「 C:\\Program Files\\Microsoft SQL Server\\90\\Setup Bootstrap\\BPA\\bin 」フォルダにあります。      これを、「 C:\\Program Files\\Microsoft SQL Server\\90\\Setup Bootstrap\\BPA 」にコピーすればよいようです。      これで、ＳｅｒｖｉｃｅＰａｃｋ３のインストールに成功しました。      とりあえず、これでＯＫ！   あとは、旧マシンのデータベースをニューマシンに移行させたいな。   　　 じゃ。   　　   ","categories": ["PC_Tips"],
        "tags": ["SQLServer"],
        "url": "/2009/07/22/22002039/",
        "teaser": null
      },{
        "title": "SQLServer2005 – 別マシンへ移行！",
        "excerpt":"今日は旧マシンで使用していた「 ＳＱＬＳｅｒｖｅｒ２００５・ＥｘｐｒｅｓｓＥｄｉｔｉｏｎ 」のデータベースをニュー自作マシンへ移行させましたので、その記録です。 最初は、「 デタッチ 」・「 アタッチ 」で行おうとチャレンジしましたが、アタッチしようとするとなぜかアクセス拒否されるので、断念しました。 なので、移行元のデータベースを丸ごとバックアップをとり、移行先でそいつをリストアする方法で行いました。 【Ⅰ】移行元での作業 １．「 SQL Server Management Studio Express 」を実行する。 ２．バックアップ対象のデータベース名を右クリックして、「 タスク 」−「 バックアップ 」と選択し、バックアップ画面を開く。 ３．バックアップ先を明確にさせたかったので、一旦バックアップ先の設定を削除して、新たに追加しなおしました。 ４．あとは、ほとんどデフォルトのままで、「 ＯＫ 」クリック。バックアップが正常に終了するはずです。 ５．バックアップファイルは移行先で使用するので、移行先の適当な場所にコピーしておく。 【Ⅱ】移行先での作業 １．「 SQL Server Management Studio Express 」を実行する。 ２．「 データベース 」で右クリックして「 データベースの復元 」を選択し、「 データベースの復元 」画面を表示する。 ３．「 復元先データベース 」にデータベースの名前を入力して、バックアップファイルから復元するので、「 デバイスから 」を選択し、ファイル選択の画面を開く。 ４．目的のバックアップファイルを選択する。 ５．オプションの画面で、データベースの復元先を確認・変更する。（その他はデフォルトのままで） ６．「...","categories": ["PC_Tips"],
        "tags": ["SQLServer"],
        "url": "/2009/07/23/23002016/",
        "teaser": null
      },{
        "title": "Loto6 No.455",
        "excerpt":"まいどです。   　　 昨日ののロト６（第４５５回）の結果です。   他に言うことはありません。 　　 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/07/24/24002015/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０インストール！",
        "excerpt":"このたび、今まで使用していたメインマシンから新しくマシンを自作したために、旧マシンにＦｅｄｏｒａ１０をインストールしてみようと思ったところです。 いずれはこのＦｅｄｏｒａ１０をサーバとして稼動させたいなとも思っています。 今稼動中のサーバよりも静音なんで。。。 （ＰｅｎｔｉｕｍＭで、ファンレス、電源もＡＣアダプタ式だからです） ただ、発熱が気になるところです。 （ファン増設？） ま、とりあえずインストールしてみました。 インストール作業 ※最低限のものだけインストールするようにしています。 必要なパッケージは随時インストールしていきます。 サーバとして稼動させる予定なので、ＧＵＩもインストールしません。 もちろん、ＢＩＯＳの設定でＤＶＤドライブから起動するようにして。 １．Fedoraインストール実行 「 Install or upgrade an existing system 」を選択してENTER。 ２．メディアチェック 「 Skip 」を選択 （チェックは時間がかかるので） ３．インストーラ起動 「 Next 」 クリック。 ４．言語選択 「 Japanese(日本語) 」を選択して「 Next 」クリック。 ５．キーボード設定 「 Japanese 」を選択して「 次 」クリック。 ６．ホスト名設定 「 ホスト名 」にサーバーのホスト名(例:pulsar.mk-mode.com)を入力して「 次 」クリック。 ７．タイムゾーン設定...","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2009/07/25/25002053/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０リモート操作！",
        "excerpt":"　　 このたび、今まで使用していたメインマシンから新しくマシンを自作したために、旧マシンにＦｅｄｏｒａ１０をインストールしたんですが、そいつを別のＷｉｎｄｏｗｓマシンからリモート操作するために、今日は設定してみました。   ※リモート操作するマシンにはＭｉｃｒｏｓｏｆｔ．ＮＥＴ Ｆｒａｍｅｗｏｒｋがインスール済みであることが前提です。   そして、こちらを参考に設定しました。   [ Fedoraで自宅サーバー構築 ]さんの[ WindowsからSSHサーバーへリモート接続(Poderosaパスワード方式ログイン編) ]です。 いつもお世話になっています。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   あ、でも、まだユーザを作成していないんで、とりあえずｒｏｏｔユーザでログインしてます。 （で、あとで普段使用するユーザを作成しました）   それもこちら[ Fedoraで自宅サーバー構築 ]さんの[ Fedora 10初期設定 ]を参考にして。   　　 このまんまで、ＯＫでした。   　　 すんません。 疲れてるんで、今日はここまでで。   　　 また、明日。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2009/07/26/26002018/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０セキュリティ対策！",
        "excerpt":"　　 今日は、Ｆｅｄｏｒａ１０をインストールマシンにセキュリティ関連の設定を行いました。。   こちら[ Fedoraで自宅サーバー構築 ]さんの「 サーバー公開前のセキュリティ強化 」の手順どおりに。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   ※そして、もちろん作業は「 Ｐｏｄｅｒｏｓａ 」によるリモート操作で行っています。   実際には、   １．ファイル改竄検知システム導入(Tripwire) ２．rootkit検知ツール導入(chkrootkit) ３．アンチウィルスソフト導入(Clam AntiVirus) ４．ファイアウォール構築(iptables)   の設定を行いました。   特に問題はありませんでした。 よしよし。   あ、でもこのセキュリティの設定の前に 「 Perlモジュールを簡単にインストールできるようにする 」というのありますが、 なんだか、うまくいなかったし、今のところ必要なものかどうかも不明なので、今回は飛ばしました。   　　 では、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2009/07/27/27002040/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０ＮＴＰサーバ構築！",
        "excerpt":"　　 今日は、Ｆｅｄｏｒａ１０をインストールマシンにＮＴＰサーバを構築しました。   こちら[ Fedoraで自宅サーバー構築 ]さんの[ NTPサーバー構築(ntpd) ]の手順どおりに。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   ※そして、もちろん作業は「 Ｐｏｄｅｒｏｓａ 」によるリモート操作で行っています。   その設定の中で、ＮＴＰサーバを指定するところがあるんですが、 僕はいつも以下の３つを設定しています。   server ntp1.jst.mfeed.ad.jp server ntp2.jst.mfeed.ad.jp server ntp3.jst.mfeed.ad.jp   これは、[ インターネットマルチフィード(MFEED) 時刻情報提供サービス for Public ] が提供しているＮＴＰサーバです。   ちなみに、Ｗｉｎｄｏｗｓマシンで[ インターネットマルチフィード(MFEED) 時刻情報提供サービス for Public ]のＮＴＰサーバを使おうと思ったら、   ntp.jst.mfeed.ad.jp   を「 日付と時刻のプロパティ 」の「 インターネット時刻 」に設定すればよいです。   　　 では、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","NTP"],
        "url": "/2009/07/28/28002031/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０ＳＳＨサーバ構築！",
        "excerpt":"　　 今日は、Ｆｅｄｏｒａ１０をインストールマシンにＳＳＨサーバを構築しました。   いつものように、こちら[ Fedoraで自宅サーバー構築 ]さんの[ 外部クライアント(Windows)からLinuxサーバーをリモート操作する ]の手順どおりに。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   ※そして、もちろん作業は「 Ｐｏｄｅｒｏｓａ 」によるリモート操作で行っています。   設定自体はＯＫ。 「 Ｐｏｄｅｒｏｓａ 」で鍵認証でログインもできました。   最後にポートの開放の確認するようになっていますが、今はまだこの設定中のマシンは公開しないので、ポートの開放については未確認です。   　　 では、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","SSH"],
        "url": "/2009/07/29/29002001/",
        "teaser": null
      },{
        "title": "自作マシンＢＩＯＳアップデート！",
        "excerpt":"今日は、この間組み立てたメインマシンのＢＩＯＳをアップデートしてみました。 ちなみにマザーボードはＡＳＵＳ「 Ｐ５ＱＤｅｌｕｘｅ 」です。 作業手順 １．まず、ＢＩＯＳファイルをダウンロードしておきます。 ASUSTeK のダウンロードページから自分のマザーボード用のＢＩＯＳファイルを見つけ出し、ダウンロードします。 ２．ＢＩＯＳアップデートツールをダウンロードします。 今回はＷｉｎｄｏｗｓ上からＢＩＯＳをアップデートするので、ASUSTeK のダウンロードページからＢＩＯＳアップデートツールをダウンロードします。 「 製品 」・「 シリーズ 」・「 モデル 」で検索し、 ＯＳを選択します。 検索結果の中の「 ユーティリティ 」の中から「 ASUS Update ・・・ 」というファイルを探し出します。 そして「 グローバル 」というボタンをクリックすると、保存確認のダイアログが表示されるのでファイルを保存します。 ３．ダウンロードしたファイルを展開します。 ダウンロードしたファイルはＺＩＰファイルなので展開します。 ４．ＢＩＯＳアップデートツール「 ASUS Ｕｐｄａｔｅ 」をインストールします。 展開してできた「 Setup.exe 」を実行させます。 普通にインストールを進めます。 これでインストールは完了です。 ５．「 ASUS Ｕｐｄａｔｅ 」を起動させます。 Ｗｉｎｄｏｗｓのスタートボタンから、「 プログラム 」−「 ＡｓｕｓＵｐｄａｔｅ 」−「 ＡＳＵＳＵｐｄａｔｅ...","categories": ["自作PC"],
        "tags": [],
        "url": "/2009/07/30/30002052/",
        "teaser": null
      },{
        "title": "Loto6 No.456",
        "excerpt":"まいどです。   　　 昨日ののロト６（第４５６回）の結果です。   今回は¥１，０００に惜しいのが２口（４口中）ありました。 なんか、次回は当たりそうな気が・・・するだけかも？？？ 　　 ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/07/31/31002021/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０ＤＮＳサーバ構築！",
        "excerpt":"　　 今日は、Ｆｅｄｏｒａ１０をインストールマシンにＤＮＳサーバ（ＢＩＮＤ）を構築しました。   いつものように、こちら[ Fedoraで自宅サーバー構築 ]さんの[ DNSサーバー構築(BIND) ]の手順どおりに。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   ※そして、もちろん作業は「 Ｐｏｄｅｒｏｓａ 」によるリモート操作で行っています。   設定自体はＯＫ。 実際には、このマシンをサーバとして稼動させるときにあれこれ調整する必要が出てくるとは思います。。。   　　 では、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["DNS","Fedora"],
        "url": "/2009/08/01/01002018/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０Ｗｅｂサーバ構築！",
        "excerpt":"　　 今日は、Ｆｅｄｏｒａ１０をインストールマシンにWebサーバ（Ａｐａｃｈｅ）を構築しました。   いつものように、こちら[ Fedoraで自宅サーバー構築 ]さんの[ Webサーバーを公開する ]の手順どおりに。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   ただ、そちらでは以下の６項目の設定が紹介されていますが、今回は当方でとりあえず必要なものだけ（１・２・６だけ）を設定しました。 １．Webサーバー構築(Apache) ２．Webサーバー間通信内容暗号化(Apache+mod_SSL) ３．ユーザディレクトリ作成(/~ユーザ名/) ４．Webページパスワード制限(htpasswd) ５．バーチャルホスト設定 ６．Webサーバー間通信内容圧縮(mod_deflate)   ※そして、もちろん作業は「 Ｐｏｄｅｒｏｓａ 」によるリモート操作で行っています。   　　 設定自体はＯＫ。   ポート開放やその他動作確認については、このマシンをサーバとして稼動させるときに行うことにしていますんで。。。   　　 では、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Apache","Fedora"],
        "url": "/2009/08/02/02002022/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０セキュアなファイル転送！",
        "excerpt":"　　 今日は、Ｆｅｄｏｒａ１０をインストールマシンにセキュアなファイル転送の設定を行いました。 普通のＦＴＰより安全（セキュア）なファイル転送の仕組みとなっています。   いつものように、こちら[ Fedoraで自宅サーバー構築 ]さんの[ Windowsからサーバーへ安全にファイル転送(WinSCP) ]の手順どおりに。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   ※そして、もちろん作業は「 Ｐｏｄｅｒｏｓａ 」によるリモート操作で行っています。   ただ、しいて言うなら、 ご存知のように当方の場合Ｆｅｄｏｒａサーバを操作する際に「 Ｐｏｄｅｒｏｓａ 」を使ってリモート操作しているので、そこで使用している秘密鍵を流用する設定をしています。   設定は簡単でした。   念のため、Ｗｉｎｄｏｗｓマシンから「 ＷｉｎＳＣＰ 」でＦｅｄｏｒａサーバへアクセスしてみて、動作を確認。 ＯＫでした。   　　 では、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","SSH"],
        "url": "/2009/08/03/03002027/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０ＦＴＰサーバ構築！",
        "excerpt":"　　 今日は、Ｆｅｄｏｒａ１０をインストールマシンにＦＴＰサーバを構築しました。   いつものように、こちら[ Fedoraで自宅サーバー構築 ]さんの[ FTPサーバー構築(vsftpd) ]の手順どおりに。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   ※そして、もちろん作業は「 Ｐｏｄｅｒｏｓａ 」によるリモート操作で行っています。   設定は簡単でした。   ちなみに、今回はＦＴＰサーバは外部から接続しないつもりです。 （もし外部からファイル転送の操作をするなら前回の記事に載せていた「ＷｉｎＳＣＰ」を使用します）   念のため、動作を確認。 当方は昔から使用しなれている「ＦＦＦＴＰ」を使用してみました。 一応内部からの接続（アップロード＆ダウンロード）はＯＫでした。   とりあえず、いいか！？   　　 では、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","FTP"],
        "url": "/2009/08/04/04002023/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０Apacheアクセスログ解析！",
        "excerpt":"　　 今日は、Ｆｅｄｏｒａ１０をインストールマシンにApacheアクセスログ解析の設定をしました。   いつものように、こちら[ Fedoraで自宅サーバー構築 ]さんの[ Apacheアクセスログ解析(AWStats) ]の手順どおりに。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   ※そして、もちろん作業は「 Ｐｏｄｅｒｏｓａ 」によるリモート操作で行っています。   設定は簡単でした。   ちなみに、今回もこいつについては外部からは接続しないつもりです。   動作を確認も今はしません。   ホームページもまだ現サーバから移行していないんで。。。   本格的に移行するときに動作確認します！   あっ！あとついでに リファラスパム対策もしました。   　　 ってことで、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Apache","Fedora"],
        "url": "/2009/08/05/05002054/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０Ｎａｍａｚｕ構築！",
        "excerpt":"　　 今日は、Ｆｅｄｏｒａ１０をインストールマシンにサイト内検索システム構築(Namazu)を構築しました。   いつものように、こちら[ Fedoraで自宅サーバー構築 ]さんの[ サイト内検索システム構築(Namazu)  ]の手順どおりに。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   ※そして、もちろん作業は「 Ｐｏｄｅｒｏｓａ 」によるリモート操作で行っています。   設定は簡単でした。   ちなみに、まだＷｅｂサーバをこの新サーバに移行させていなかったんで、とりあえず現サーバからファイルをコピーして、仮のＷｅｂサーバ稼動状況を作成して、動作確認もしてみました。   ※現状のＷｅｂサーバを完全に移行させて稼動させるには、新サーバ側でデータベースの構築等もしてからでないとダメなんで。。。   とりあえず、Ｎａｍａｚｕが動いてるんでヨシとしましょう！   　　 では、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","Namazu"],
        "url": "/2009/08/06/06002059/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０メールサーバ構築！",
        "excerpt":"　　 今日は、Ｆｅｄｏｒａ１０をインストールマシンにメールサーバ（Ｐｏｓｔｆｉｘ）を構築しました。   いつものように、こちら[ Fedoraで自宅サーバー構築 ]さんの[ 独自のメールアドレスをつくる(Postfix編) ]の手順どおりに。   設定方法はホントにこちらのままです。   なので、ここでは説明しません。 （あしからず。。。）   ただ、そちらでは以下の６項目の設定が紹介されていますが、今回は当方でとりあえず必要なものだけ（１・２・３・４・９だけ）を設定しました。 １．メールサーバー構築(Postfix+Dovecot) ２．メールサーバー間通信内容暗号化(OpenSSL+Postfix+Dovecot) ３． taRgreyによるスパム対策(taRgrey) ４．メールサーバーでウィルス&amp;スパムチェック(Postfix+Clam AntiVirus+SpamAssassin) ５．バーチャルドメイン設定(Postfix&amp;Dovecot+qmail&amp;vpopmail) ６．vpopmail用メールアカウント&amp;メーリングリスト管理システム導入(Postfix+qmailadmin) ７．メール自動返信機能導入(Vacation) ８．メーリングリストサーバー構築(Postfix+Mailman) ９．Postfixログ解析ツール導入(pflogsumm)   ※そして、もちろん作業は「 Ｐｏｄｅｒｏｓａ 」によるリモート操作で行っています。   設定自体はたぶんＯＫ。   ポート開放やその他動作確認については、このマシンをサーバとして稼動させるときに行うことにしていますんで。。。   ※いつものように、完璧に動作するまで設定を完了させていません。 なぜなら、毎日少しずつしか作業ができないんで、ある程度新マシンに設定を済ませておいてから一気に旧マシンから移行させようと思っているからです。（サーバの移行をしたことある方ならなんとなくその気持ちはわかると思います）   　　 では、また。   　　   ","categories": ["サーバ構築"],
        "tags": ["Fedora","Postfix"],
        "url": "/2009/08/08/08002027/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１２にて稼動開始！",
        "excerpt":"　　 非常にお久しぶり（約４ヶ月ぶり）です。 所用で留守にしていたもんで。。。   　　 今日は、Ｆｅｄｏｒａ１２で サーバを構築したのご報告です。   今まで、AtomマシンでＦｅｄｏｒａ１０にて稼動していたんですが、   今まで使用したメインマシン（ＰｅｎｔｉｕｍＭマシン）が新自作マシンへ移行したために空いていたので、そちらへＦｅｄｏｒａ１２サーバを構築・移行してみました。   だいぶ、整ってきたので稼動させてみました。   ちなみに、 構築方法はいつものように、 こちら[ Fedoraで自宅サーバー構築 ]さん を参考にさせてもらいました。 （その他、自分の過去の構築メモを参照）   構築方法はホントにこちらのままです。   なので、今回は説明しません。 （あしからず。。。）   ただ、構築してみて思ったことなんですが、   今まで（Ｆｅｄｏｒａ１０まで）は構築作業中に何かとエラー等でつまづきがちだったんですが、 今回（Ｆｅｄｏｒａ１２）では、さほどつまづかなかった。です。 何かと改良されているように思った次第です。   取り急ぎ、稼動開始のご連絡でした。   ※Ｆｅｄｏｒａ１２では稼動したばかりなので、まだまだ不具合があろうかと思います。 　徐々に修復していきますので。 　その辺はご勘弁を。。。   　　 では、また。   　　   ","categories": ["サーバ構築","ブログ","Webサイト"],
        "tags": ["Fedora"],
        "url": "/2009/12/06/06203629/",
        "teaser": null
      },{
        "title": "Loto6 CSVデータ更新！",
        "excerpt":"　　 留守にしていたため、 ロト６のダウンロード用ＣＳＶデータを更新できていませんでしたが、 本日更新しました。   　　 ダウンロード用ＣＳＶファイルは こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 　あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   　　 ではまた。   　　   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/12/08/08002040/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ – Ｆｅｄｏｒａ１１インストール！",
        "excerpt":"先日、うちのサーバをＦｅｄｏｒａ１２で稼動するようにしたところ。 （アップグレードでなく、クリーンインストールですが） （ こちら[ Ｆｅｄｏｒａ１２にて稼動開始！ ] 参照 ） そして、今回は今までＦｅｄｏｒａ１０で稼動させていた「玄箱/HG」 （主にファイルサーバとして使用） に一からＦｅｄｏｒａ１１をインストールしてみました。 （うまくいけば、「Ｆｅｄｏｒａ１２」へアップグレードも考えています） まず、準備として こちら[ いろいろやってみよう、何とかやってみよう！ - 「Fedora11 for 玄箱」導入 ]から イメージファイル ・hda1イメージ（玄箱HG用） [ kurohg_hda1_20090801-2.tar.gz ] ・hda3イメージ（玄箱／玄箱HG共通） [ kuro_f11_images_20091006.tar.gz ] をダウンロードしておく。 そして、自分の過去の記録[ こちら ] を参考にして 玄箱ＨＧをＥＭモードで起動。 ※詳細は記載していませんが、 ＥＭモードで起動させるときはいつも苦労しています。 いろいろとネットで調べてＥＭモード起動させました。 （あれこれとしているんで、詳しくはうまく説明できません・・・） 以降は、めでたくＥＭモードで起動してからの記録です。 ※ＩＰアドレスの違いによって、うまくアクセスできない場合があります。 これも、自分の環境に合わせながら、またあれこれ調べながらしてみてください。 （自分でもうまく説明できません。。。） 作業記録 １．Ｔｅｌｎｅｔ接続 コマンドプロンプトから、玄箱ＨＧのＩＰアドレスにＴｅｌｎｅｔ接続する。 &gt; telnet 192.168.11.5 Kuroutoshikou...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/12/09/09002051/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ – Ｆｅｄｏｒａ１１初期設定！",
        "excerpt":"今日は、 昨日Ｆｅｄｏｒａ１１をインストールした玄箱ＨＧに 最低限の初期設定しておきました。 以下、今回やったことです。 詳しいことは、 僕がいつもお世話になっている こちら[ Fedoraで自宅サーバー構築 ] の 初期設定のページや 当ブログの過去の記事に記載してあります。 なので、詳細は割愛させてください。 ※なお、この玄箱ＨＧは主にファイルサーバとして使用するのみです。 非力な玄箱ＨＧにいろんな機能を導入すると動かなくなるんで。 作業記録 １．rootユーザでログイン デフォルトのID/PW[ root/kuro ]でＳＳＨログイン。 （当方の場合、WindowsXPマシンからターミナルソフト「Poderosa」を使用しています） ２．既存ユーザ[ fedora ]の削除 既存の fedoraユーザは当方では不要なので削除。 [root@KURO-BOX ~]# userdel -r fedora ３．時刻補正 念のために時刻を補正しておく [root@KURO-BOX ~]# ntpdate ntp.nict.jp ４．アップデート 「 yum 」でアップデートしておく。 [root@KURO-BOX ~]# yum -y update [root@KURO-BOX ~]# yum clean...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/12/10/10002005/",
        "teaser": null
      },{
        "title": "Loto6 No.475",
        "excerpt":"昨日ののロト６（第４７５回）の結果です。   今回は１口しか購入していなかったんで、 さっぱりでした。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。 ではまた。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/12/11/11002038/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ – Ｆｅｄｏｒａ１１にファイルサーバ！",
        "excerpt":"今日は、 Ｆｅｄｏｒａ１１をインストールした玄箱ＨＧに ファイルサーバ「 samba 」を導入しました。 以下、今回やったことです。 詳しいことは、 僕がいつもお世話になっている こちら[ Fedoraで自宅サーバー構築 ] や 当ブログの過去の記事に記載してあります。 なので、詳細は割愛させてください。 作業記録 １．玄箱ＨＧへの接続 ローカルマシンから KURO-BOX/HG へリモート接続し、rootユーザになる。 （当方は、「 Poderosa 」というのを使用しています） ２．Ｓａｍｂａ のインストール [root@KURO-BOX ~]# yum -y install samba インストール処理の設定をしています パッケージ samba-3.4.2-0.42.fc11.ppc はインストール済みか最新バージョンです 何もしません インストール済みだった。 ３．Ｓａｍｂａユーザ作成 今回は既存ユーザをSambaサーバーアクセス用ユーザとするので、以下のようにする。 [root@KURO-BOX ~]# pdbedit -a masaru new password: retype new password: tdbsam_open: Converting...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora","Samba"],
        "url": "/2009/12/12/12002018/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ – Ｆｅｄｏｒａ１２化！",
        "excerpt":"今日は、 Ｆｅｄｏｒａ１１をインストールし、 ファイルサーバ導入済みの玄箱ＨＧを Ｆｅｄｏｒａ１２にアップグレードしてみました。 ※せっかく、Ｆｅｄｏｒａ１２までリリースされているんで。 以下、今回やったことです。 作業記録 １．玄箱ＨＧへの接続 ローカルマシンから KURO-BOX/HG へリモート接続し、rootユーザになる。 （当方は、「 Poderosa 」というのを使用しています） ２．Ｆｅｄｏｒａパッケージインストール 「 http://download.fedora.redhat.com/pub/fedora/linux/releases/12/Fedora/ppc/os/Packages/ 」にある 「 fedora-release-12-1.noarch.rpm 」と 「 fedora-release-notes-12.0.0-4.fc12.noarch.rpm 」 をインストールする。 [root@KURO-BOX ~]# rpm -Uvh http://download.fedora.redhat.com/pub/fedora/linux/releases/12/Fedora/ppc/os/Packages/fedora-release-12-1.noarch.rpm http://download.fedora.redhat.com/pub/fedora/linux/releases/12/Fedora/ppc/os/Packages/fedora-release-notes-12.0.0-4.fc12.noarch.rpm ・・・　途中省略　・・・ 警告: /var/tmp/rpm-tmp.FuQBrs: ヘッダ V3 RSA/SHA256 signature: NOKEY, key ID 57bbccba エラー: 依存性の欠如: xdg-utils は fedora-release-notes-12.0.0-4.fc12.noarch に必要とされています [root@KURO-BOX ~]#...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2009/12/13/13002038/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１０をＦｅｄｏｒａ１２へアップグレード！",
        "excerpt":"今日は、 これまでＦｅｄｏｒａ１０で稼動していたうちのサーバを Ｆｅｄｏｒａ１１にアップグレードしてみました。 そして、ついでに Ｆｅｄｏｒａ１２にもアップグレードしてみました。 以下、今回やったことです。 Ｆｅｄｏｒａ１１へのアップグレード １．サーバへの接続 ローカルマシンから サーバへリモート接続し、rootユーザになる。 （当方は、「 Poderosa 」というのを使用しています） ２．fedora-release　と　fedora-release-notes　のインストール 「 http://download.fedora.redhat.com/pub/fedora/linux/releases/11/Fedora/i386/os/Packages/ 」にある 「 fedora-release-11-1.noarch.rpm 」と 「 fedora-release-notes-11.0.0-2.fc11.noarch.rpm 」をインストールする。 [root@noah ~]# rpm -Uvh http://download.fedora.redhat.com/pub/fedora/linux/releases/11/Fedora/i386/os/Packages/fedora-release-11-1.noarch.rpm http://download.fedora.redhat.com/pub/fedora/linux/releases/11/Fedora/i386/os/Packages/fedora-release-notes-11.0.0-2.fc11.noarch.rpm http://download.fedora.redhat.com/pub/fedora/linux/releases/11/Fedora/i386/os/Packages/fedora-release-11-1.noarch.rpm を取得中 http://download.fedora.redhat.com/pub/fedora/linux/releases/11/Fedora/i386/os/Packages/fedora-release-notes-11.0.0-2.fc11.noarch.rpm を取得中 警告: /var/tmp/rpm-tmp.fKPTJg: ヘッダ V3 RSA/SHA256 signature: NOKEY, key ID d22e77f2 準備中... ########################################### [100%] 1:fedora-release-notes ########################################### [ 50%]...","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2009/12/14/14002051/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１２ – Ｗｅｂカメラ構築！",
        "excerpt":"今日は、今稼動中のうちのＦｅｄｏｒａ１２サーバへ Ｗｅｂカメラを構築しました。 この間まで稼動させていたＦｅｄｏｒａ１０サーバでは やっていたことなので、Ｆｅｄｏｒａ１２でも、 と思って。。。 ただ、 Ｆｅｄｏｒａ１２ではＷｅｂカメラがサポートされたようですが、 構築方法がわからないんで、 Ｆｅｄｏｒａ１０のときに構築した方法で試してみようと思います。 （自分の過去記録「 Fedora10サーバにＷｅｂカメラを構築！ 」等を参照） ※もちろん、ＵＳＢカメラを接続し、[ /dev/video ] で認識されていることが前提です。 作業記録 １．「 xorg-x11-drivers 」インストール X11のウィンドウでモニタするアプリなので，X11に依存する。 X11 がインストールされていない環境下では，webcam も make できない。 ということは、うちのFedoraはＸ環境入れてないので、以下を実行。 [root@pulsar ~]# yum -y install xorg-x11-drivers ２．その他インストール その他make中に（ファイル不足で）エラーが出るので libjpeg-devel, kernel-devel, ncurse-devel をインストール。 [root@pulsar ~]# yum -y install libjpeg-devel [root@pulsar ~]# yum -y install...","categories": ["サーバ構築","Webサイト"],
        "tags": ["Fedora","Webカメラ"],
        "url": "/2009/12/15/15002021/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － ＷＰ Ｓｕｐｅｒ Ｃａｃｈｅ 導入！",
        "excerpt":"最近、ブログページ（ＷｏｒｄＰｒｅｓｓ）の表示が重いように感じるようになったので、 表示を軽くするプラグインを導入してみました。 いろいろ、調べてみると、 「 ＷＰ Ｓｕｐｅｒ Ｃａｃｈｅ 」というのが良さそう！ 一旦表示したページをキャッシュして、次回から表示がスピードアップするというもの。 あれこれ、サイトで調べながら導入してみました。 導入記録 １．「 wp-config.php 」編集 キャッシュを使用できるようにするために、「 wp-config.php 」ファイルに以下の一行を追加する。 define('WP_CACHE', true);　←　追加 if ( !defined('ABSPATH') )　この行より上に記述すること ※所有者、パーミッションに注意！ ２．「 WP Super Cache 」ダウンロード こちら[ http://wordpress.org/extend/plugins/wp-super-cache/ ]から 「 wp-super-cache.0.9.8.zip 」をダウンロード＆展開 ※当記事執筆時点では、Ｖｅｒ．０．９．８ が最新。 ３．「 WP Super Cache 」アップロード 上記で展開してできたフォルダ「 wp-super-cache 」をサーバの「 plugins 」フォルダへアップロードする。 ※所有者、パーミッションに注意！ ４．パーミッション変更 今までの作業でパーミッションをいじっているかもしれませんが、...","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2009/12/16/16002045/",
        "teaser": null
      },{
        "title": "ＷｉｎｄｏｗｓＸＰ － スタンバイに関する現象！",
        "excerpt":"今日はうちの今使用している自作ＷｉｎｄｏｗｓＸＰマシンでのちょっとした不具合について。 その不具合とは、 −−−−−−−−−＞ ＢＩＯＳの電源設定でサスペンドモードを「 Ｓ３ 」（サスペンド時にファンも止まる）にすると、 キーボードやマウスの設定画面に電源管理のタブが表示されない。 なので、マシンをスタンバイにした状態からはＵＳＢのキーボード・マウスから復帰させることができない。 （電源ボタンを押さないといけない） ※ＰＳ／２のキーボード・マウスについは、未確認！ 仮に、ＢＩＯＳの電源設定でサスペンドモードを「 Ｓ１ 」にすると、 キーボードやマウスの設定画面に電源管理のタブが表示されるので、 「 このデバイスで、コンピュータのスタンバイ状態を解除できるようにする 」にチェックをいれることで、 キーボード・マウスでスタンバイ状態から復帰できます。 ただし、「 Ｓ１ 」だとスタンバイ時でもファンが回ったままなので、エコでないし・うるさい！ ＜−−−−−−−−− ※マザーボードの種類等によっては、この現象が発生しない場合もあると思います。 そこで、いろいろ調べてみました。 マイクロソフトのサポートページにも記載がある現象のようです。 こちら[ http://support.microsoft.com/kb/841858/en ] 実際の対処方法は以下のとおり。 対処方法 １．ＢＩＯＳ設定 ＢＩＯＳの電源設定でサスペンドモードを「 Ｓ３ 」（もしくは「ＡＵＴＯ」）に設定する。 ２．レジストリファイルの作成 以下の内容で、レジストリ登録用のファイルを作成する。 （ファイル名は拡張子「 .reg 」なら何でもＯＫ） Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\usb] \"USBBIOSHACKS\"=dword:00000000 \"USBBIOSx\"=dword:00000000 ３．レジストリ追加 上記で作成したレジストリファイルを実行させる。 ４．確認...","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2009/12/17/17002053/",
        "teaser": null
      },{
        "title": "Loto6 No.476",
        "excerpt":"昨日ののロト６（第４７６回）の結果です。   今回も１口しか購入していなかったけど、 やっぱりさっぱりでした。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   ではまた。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/12/18/18002045/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ － Ｄｅｂｉａｎ（ｓａｒｇｅ）導入！",
        "excerpt":"今日は玄箱ＨＧにＤｅｂｉａｎ（ｓａｒｇｅ）を導入してみました。 この間、この玄箱ＨＧにＦｅｄｏｒａ１２を導入したばかりですが、 ちょっと試してみたいこともあったんで。。。 （実は以前、何回かＤｅｂｉａｎを導入したこともあります） ※いずれは、「ｅｔｃｈ」化、「ｌｅｎｎｙ」化していくかもれません。 今回は記録をとりながら、作業していくことにしました。 玄箱の基本的な知識・Ｌｉｎｕｘの基本的な知識については、 詳細には記載していません。 あくまでも自分の記録です。 作業記録 １．準備 組み立てた玄箱ＨＧに標準のファームウェアを導入。 ※玄箱設定の最初の基本的な操作なので、ここでは操作については説明しません。 ２．Ｄｅｂｉａｎ化キットダウンロード こちら[ http://www.genbako.com/debian-2.6.17.3/ ]から 「 debian-sarge-2.6.17.3-kuroHG-20060702.tgz 」 こちら[ http://www.genbako.com/ ]から 「 kernelimage-2.6.25.1-kuroHG.tgz 」 「 modules-2.6.25.1-kuroHG.tgz 」 をダウンロードする。 ３．Ｄｅｂｉａｎ化キットを玄箱ＨＧへ転送 先ほどダウンロードしたアーカイブファイルのうち、 「 debian-sarge-2.6.17.3-kuroHG-20060702.tgz 」を 玄箱ＨＧの[ /mnt/share ]へＦＴＰ転送する。 （Ｗｉｎｄｏｗｓのエクスプローラでもコピーできます） ４．玄箱ＨＧへログイン Ｔｅｌｎｅｔで玄箱ＨＧへログインする。 （ ユーザ／パスワード：[ root / kuroadmin ]） Kuroutoshikou KURO-BOX/HG (IESHIGE)...","categories": ["サーバ構築","玄箱"],
        "tags": ["Debian"],
        "url": "/2009/12/19/19002043/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ － Ｄｅｂｉａｎをｅｔｃｈ化！",
        "excerpt":"前回、 うちの玄箱ＨＧにＤｅｂｉａｎ（ｓａｒｇｅ）を インストールしました。 なので次は「ｅｔｃｈ」化です。 以下が作業手順です。 あくまでも自分の記録用です。 理解できないような点があれば、ネット等で調べてみてください。 作業記録 【前提条件】 作業するマシンはＷｉｎｄｏｗｓＸＰ・Ｐｒｏ（ＳＰ３）。 １．「 sources.list 」変更 「 sources.list 」を以下のように変更する。 ※「 sarge 」化にした時の「 sources.list 」の [ sarge ]を[ etch ]にしただけでは、 エラーになってしまうので、以下のようにしました。 KURO-BOX:~# vi /etc/apt/sources.list deb http://cdn.debian.or.jp/debian/ etch main contrib non-free deb-src http://cdn.debian.or.jp/debian/ etch main contrib non-free deb http://security.debian.org/ etch/updates main contrib non-free deb-src http://security.debian.org/...","categories": ["サーバ構築","玄箱"],
        "tags": ["Debian"],
        "url": "/2009/12/20/20002049/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ － ＤｅｂｉａｎにＮＴＰサーバ！",
        "excerpt":"前回、 うちの玄箱ＨＧのＤｅｂｉａｎを「ｅｔｃｈ」化しました。 今日は玄箱ＨＧの時刻管理のために、 ＮＴＰサーバを導入しました。 以下が作業手順です。 あくまでも自分の記録用です。 理解できないような点があれば、ネット等で調べてみてください。 作業記録 【前提条件】 作業するマシンはＷｉｎｄｏｗｓＸＰ・Ｐｒｏ（ＳＰ３）。 １．玄箱ＨＧへログイン Ｔｅｌｎｅｔ等で玄箱ＨＧへログイン。 （一般ユーザでログイン後、ｒｏｏｔユーザになる） ２．パッケージアップデート ＮＴＰサーバをインストールする前に、 パッケージをアップデートしておく。 KURO-BOX:~# apt-get update ３．ＮＴＰサーバインストール KURO-BOX:~# apt-get install ntp ntpdate ntp-doc ntp-simple ４．ＮＴＰ設定 設定ファイルを適当なＮＴＰサーバに変更する。 KURO-BOX:~# vi /etc/ntp.conf #server 0.debian.pool.ntp.org iburst #server 1.debian.pool.ntp.org iburst #server 2.debian.pool.ntp.org iburst #server 3.debian.pool.ntp.org iburst server ntp1.jst.mfeed.ad.jp server ntp2.jst.mfeed.ad.jp server ntp3.jst.mfeed.ad.jp...","categories": ["サーバ構築","玄箱"],
        "tags": ["Debian","NTP"],
        "url": "/2009/12/21/21002046/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ － Ｄｅｂｉａｎにファイルサーバ！",
        "excerpt":"今日は玄箱ＨＧのＤｅｂｉａｎ（ｅｔｃｈ）に、 ファイルサーバ（ｓａｍｂａ）を導入しました。 以下が作業手順です。 あくまでも自分の記録用です。 理解できないような点があれば、ネット等で調べてみてください。 作業記録 【前提条件】 作業するマシンはＷｉｎｄｏｗｓＸＰ・Ｐｒｏ（ＳＰ３）。 １．玄箱ＨＧへログイン Ｔｅｌｎｅｔ等で玄箱ＨＧへログイン。 （一般ユーザでログイン後、ｒｏｏｔユーザになる） ２．「ｓａｍｂａ」インストール KURO-BOX:~# aptitude install samba ※ちなみに、今回からインストール作業は「 apt-get 」ではなく、 「 aptitude 」コマンドを使用するようにしました。 （何がどう違うかは、ここでは説明しません） 途中の質問は以下のように答えました。 ・Workgroup/Domain Name: →　「 WORKGROUP 」 ・Use password encryption? →　「 Yes 」 ・Modify smb.conf to use WINS settings from DHCP? →　「 No 」 ・How do you want...","categories": ["サーバ構築","玄箱"],
        "tags": ["Debian","Samba"],
        "url": "/2009/12/22/22002031/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ － ファン自動制御！",
        "excerpt":"今日はうちの玄箱ＨＧのファン回転スピードを ハードディスクの温度にあわせて 高速回転・低速回転させることをしてみました。 というのも、 玄箱のファンは確か回転スピードを制御できるはず。 なのに、夏でも冬でもうちの玄箱はいつも高速回転っぽい。 と思ったからです。 玄箱は、デフォルトで ・1.0 Gbps 環境では高速回転 ・100 Mbps 環境では低速回転 のようです。 うちは 1.0Gbps 環境なので、 今のところ、常に高速回転のようです。 そこで、うちのFedora サーバでも利用している ハードディスク温度測定ツール「 hddtemp 」を 玄箱ＨＧにも導入して、 温度によってファン回転スピードを コントロールしてみようと考えました。 作業記録 １．「 hddtemp 」インストール KURO-BOX:~# aptitude install hddtemp 途中の質問は以下のように回答しました。 ・Do you want /usr/sbin/hddtemp to be installed SUID root? →　「 Yes 」 Interval between...","categories": ["サーバ構築","玄箱"],
        "tags": [],
        "url": "/2009/12/23/23002029/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１２ － ＷａｋｅＯｎＬａｎ！",
        "excerpt":"今日は、 うちのＦｅｄｏｒａ１２サーバから ＬＡＮ内の別のマシンを「ＭａｇｉｃＰａｃｋｅｔ」を 使って起動「ＷａｋｅＯｎＬａｎ」ができるか試してみました。 作業記録 １．ＢＩＯＳ設定 起動させようとしているマシンのＢＩＯＳ設定画面で、 ＷａｋｅＯｎＬａｎの設定を有効にする。 ※ＷａｋｅＯｎＬａｎ機能がないマザー、ネットワークカード では「ＷａｋｅＯｎＬａｎ」はできません。 ２．Ｍａｃアドレスの確認 起動させようとしているマシンのＭａｃアドレスを確認する。 Ｆｅｄｏｒａの場合は [ ifconfig ]コマンド実行。 ネットワークカードの[ HWaddr ]の数字 “:::::” を控える。 Ｗｉｎｄｏｗｓの場合はコマンドプロンプトで [ ipconfig /all ]コマンド実行。 ネットワークカードの[ Physical Address ]の数字 “-----” を控える。 ３．ツールインストール こちらのサイトから、 [ wakeonlan-0.41-0.fdr.1.noarch.rpm ]というファイルをダウンロードし、 インストールする。 [root@pulsar ~]# wget http://gsd.di.uminho.pt/jpo/software/wakeonlan/downloads/wakeonlan-0.41-0.fdr.1.noarch.rpm [root@pulsar ~]# rpm -ivh wakeonlan-0.41-0.fdr.1.noarch.rpm ４．動作確認 あらかじめ起動させようしているマシンの電源を落としておいてから、 以下のように実行。...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2009/12/24/24002012/",
        "teaser": null
      },{
        "title": "Loto6 No.477",
        "excerpt":"昨日ののロト６（第４７７回）の結果です。   今回は都合で購入していません。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   ではまた。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2009/12/25/25002024/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１２ － Ｓａｍｂａエラー！",
        "excerpt":"今日ふと、 うちのＦｅｄｏｒａ１２サーバのログ [ /var/log/messages ]を 見てみると こんなメッセージがでているのを発見しました。 Dec 17 11:14:24 pulsar smbd[30572]: Unable to connect to CUPS server localhost:631 - 接続を拒否されました ＣＵＰＳサーバに接続できない、見たいなエラー。 ｓａｍｂａの設定[ /etc/samba/smb.conf ]では load printers = no disable spoolss = yes としているが・・・ と思って調べてみました。 なにやら、[ /etc/samba/smb.conf ]の printing = cups がかかわっているようです。 これだと、プリンタ設定していないのにＣＵＰＳサーバを探しに行ってエラーになっていたようです。 [ /etc/samba/smb.conf ]のこの部分を 以下のようにすればよいみたいです。 printing = bsd...","categories": ["サーバ構築"],
        "tags": ["Fedora","Samba"],
        "url": "/2009/12/26/26002049/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１２ － Ｓａｍｂａエラー（その２）",
        "excerpt":"前回、Ｓａｍｂａのエラーについて話しましたが、 まだＳａｍｂａ絡みのエラーがありました。 それは、こんなエラーです。（２つ） １つ目のエラー Dec 17 13:53:52 pulsar smbd[2664]: Matchname failed on p183.mk-mode.com ::ffff:192.168.11.13 うまく名前解決ができていない、てこと？！ 調べてみると、 [ 192.168.11.13 ] と [ ::ffff:192.168.11.13 ] が 別のアドレスだと認識されているためのようだ。 解決策としては、 [ /etc/hosts ] ファイルを以下のようにすればよいようです。 192.168.11.13 p183 　↓ 変更 ::ffff:192.168.11.13 p183 これで、このエラーは出なくなりました。 ※上記の方法とは別に、以下のような方法もありましたが、 うまくいきませんでした。 −−−−−−−−−−−−−−−−−−−− Ｓａｍｂａ３．＊からはホスト名の逆引き機能が デフォルトで「 Ｏｎ 」 になっているらしい。 なので、「 Ｏｆｆ 」にすべく ｓａｍｂａの設定[ /etc/samba/smb.conf...","categories": ["サーバ構築"],
        "tags": ["Fedora","Samba"],
        "url": "/2009/12/27/27112608/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１２ － ＢＩＮＤエラー！",
        "excerpt":"こんにちは。 今日もログ[ /etc/log/messages ]に出ていたエラーについてです。 今回はＢＩＮＤのエラーです。 Dec 17 18:04:43 pulsar named[4425]: network unreachable resolving 'www.u-1.net/A/IN': 2001:503:231d::2:30#53 同じようなメッセージが多数！ 調べてみた結果、 「 ＩＰｖ６ 」に関するエラーのようです。 当方は、「 ＩＰｖ６ 」は使用していないので、 「 ＩＰｖ４ 」のみ有効にすればよいようです。 とはいえ、ＢＩＮＤの設定[ named.conf ]では #listen-on-v6 port 53 { ::1; }; とコメントアウトしているのに。。。 さらに調べてみると、 [ /etc/sysconfig/named ]に以下の記述を追加して、 「 ＩＰｖ４ 」のみ有効にするようにするとよいらしい。 [root@pulsar ~]# vi /etc/sysconfig/named OPTIONS=\"-4\"　←　一番最後に追加 でもちろん、ＢＩＮＤを再起動させます。 [root@pulsar...","categories": ["サーバ構築"],
        "tags": ["DNS","Fedora"],
        "url": "/2009/12/28/28170045/",
        "teaser": null
      },{
        "title": "Ｐ１８３ － ケースファン交換！",
        "excerpt":"おはようございます。   今日はうちの今メインで使用している自作マシンのケースファンを交換しました。   ケースというのはＡｎｔｅｃのＰ１８３です。 このケースには標準で１２センチのファンがケースの背面上部と天板後部に設置されているもので、 背面上部のスイッチにより３段階の回転数設定ができます。           ３段階というのは、 回転数　・・・　１２００／１６００／２０００ｒｐｍ 風圧　・・・　３９／５６／７９ＣＦＭ ノイズレベル　・・・　２５／２８／３０ｄＢ のようです。   最近寒いので、ケース内もそれほど熱くはならなので、 一番回転数を下げて使用していましたが、 それでも、風の音が気になる程度のノイズです。（２５ｄＢですから・・・）   そこで、ケースファン２つとも交換することにしました。 交換したのは、 ＥＮＥＲＭＡＸのＥＶＥＲＥＳＴ「 **ＵＣＥＶ１２ **」です。 温度センサーによって、自動で回転数を制御する超静音タイプです。 おまけに青色ＬＥＤで光ります。（ＯＮ・ＯＦＦスイッチあり）      回転数　・・・　５００　～　１０００　ｒｐｍ　（２５℃～４５℃）　・自動制御 ノイズレベル　・・・　８　～　１２　ｄＢ です。   取り付けはビスの代わりにアイソレータというゴム製の部品でも可能です。 うちのＰ１８３の場合、 背面のファンはアイソレータで取り付け、 天板のファンは天板が厚いためビスで取り付けました。 また、温度センサーも適当な場所に取り付けました。 ※ただ、元々ついていた回転数制御用のスイッチ部分が穴が開いた感じになります。   ＬＥＤをＯＮにした状態のショットです。      でも、実際はＬＥＤはＯＦＦにして使いますが。。。   ケースファン自体は多少静かになったように思います。 というのも、ＣＰＵファンがうるさいみたい。。。 要チューニングです。。。   それと、近いうちにケースの前面にも吸気用ファンをつけたりしたいと思案中。 （ファンコンも欲しいな・・・）   ではまた。   ","categories": ["自作PC"],
        "tags": ["Antec","P183"],
        "url": "/2009/12/29/29102841/",
        "teaser": null
      },{
        "title": "Ｐ５Ｑ Ｄｅｌｕｘｅ － ＣＰＵクーラー回転数制御！",
        "excerpt":"こんばんは 今日はうちの自作マシンのＣＰＵクーラーの回転数をチューニングしてみました。 （ケースファンを超静音のものに交換したのにあわせ、ＣＰＵ回転数も調査・調整しました） マザーボード　・・・　ＡＳＵＳ 「 Ｐ５Ｑ Ｄｅｌｕｘｅ 」 ＣＰＵクーラー　・・・　ＳＣＹＴＨＥ 「 ＳＣ−ＳＣＫＢＴ１０００ 」（ＰＷＭ対応） です。 ＢＩＯＳでＣＰＵクーラーの回転を制御できるようです。 そこで、以下のように設定しました。 １．マシン起動時ＢＩＯＳ画面を表示させる。（起動時、ＤＥＬキー押下） ２．「 電源 」 − 「 ハードウェア・モニター 」 の画面を表示させる。 ３．「 ＣＰＵ Ｑ−Ｆａｎ Ｃｏｎｔｒｏｌ 」 を 「 有効 」にし、「 ＣＰＵ Ｆａｎ Ｐｒｏｆｉｌｅ 」 を 「 標準 」 に設定する。 通常はこれでよいです。 しかし、 今回のうちの環境（ハード構成）の場合、 マシン起動時にＣＰＵクーラーの回転数が低すぎるため、 「 ＣＰＵファンエラー！ 」 が発生してしまいます。...","categories": ["自作PC"],
        "tags": ["ASUS"],
        "url": "/2009/12/30/30000437/",
        "teaser": null
      },{
        "title": "ＷｉｎＸＰ － ネットワークドライブの名前を変更するコマンド！",
        "excerpt":"こんにちは。 今日は、ＷｉｎｄｏｗｓＸＰでのコマンド（ＢＡＴ処理）についてです。 ＬＡＮ上の別のマシンの共有ドライブ・フォルダで、 自分がよく使用するものはネットワークドライブとして設定することがよくあると思います。 ネットワークドライブの設定自体は用意にできると思います。 （エクスプローラ上からやＤＯＳコマンドで） ただ、ネットワークドライブ設定直後はデフォルトの長～い名前が表示されてしまいます。 うちの場合、 Ｆｅｄｏｒａでサーバを立てているので、 Ｓａｍｂａのフォルダをネットワークドライブとして設定すると、 こんな長～い名前で表示されます。 エクスプローラ上で名前を変更すればいいのですが、 これをＢＡＴで実行できないものか、と調べてみました。 「 NET USE 」コマンドや「 LABEL 」コマンドでも無理みたいです。 ただ、ＶＢＳｃｒｉｐｔならできるようです。 そこで、次のようなＶＢＳｃｒｉｐｔファイルを作成してみました。 strDrive = \"U:\\\" '← ドライブ文字の指定 strName = \"Server - SAMBA\" '← 変更後の名前 With CreateObject(\"Shell.Application\").NameSpace(strDrive) .Items().Item().Name = strName End With ファイル名は拡張子が「 .vbs 」なら何でもＯＫです。 このＶＢＳｃｒｉｐｔをコマンドプロンプトで実行させてみると 見事にネットワークドライブの名前が変更できました。 というわけで、 こんなバッチも作成してみました。 （ネットワークドライブを割り当てて、名前を変更するバッチ） @NET USE...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2009/12/31/31122755/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － ＳｉｍｉｌａｒＰｏｓｔｓ導入！",
        "excerpt":"というか、 あけましておめでとうございます。 本年もよろしくお願いいたします。 ということで、 今日は、ＷｏｒｄＰｒｅｓｓのプラグインで、 投稿した記事に関連する記事を自動で抽出して表示させる ことのできるものを導入してみました。 いろいろ調べてみた結果 『 ＳｉｍｉｌａｒＰｏｓｔｓ 』 というプラグインを導入してみることにしました。 導入記録 １．アーカイブファイルのダウンロード こちら [ All Things Seen and Unseen - plugins] から 「 Similar Posts v2.6.2.0 」 「 Post-Plugin Library v2.6.2.1 」 というＺＩＰファイルをダウンロードします。 ※バージョンは当記事執筆時点のものです。 ２．アーカイブファイルの展開 先ほどダウンロードしたＺＩＰファイルを展開します。 ３．ファイルのアップロード 展開したファイルをサーバの [ wordpress - wp-content - plugins ] フォルダへ アップロードします。 ４．プラグインの有効化...","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/01/01/01002026/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － 月別アーカイブフォーマット変更！",
        "excerpt":"今日は、ＷｏｒｄＰｒｅｓｓのサイドバーに表示させている月別アーカイブのフォーマットの変換についてです。 通常、投稿日の日付は管理画面でフォーマット変更が可能ですが、月別アーカイブのフォーマットは管理画面では変更できません。 １桁の月の場合に頭にゼロを付与して２桁にしたいんです。 早速、直接ＰＨＰを修正すればよいのかと思い、該当の箇所を探してみました。 どうやら、「 general-template.php 」ファイルの関数 wp_get_archives 内の $text = sprintf(__('%1$s %2$d'), $wp_locale-&gt;get_month($arcresult-&gt;month), $arcresult-&gt;year); の行のようです。 “2009年01月”という表示に変更すべく $text = sprintf(__('%04d %02d'), $arcresult-&gt;year, $wp_locale-&gt;get_month($arcresult-&gt;month)); としてみましたが、 これでは、数字は指定の桁数で表示されるものの、”年”と”月”の文字が表示されません。 よくよく調べてみると、どうやら翻訳設定ファイルが変換に絡んでいるようです。 デフォルトの場合、”January 2009”という文字列を”2009年1月”と変換するようになっている。 なので、’%04d %02d’[ 2009 01 ]にすると該当の翻訳がないので、不正な表示なる。 ということは翻訳ファイルを修正すれば、目的の表示になるようです。 作業手順 １．翻訳ファイル修正ソフトの入手 「 Poedit 」からソフト「 poedit-1.4.3-setup.exe 」をダウンロードする。 ※当記事執筆時点では、バージョン「１．４．３」が最新でした。 ２．翻訳ファイル修正ソフトのインストール ダウンロードしたＥＸＥを実行して、普通にインストールする。 ３．翻訳ファイルの修正 ●インストールした「 Ｐｏｅｄｉｔ 」を実行する。 ●言語選択で「 Japanese...","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/01/02/02002030/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａサーバがダウン！",
        "excerpt":"今日昼過ぎ、外出先から自宅サーバのＷｅｂカメラ画像を確認していると、昼前の画像で更新が途絶えているではありませんか！？ ホームページもメールもブログも使えなくなっていました。 夕方帰宅後、ログをチェックしてみると今日の朝９時ころから、こんなログが延々と出力されていました。 Jan 1 09:00:06 pulsar kernel: ata1.00: exception Emask 0x0 SAct 0x0 SErr 0x0 action 0x6 Jan 1 09:00:06 pulsar kernel: ata1.00: BMDMA stat 0x6 Jan 1 09:00:06 pulsar kernel: ata1.00: cmd 35/00:88:df:95:4a/00:01:0e:00:00/e0 tag 0 dma 200704 out Jan 1 09:00:06 pulsar kernel: res 51/84:00:66:97:4a/84:00:0e:00:00/e0 Emask 0x30 (host...","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2010/01/03/03002031/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳにて自宅サーバ稼動開始！",
        "excerpt":"おはようございます。   先日、今まで稼動させていたＦｅｄｏｒａ１１による自宅サーバがダウン（ハードディスククラッシュ）したため、 補助用のＡｔｏｍマシンに「 ＣｅｎｔＯＳ５．４ 」をインストールし、本稼動を開始しました。    今まで、Ｆｅｄｏｒａばかりだったんですが、Ｆｅｄｏｒａより安定稼動だというちまたのうわさ（実際、Ｒｅｄｈａｔのクローンにあたるディストリビューションなので）により、今回思い切って「 ＣｅｎｔＯＳ５．４ 」にしてみました。   インストール自体は、   「 ＣｅｎｔＯＳで自宅サーバー構築 」そのままです。   感謝、感謝です。   Ｆｅｄｏｒａサーバ構築とほとんど同じです。   とりあえず、これで様子を見てみます。   途中、あれこれチューニングはすると思います。   では。   ","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/01/04/04092008/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － 予約投稿不具合！",
        "excerpt":"実は機能Ｆｅｄｏｒａサーバがダウンするまでは、「ＷｏｒｄＰｒｅｓｓ」は「２．９」にアップデートしたものを使用していました。   しかし、指定時間に自動的に投稿する予約投稿が失敗する現象が発生するようになっていました。   いつも同じ時間に投稿するようにしていたんで、この機能が効かないと不便でしかたありませんでした。   ※でも、サーバダウンから仮復旧させたときには「ＷｏｒｄＰｒｅｓｓ」は「２．８．６」に戻したんで、その心配はなくなりましたが。。。    きになるんでちょっと調べてみると、 同じ様な不具合が発生している人がたくさんおられました。 次の「２．９．１」では不具合は改修されるとのこと。   当方は「ＷｏｒｄＰｒｅｓｓ」は「２．９」のときには以下のような対応していました。   あるサイトによると、ファイルの一部を少し書き換えるだけで問題は修正されると、説明があったので取り急ぎ試してみました。   その方法は 「 wp-includes/cron.php 」を以下のように修正する。       //wp_remote_post( $cron_url, array('timeout' =&gt; 0.01, 'blocking' =&gt; false, 'sslverify' =&gt; apply_filters('https_local_ssl_verify', true)) );         ↓    修正     wp_remote_post ($cron_url, array ('timeout' =&gt; 5, 'blocking' =&gt; false));   詳細はよくわかりませんが、タイムアウトの設定を0.01秒から数秒程度に設定しなおすと予約投稿が機能するようになるようです。   参考URL 「 http://wordpress.org/support/topic/293727 」   だいたい、ＷｏｒｄＰｒｅｓｓのアップデート通知があってからすぐにアップデートすると何か不具合が発生するんで、ちょっと様子を見てからアップデートした方がいいですね。   ではまた。   ","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/01/05/05002052/",
        "teaser": null
      },{
        "title": "ＫｎｏｐｐｉｘをＵＳＢブート！",
        "excerpt":"今日は、 ＫｎｏｐｐｉｘのＩＳＯイメージをＵＳＢメモリに起動可能の状態で書き込んで、ＵＳＢブート可能のマシンで起動させる。 ということをしてみました。 なぜなら、 いつもＰＣのパーティションを丸ごとバックアップとる際に、ＣＤ・ＤＶＤ起動のＬｉｎｕｘ『Ｋｎｏｐｐｉｘ』を使用しているんですが、バージョンアップしたものを使いたい場合に、いちいちＩＳＯファイルをディスクに書き込まなきゃいけないのが、面倒だし、ディスクがもったいない。 からです。 作業記録 ※ＷｉｎｄｏｗｓＸＰ（ＳＰ３）上での作業です。 （実際にはＩＳＯファイルそのものを書き込むのではなく、ＩＳＯファイルを一旦展開してファイルをコピーしています） １．ＵＳＢメモリの準備 ＵＳＢメモリをＦＡＴ３２でフォーマットしておきます。 （もちろん使用するＵＳＢメモリはＩＳＯファイルが収まる容量のものです） ※今回当方はＤＶＤ版の『Ｋｎｏｐｐｉｘ』を書き込みたいので、８ＧＢの低価格のＵＳＢメモリを使用します。 ２．ＩＳＯファイルの準備 ＵＳＢメモリに書き込むＩＳＯファイルを準備します。 ＩＳＯファイルを解凍できるツールで解凍しておきます。 ※今回当方は『Ｋｎｏｐｐｉｘ６．２日本語版』（ＤＶＤ版）のＩＳＯファイルを使用します。 ３．「 syslinux 」ファイルの準備 ＩＳＯファイルだけではＵＳＢメモリから起動できないようです。 そこでこちら[ http://www.kernel.org/pub/linux/utils/boot/syslinux/ ]から「 syslinux 」（ＺＩＰファイル）をダウンロードし、展開しておきます。 ※当記事執筆時点では、[ syslinux-3.84.zip ] が最新でした。 ※当方はＩＳＯファイルの解凍には「 Ｅｘｐｌｚｈ 」を使用しました。 ４．ファイルコピー ＩＳＯファイルを展開してできたファイルの中からを以下をＵＳＢメモリのルートにコピーする。 ・「 \\boot\\isolinux 」フォルダ内のファイル ・「 KNOPPIX 」フォルダ ※今回はＤＶＤのイメージなので４ＧＢ近くあります。従ってコピーに時間がかかります。 ５．「 syslinux.cfg 」の作成 ＵＳＢメモリのルートにコピーされたファイルの中の「 isolinux.cfg 」を「 syslinux.cfg 」に名前変更する。...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Knoppix"],
        "url": "/2010/01/06/06002045/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１１ － デスクトップ環境インストール！",
        "excerpt":"今日は、ＣＵＩベースで構築済みのＦｅｄｏｒａ１１にデスクトップ環境をインストールしてみました。 本来サーバとして稼動させるだけならデスクトップ環境は不要ですが、どうしてもやってみたいことが発生したためのチャレンジです。 やってみたいことというのは、Ｆｅｄｏｒａの自動インストールＤＶＤを作成することです。 （しらべたサイトでは、デスクトップ環境での方法が記載してありました） 最低限の設定を組み込んでおけば、ＤＶＤからブート後に人間が何もすることなくインストールが完了する、というものです。 これだとディスプレイも不要です。 インストールといっても、細かな設定はしないといけないと思います。 あとはリモート接続で設定します。。。 ということで、まずはデスクトップ環境（Ｘ・ＧＮＯＭＥ）のインストールです。 作業記録 １．「 Ｘ 」・「 ＧＮＯＭＥ 」のインストール 以下のようにコマンド入力します。 ただこれだけです。 # yum groupinstall \"X Window System\" \"GNOME Desktop Environment\" ※２６０ＭＢ位あります。 ※依存関係の問題が発生した場合は、もちろん依存関係のインストールをして再度上記コマンド実行。 ２．「 Ｘ 」・「 ＧＮＯＭＥ 」の起動 以下のコマンドで「 Ｘ 」が起動します。 # startx ３．ＯＳ起動時に自動起動 ＯＳ起動時に「 Ｘ 」・「 ＧＮＯＭＥ 」を自動的に起動させたければ、以下のようにします。 # vi /etc/inittab id:3:initdefault: 　↓　変更 id:5:initdefault:...","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2010/01/07/07002020/",
        "teaser": null
      },{
        "title": "Loto6 No.478",
        "excerpt":"本年最初のロト６（第４７８回）の結果です。   わたしのことはどうでもいいです。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   ではまた。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2010/01/08/08002015/",
        "teaser": null
      },{
        "title": "マウスリニューアル！",
        "excerpt":"実は、正月早々マウスをリニューアルしました。   メインマシンでしようしていた、マイクロソフトのマウスの左ボタンがあまりに不調だったためです。 左クリックの反応が悪いんです。 「 Microsoft Inltelli Mouse Explorer 4.0 」というマウスです。 ネットで調べてみると、左クリックに不具合ある方が大勢いらっしゃいました。    部品を交換することも可能のようですが、この際新しいのが欲しくなり、購入に踏み切りました。   地元の家電量販店で購入しました。   ロジクールの 「 ＭＸ Ｒｅｖｏｌｕｔｉｏｎ 」 です。   商品詳細は、こちら。   数年前から、マウス界の人気ナンバーワン（？）みたいなヤツです。 もっと新しくていいものもありますが、このマウスのことが気になっていたし、地元の家電量販で通常¥１２，８００のところが、期間限定でナント ¥７，９８０ で販売されていたので、衝動買いです。 ※ネットで購入するよりもかなり安い！   ↓　こちらから「 レーザー 」・「 ワイヤレス」のマウスを購入可能です。      実際に使用してみた感じは、さっきまで使用したマウスがあまりに使いにくくなっていたせいもあるのか、非常に使いやすいです。 ワイヤレスだけど、電池は使用せず、携帯電話みたいにクレードルで充電するタイプです。   非常に満足している今日この頃です。   ではまた。   ","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2010/01/09/09002042/",
        "teaser": null
      },{
        "title": "ハードディスク － 診断！",
        "excerpt":"この間、クラッシュ（？）したＦｅｄｏｒａサーバのハードディスク（ＳＡＴＡ）を取り外し、とりあえずＷｉｎｄｏｗｓマシンで使えるようにＵＳＢ接続のＨＤＤケースに入れて診断してみました。 以下、自分用の記録です。 参考になるかどうかわかりませんが。。。 作業記録 １．ＣｒｙｓｔａｌＤｉｓｋＩｎｆｏ 「ＣｒｙｓｔａｌＤｉｓｋＩｎｆｏ」で確認した結果は、「代替処理済セクタ数」が１６進表示で「１１」（１０進で「１７」）でした。 ハードディスクの健康状態は黄色表示の「注意」でした。 ※そういえば、このハードディスクでサーバを構築する前にＷｉｎｄｏｗｓマシンでもこの状態でした。 やっぱり危ない状況だったみたい。。。 ２．フォーマット とりあえず、このディスクはサーバとしては使用しないことにしたので、一旦ＷｉｎｄｏｗｓＸＰマシンでＮＴＦＳでフォーマットしました。（予備用として使用する目的で） ３．ディスクチェック もうこのディスクはある意味どうでもいい状態なので、ＷｉｎｄｏｗｓｓＸＰのコマンドプロンプトから「 chkdsk 」を実行してみました。 chkdsk f: /f /r “f:” はＵＳＢ接続したハードディスクのドライブ、 “/f” はファイルシステム障害（論理障害）を修復するオプション設定、 “/r” は物理障害を修復するオプション です。 ※いろいろ調べてみると、壊れている（もしくは、壊れかかっている）ディスクに対して”chkdsk”コマンドを実行するととりかえしのつかない状態になる（完全に壊れる）可能性がある、みたいな事が記載されています。 実際に、自分のマシンではないのですが（職場のマシンで）このようなことがありました。 当方は、今回はもう完全に壊れてもＯＫと判断しているの堂々とこの処理をしています。 充分に思慮してから処理を施行してください。 ４．結果確認 結果は以下のとおり。 「 chkdsk 」上は特に問題ないみたい。。。 ファイル システムの種類は NTFS です。 ボリューム ラベルは GENZO です。 CHKDSK はファイルを検査しています (ステージ 1/5)... ファイルの検査を完了しました。 CHKDSK はインデックスを検査しています...","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2010/01/10/10002046/",
        "teaser": null
      },{
        "title": "CentOS - USBデバイスからインストール！",
        "excerpt":"前回は、 ＫｎｏｐｐｉｘをＵＳＢデバイスにインストールして、ＵＳＢブートさせることをしました。 今回は「ＣｅｎｔＯＳ」のインストールイメージをＵＳＢデバイスにコピーし、ＵＳＢデバイスからインストールしてみることを試してみました。 ※よくある方法としては、ブートイメージだけをＵＳＢデバイスにインストールして、ＵＳＢ起動後にＨＴＴＰやＦＴＰ接続してＯＳインストールを行う、というのがあります。 しかし、せっかく手元にＩＳＯイメージファイルがあるので、そいつを使用します。 当然、ＵＳＢデバイスから起動できるマシンが必要で、ＵＳＢデバイスから起動できるようにＢＩＯＳ設定をしておきます。 【 2011/12/22 追記 】 また、以下の作業では syslinux の都合上、USB デバイスを FAT32 でフォーマットしています。 FAT32 では 4GB 超のファイルは扱えません。ISO ファイルのサイズが 4GB を超える場合は別の方法をお試しください。（ネットインストールなど・・・） 作業記録 １．ＵＳＢデバイスの準備 もちろんＩＳＯファイルが収まる容量のＵＳＢデバイスを準備します。 FAT32 でフォーマットしておきます。 ※今回当方は５ＧＢのＵＳＢ接続のポータブルＨＤＤを使用します。 ２．「syslinux」の準備 ＵＳＢデバイスを起動可能にするための「syslinux」をダウンロードし、展開しておきます。 ※当方は、こちらから「 syslinux-3.84.zip 」をダウンロードしました。 ３．ＩＳＯファイルの準備 ＵＳＢデバイスに書き込むＩＳＯファイルを準備します。 ダウンロード等で手元にＩＳＯファイルが準備できたら、展開もしくはマウントソフトでマウントしておきます。 ※今回当方は「 CentOS-5.4-i386-bin-DVD.iso 」のＩＳＯファイルを使用します。 ４．ファイルコピー 先ほど展開したＩＳＯファイルの中から、「 isolinux 」フォルダ内のファイルを全て、ＵＳＢデバイスのルートへコピーします。 そして、「 isolinux.cfg 」を「 syslinux.cfg 」に名称変更しておきます。 ５．ＩＳＯイメージのコピー...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/01/11/11002001/",
        "teaser": null
      },{
        "title": "CentOS - カーネルアップデート！",
        "excerpt":"今日は、予備機として待機中のCentOSマシンのカーネルをバージョンアップしてみました。 当方の現在のCentOSのカーネルバージョンが「 2.6.18-164.9.1.el5 」ですが、これを現時点での Linux の最新カーネル「 2.6.32.3 」にしてみたいと思い作業しましたが、失敗。 「 カーネルパニック 」発生！！ どうやら、うまくマウントができていないようです。 思い当たる対処方法やネットで調べたことを試してみましたが、ダメでした。 （ドライバのエラーも見受けられたので、相性とかも含めて調査しましたが） 導入しようとしていたカーネルのバージョンの最終更新日付が昨日のカーネルでした。（実際にこの作業を行った日の前日） リリースされたばかりです。まだ不具合があるのでしょう！？ と勝手に判断し、急遽、最新ではなく１ヶ月前が最終更新日のカーネルにしてみました。 導入したカーネルバージョンは「 2.6.30.10 」です。 今度は一発で成功しました。 なんでもそうですが、最新のものにすぐ食いつくのは危ないですな！？ （おかげで、多少カーネルについての知識が増えましたが・・・） 作業記録 １．カーネルソースの準備 The Linux Kernel Archives から最新のカーネルをダウンロードし、”/usr/src”フォルダへ移動後、解凍しておきます。 # wget http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.30.10.tar.bz2 # mv ./linux-2.6.30.10.tar.bz2 /usr/src # cd /usr/src # tar xvjf linux-2.6.30.10.tar.bz2 ２．カーネル構築の初期化 以前のビルドの残存物を削除すべく、カーネル構築の初期化という作業を行います。 カーネルをコンパイルする前に実行したほうがいいようです。 # cd linux-2.6.30.10　←　解凍されてできたディレクトリへ移動...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/01/12/12002007/",
        "teaser": null
      },{
        "title": "ｐｒｏｃｍａｉｌ － 特定のメールのみ転送！",
        "excerpt":"今日は、稼動中の自宅サーバ（ＣｅｎｔＯＳ）で自分宛に届いたメールのうち、条件に一致するメールのみを別のメールアドレス宛に転送する、ということをしました。 （自宅サーバをＣｅｎｔＯＳにしてからはまだ導入していなかったので） ※具体的には、ブログにコメントがあった際に届く自分宛のメールを携帯に転送します。 よくある「 ｐｒｏｃｍａｉｌ 」を使用します。 単純な転送設定ですが、以下がその作業手順です。 作業記録 １．「 procmail 」のインストール インンストールされていなければ、インストールします。 # yum -y install procmail ２．「 .forward 」ファイルの作成 以下の内容で「 .forward 」を作成し、所有者の設定をします。 # vi /home/＜ユーザ名＞/.forward \"|IFS=' ' &amp;&amp; exec /usr/bin/procmail -f- || exit 75 #~/Maildir/\" # chown ＜ユーザ名＞:＜ユーザ名＞ /home/＜ユーザ名＞/.forward ※「 ~/Maildir/ 」の部分はメールボックスが「 /home/＜ユーザ名＞/Maildir 」形式の場合です。 「 /var/spool/mail/＜ユーザ名＞ 」形式の場合は「 ~/Maildir/ 」の部分が＜ユーザ名＞となるようです。...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/01/13/13002031/",
        "teaser": null
      },{
        "title": "ブログデザインマイナーチェンジ！",
        "excerpt":"今日は、当ブログのデザインを若干ですが変更しました。   ただそれだけです。   どうでしょう？   もちろん   Ｗ３Ｃの標準規格は満たしています。（ＨＴＭＬ、ＣＳＳとも）   以下で確認いただけます。         まだまだ、改良すべき点はあると思いますが。。。   では。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/01/14/14002026/",
        "teaser": null
      },{
        "title": "Loto6 No.479",
        "excerpt":"昨日のロト６（第４７９回）の結果です。   私は最近買えていません。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   ではまた。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2010/01/15/15002031/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － アップグレード！",
        "excerpt":"先日、うちのＦｅｄｏｒａサーバがダウンした時にＣｅｎｔＯＳに切り替えたんですが、   その時にＷｏｒｄＰｒｅｓｓはアップデートされているようだったんで、思い切って最新バージョン「 ２．９．１ 」を導入してみました。   本当は、いつもアップデートしたときに限って不具合が残っていたりするんで、少し不安はありました。   前回「 ２．９ 」にアップデートしたときには、予約投稿に不具合がありました。（他にもあったようですが）   とりあえず、予約投稿の不具合が解消されていることを願っての今回のアップデートでした。   アップデートして数日使用してみましたが、当方が使用している限りでは今のところ不具合はありません。   めでたし、めでたしです。   （自分に関係ないところでは不具合は発生しているかもしれませんが。。。）   ま、今日はそれだけです。   じゃ。   ","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/01/16/16002016/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ － オリジナルインストールＩＳＯ作成！",
        "excerpt":"今日は、ＣｅｎｔＯＳのオリジナルインストールＤＶＤイメージを作成すること挑戦しました。 （とりあえずのインストールが自動でできるインストールＤＶＤイメージです） 通常ＧＵＩ画面で「 ｒｅｖｉｓｏｒ 」とか「 ｋｉｃｋｓｔａｒｔ 」を使用してインストールオプションを設定したｋｓファイルを作成し、それを既存のインストールイメージに組み込ませてオリジナルのインストールイメージを作成するような方法を使用するようです。 今回は、ＣｅｎｔＯＳを普通にインストールした際に作成されるｋｓファイルを流用して作成することにします。 ※ＩＳＯイメージの作成はＣｅｎｔＯＳ上で行います。 作業記録 １．「 mkisofs 」コマンドの準備 ＩＳＯイメージを作成するパッケージをインストールしておきます。 # yum -y install mkisofs ２．デフォルトのＩＳＯイメージの準備 デフォルトのインストールＩＳＯイメージを適当な場所に準備し、マウントします。 # mkdir /home/tmp/iso　←　マウントポイントの作成 # mount -t iso9660 -o loop,rw /home/tmp/CentOS-5.4-i386-bin-DVD.iso /home/tmp/iso　←　マウント # ls /home/tmp/iso 　←　ＩＳＯイメージの内容確認 CentOS RELEASE-NOTES-en_US RELEASE-NOTES-pt_BR EULA RELEASE-NOTES-en_US.html RELEASE-NOTES-pt_BR.html GPL RELEASE-NOTES-es RELEASE-NOTES-ro NOTES RELEASE-NOTES-es.html RELEASE-NOTES-ro.html RELEASE-NOTES-cs RELEASE-NOTES-fr...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/01/17/17002027/",
        "teaser": null
      },{
        "title": "ＭＢＭでマルチブート！",
        "excerpt":"今回は、急遽ＣｅｎｔＯＳとＦｅｄｏｒａでマルチブートを行ってみたくなり、予備のマシンでチャレンジしてみました。 ２段階ブート可能な「 ＭＢＭ 」というマルチブートマネージャを使用します。 ※よくあるＷｉｎｄｏｗｓをインストールしてからＬｉｎｕｘをインストールしてｇｒｕｂでＯＳを選択するようなデュアルブートは１段階ブートと言うようです。 詳細は、チョット調べればわかると思いますので、ここでは説明しません。 「 ＭＢＭ 」のインストール方法にはいろいろあります。 今、予備のマシンには現状ではＦｅｄｏｒａ１２がインストールされているので、Ｆｅｄｏｒａ上から「 ＭＢＭ 」をインストールすることも可能です。 しかし、Ｌｉｎｕｘが入っていない場合とか、ＦＤドライブがない場合とか、ＵＳＢメモリでのブートが不可能の場合のことも考慮して、ＩＳＯファイルを作成してＣＤに焼き付けてインストールすることにしました。 作業記録 ※当方は200GBのハードディスクを使用し、最終的にＯＳを３つインストールできるようにパーティション構成は以下のようになるようにしました。 また、４つ以上インストールしようとすると、パーティション構成が若干複雑になると思います。 （基本領域は４つまでしか使用できないため拡張領域を使用することになるから） /dev/hda1　/boot (CentOS用) (200MB) /dev/hda2　/boot (Fedora用) (200MB) /dev/hda3　（空き） (200MB) /dev/hda4　拡張領域 　/dev/hda5　LVM (CentOS用) (65GB程度) 　　　　　　　　swap (2048MB)　←　実装メモリの２倍 　　　　　　　　/ (残り) 　/dev/hda6　LVM (Fedora用) (65GB程度) 　　　　　　　　swap (2048MB)　←　実装メモリの２倍 　　　　　　　　/ (残り) 　/dev/hda7　LVM (予備) (残り) 　　　　　　　　swap (2048MB)　←　実装メモリの２倍 　　　　　　　　/ (残り) １．ＭＢＭのダウンロード 「 ＭＢＭ...","categories": ["PC_Tips","サーバ構築"],
        "tags": [],
        "url": "/2010/01/18/18002005/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ － 丸ごとコピー！",
        "excerpt":"今日は、ハードディスクを丸ごと（パーティションごと）別のハードディスクへコピーしました。 （しかもコピー元のディスク同様にブート可能にします） コピー元のハードディスクからパーティションごとバックアップしたり、 コピー先へパーティションごとリストアしたり、 という作業は、ＤＶＤブートのＫｎｏｐｐｉｘで「 PartitionImage 」を使用しました。 作業記録 １．コピー元バックアップ 当ブログの過去記事、「パーティション丸ごとバックアップ！」のとおりに「 PartitionImage 」を使用してパーティション別にバックアップをとります。 ２．コピー先ハードディスクの準備 「 PartitionImage 」を使用してリストアするには、コピー先はコピー元と同じかそれ以上のサイズのパーティションでなければなりません。 同じかそれ以上のハードディスクをマシンに取り付けます。 そして、コピー元と同じようにパーティションを分割・フォーマットしておきます。 当方は、ＤＶＤブートのＫｎｏｐｐｉｘで「 ＧＰａｒｔｅｄ 」というツールを使用しました。 ３．コピー先へリストア リストアはバックアップとまったく逆の操作をすればよいです。 ４．「ｇｒｕｂ」インストール パーティションごとコピーしただけでは、コピー元と同じように起動しません。 ブートローダをインストールします。 ●今回はＣｅｎｔＯＳのブートローダをインストールしたかったので、ＣｅｎｔＯＳのインストールＤＶＤをセットしてＤＶＤブートします。 ●そして、レスキューモートで起動させます。 （”boot:”プロンプトで”linux rescue”と入力） ●レスキューモードで起動したら、以下のように入力 # grub-install /dev/hdc　←　取り付けたハードディスクが\"hdc\"と認識されていたので ●エラー発生！ “/dev/hdc”は該当なし、みたいなエラーが返ってきました。 dev/hdc does not have any corresponding BIOS drive. ●「 /boot/grub/device.map 」を編集します # vi /boot/grub/device.map...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/01/19/19002025/",
        "teaser": null
      },{
        "title": "ネットワーク速度測定！",
        "excerpt":"最近、あれこれ手を加えたためかネットワークが非常に重い感じがしたので、ネットワークがどれほどの速度を出しているのか測定してみました。 Ｗｉｎｄｏｗｓ、Ｌｉｎｕｘどちらでも使用できる「 Ｎｅｔｐｅｒｆ 」を使用してみました。 作業記録 ※Ｌｉｎｕｘ（ＣｅｎｔＯＳ）での作業です。 また、測定する側・測定される側双方のマシンに「 Ｎｅｔｐｅｒｆ 」が必要です。 １．「 Ｎｅｔｐｅｒｆ 」の準備 以下のようにアーカイブファイルをダウンロード、コンパイルします。 # wget ftp://ftp.netperf.org/netperf/netperf-2.4.5.tar.gz # cp netperf-2.4.5.tar.gz /usr/local/src/ # cd /usr/local/src # tar xvfz netperf-2.4.5.tar.gz # cd netperf-2.4.5 # ./configure # make # make install ※Ｗｉｎｄｏｗｓ版はこちら から ・「 netperf-2.1pl1.exe 」 ・「 netserver-2.1pl1.exe 」 をダウンロードするだけ。 ２．「 ｎｅｔｓｅｒｖｅｒ 」の起動 接続される側のマシンでは、以下のコマンドで「...","categories": ["PC_Tips","サーバ構築"],
        "tags": [],
        "url": "/2010/01/20/20002026/",
        "teaser": null
      },{
        "title": "CentOS - USBハードディスクマウント！",
        "excerpt":"ＵＳＢ接続のポータブルハードディスク（５ＧＢ）を自宅サーバ（CentOS）のバックアップ用として使用してみようと思い、まずは使用可能の状態にするまでを試みました。 忘れるといけないので、記録として残しておきます。 作業記録 １．USBハードディスクの取り付け USBハードディスクを対象のマシンのUSBポートへ接続します。 ２．認識されているか確認 以下のようにして、USBハードディスクがCentOSに認識されているか確認します。 # dmesg ・・・　途中省略　・・・ usb 1-2: USB disconnect, address 2 usb 1-2: new high speed USB device using ehci_hcd and address 3 usb 1-2: configuration #1 chosen from 1 choice scsi2 : SCSI emulation for USB Mass Storage devices usb-storage: device found at 3...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/01/21/21002003/",
        "teaser": null
      },{
        "title": "Loto6 No.480",
        "excerpt":"昨日のロト６（第４８０回）の結果です。   今回当方は、 「昔よく購入していた番号をもし今回購入していたら４等に当選していたのに。。。」 という結果でした。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   ではまた。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2010/01/22/22002001/",
        "teaser": null
      },{
        "title": "ＭＲＴＧで警告メール送信！",
        "excerpt":"当方のサーバ（現在はＣｅｎｔＯＳ５．４）では、ＭＲＴＧによりネットワークトラフィックやディスク・メモリ使用量、ＣＰＵ・ディスク温度などの監視をしています。 今回は、異常な値を記録した際にメールで警告するようにしてみました。 （取り急ぎ、ハードディスク温度について試してみました） 私は玄人ではありませんので、かなり調べた上での作業です。 それでも間違いはあるかもしれませんのであしからず。。。 作業記録 【前提条件】 ＯＳはＣｅｎｔＯＳ５．４ ＭＲＴＧインストール・設定済み （　こちらを参照　→　ＭＲＴＧでハードディスク温度監視！ ） ＭＲＴＧの基本的なことを理解している ※以下に出てくる「パラメータ」と「引数」を混同しないでください。 １．ＭＲＴＧ設定ファイル編集 ＭＲＴＧ設定ファイルに以下の記述を追加します。 SetEnv[_]: EMAIL=\"******\" 　←　メール送信先ユーザ HOST=\"******.mk-mode.com\" 　←　ホスト名（メールの件名に使用） ThreshDir: /var/www/mrtg 　←　作業用ディレクトリを指定 ThreshProgI[_]: /root/mrtg_warning.pl 　←　第一パラメーター閾値を超えた場合に起動 ThreshProgO[_]: /root/mrtg_warning.pl 　←　第二パラメーター閾値を超えた場合に起動 ThreshProgOKI[_]: /root/mrtg_recovery.pl　←　第一パラメーター閾値内に戻った場合に起動 ThreshProgOKO[_]: /root/mrtg_recovery.pl　←　第二パラメーター閾値内に戻った場合に起動 　↑　共通設定（設定ファイルの最初の方に追加） 　↓　「 hddtemp 」用の設定（「 hddtemp 」の所に追加） SetEnv[hddtemp]: URL=\"http://www.mk-mode.com/mrtg/hddtemp.html\"　←　ＵＲＬ（メールの本文に使用） ThreshMaxI[hddtemp]: 60　←　第一パラメーター最大値 ThreshMaxO[hddtemp]: 60　←　第二パラメーター最大値 ThreshMinI[hddtemp]: 10　←　第一パラメーター最小値 ThreshMinO[hddtemp]: 10　←　第二パラメーター最小値 ※...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/01/23/23002009/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ － ＺＡＢＢＩＸで統合監視！",
        "excerpt":"今日はうちのＣｅｎｔＯＳサーバに「 ＺＡＢＢＩＸ 」という統合監視ツールを導入してみました。   「 Ｃａｃｔｉ 」とか「 ＭＲＴＧ 」とかいろいろサーバ監視ツールはありますが、これらは「 サービスが停止した時 」にメールで知らせてはくれません。   そこで探していたら「 ＺＡＢＢＩＸ 」というものを見つけました。   早速インストール・設定してみました。    インストール・設定はこちら「 CentOS Server World - CentOS 5 」のとおりです。 感謝いたします。   ためしに、ＦＴＰサーバを停止してみたら、見事にメールが届きました。   いくつか監視するサービスを設定して、当分試用してみることにします。   では。   ","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/01/24/24002048/",
        "teaser": null
      },{
        "title": "Excel2000 － Yahoo!ﾌｧｲﾅﾝｽのデータ取得失敗！",
        "excerpt":"   【はじめに】  Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照）  以下の記事を参考にすることもお勧めしません。    こんばんは。   実は数年前から「 ネットトレード 」をやっているんですが（本格的ではありませんが）、Ｅｘｃｅｌでデータを収集して自動売買できるようなシステムを作れないかと思って調べていたら、そういう書籍が何個か出版されていました。   その中で、この書籍をアマゾンにて購入してみました。   自動売買ロボット作成マニュアル~エクセルで理想のシステムトレード (現代の錬金術師シリーズ)      で、早速実践してみました。   しかし、一番最初の「 Ｙａｈｏｏ！ファイナンス 」からデータを取得するところでつまづきました。 ＥｘｃｅｌでＷｅｂクエリを使って「 Ｙａｈｏｏ！ファイナンス 」のサイトからデータを取得するところで、エラーで取得できません。      いろいろ調べてみると、「 Ｅｘｃｅｌ２０００ 」ではエラーとなるようです。 （Ｅｘｃｅｌ２００３、２００７では大丈夫みたい）   当方は「 Ｅｘｃｅｌ２０００ 」です。   これは「 Ｙａｈｏｏ！ファイナンス 」のサイトのソースコードが２００８年１０月から変更になったためのようです。 （Ｅｘｃｅｌ２００３、２００７はその変更に対応できるみたい）   株価データが取得できないことには先に進めません。   「 Ｅｘｃｅｌ２００３ 」にするか、それともＥｘｃｅｌはあきらめて「 ＶＢ 」とかでやるか？！   う　～　～　ん　！　！   では。   ","categories": ["PC_Tips","その他"],
        "tags": ["Excel"],
        "url": "/2010/01/25/25002045/",
        "teaser": null
      },{
        "title": "Ｊ２ＳＥインストール！",
        "excerpt":"今日は、ＷｉｎｄｏｗｓＸＰマシンでＪａｖａを使って試してみたいことあったんで、インストール＆設定してみました。 昔、仕事でＪａｖａを使うことがあったので何回かインストールしたことはありました。 今回は記録として残しておくことにします。 今回インストールするのは、「 JDK 6 Update 18 (JDK or JRE) 」です。 作業記録 １．ファイルのダウンロード こちら[ http://java.sun.com/javase/downloads/index.jsp ]から 「 JDK 6 Update 18 (JDK or JRE) 」の「 Download 」ボタンからダウンロードページに行って、必要事項を入力（プラットフォームは「 Windows 」を選択）の上ダウンロードします。 Ｓｕｎのユーザならメールアドレスとパスワードを入力します。 （当方はＳｏｌａｒｉｓダウンロード時にユーザ登録していました） ※実際にダウンロードしたファイルは「 jdk-6u18-windows-i586.exe 」でした。 ２．インストール ダウンロードしたファイルをダブルクリックで実行します。 （基本的にデフォルトでＯＫのはず） ３．製品登録 インストールが完了するとブラウザにＪＤＫの登録のページが表示されます。 必要に応じて製品登録します。 （当方は登録しました） ４．環境変数設定 以下のように環境変数を設定します。 JAVA_HOME ：　JDK がインストールされているディレクトリを指定 今回の場合　→　”C:\\Program Files\\Java\\jdk1.6.0_18” PATH...","categories": ["プログラミング"],
        "tags": ["Java"],
        "url": "/2010/01/26/26002020/",
        "teaser": null
      },{
        "title": "eclipse インストール！",
        "excerpt":"前回、J2SE をインストールしました。 今回は、統合開発環境である「 eclipse」を導入してみました。 （プラグインを使用することにより、Java ばかりでなく PHP や C などさまざまな言語の開発環境が整います） ※まったくの Java の初心者なら Java を理解するためにもいきなり eclipse を利用するのではなく、コマンドプロンプトでコンパイル・実行するのが良いでしょう。 導入記録 （Windows(32Bit)版の導入記録です） アーカイブファイルのダウンロード・展開 こちら[ http://download.eclipse.org/eclipse/downloads/ ]から “eclipse” の最新版をダウンロードし、展開します。 ※当記事執筆時点では「 eclipse-SDK-3.5.1-win32.zip 」が最新でした。 確認 先ほど展開したファイルの中の「 eclipse.exe 」を実行します。 ワークスペースの場所を問われるので、適当なディレクトリを指定します。 これで起動は完了です。 日本語化キットのダウンロード・展開 このままでは英語のままなので、日本語化します。 日本語化するには「 Pleiades 」を使用する方法とか「 Babel 」を使用する方法とかあるようですが、今回は「 Babel 」を使用してみます。 「 ｅｃｌｉｐｓｅ 」のメインメニューの [ Help ] -...","categories": ["プログラミング"],
        "tags": [],
        "url": "/2010/01/27/27002001/",
        "teaser": null
      },{
        "title": "Ｊ２ＥＥインストール！",
        "excerpt":"先日、Ｊ２ＥＥをＷｉｎｄｏｗｓＸＰマシンへインストールしました。 今日は、Ｊ２ＥＥをインストールしてみました。 今回インストールするのは、 「 JDK 6 Update 18 with Java EE 」 です。 作業記録 ※当方はＪａｖａのプロではありません。間違いもあるかもしれませんので、その際は逆に教えてください。 １．ファイルのダウンロード こちら[ http://www.oracle.com/technetwork/java/javase/downloads/index.html ]から 「 JDK 6 Update 18 with Java EE 」の「 Download 」ボタンからダウンロードページに行って、必要事項を入力（プラットフォームは「 Windows 」、言語は「 Multi-Language 」を選択）の上ダウンロードします。 Ｓｕｎのユーザならメールアドレスとパスワードを入力します。 （当方はＳｏｌａｒｉｓダウンロード時にユーザ登録していました） ※実際にダウンロードしたファイルは「 java_ee_sdk-5_08-jdk-6u18-windows-ml.exe 」でした。 ２．インストール ダウンロードしたファイルをダブルクリックで実行します。 基本的にデフォルトでＯＫですが、以下は設定します。 Ａｄｍｉｎのパスワードを設定する。 ＳｕｎＯｎｌｉｎｅＡｃｃｏｕｎｔを持っていれば、ＩＤとパスワードを入力。もっていなければ登録する。 ３．環境変数設定 以下のように環境変数を設定します。 ※インストール時に自動でユーザ環境変数”PATH”にJ2EEの”bin”ディレクトリが設定されますが、当方はシステム環境変数に変更しました。 J2EE_HOME ：　Ｊ２ＥＥがインストールされているディレクトリを指定 今回の場合　→　”C:\\Sun\\SDK”...","categories": ["プログラミング"],
        "tags": ["Java"],
        "url": "/2010/01/28/28002042/",
        "teaser": null
      },{
        "title": "Loto6 No.481",
        "excerpt":"昨日のロト６（第４８１回）までの結果です。   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   ではまた。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2010/01/29/29002042/",
        "teaser": null
      },{
        "title": "ハードディスク交換！",
        "excerpt":"今日は、うちの現在稼働中の自作ＣｅｎｔＯＳサーバのハードディスクを交換しました。   このマシンはＩｎｔｅｌＡｔｏｍ２３０搭載のｍｉｎｉ−ＩＴＸ 「Ｄ９４５ＧＣＬＦ 」をｍｉｎｉ−ＩＴＸ用ケースのＤｉｒａｃ「 Ｎｏａｈ−８００ 」 に組み込んで使用していました。    そいつのハードディスクは３．５インチ（ＳＡＴＡ）のものでした。      で、別にそのハードディスの調子が悪いわけでもないんですが、もっと静音化＆省電力化したいな、と思い２．５インチのハードディスクを購入しました。      一応、最初から２．５インチHDD用のネジ穴があったので、交換作業自体は即完了しました。      全然大きさが小さいので、ずいぶんスッキリした感じになりました。   ディスクアクセス時の「カリカリッ」という音もかなり小さくなりました。   大満足！です。。。   （ワットチェッカーを持っていないので、消費電力はよくわかりませんが、３．５インチよりは省電力化できているでしょう！？）   で、あとはこのハードディスクにサーバ構築作業をしなければなりません。   元のハードディスクを Ｋｎｏｐｐｉｘ の「 partimage 」でバックアップとっていたので、同じく「 partimage 」で（ＭＢＲも含めて）リストアしてみましたが、なぜかカーネルパニック！   ＣｅｎｔＯＳのインストールディスクからレスキューモードで起動してＭＢＲだけを「 grub-install 」コマンドでインストールしようとしてもエラーが発生。   そのエラーもどうしても解決できないので、結局また最初からサーバ構築しなおします。   というわけで、当分の間は予備のＦｅｄｏｒａマシンでサーバ運用しておきます。   では   ","categories": ["自作PC"],
        "tags": [],
        "url": "/2010/01/30/30002059/",
        "teaser": null
      },{
        "title": "サーバ復帰！",
        "excerpt":"昨日、当方の自作ＣｅｎｔＯＳサーバのハードディスクを交換したのですが、パーティションバックアップからうまくリストアできなかったので、最初から構築しなおしました。   設定ファイルとかＤＢとかは別途バックアップしてあるので、当方に必要なサーバの構築に１日かかりませんでした。   （Ｗｅｂ、メール、ＳＳＨ、ＤＢ・・・）   ※ＣｅｎｔＯＳとかＦｅｄｏｒａとかもう数え切れないほど構築作業をしてきたので、作業にも慣れてきたというのもありますが。。。    というわけで、   今日、Ｆｅｄｏｒａの予備マシンからＣｅｎｔＯＳの本マシンに稼動を移しました。   昨日も言いましたが、やっぱ２．５インチのハードディスクは静かでいいですわ。   ※静音性からＳＳＤも検討しましたが、やはり２４時間稼動のサーバには書き込み回数に制限があるＳＳＤではすぐに寿命がくると思い、諦めました。   では。   ","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/01/31/31002040/",
        "teaser": null
      },{
        "title": "Yahoo!ファイナンス － 株価データ取得！",
        "excerpt":"   【はじめに】  Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照）  以下の記事を参考にすることもお勧めしません。    こんばんは。   以前、Ｅｘｃｅｌ２０００のＷｅｂクエリでＹａｈｏｏ！ファイナンスから株価データを取得することに挑戦してみたものの、現在のＹａｈｏｏ！ファイナンスからはＥｘｃｅｌ２０００ではＷｅｂクエリでデータを取得できないことが判明しました。   そこで、なんとか手に入れたＥｘｃｅｌ２００３をインストールして挑戦しました。   やっぱり、Ｅｘｃｅｌ２００３では即成功しました。    ということで、Ｗｉｎｄｏｗｓ系では一応自分の得意なＶｉｓｕａｌＢａｓｉｃとＳＱＬＳｅｒｖｅｒでＥｘｃｅｌ２００３のＷｅｂクエリも使いながら、Ｙａｈｏｏ！ファイナンスから株価データの取得を試みました。   本当は、ＶｉｓｕａｌＢａｓｉｃを使うならＥｘｃｅｌのＷｅｂクエリを使わずに直接ＶｉｓｕａｌＢａｓｉｃでデータを取得したかったんですが、試してみた結果チョット面倒な感じがしたので、今回はＥｘｃｅｌのＷｅｂクエリを使用することにしました。（実はJavaを使用することも検討していましたが・・・）   少し、てこずったものの何とか完成しました。   そして、早速データ取得をしてみました。   何度か失敗しながらですが、見事にＳＱＬＳｅｒｖｅｒにデータを取り込むことに成功しました。（まだ一部のデータしか取得していませんが）   でもやっぱり、ＥｘｃｅｌのＷｅｂクエリを使用してのデータ取得は時間がかかりますね～。   １銘柄の１０年分の取引データを取得するのに約１分かかります。   一旦必要なデータを取得してしまえば、毎日１日分のデータを取得するだけになるので、各市場に上場している全銘柄も１日分が３０分くらいで終わると思いますが。（Ｙａｈｏｏ！ファイナンスで検索可能な銘柄が約３７００銘柄（丸々１０年分ない銘柄も多数あります）ありますので）   ＳＱＬＳｅｒｖｅｒに登録されたデータ（まだ全銘柄の３分の２くらい）を見てみると、３００万件を超えています。   （これは銘柄×日数分です）   やはり、こんなシステム（全データを対象にしたシステム）を作ろうかと思ったら、Ｅｘｃｅｌだけでは無理ですね。   データベース様様です。   （Ｅｘｃｅｌだと列が２５６列、行が６５５３６行しかないんで、こんなに大量のデータは扱えないですよね）   でも、今回はＷｉｎｄｏｗ側での作業でしたが、本当はサーバ（Ｌｉｎｕｘ（ＣｅｎｔｏＯＳ））でＭｙＳＱＬを使っているので、それを使用したいとも思っているんですが、どうでしょうかね～。。。   最終的には取得した株価データを活用して、今手動で行っている株取引を自動売買できるシステムを構築しようと考えています。   ※あらゆる指標データを算出し、自動で買い時・売り時を判定し、自分の買付余力も考慮しながら自動で発注するシステム、アレです。   まあ、相当先の話でしょうが・・・   では、また。   ","categories": ["PC_Tips","株式"],
        "tags": ["VisualBasic","Yahoo"],
        "url": "/2010/02/01/01002025/",
        "teaser": null
      },{
        "title": "ＭＲＴＧ監視状況！",
        "excerpt":"今日は、当方の自作ＣｅｎｔｏＯＳサーバの監視状況を公開します。   公開しても問題ないと思い公開します。   ＣｅｎｔＯＳ上に構築したＭＲＴＧの情報です。    今のところ、当方のサーバでは以下のものを監視しています。 ※クリックすると閲覧できるはずです。      ネットワークトラフィック   ＣＰＵ使用率   ＣＰＵロードアベレージ   空きメモリ容量   ハードディスク使用率   ＣＰＵ・チップセット温度   ハードディスク温度   ※ちなみに、グラフが平坦なところはサーバがダウン（もしくはメンテ中）の時です。 あと、空きメモリ容量では、どうしても単位の表示がおかしくなりますが。。。 （ＣｅｎｔＯＳの場合のみ。Ｆｅｄｏｒａでは綺麗に表示されます。たぶんＭＲＴＧのバージョン違いによるものと思いますが。。。）   今後、もっといろいろと監視してみたいと思っています。   では。   ","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/02/02/02002027/",
        "teaser": null
      },{
        "title": "ルービックキューブ３×３ － シール交換決意！",
        "excerpt":"今日は、超～っ久しぶりの「 ブービックキューブ」についてです。   あまり時間がないので、時々かまっている「 ルービックキューブ 」ですが、さすがにシールが剥がれてきたので、貼り替えを決意した。   という話です。    決意しただけです。   実際の貼り替え作業は次回以降になると思います。   今メインで使用しているルービックキューブの状態は以下のとおりです。         貼り替え用のシールは準備済みです。   こちら↓↓↓      ２・３年前にこちらから５セットほど購入しました。   （自分で、ホームセンターでカラーシールを購入して、サイズに合わせてカットして、ということも考えたことがありましたが、面倒＆時間がないので、断念。。。）   実は、予備のキューブや未開封のスピードキュービング専用のキューブも保有していますが、なんかもったいなくて！      本当に近いうちにシール貼り替えを実践しようと思っています。   ※ちなみに、３×３の記録は早くて１分くらいです。（目標は３０秒です）   ではまた。   ","categories": ["ルービックキューブ"],
        "tags": [],
        "url": "/2010/02/03/03002007/",
        "teaser": null
      },{
        "title": "ルービックキューブ３×３ － シール交換！",
        "excerpt":"今日はついにルービックキューブ３×３のシール（ステッカー）を交換しました。   シールを購入したサイト「 ＣＳＫｉｔ 」に貼り替え方法が掲載されています。   簡単でした。    こちらが、新品同様になったキューブです。      ただ、白面の真ん中のロゴマークがなくなったのが、ちょっとさびしいですが。。。   ※シールを剥がすのにシール剥がしの液体（スプレー）が必要かとも思っていましたが、不要でした。 シールを剥がした後に若干残ったシールの「ベトベト」もウェットティッシュで綺麗にとれました。   今日はこのへんで。   ではまた。   ","categories": ["ルービックキューブ"],
        "tags": [],
        "url": "/2010/02/04/04002056/",
        "teaser": null
      },{
        "title": "Loto6 No.482",
        "excerpt":"昨日のロト６（第４８２回）までの結果です。   毎週案内するのも面倒なので、これからは勝手に見てください。 ほかの話題も書きたいので。。。   でも、ときどき案内はします（忘れられると寂しいので・・・）   ダウンロード用ＣＳＶファイルを最新に更新しました。 こちら - - - &gt; mk-mode SITE   こちら でもＯＫ。 （右クリックで対象ファイルを保存！）   どうぞ、ご活用下さい。   ※当方のデータは保証できるものではありません。 あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   ではまた。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2010/02/05/05002029/",
        "teaser": null
      },{
        "title": "ＳＱＬＳｅｒｖｅｒ２００８ Ｅｘｐｒｅｓｓ インストール！",
        "excerpt":"今日は、今までうちのＷｉｎｄｏｗｓＸＰマシンにインストールして使用していた 「 ＳＱＬＳｅｒｖｅｒ２００５ＥｘｐｒｅｓｓＥｄｉｔｉｏｎ 」 を 「 ＳＱＬＳｅｒｖｅｒ２００８ＥｘｐｒｅｓｓＥｄｉｔｉｏｎ 」 にしました。 ※２００５をアップデートせずに、２００５をアンインストール後２００８を新規にインストールしました。 作業記録 １．２００５Ｅｘｐｒｅｓｓのデータベースをデタッチ 現在２００５Ｅｘｐｒｅｓｓで使用中のデータベースを２００８Ｅｘｐｒｅｓｓで使用するので、「 SQL Server Management Studio 」を使用して移行するデータベースを全て「 デタッチ 」します。 ２．２００５Ｅｘｐｒｅｓｓのアンインストール 今回は新規にインストールしなおすので、２００５Ｅｘｐｒｅｓｓ（本体＋関連プログラム）をアンインストールします。 さらに、２００５Ｅｘｐｒｅｓｓをアンインストールしても「C:\\Documents and Settings&lt;アカウント名&gt;\\Local Settings\\Application Data\\Microsoft\\Microsoft SQL Server 」フォルダに２００５Ｅｘｐｒｅｓｓのフォルダが残っているとうまくいかないことがあるともどこかのサイトに掲載があったのでそのフォルダ（今回は”90”というフォルダ）も削除しました。 ３．準備 ２００８Ｅｘｐｒｅｓｓをインストールするには、以下のものが必要のようです。 インストールされていなければインストールする。 - [ .NET Framework 3.5 SP1](http://www.microsoft.com/downloads/details.aspx?familyid=AB99342F-5D1A-413D-8319-81DA479AB0D7&amp;displaylang=ja \" .NET Framework 3.5 SP1\")（ [ .NET Framework 3.5 SP1 日本語...","categories": ["PC_Tips"],
        "tags": ["SQLServer"],
        "url": "/2010/02/06/06002047/",
        "teaser": null
      },{
        "title": "MSOCacheとは？！",
        "excerpt":"少し前に 「 ＭｉｃｒｏｓｏｆｔＯｆｆｉｃｅ２００３ 」 をインストールした時だと思いますが、   マシンに「 MSOCache 」というフォルダができていました。   そう言えば、時々見かけるフォルダだなと思って削除してもよいものかどうか調べてみました。   （昔は、有無をも言わずに削除していましたが・・・）     こちら（ [OFF2003] ローカル インストール ソース (Msocache) ）に説明がありました。   削除してもよいみたいです。   即刻削除しました。   今日はこれだけです。   では。   ","categories": ["PC_Tips"],
        "tags": ["Office"],
        "url": "/2010/02/07/07002046/",
        "teaser": null
      },{
        "title": "Ｙａｈｏｏ！ファイナンス － 株価データ取得・その後！",
        "excerpt":"   【はじめに】  Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照）  以下の記事を参考にすることもお勧めしません。    こんばんは。   最近、      ＶｉｓｕａｌＢａｓｉｃ２００８Ｅｘｐｒｅｓｓ   ＳＱＬＳｅｒｖｅｒ２００８Ｅｘｐｒｅｓｓ   Ｅｘｃｅｌ２００３   で Ｙａｈｏｏ！ファイナンス から株価データを取得して指標を計算させたりするようなシステムを開発中なんですが、   取得した株価データをよく見てみると日付が文字化けしているところがあるのを発見しました。    Ｅｘｃｅｌ側でＶＢＡでＷｅｂクエリを使用してデータを取得しているところで、日付データの”年”、”月”、”日”が”?”になっているものがある。   １ページ５０件のデータなんですが、ページ単位でおかしいみたい。   （数年分を連続してデータを取得しているのにあるページだけ突然文字化けする）   ただし、再度取得を試みるとうまくいく。   ちょっと調べてみると、Ｗｅｂクエリでのデータ取得で同様な現象が発生している方がおられました。   よくはわからないけど、ページ切り替えのタイミングでどうやらエンコードがうまくいっていない？！みたい。   ということで、   ＥｘｃｅｌＶＢＡでＷｅｂクエリを使用してのデータ取得はやめました。   代替手段としてＥｘｃｅｌＶＢＡで「 ＸＭＬＨＴＴＰオブジェクト 」を使用してデータを取得するようにしました。   結果として、文字化けはなくなりました。   しかもデータを取得する時間が３分の１程度に高速化されました。   一石二鳥でした。   と、安心したのもつかの間、取得したデータをチェックしてみましたが、 「 株式の分割 」があると、株価以外の不正な行が出現！ こんな感じの行   分割: 1株 -&gt; 3株   というわけで、こんなデータを取得した場合は、この行は読み飛ばすようにＶＢＡを修正！   とりあえず、これでＯＫ？！と思います。   また、１０年分の全銘柄の株価データ６００万件超を再取得します。 これでも計算すると２０時間弱かかる計算です。。。 （最初だけなので、我慢我慢！）   ※あとで思ったけど、Ｅｘｃｅｌ使わなくてもＶｉｓｕａｌＢａｓｉｃのみでもできるんじゃない？と（未確認！）   ではまた。   ","categories": ["PC_Tips","株式"],
        "tags": ["VisualBasic","Yahoo"],
        "url": "/2010/02/08/08002045/",
        "teaser": null
      },{
        "title": "ＶｉｓｕａｌＢａｓｉｃ２００８ － グラフコントロール！",
        "excerpt":"最近、「 ＶｉｓｕａｌＢａｓｉｃ２００８ Ｅｘｐｒｅｓｓ 」で株価取得して各種テクニカルチャートを閲覧できるところまで完成したところです。   私用レベルでの開発なので設計とかは特にせず、行き当たりばったりできままに開発しています。   そして次は、銘柄別に株価チャートなどのグラフを表示させたいと思ったんですが、   「 ＶｉｓｕａｌＢａｓｉｃ２００８ Ｅｘｐｒｅｓｓ 」にはデフォルトでグラフ（チャート）コントロールが入っていないではありませんか？！   ということで、ダウンロード＆インストールしました。   ※「 ＶｉｓｕａｌＢａｓｉｃ２００８ Ｅｘｐｒｅｓｓ 」はＳＰ１でないとだめかもしれません（あちこちのサイトにも記載がありました）。           こちら[ http://code.msdn.microsoft.com/mschart ]から以下のものをダウンロード       Chart Controls for .NET Framework   Chart Controls for .NET Framework Language Pack        Chart Controls Add-on for Visual Studio 2008       ダウンロードしたファイルをインストール   これで、ツールボックスから「 Ｃｈａｒｔ 」を選択できるようになりました。   使用できるかどうかは未確認ですが・・・   使用方法を調べながら使ってみます。   では、また。   ","categories": ["PC_Tips"],
        "tags": ["VisualBasic"],
        "url": "/2010/02/10/10002010/",
        "teaser": null
      },{
        "title": "ＭＳＣｈａｒｔ － 株価チャート！",
        "excerpt":"「ＶｉｓｕａｌＢａｓｉｃ２００８Ｅｘｐｒｅｓｓ」＋「ＳＱＬＳｅｒｖｅｒ２００８Ｅｘｐｒｅｓｓ」で開発中の   株自動売買ロボット（将来的な話ですが）の前段階として、   上場銘柄情報（３７００銘柄超）取得、上場全銘柄の株価情報（１０年分で６００万件超）を取得するところまでは完了できたつもりです。   そこで、今は株価チャートを表示させる段階です。    「ＶｉｓｕａｌＢａｓｉｃ２００８Ｅｘｐｒｅｓｓ」にグラフコントロール「ＭＳＣｈａｒｔ」を導入したのはいいんですが、   その使用方法を得るのに非常に苦労しました。   （最新のＶｉｓｕａｌＢａｓｉｃに対応した説明があまりに少ない・・・）   ものすごく調べて、やっと表示させることができました。   まだローソク足だけですが、こんな感じです。      （上記は開発中のシステムの一部分。ある銘柄の昨年末までの６ヶ月間を表示）   ちなみに、ＳＢＩ証券の「ＨＹＰＥＲ ＳＢＩ」のチャート昨日で同じ銘柄のローソク足を確認したところ、同じようになっていましたので、とりあえず安心。。。   「ＨＹＰＥＲ ＳＢＩ」のチャートはこちら↓↓      自分のはもう少し微調整しながら、次の移動平均の折れ線グラフに挑戦してみるつもりです。   では、また。   ","categories": ["PC_Tips","株式"],
        "tags": [],
        "url": "/2010/02/12/12002018/",
        "teaser": null
      },{
        "title": "Ｙａｈｏｏ！ファイナンス － 銘柄情報取得！",
        "excerpt":"   【はじめに】  Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照）  以下の記事を参考にすることもお勧めしません。    こんばんは。   今日も、最近投稿している株価データ関連の話です。   （あまりに複雑なので、現段階では詳細は記載できません。ただ、こんなことをしたという話です）   株価データは「ＶｉｓｕａｌＢａｓｉｃ」からＥｘｃｅｌのＷｅｂクエリで取得するマクロをコールしていたのを、Ｗｅｂクエリは使用せずにＸＭＬＨＴＴＰオブジェクト（Ｅｘｃｅｌ側ですが）を使用するようにしたんですが、銘柄情報の取得もＷｅｂクエリを使用していてたのをＸＭＬＨＴＴＰオブジェクトを使用するように修正しました。    しかもＥｘｃｅｌＶＢＡでＸＭＬＨＴＴＰオブジェクトを使用するのではなく、ＶｉｓｕａｌＢａｓｉｃで直接ＸＭＬＨＴＴＰオブジェクトを使用するようにしました。   全銘柄（３７００超）もあるといろんな不正なデータがあり、かなり四苦八苦しましたが、なんとか完成しました。   試しに全銘柄の情報（銘柄コード・市場・銘柄名・特色）を取得してみましたが、ＥｘｃｅｌＶＢＡを介して取得していた場合の所要時間の３分の１くらいで取得できました。   ※当方の環境で７分くらいかかっていたものが、２分半くらいでできるようになりました。   （実際にはこの処理の後に他のデータ（単元株数等のデータ）も取得するように処理を追加しているところです）   今のところ、かなり成果があったと満足しています。   次は株価データもＥｘｃｅｌを介さずに取得するようにしてみたいとも思っています。   （チャートの表示もまだ途中だけど。。。）   では。   ","categories": ["PC_Tips","株式"],
        "tags": [],
        "url": "/2010/02/14/14002035/",
        "teaser": null
      },{
        "title": "Ｙａｈｏｏ！ファイナンス － 株価データ取得・再修正！",
        "excerpt":"   【はじめに】  Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照）  以下の記事を参考にすることもお勧めしません。    こんばんは。   前回、銘柄情報をＶｉｓｕａｌＢａｓｉｃでＥｘｃｅｌＶＢＡ（ＸＭＬＨＴＴＰオブジェクト）を介して取得していたものをＶｉｓｕａｌＢａｓｉｃで直接ＸＭＬＨＴＴＰオブジェクトを使用して取得するようにしました。   そこで、まだＥｘｃｅｌＶＢＡ（ＸＭＬＨＴＴＰオブジェクト）を介して取得していた株価データも、ＶｉｓｕａｌＢａｓｉｃで直接ＸＭＬＨＴＴＰオブジェクトを使用して取得するようしました。   基本的にＥｘｃｅｌＶＢＡと記述は同じでよいので、さほど手間はかかりませんでした。    かといって、簡単にここで説明できるものではありませんので、現時点では詳細は記載できません。   「こんなことをしました」という報告ですので。   まあ当然、ＥｘｃｅｌＶＢＡでできることはＶｉｓｕａｌＢａｓｉｃでもできますよね。。。   最初から気づいていれば。。。   「Ｙａｈｏｏ！ファイナンス」からのデータ取得についていろんなサイトで調べると ”ＥｘｃｅｌＶＢＡでＷｅｂクエリを使って・・・” というようなものばかりだったんで。。。   （時々 ”ＥｘｃｅｌＶＢＡで文字化けする場合があるのでＷｅｂクエリではなくＸＭＬＨＴＴＰオブジェクトを使って・・・” というのがありました）   ＶｉｓｕａｌＢａｓｉｃでのＸＭＬＨＴＴＰオブジェクトの使用については、特に調べなくてもＥｘｃｅｌＶＢＡのものをほとんどそのまま移植することで完成しました。（同じＶＢなんで当然ですが・・・）   そして、実行速度についてですが、      ３,７４９銘柄   ６,８２９,９０２件（各銘柄は優先市場のみ）   ２０００年１月～２００９年１２月（１０年分）   の取引データを「Ｙａｈｏｏ！ファイナンス」から取得してＳＱＬＳｅｒｖｅｒに書き込む。   という処理で、Ｅｘｃｅｌを介して取得していたときよりは１時間くらいは早くなりました。   （といっても、１８時間強かかりました。１日分の全銘柄取得なら１０分はかかりません）   ま、そういうことで。   今日は以上です。   では。   ","categories": ["PC_Tips","株式"],
        "tags": [],
        "url": "/2010/02/16/16002034/",
        "teaser": null
      },{
        "title": "SQLServer2008 Express - コマンドラインでバックアップ！",
        "excerpt":"今日は、「SQLServer2008 Express」のバックアップについてです。 通常データベースをバックアップする場合、「SQLServerManagementStudio」を使用してGUIベースで行います。 しかし、定期的に自動でバックアップさせたい場合にExpress エディションのSQLServerでは自動では行えません。 そこで自動バックアップすべく、バックアップ用SQLスクリプトをバッチファイルから実行するようにし、さらにそのバッチファイルをタスクで自動実行するようにしました。 作業記録 【前提条件】 SQLServer2008 Expressがインストール済み SQLServer2008 NativeClient がインストール済み SQLServer2008 Express コマンドラインユーティリティがインストール済み ※当方は「SQLServer2008 Express」はAdvanced版をインストールしたので、全てインストールされていました。 １．SQLスクリプトの作成 以下のようにSQLスクリプト「BAK_GetTrade.sql」（例）を作成します。 ・バックアップするデータベース：「Get_Trade」（例） ・データベース保存先：「E:\\BAK\\DB\\SQLSERVER\\Get_Trade」（例） BACKUP DATABASE Get_Trade TO DISK = N'E:\\BAK\\DB\\SQLSERVER\\Get_Trade' WITH INIT ２．バッチファイルの作成 以下のようにバッチファイル「BAK_SQLSVR_GetTrade.bat」（例）を作成します。 @ECHO SQL Server DataBase [ Get_Trade ] をバックアップします。 @PAUSE sqlcmd -i D:\\50_DB\\SQL\\BAK_GetTrade.sql　← 実行するSQLスクリプト ３．タスクへ登録 作成したバッチファイルを希望の時間に自動実行されるようにタスクに登録する。 これで、データベースのバックアップが自動化されました。 ※ちなみに「ｓｑｌｃｍｄ」コマンドの詳細は、コマンドプロンプトで「sqlcmd...","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2010/02/17/17002052/",
        "teaser": null
      },{
        "title": "ＶｉｓｕａｌＢａｓｉｃ － 株価チャート・その後！",
        "excerpt":"今、      ＶｉｓｕａｌＢａｓｉｃ２００８ Ｅｘｐｒｅｓｓ   ＳＱＬＳｅｒｖｅｒ２００８ Ｅｘｐｒｅｓｓ   で「ＭＳＣｈａｒｔ」を使って作っている株価チャートがとりあえず完成しました。   できばえはこんな感じです。        今、表示可能な各種テクニカル指標は画像のとおりです。   （画像は６か月分・全ての指標を表示した状態）   今後、微調整・指標の追加も行うと思います。   「ＭＳＣｈａｒｔ」は不慣れなんで非常に苦労しました。   ※「ＭＳＣｈａｒｔ」については、人に教えられるほどの玄人ではありませんので詳しいことは聞かないでください。   では。   ","categories": ["PC_Tips","株式"],
        "tags": [],
        "url": "/2010/02/19/19002040/",
        "teaser": null
      },{
        "title": "システムトレード － 分析！",
        "excerpt":"今、個人的に      ＶｉｓｕａｌＢａｓｉｃ２００８Ｅｘｐｒｅｓｓ   ＳＱＬＳｅｒｖｅｒ２００８Ｅｘｐｒｅｓｓ   で作成中のシステムトレーディングシステムで、売買手法のロジックを組み込み、さらにそれを検証するための画面も作成しました。   Excelでのシステムトレードを実現させるための手法が記載されているこちらの本を参考にしています。 自動売買ロボット作成マニュアル~エクセルで理想のシステムトレード (現代の錬金術師シリーズ)      とりあえずは、この本のとおりの手法でＶＢにて作成しています。   参考までにＶＢで作った画面はこんなのです。      分析結果表示する画面         分析パラメータを変更しながら検証した結果を表示する画面      同じことをＥｘｃｅｌ（上記の書籍どおりの手法）でやるのに比べると、断然使いやすいし処理スピードも断然早い！です。   ※やはりＥｘｃｅｌには限界がありますね。   ではまた。   ","categories": ["PC_Tips","株式"],
        "tags": [],
        "url": "/2010/02/22/22002014/",
        "teaser": null
      },{
        "title": "ＶｉｓｕａｌＣ＋＋ － インストール！",
        "excerpt":"今、      ＶｉｓｕａｌＢａｓｉｃ２００８ Ｅｘｐｒｅｓｓ   ＳＱＬＳｅｒｖｅｒ２００８ Ｅｘｐｒｅｓｓ   で、株の自動売買システムを作成中なんですが、   のめりこみ過ぎて（毎日少しずつですが）、少し疲れたので、気分転換（？）に   ＶｉｓｕａｌＣ＋＋２００８Ｅｘｐｒｅｓｓをインストールしてみました。   「Ｃ＋＋」は昔数回仕事で触れたことがあるくらいですが、Ｃ言語自体にも憧れ的なものがあるんで、   とりあえず、環境くらいは整備しておこうと思った次第です。   こちら の「 Ｗｅｂインストール 」からインストール用のファイルをダウンロードしてインストールしました。   製品登録もしておきました。   ま、今日はそれだけです。   自作のシステムトレードのソフトはコツコツ作成中です。   また、途中結果はお知らせできたらしますので。。。   ","categories": ["PC_Tips"],
        "tags": ["VisualC++"],
        "url": "/2010/03/02/02002030/",
        "teaser": null
      },{
        "title": "Ｗｅｂカメラ再開！？",
        "excerpt":"うちの自作サーバで公開していたライブカメラ（デスクトップを写しているだけですが・・・）ですが、   少し前にサーバをＦｅｄｏｒａ１１からＦｅｄｏｒａ１２にしたりＣｅｎｔＯＳ５．４にしたりしているうちにうまく写らなくなってしまって、中断した状態になっていましたが、再開しました。   でも、サーバ側で写しているのではなくメインマシン（ＷｉｎｄｏｗｓＸＰマシン）で写した画像をサーバにＦＴＰ送信して公開するようにしました。   時間がなくて、ＣｅｎｔＯＳ５．４やＦｅｄｏｒａ１２でＷｅｂカメラを構築する方法を確立できないままでいるんで。。。   というわけで、Ｗｅｂカメラ画像はメインマシンが起動されている状態にあるときだけ更新されるようになっています。   ま、こん画像を観たい人もいないと思いますが・・・   一応、こちらで確認できます。   →→ [ http://www.mk-mode.com/webcam.php ]   ※ＷｉｎｄｏｗｓＸＰマシンでは画質は非常にいいんですが、Ｗｅｂカメラ画像をＦＴＰ送信するフリーソフトを使用するとなぜか画質が劣化してしまいます。。。   ちゃんと、ＣｅｎｔＯＳ５．４（もしくはＦｅｄｏｒａ１２）でWebカメラ画像を公開できるようになったらまたお知らせします。   ではまた。   ","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Webカメラ"],
        "url": "/2010/03/04/04002018/",
        "teaser": null
      },{
        "title": "Ｗｅｂカメラ － キャプチャツール！",
        "excerpt":"先日、Ｗｅｂカメラのライブ画像公開を再開しました。   （Ｗｉｎｄｏｗｓマシンでキャプチャした画像を自作ＣｅｎｔＯＳサーバへＦＴＰ送信する方法で）   しかし、今使用しているＷｅｂカメラキャプチャ＆ＦＴＰ送信のフリーソフト「ＬｉｖｅＣａｐｔｕｒｅ２」ではどうも画質が悪すぎるので、別のフリーソフトを探していろいろと試してみました。   そして、とりあえず「ＣａｍＣａｐｔ−Ｉｎｔｅｒｖａｌ」というソフトに落ち着きました。   ダウンロードはこちらから → [ WebCam静止画・連写ツール : CamCapt-Interval ]   今までのフリーソフトに比べると断然画質がいいです。   （うちのＷｅｂカメラ（Ｌｏｇｉｃｏｏｌ Ｓ７５００）の場合）   あと、気に入った点としては、   このツール（ＤＬＬ）を使用して独自にアプリを作成できる。   いつか、自分の使いやすいアプリを作ってみたいです。   ま、でも本当は、Ｗｉｎｄｏｗｓマシンで撮影した画像をサーバにＦＴＰ送信するのではなくて、   サーバ自体にＷｅｂカメラを接続したいのですが。。。   ※昔Ｆｅｄｏｒａ１１ではできていたのに、同じ方法ではＦｅｄｏｒａ１２・ＣｅｎｔＯＳ５．４では構築できなかった・・・   Ｆｅｄｏｒａ１２では正式にＷｅｂカメラ機能がサポートされているようなので可能だとは思いますが、   サーバ（ＣＵＩベース）での使用方法がまったくわからない？？？   要検討です。   ではまた。   ","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Webカメラ"],
        "url": "/2010/03/06/06002029/",
        "teaser": null
      },{
        "title": "システムトレード － リアルタイム監視！",
        "excerpt":"   【はじめに】  Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照）  以下の記事（Yahoo!ファイナンスに関する部分）を参考にすることもお勧めしません。    こんばんは。   今作成中のシステムトレードソフトでリアルタイムで株価を取得できるようになりました。   環境は      ＷｉｎｄｏｗｓＸＰＳＰ３   ＶｉｓｕａｌＢａｓｉｃ２００８ＥｘｐｒｅｓｓＥｄｉｔｉｏｎ   ＳＱＬＳｅｒｖｅｒ２００８ＥｘｐｒｅｓｓＥｄｉｔｉｏｎ   接続先証券会社はＳＢＩ証券   です。   過去のデータを無料で取得するには「Ｙａｈｏｏ！ファイナンス」からＸＭＬＨＴＴＰコントールにてＨＴＭＬを取得・解析していました。   そして、リアルタイムで株価を取得するに「Ｙａｈｏｏ！ファイナンス」では２０分遅れになってしまうので考えました。   楽天証券に口座を持っていれば、ＲＳＳで取得できるようですが、私はＳＢＩ証券に口座を持っていますので、楽天ＲＳＳはあきらめ。。。   やはりＳＢＩ証券にログインしてリアルタイムの株価を取得するしか方法がないようです。   ＳＢＩ証券はメインサイトではなく、セキュリティも甘く、動作の軽いバックアップサイトです。   コツコツと毎日少しずつなので何日もかけて調べ、やっと実現できました。   まだ、不具合は潜んでいるかもしれませんが。。。   ↓↓　こんな画面です　↓↓      詳細は説明できませんが、今回の開発で使用した手法（勉強になった手法）は以下のとおりです。      スレッド機能を使用。 この中でも、「スレッドからフォームを操作はできない」ということがわかってよかった。 この場合は「Ｄｅｌｅｇａｔｅ」しないといけない。   ＸＭＬＨＴＴＰの各種機能を使用。 Ｗｅｂｂｒｏｗｓｅｒコントロールを使用してＨＴＭＬを取得する方法もあるが、実際に実装してみた結果動作が重過ぎるし、裏でブラウザを操作しているだけなのであまりシステマティックでないように感じたので、ＸＭＬＨＴＴＰにした。 ＸＭＬＨＴＴＰでもＨＴＭＬ上のテキストボックスやセレクトボックス（コンボボックス）を指定してｓｕｂｍｉｔできることを確認。 さらに、ログイン後セッション（クッキー）を保持するワザもわかってよかった。 （セッション保持ができないとログインできても２０分ディレイの株価しか取れなくなるので）   その他にも、細かなテクニックもいろいろ取り入れています。   ただ、スレッドがうまくバックグラウンドで動かない。。。 （Ｗｅｂに接続中（データ取得中）は画面が操作できなくなる。”Thread.IsBackground = true” も効かない） もう少し調査が必要。。。   まあ、でも一応、買いシグナル・売りシグナルはリアルタイムでチェックできるようになりました。   あとは、実際に自動で発注する機能を実装すれば完成なんですが、手法の算出方法の精査も必要だし、まだ怖い気持ちがあるので発注自体はマニュアルでしています。   ではまた。   ","categories": ["PC_Tips","株式"],
        "tags": ["SQLServer","VisualBasic"],
        "url": "/2010/03/09/09002005/",
        "teaser": null
      },{
        "title": "CentOS - Webカメラ構築成功！",
        "excerpt":"以前、自作のＦｅｄｏｒａサーバで構築していた、Webカメラ画像公開なんですが、   サーバを「CentOS5.4」にしてからうまく構築できないままでいました。   今日、再度挑戦してみたらあっさりできました。   方法はＦｅｄｏｒａにWebカメラを構築した方法とまったく同じです。   こちらを参照 → [Fedora12 - Webカメラ構築！ ]   なぜ、以前はできなかったのか不思議です（何かケアレスミスでもしていたのでしょうか？）   これで、２４時間監視（公開）できます。   めでたし、めでたし。。。   ※公開画像はこちら[ http://www.mk-mode.com/rails/webcam ]で確認できます。   では、また。   ","categories": ["サーバ構築"],
        "tags": ["CentOS","Webカメラ"],
        "url": "/2010/03/10/10002050/",
        "teaser": null
      },{
        "title": "システムトレード － リアルタイム監視・その後！",
        "excerpt":"先日、当方で今作成中のシステムトレードソフトでリアルタイムで株価の監視ができるようになったという話をしました。   少し様子を見ていましたが、やはりまだ不具合がありました。   ご想像通り（？）、 「セッションの保持」の部分がうまくいっていませんでした。   株価をリアルタイムで取得するために、 自分が口座を持っている証券会社（ＳＢＩ証券）のサイト（バックアップサイト）にログインして１回目の株価取得はうまくできているのですが、 一定間隔で再度取得しても取得できていませんでした。   ちゃんと、ログイン時に取得したセッション（クッキー）は渡しているのですが・・・ （セッションがうまく保持されていない（？）感じです。。。）   「VisualBasic２００８Express」で「XMLHTTP」コントロールのうち、   今は、 CreateObject(“MSXML2.XMLHTTP.6.0”) （下位バージョンも実践しました） を使用しているんですが、   これだと、ログイン時のセッション（クッキー）で株価取得のページからは初回時のみしか取得できません。   CreateObject(“MSXML2.ServerXMLHTTP”) を使用していたときは、ちゃんとリアルタイムで取得できたりできなかったりしていました。 （毎回セッションが切れたり、保持されたり）   と不安定でした。   何日も調べてやっと完成したと思っていたのに、また調べ直しです。。。。。。   やっぱり、「XMLHTTP」コントロールを使うより「Webbrowser」コントロールを使ったほうがいいのかなあ・・・   と思う今日このごろ、です。   ※前にも言いましたが、「Webbrowser」コントロールは実践してみた結果、重過ぎるし原始的っぽいんで・・・   また、いい方法を調べてみます。   （元気なうちに（？））詳細がわかったらご報告します。   では、また。   ","categories": ["PC_Tips","株式"],
        "tags": ["SQLServer","VisualBasic"],
        "url": "/2010/03/11/11002053/",
        "teaser": null
      },{
        "title": "ＶｉｓｕａｌＣ＃ － インストール！",
        "excerpt":"先日、気分転換（？）に   「ＶｉｓｕａｌＣ＋＋２００８Ｅｘｐｒｅｓｓ」をインストールしてみたんですが、   今日は、「ＶｉｓｕａｌＣ＃２００８Ｅｘｐｒｅｓｓ」をインストールしました。   今回も、とりあえず環境くらいは整備しておこうと思った次第です。   こちら の「 Ｗｅｂインストール 」からインストール用のファイルをダウンロードしてインストールしました。   製品登録もしておきました。   いろんなプログラミング言語（開発環境）に興味があるもんで。。。   ま、今日はそれだけです。   では、また。。。   ","categories": ["PC_Tips"],
        "tags": ["VisualC++"],
        "url": "/2010/03/13/13002021/",
        "teaser": null
      },{
        "title": "ＷｅｂＤｅｖｅｌｏｐｅｒ － インストール！",
        "excerpt":"今日は   「ＶｉｓｕａｌＣ＋＋２００８Ｅｘｐｒｅｓｓ」、 「ＶｉｓｕａｌＣ＃２００８Ｅｘｐｒｅｓｓ」に引き続き、   「ＶｉｓｕａｌＷｅｂＤｅｖｅｌｏｐｅｒ２００８Ｅｘｐｒｅｓｓ」をインストールしました。   「ＶｉｓｕａｌＷｅｂＤｅｖｅｌｏｐｅｒ２００８Ｅｘｐｒｅｓｓ」は、 「Visual Basic や Visual C# を使って、ASP.NET の Web アプリケーションの開発や AJAX アプリケーションの開発を、簡単に楽しく行える」 ようです。   今回も、とりあえず環境くらいは整備しておこうと思った次第です。   こちら の「 Ｗｅｂインストール 」からインストール用のファイルをダウンロードしてインストールしました。   製品登録もしておきました。   あと、「Ｓｉｌｖｅｒｌｉｇｈｔ」という 「Web上で動画やアニメーションを用いたリッチなメディア体験、機能・操作性に優れたWebアプリケーションを開発・配信する、最も包括的なアプリケーション開発フレームワーク」 もあるようですが、これは当方では今のところ不要なのでインストールはしませんでした。（本当に必要になったらインストールする）   ま、今日はそれだけです。   では、また。。。   ","categories": ["PC_Tips"],
        "tags": ["WebDeveloper"],
        "url": "/2010/03/14/14002026/",
        "teaser": null
      },{
        "title": "システムトレード － リアルタイム監視・改良！",
        "excerpt":"最近、コツコツと作成しているシステムトレードソフトで のリアルタイム監視する画面を改良しました。。   今回改良した点は、      証券会社サイトへの接続時のセッションの保持がうまくいくように修正。   画面をスクロールしなくても全ての情報が見れるように１銘柄につき２行で表示するように修正。   表示している現在値の更新日時を表示するように処理を追加。   といったところです。   ちなみにこんな画面↓↓      自動で発注する部分の処理は未構築です。。。   また、算出した各種の数値が正しいかどうかも疑問？！（精査は「未」）ですが。。。   ではまた。   ","categories": ["PC_Tips","株式"],
        "tags": ["SQLServer","VisualBasic"],
        "url": "/2010/03/16/16002018/",
        "teaser": null
      },{
        "title": "Ｃ＃勉強中！",
        "excerpt":"私は、個人的にプログラミングするときは、大体   「Ｍｉｃｒｏｓｏｆｔ Ｖｉｓｕａｌ Ｂａｓｉｃ」（Ｅｘｐｒｅｓｓ エディション）を使用していますが、   やはり、Ｃ系の言語もある程度モノにしたいので、   これからの標準となろうであろう「Ｃ＃」を勉強しようと考えた次第です。   「Ｃ＃」は「Ｃ」や「Ｃ＋＋」の流れを汲みながら機能を拡張させつつ、かつJavaの機能も取り入れた、   というようないいとこ取りの言語です。   プラットフォームは「．ＮＥＴ Ｆｒａｍｅｗｏｒｋ」です。   「．ＮＥＴ Ｆｒａｍｅｗｏｒｋ」上であれば、ＯＳによらず実行可能です。   当方は、以前個人的にＣ＋＋・Ｊａｖａを勉強したり、仕事でＣ＋＋・Ｊａｖａを使ったシステムを構築したりしたことがあるので、なんとなく大枠はわかるのですが、   今後「ＶｉｓｕａｌＢａｓｉｃ」をやめて「ＶｉｓｕａｌＣ＃」できちんとプログラミングできるようにするために、ちゃんと勉強してみようと考えました。   とりあえず、入門書として地元の書店でこいつを購入しました。 （ＧＵＩ的なことは書いてありませんが・・・） 独習C# 第2版 NRIラーニングネットワーク株式会社 矢嶋 聡        コツコツ勉強してみます。   では、また。   ","categories": ["プログラミング"],
        "tags": ["C#"],
        "url": "/2010/03/18/18002001/",
        "teaser": null
      },{
        "title": "MPEGカット編集！",
        "excerpt":"今日は、MPEG2動画をカット編集できるソフトを導入しました。   とにかく動画の不要な部分をカットできるものでフリーのものを探しました。 PCで録画した番組で不要な部分（CMとかの不要な部分）をカットしてMPEG2のまま保存したかったので。。。   DVDドライブ（I-Oデータ製）に付属のソフトでは思うようにできませんでした。 （カットはできるが、MPEG2 → DVD-Videoに変換されてしまう）   ※フリーでは「TMPGEnc」とかいうのも気になりましたが、MPEG2を出力に指定できないみたい。   結局、「FreeVideoDub」というフリーソフトにしました。   結果は、 自分の求めていたとおりのことができたし、 画質の劣化もなかったので、大満足です。   ま、今日はそれだけの話でした。   ではまた。   ","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2010/03/30/30002029/",
        "teaser": null
      },{
        "title": "ﾌﾟﾛｸﾞﾗﾑの追加と削除 － ｱｲｺﾝ下の文字！",
        "excerpt":"今日、   ふと、うちのＷｉｎｄｏｗｓＸＰマシンのコントロールパネルの「プログラムの追加と削除」の画面を開いてみたら、   なんかいつもと様子が違うような・・・   あれっ！   画面左側のアイコンの下の文字が表示されていない！？      他の画面は何もおかしくないのに、この画面だけが。   何かのソフトをインストールしたときにでもレジストリがやられた？   とも思いながら、調べてみました。   意外とすぐに原因判明！   レジストリは大丈夫でした。   画面のデザインを「クラシックスタイル」にして、   配色を「メープル」とか「ワインレッド」にするとアイコンの背景が白くなるので、   もともとの白い文字が見えなくなっているのだ、と。   当方の画面のプロパティを調べてみると、   「クラシックスタイル」の「ワインレッド」になっていました。   なので、配色変更！   無事復帰しました。      ひと安心。。。   ではでは。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2010/04/01/01002008/",
        "teaser": null
      },{
        "title": "USBブート非対応BIOSでUSBブート！",
        "excerpt":"今日は、   ＵＳＢブート非対応のＢＩＯＳのマシン（さらに、ＦＤＤ非搭載）でＵＳＢメモリから起動させる方法です。   最近のマシンならＢＩＯＳがたいていＵＳＢメモリからの起動に対応していますが、   少し前のマシンだとＢＩＯＳがＵＳＢメモリからの起動に対応していません。   普通、ＣＤやＤＶＤから起動できれば、ＵＳＢメモリからの起動が非対応でも問題ありませんが、   今回はどうしても、ＵＳＢメモリから起動させてやってみたいことがあったので挑戦してみました。    挑戦したマシンは、こんな感じのマシンです。      ＰｅｎｔｉｕｍM１．７３GHz   古いＣＤ−ＲＯＭドライブ   ＦＤＤドライブは非搭載   ＵＳＢメモリからの起動ができないＢＩＯＳ（ＵＳＢ−ＦＤＤ、ＵＳＢ−ＣＤ／ＤＶＤからの起動は可能）   ※ちなみにＦＤＤかＣＤドライブはどちらかがあればＯＫです。   そして、マシンの他に準備するものは以下のとおり。      新品のＣＤ−Ｒ１枚（ＦＤＤ搭載マシンならＦＤ１枚）   ＵＳＢメモリ（起動可能のもの）   作業手順   １．ソフトのダウンロード   今回、ＵＳＢメモリからの起動を可能にするためのフリーソフトとして、 「ＰＬｏＰ Ｂｏｏｔ Ｍａｎａｇｅｒ ５．０．８」を使用します。 こちらからダウンロードします。 そして、展開しておきます。   ２．ＣＤ−Ｒへ書き込み   展開された中の「plpbt.iso」というファイルをＣＤ−Ｒへブート可能となる方法で書き込みます。 （当方の場合、「B’s Recorder GOLD8 Security」でファイルをトラックとして書き込みました）   ３．動作確認      マシンにＣＤ−Ｒを挿入   マシンにＵＳＢメモリを挿入   ＢＩＯＳでＣＤから起動するように設定   「ＰＬｏＰ Ｂｏｏｔ Ｍａｎａｇｅｒ」が起動する   メニューの「ＳＥＴＵＰ」でＵＳＢを２．０モードにする。   メニューの「ＵＳＢ」を実行する   ＵＳＢにインストール済みのものが起動する     設定は以上です。   今回、ＦＤドライブがなくＣＤドライブを使用したので、「ＰＬｏＰ Ｂｏｏｔ Ｍａｎａｇｅｒ」の設定変更は保存できません。   起動のたびに設定を変更する必要があります。   ※ＦＤなら設定が保存されます。   今日はこの辺で。   では、また。   ","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2010/04/05/05002020/",
        "teaser": null
      },{
        "title": "VMware ESXi3 をＵＳＢメモリへインストール",
        "excerpt":"今日は、「VMware ESXi3」をＵＳＢメモリにインストールしてみました。 （「VMware ESXi4」もリリースされていますが、とりあえずは「VMware ESXi3」を）   「VMware ESXi3」とはどんなものかはここでは説明しません。   こちらなどを参照してください。   そして、なぜＵＳＢメモリにインストールするかというと、   「VMware ESXi」は対応するハードウェアが限定されるため、当方のような非力なマシンでは普通にハードディスクにインストールができないから。   いろいろ調べた結果、ＵＳＢメモリにはインストールできるようなので、早速試してみました。     作業手順   １．ＩＳＯ イメージをダウンロード   こちらから「VMware-VMvisor-InstallerCD-3.5.0_Update_5-207095.i386.iso」をダウンロードする。 （アカウントの登録（無料）が必要）   ２．ＩＳＯイメージをマウント   マウントソフト（当方は「VirtualCloneDrive」）を使用してＩＳＯイメージをマウントする。 （ディスクに焼いてもＯＫですが、このためだけなのでもったいないし時間が無駄）   ３．「INSTALL.TGZ」の解凍   ＩＳＯイメージ内の「INSTALL.TGZ」を解凍する。   ４．「VMware-VMvisor-big-3.5.0_Update_5-207095.i386.dd.bz2」の解凍   先ほど解凍したファイル内を[INSTALL] - [usr] - [lib] - [vmware] - [installer] とたどっていき、 「VMware-VMvisor-big-3.5.0_Update_5-207095.i386.dd.bz2」というファイルを解凍する。   ５．「VMware-VMvisor-big-3.5.0_Update_5-207095.i386.dd」のＵＳＢメモリへの書き込み   解凍してできた「VMware-VMvisor-big-3.5.0_Update_5-207095.i386.dd」というファイルを「ＤＤ ｆｏｒ Ｗｉｎｄｏｗｓ」というソフトを使用してＵＳＢメモリへ書き込む。   ６．動作確認   ＵＳＢメモリをマシンに挿入、またＢＩＯＳでＵＳＢメモリから起動するように設定変更して、起動させてみる。 うまく起動できると、こんな画面が表示されるはず。        設定は以上です。   今回はたまたま成功しましたが、ハードウェアとの相性で失敗することがあると思います。 別のマシンではＮＩＣとの相性が悪かったらしく、失敗しました。 こんな感じ。（ＩＰアドレスの部分が「０．０．０．０」）      もともと、非力なマシンですので、このマシンでサーバ稼動するつもりはありませんが、今後のための勉強として挑戦した見た次第です。   ではまた。   ","categories": ["PC_Tips","サーバ構築"],
        "tags": ["VMware"],
        "url": "/2010/04/06/06002055/",
        "teaser": null
      },{
        "title": "ＦｒｅｅＮＡＳサーバ構築！",
        "excerpt":"先日、余っているマシンで「VMware ESXi3」を動かそうとインストールしたものの、 あまりに非力なマシンなため、仮想マシン構築でやっぱりつまづいた。   よく調べればできるかもしませんが、どっちみち非力なマシンでの「VMware ESXi3」稼動は考えていないので、スパッとあきらめました。   そこで、今回そのマシンを「ＦｒｅｅＮＡＳ」サーバにしました。   「ＦｒｅｅＮＡＳ」とは、 「ＰＣでＮＡＳを構築することに特化した「ＦｒｅｅＢＳＤ」ベースのディストリビューション」 です。   構築方法は、Ｗｅｂ上にごろごろあるので、ここでは説明しません。   ちなみに、当方はこちら「FreeNASサーバー構築編」を参考にしました。   ＬｉｎｕｘサーバにＳａｍｂａを構築することと比べれば、断然ラクチンです。 構築自体はものの１０分で終了です。   というわけで、 古いマシンの有効利用法でした。   ではまた。   ","categories": ["サーバ構築"],
        "tags": ["FreeNAS"],
        "url": "/2010/04/08/08002000/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ － フラッシュのバックアップ！",
        "excerpt":"今度、うちのＤｅｂｉａｎ４．０（Ｅｔｃｈ）化済みの玄箱ＨＧをＤｅｂｉａｎ５．０（Ｌｅｎｎｙ）化しようと考えているところです。 そこで、いろいろ調べていると、 通常玄箱は、本体のフラッシュ上のkernel2.4でブートした後、loader.oによりHDDのkernel2.6に切り替えて動作しているようです。 しかしLennyはkernel2.6でブートしなければいけないとのこと。 つまりは、 事前にＥｔｃｈの環境で「Ｕ−Ｂｏｏｔ」化し、kernel2.6でブートできるようにしておく必要があるようです。 ※「Ｕ−Ｂｏｏｔ」とは何かについては、ここでは説明しません。 ちなみに、「Ｕ−Ｂｏｏｔ」化しなくても、ＤｅｂｉａｎをＬｅｎｎｙ化する方法もあるようです。 今日は、万が一「Ｕ−Ｂｏｏｔ」化後に、元に戻したくなるといけないので、フラッシュをバックアップしておくとにします。 忘れるといけないので以下に記録しておきます。 作業記録 ■前提条件 玄箱ＨＧにはＤｅｂｉａｎ４．０（Ｅｔｃｈ）がインストール済みである。 EMモードではなく、Ｄｅｂｉａｎ側での作業である。 作業するＤｅｂｉａｎのカーネルバージョンは「２．６．２０」である。 これは個人的な記録ですので、この記事を参考に作業をされるのであれば、※自己責任※でお願いします。 以下は当方の場合の例です。 # mkdir /mnt/share/BACKUP_mtd ← バックアップ用ディレクトリの作成 # cd /mnt/share/BACKUP_mtd ← バックアップ用ディレクトリへ移動 # cat/dev/mtdblock0 &gt; bak_mtdblock0 ← 設定保存用:アドレスOxOO380000～OxOO400000(512KB) # cat/dev/mtdblock1 &gt; bak_mtdblock1 ← ファームウェア:アドレスOxOOOOOOOO～OxOO300000(3MB) # cat/dev/mtdblock2 &gt; bak_mtdblock2 ← ブートコード(起動先の設定):アドレスOxOO300000～OxOO370000(448KB) # cat/dev/mtdblock3 &gt; bak_mtdblock3 ←...","categories": ["サーバ構築","玄箱"],
        "tags": [],
        "url": "/2010/04/10/10002046/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ - U-Boot 化！",
        "excerpt":"今日は、とうとううちの玄箱HG(Debian 4.0(etch))を「U-Boot」化しました。 （玄箱HG - Debian 5.0(lenny) 化の前準備として） 通常、「Ｕ−Ｂｏｏｔ」化するにはシリアルコンソールが必要のようですが、玄箱にそのような細工をするのは怖いし面倒なので、シリアルコンソールを使用しない方法、また「U-Boot」の起動確認は「netcat」を使用する方法をとりました。 作業記録 ※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※ 失敗すると、玄 箱が単なるゴミになります。 個人の記録です。この記事を参考に作業される方は自己責任でお願いします。 当方も、十分に下調べした上での作業です。 当記事を参考にされてもよいですが、 実際に作業される場合は、自分で十分に調査して手順を整理してから行ってください。 ※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※ ■前提条件 玄箱HGにはDebian 4.0(etch) がインストール済み。 玄箱HGにはシリアルコンソールを取り付けていない（シリアルコンソールは使用しない）。 クライアント側は WindowsXP マシンで、U-Boot の起動確認は「netcat」を使用。 １．必要なファイルを準備 GenBako Kernel Collectionから、uImage のカーネルイメージ（2.6.20）、U-Boot Loader、U-Boot Loaderのmd5をダウンロードする。 # cd /tmp &lt;span style=\"color: #ff0000;\"&gt;← ダウンロードするファイルを置くディレクトリへ移動。（どこでもＯＫ）&lt;/span&gt; # wget http://www.genbako.com/uImage/kernelimage-2.6.20-kuroHG-uImage.tgz # wget http://www.genbako.com/u-boot_loader/u-boot-hg.flash.bin # wget http://www.genbako.com/u-boot_loader/u-boot-hg.flash.md5 ※ちなみに、u-boot-hg.serial.flash.bin,...","categories": ["サーバ構築","玄箱"],
        "tags": [],
        "url": "/2010/04/11/11002043/",
        "teaser": null
      },{
        "title": "玄箱ＨＧ - ＤｅｂｉａｎをＬｅｎｎｙ化！",
        "excerpt":"前回うちの玄箱HGをU-Boot化したので、今日は玄箱HGにインストール済みのDebian 4.0(etch)を5.0(lenny)にアップグレードしてみました。 【2012.11.03 追記】 ※以下の内容は古いです。 ※実際は、玄箱の Debian 5.0(lenny) 化は、Kernel バージョンの違いにより、以下の方法が正当な方法とはなりません。 ※あまり信用しないでください。（記録として残してあるだけです） 作業記録 【前提条件】 玄箱HGにはDebian 4.0(etch)インストール済み。 玄箱HGは「U-Boot」化済み。 １．「apt-line」の編集 「/etc/apt/sources.list」を以下のように編集する。 （基本は「etch」を「lenny」に変更するだけでよいと思います） deb http://security.debian.org lenny/updates main contrib deb http://ftp.jp.debian.org/debian lenny main contrib deb-src http://ftp.jp.debian.org/debian lenny main contrib ２．アップグレード 以下のようにコマンドを実行する。 # aptitude update # aptitude install aptitude # aptitude search \"?false\" # aptitude safe-upgrade...","categories": ["サーバ構築","玄箱"],
        "tags": ["Debian"],
        "url": "/2010/04/12/12002049/",
        "teaser": null
      },{
        "title": "Windows － 最近使ったファイルを表示しない！",
        "excerpt":"以前、レジストリをいじってＷｉｎｄｏｗｓＸＰのスタートメニューにある「最近使ったファイル」の一覧を起動時に削除する方法を記録として残しましたが、   今日は、スタートメニューに「最近使ったファイル」自体を表示させない方法を記録として残します。   でも、スタートメニューのプロパティでクラシック表示にしている場合のみです。   ※標準表示にしているなら、プロパティで「最近使ったファイル」を表示させないように設定できますので。。。   以下がクラシック表示にしている場合の設定方法です。   作業記録   【注意】      レジストリを操作しますので、レジストリのバックアップを取ってから作業すること。   レジストリを操作しますので、自己責任でお願いします。（当方では責任は負いかねます）   １．レジストリエディタを開く   「regedit.exe」を検索するなとして実行する。 ※当方はよく使用するので「regedit.exe」のショートカットを作成しています。   ２．レジストリの設定   「HKEY_CURRENT_USER」 → 「Software」 → 「Microsoft」 → 「Windows」 → 「CurrentVersion」 → 「Policies」 → 「explorer」 とたどっていき、「explorer」に 「NoRecentDocsMenu」という名前で、バイナリ値「01 00 00 00」を登録する。      ３．再ログイン   変更を反映させるため、一旦ログアウトし、再度ログインし直す。     作業は以上です。 これで、スタートメニューから「最近使ったファイル」が消えます。   ではまた。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2010/04/15/15002046/",
        "teaser": null
      },{
        "title": "Windows － ＧＰＴ保護パーティション削除！",
        "excerpt":"先日、余ったマシンをＦｒｅｅＮＡＳサーバにしたのですが、訳あってハードディスクを別のものと交換しました。 そして、ＦｒｅｅＮＡＳで使用していたハードディスクをＵＳＢ接続用のケースに入れてＷｉｎｄｏｗｓＸＰで使用しようと思い、フォーマットしようとするとそのディスクは操作できないではありませんか？！ ※ＧＰＴ保護パーティションになっていました。 何とかできないものかＧｏｏｇｌｅ先生に尋ねたところ、すぐに答えが返ってきました。 コマンドプロンプトで「ＤＩＳＫＰＡＲＴ」というコマンドを使用すればよいとのこと。 早速、実践！ 以下は、コマンドプロンプトの記録です。 Microsoft Windows XP [Version 5.1.2600] (C) Copyright 1985-2001 Microsoft Corp. C:\\Documents and Settings\\hoge&gt;diskpart　← 「DISKPART」起動 Microsoft DiskPart version 5.1.3565 Copyright (C) 1999-2003 Microsoft Corporation. コンピュータ: P183 DISKPART&gt; list disk　← ハードディスクの一覧表示 Disk ### Status Size Free Dyn Gpt -------- --------------- ------- ------- --- --- Disk...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2010/04/16/16002043/",
        "teaser": null
      },{
        "title": "CentOS - PXEサーバ構築",
        "excerpt":"今日は、「ＰＸＥサーバ」についてです。 通常ＯＳをインストールする際、ディスクやＵＳＢメモリなどを使用したりすると思います。 （外部のサイトに接続してネットワークインストールすることもあるかと思います） しかし、手元にインストールイメージ（ＩＳＯファイル）があり、インストールしようとしているマシンにＤＶＤ・ＣＤドライブが無くて、ＵＳＢメモリやＵＳＢ接続のＤＶＤ・ＣＤドライブからのブートもできない（したくない）、という場合に有効なインストール方法です。 そんな時に有効な方法が「 ＰＸＥブート 」という方法です。 「ＰＸＥブート」とは「 Preboot eXecution Environment 」の略で、マシン本体にＩＳＯイメージ等を準備しなくても、ＯＳをインストールできる規格です。 「 ＰＸＥブート 」を実現するには、ＩＳＯイメージを保持していてＰＸＥ機能を提供するサーバが必要です。 また、当然インストールするマシンはネットワークブート可能でなければなりません。 作業記録 【前提条件】（今回の当方の場合） 今回は「 ＣｅｎｔＯＳ５．４ 」サーバを使用 ＨＴＴＰサーバ（ＩＳＯファイル公開用）も構築済み（今回の場合） ファイルサーバ（ＩＳＯファイル置き場所用）も構築済み ＰＸＥブートさせるＯＳは複数を予定し、メニューを使用する 【必要なもの】 ＴＦＴＰサーバ ＤＨＣＰサーバ インストール用ＩＳＯイメージ １．「 ＴＦＴＰ 」サーバのインストール 「 ＴＦＴＰ 」サーバをインストール元のＣｅｎｔＯＳにインストールします。 # rpm -qa | grep tftp　←　「ＴＦＴＰサーバ」がインストールされているか確認 # yum -y install tftp-server　←　インストールされていない場合はインストール ２．「 /etc/xinetd.d/tftp 」の編集 # vi...","categories": ["サーバ構築"],
        "tags": ["CentOS","PXE"],
        "url": "/2010/04/18/18002043/",
        "teaser": null
      },{
        "title": "ＰＸＥブートでＭｅｍｔｅｓｔ８６＋！",
        "excerpt":"先日、ネットワークブートでＯＳのインストールができるようにと、「ＰＸＥサーバ」を構築しましたが、 今日は、ＰＸＥブートでメモリテスト「Ｍｅｍｔｅｓｔ８６＋」を実行できるようにしました。 忘れるといけないので、記録しておきます。 作業記録 【前提条件】 こちらの記事「ＣｅｎｔＯＳ − ＰＸＥサーバ構築」でメニュー形式でのＰＸＥブートが可能になっていること。 １．アーカイブファイル準備 こちら[http://www.memtest.org/]から「Memtest86+」の「Pre-Compiled Bootable Binary (ver.4.00)」（memtest86+-4.00.zip）をダウンロードして展開する。 ２．ファイルコピー 「/tftpboot/pxe」ディレクトリに「memtest86」ディレクトリを作成する。 そして、先ほど展開してできたファイル「memtest86+4.00.bin」を「memtest86+」にリネームして「/tftpboot/pxe/memtest86」にコピーする。 ３．メニュー修正 「/tftpboot/pxe/pxelinux.cfg/default」に「memtest86+」用の記述を追加する。 #vi /tftpboot/pxe/pxelinux.cfg/default DEFAULT syslinux/menu.c32 MENU TITLE **** PXE Boot Menu **** LABEL 1 MENU LABEL ^1. Boot from Local HDD localboot 1 LABEL 2 ← 追加 MENU LABEL ^2. Memtest86+ 4.00 ←...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["PXE"],
        "url": "/2010/04/19/19002037/",
        "teaser": null
      },{
        "title": "Ｕｂｕｎｔｕ９．１０ － ＵＳＢメモリからインストール！",
        "excerpt":"今日は、 ＵＳＢメモリから「Ｕｂｕｎｔｕ９．１０Ｄｅｓｋｔｏｐ」をインストール方法です。 なぜなら、 あまってるマシンにテスト的にインストールしてみたいが、ＣＤドライブを取り外してしまっているからです。 ※しかも、今回のマシンはＢＩＯＳがＵＳＢメモリからの起動に対応していないので、先日構築したＰＸＥサーバを使用して「ＰＬｏＰ Ｂｏｏｔ Manager」をネットワークブートして、ＵＳＢメモリから起動するようにしました。 作業記録 ※ＷｉｎｄｏｗｓＸＰ（ＳＰ３）上での作業です。 １．ＵＳＢメモリの準備 ＵＳＢメモリをＦＡＴ３２でフォーマットしておきます。 （もちろん使用するＵＳＢメモリはＣＤ１枚分が収まる容量のものです） ※今回当方は、８ＧＢの低価格のＵＳＢメモリを使用しました。 ２．ＩＳＯファイルの準備 ＵＳＢメモリに書き込むインストールメディア「ubuntu-9.10-desktop-i386.iso」を準備し、ＩＳＯファイルをマウントソフトでマウントします。 ※当方はマウントソフトに『ＶｉｒｔｕａｌＣｌｏｎｅＤｒｉｖｅ』を使用しました。 ３．ファイルコピー ＩＳＯファイルをマウントして得られたフォルダ・ファイルをすべてＵＳＢメモリのルートにそのままコピーする。 ４．「 syslinux.cfg 」の作成 ＵＳＢメモリのルートにコピーされたファイルの中の「 isolinux 」フォルダを「 syslinux 」に名前変更し、さらに「 syslinux 」フォルダ内の「 isolinux.cfg 」を「 syslinux.cfg 」に名前変更する。 ５．「 syslinux 」ファイルの準備 ＩＳＯファイルの中身だけではＵＳＢメモリから起動できないようです。 そこでこちら[ http://www.kernel.org/pub/linux/utils/boot/syslinux/ ]から「 syslinux 」（ＺＩＰファイル）をダウンロードし、展開しておきます。 ※当記事執筆時点では、[ syslinux-3.84.zip ] が最新でした。 ６．「 syslinux 」設定 コマンドプロンプトにて、「 syslinux...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Ubuntu"],
        "url": "/2010/04/23/23002032/",
        "teaser": null
      },{
        "title": "パソコン画面の録画（操作記録）！",
        "excerpt":"先日「ＹｏｕＴｕｂｅ」を観ていたら、パソコン操作の様子（ＯＳのインストール等）を公開されている方が結構おられました。   普通にビデオカメラで撮影されているもの（画面が時々ぼやけたり、曲がったり、写り込みがあったり）や、完璧に綺麗な仕上がりのものがありました。   そこで、自分のパソコン上の操作の記録を綺麗な仕上がりで録画して残したい、という気持ちになりました。   調べてみました。     その手のものはフリーソフトでいくらか出回っていました。 その中から、「BB FlashBack Express 日本語版」を選んでみました。 このソフトには、Ｓｔａｎｄａｒｄ版やＰｒｏ版のシェアウェアもありますが、パソコンの画面録画にはフリーのＥｘｐｒｅｓｓ版でも感動・満足できました。 使い方も簡単でした。 「フルスクリーン」・「ウィンドウ」・「領域」と録画する範囲も選べるし、 このソフトで「ＹｏｕＴｕｂｅ」へのアップロードも簡単に出来ます。 でも、元の画像と比べると画質が劣化してしまいます。（もう少し勉強してみます・・・）   参考までに今回公開したインストール記録は以下のとおりです。。      ＦｒｅｅＢＳＤ８．０ 当サイト、ＹｏｕＴｕｂｅ   ＮｅｔＢＳＤ（ｉ３８６）５．０．２ 当サイト、ＹｏｕＴｕｂｅ   ＣｅｎｔＯＳ５．４ 当サイト、ＹｏｕＴｕｂｅ   Ｆｅｄｏｒａ１２ 当サイト、ＹｏｕＴｕｂｅ   パソコン操作の記録といえば、ハードコピーを取ることしか思いつかなかったけど、 パソコンの画面が録画できるとなると、いろいろと簡単に記録として残せるし、「ＹｏｕＴｕｂｅ」等へも公開できるので便利です。 （パソコン講習等の資料としても利用できます）   それでは、また。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2010/05/01/01002026/",
        "teaser": null
      },{
        "title": "ＷｉｎｄｏｗｓＰＥ２．０ディスク作成！",
        "excerpt":"今日は、ＷｉｎｄｏｗｓＸＰ用のリカバリＣＤを作成しました。 正確には「Ｗｉｎｄｏｗｓプレインストール環境（ＷｉｎｄｏｗｓＰＥ）」です。 めったに使用することは無いと思いますが。。。 また、ＷｉｎｄｏｗｓＸＰのインストールディスクがあれば間に合いますが。。。 とりあえず作ってみました。 （使用方法については未確認） なお、以下の記録は個人的な記録ですので、用語の詳細は説明していません。 必要なら各自調べてください。 また、ライセンスの関係上、 ＷｉｎｄｏｗｓＰＥは自分のマシンのＷｉｎｄｏｗｓを診断および復旧する目的以外での使用は出来ません。 作業記録 【前提条件】 作業する環境はWindows XP SP3 DiskフォーマットはNTFS 一部ローカルコンピュータの管理者権限が必要になる作業が含まれているため、予め管理者権限のあるユーザでログオン 以下のアプリケーションがインストール済み .Net framework 2.0 MSXML 6.0 WindowsPEイメージの作成用の作業ディレクトリは「D:\\90_Work」（適宜変更） １．WAIKのダウンロード こちらからWindows 自動インストール キット (AIK)[vista_6000.16386.061101-2205-LRMAIK_JA.img]をダウンロードします。 ※ダウンロード時、使用中のＷｉｎｄｏｗｓが正規のものかチェックがあります。 ※ファイルサイズは約700MBです。 ２．ＣＤイメージをマウント ダウンロードしたファイル[vista_6000.16386.061101-2205-LRMAIK_JA.img]はＣＤイメージになっているので、マウントツールを使用してマウントする。 ※当方は、マウントに「ＶｉｒｔｕａｌＣｌｏｎｅＤｒｉｖｅ」を使用しました。 ３．WAIKのインストール マウントしたＣＤイメージ内の「STARTCD.EXE」を実行し、メニューの 「Windows AIK セットアップ」 を選択してインストールを開始する。 ※当方は全てデフォルトでインストールを行いました。 ４．Windows PE Tools コマンドプロンプトの起動 「スタート」→「プログラム」→「Microsoft Windows AIK」と辿り、 「Windows PE...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2010/05/05/05002025/",
        "teaser": null
      },{
        "title": "マルチブートＣＤ作成！",
        "excerpt":"今日は、マルチブートＣＤを作ったという報告です。 小さなアプリを寄せ集めて１枚のＣＤにマルチブート可能な状態で焼き付けました。 この手のソフトにあらかじめ多数のソフトが詰め込まれている「Ｕｌｔｉｍａｔｅ Ｂｏｏｔ ＣＤ」というものがありますが、不要なものも多数あるので、自分で作成することにしました。 ただ、実際作業を行ってみると、各アプリによってブートプロセスが違うので非常に非常に苦労しました。 あーでもない、こーでもない、という感じで作業したので詳しい記録はとっていません。 Ｌｉｎｕｘ系（ＳＹＳＬＩＮＵＸ）やそうでないものも、 ＩＳＯイメージをそのまま使えるものやＩＳＯを展開して出来たファイルをコピーして使うもの、 一旦ＦＤイメージを作成してからそのイメージを焼き付けるもの等、 様々です。 使用したマルチブートソフトは、 「Ｂｏｏｔａｂｌｅ ＣＤ Ｗｉｚａｒｄ」 を使用し、ＩＳＯイメージ作成には 「ＣＤＲｅｃｏｒｄフロントエンド」 を使用しました。 ＰＣまわりの環境を頻繁に変更することが多い当方が１枚のＣＤに入れたアプリは以下のものです。 ＷｉｎｄｏｗｓＰＥ２．０ Ｗｉｎｄｏｗｓプリインストール環境 ＭｅｍＴｅｓｔ８６＋−４．００ メモリテスト ＤｒｉｖｅＦｉｔｎｅｓｓＴｅｓｔ４．１６ ＨＧＳＴのハードディスク診断ツール ＤａｔａＬｉｆｅｇｕａｒｄＤｉａｇｎｏｓｔｉｃ５．４０ ＷｅｓｔｅｒｎＤｉｇｉｔａｌのハードディスク診断ツール ＰｏｗｅｒＭａｘ４．２３ Ｍａｘｔｏｒのハードディスク診断ツール ＰＬｏＰ Ｂｏｏｔ Ｍａｎａｇｅｒ ５．０８ USBブート等非対応PC用起動ディスク Ｍｕｌｔｉｐｌｅ Ｂｏｏｔ Ｍａｎａｇｅｒ ０．３９ マルチブートマネージャインストール ＰＸＥ−Ｏｎ−Ａ−Ｄｉｓｋ ネットワークブート非対応ＢＩＯＳ用起動ディスク Ｓｙｓｔｅｍ Ｒｅｓｃｕｅ ＣＤ １．５．２ おなじみのシステムレスキュー ＧＰａｒｔｅｄ ０．５．２ おなじみのパーティション操作ツール ＡＶＧ...","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2010/05/07/07002014/",
        "teaser": null
      },{
        "title": "ブログのヘッダ画像変更！",
        "excerpt":"今日は、当ブログ開設以来変更していなかったヘッダ部分の画像を変更しました。 約１年半ぶりです。   以前は地元の湖（宍道湖）の夕日の風景でしたが、 今回はその湖沿いにある美術館の昼間の画像です。   といっても、自分が撮影した画像ではありません。 松江市が「自由に使ってください」と公開している画像です。   湖に写っているのは嫁ヶ島（よめがしま）です。   あと、今気づきましたが、 うちのサーバが２ヶ月以上（再起動するほどの問題も無く、また停電もなく）連続稼動中、 ということにちょっと感動！   ※留守にしがちだった去年も（特に不具合無く）４・５ヶ月連続稼動してましたが・・・   ま、今日はそれだけです。   ではまた。   ","categories": ["ブログ","その他"],
        "tags": ["WordPress"],
        "url": "/2010/05/15/15002015/",
        "teaser": null
      },{
        "title": "CentOS 5.5 リリース！",
        "excerpt":"うちのサーバは現在「ＣｅｎｔＯＳ５．４」で運用しているんですが、   ２０１０年５月１４日に「ＣｅｎｔＯＳ５．５」がリリースされたようです。   大きな特徴は、      ＲＨＥＬ５．５に対応。   ＣｅｎｔＯＳ５．０～５．４からは「yum update」でＣｅｎｔＯＳ５．５にアップグレードが可能。   Ｅｘｔ４のファイルシステムの対応が追加。   対応のハードウェアが追加。   などなど。   うちのサーバもＥｘｔ４で５．５にしてみたいところです。   と思っていたところ、   そう言えば、うちのサーバは夜中にパッケージを自動更新する設定にしているので、 すでに「ＣｅｎｔＯＳ５．５」にアップグレードされていました。   # cat /etc/redhat-release CentOS release 5.5 (Final)   ※Ｅｘｔ３だけど・・・   １年くらい前はＦｅｄｏｒａにはまっていましたが、 開発のスピードが速いせいか不安定（昨日できていたことが今日はできなくなっていたり）で 遊ぶ（勉強）にはいいのですが。。。   というわけで最近は「ＣｅｎｔＯＳ」ばっかりです。。。   ではまた。   ","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/05/20/20002005/",
        "teaser": null
      },{
        "title": "VMware － 分割した仮想ディスクの結合！",
        "excerpt":"今日は仮想マシン「ＶＭｗａｒｅ」のメモ書きです。   「ＶＭｗａｒｅ」（ＰｌａｙｅｒとかＳｅｒｖｅｒとか）で仮想マシンを構築する際に、 仮想ディスクを後々コピーしやすいようにと２ＧＢで分割して作成していたが、 事情により結合したくなった。   ということがあると思います。   当方も、２ＧＢで分割して構築していましたが、ＬＺＨ圧縮に失敗することがあるので、 １つに結合することにしました。   必要なものは、 「ＶＭｗａｒｅＳｅｒｖｅｒ」のインストールディレクトリにある 「vmware-vdiskmanager.exe」というファイルです。 （このファイルで仮想ディスクファイルの拡張もできるようです）   ただ、当方は現在「ＶＭｗａｒｅＰｌａｙｅｒ」を使用していて、そのファイルは「ＶＭｗａｒｅＰｌａｙｅｒ」には存在しないファイルです。   そんな場合、 一旦「ＶＭｗａｒｅＰｌａｙｅｒ」をアンインストール後、「ＶＭｗａｒｅＳｅｒｖｅｒ」をインストールします。 そして、「ＶＭｗａｒｅＳｅｒｖｅｒ」のインストールディレクトリにある「vmware-vdiskmanager.exe」を適当な場所にコピーしておきます。 再度「ＶＭｗａｒｅＳｅｒｖｅｒ」をアンインストール、「ＶＭｗａｒｅＰｌａｙｅｒ」をインストールします。 で、わかりやすいように「vmware-vdiskmanager.exe」を「ＶＭｗａｒｅＰｌａｙｅｒ」のインストールディレクトリに移します。   ※別に「ＶＭｗａｒｅＰｌａｙｅｒ」でなく「ＶＭｗａｒｅＳｅｒｖｅｒ」でもよいわけですが、自分の場合は「ＶＭｗａｒｅＰｌａｙｅｒ」が使い慣れているので。。。   【仮想ディスクファイルの結合方法】   コマンドプロンプトで「vmware-vdiskmanager.exe」のあるディレクトリに移動後、以下のようにコマンド実行。   （以下は実行例）   vmware-vdiskmanager -r D:\\VMware\\CentOS_5-5\\CentOS_5-5.vmdk -t 0 CentOS_5-5.vmdk                          ↑分割されている仮想ディスクファイル      ↑結合後の仮想ディスクファイル    この例の場合、結合後の仮想ディスクファイルはディレクトリを指定していないので「vmware-vdiskmanager.exe」のあるディレクトリに作成されいます。 結合後の仮想ディスクファイルを元のディレクトリに移動し、分割されている仮想ディスクファイルを削除すれば作業は完了です。   当方の場合、なぜか分割していた時にはできないことがあったＬＺＨ圧縮が、結合後はＬＺＨ圧縮できるようになりました。   今日は、 「ＶＭｗａｒｅ」でそんなことができる、 という話（メモ書き）でした。   ではまた。   ","categories": ["PC_Tips"],
        "tags": ["VMware"],
        "url": "/2010/05/23/23002042/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１３ リリース！",
        "excerpt":"先日、「ＣｅｎｔＯＳ５．５」がリリースされたばかりですが、   今日は「Ｆｅｄｏｒａ１３」がリリースされました。   世界標準時で、２０１０年５月２５日午前１０時。   日本時間だと、＋９時間の２０１０年５月２５日午後７時。   早速、日本にあるミラーサイトからダウンロードだけしました。   ちなみに当方は理研の こちら から。   （日本時間の１９時３０分頃は、日本の他のミラーサイトはＩＳＯイメージはまだアップされていなかった。。。）   最近、当方は「Ｆｅｄｏｒａ」には付いて行けないので「ＣｅｎｔＯＳ」ばかりですが、 やはり、新しいものも気になるので。。。   ま、今日はそれだけです。。。   ではまた。   ","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2010/05/26/26002011/",
        "teaser": null
      },{
        "title": "CentOS 5.5 － 自宅サーバ再構築！",
        "excerpt":"当方は「ＣｅｎｔＯＳ５．４」をインストールしてサーバを構築し、 先日リリースされた「ＣｅｎｔＯＳ５．５」にアップグレードして、 運用していました。   別にこれでも安定していたのですが、 ファイルシステムを「ＣｅｎｔＯＳ５．５」からサポートされた「ｅｘｔ４」にしてみたかったので、 「ＣｅｎｔＯＳ５．５」を最初からインストールし直しました。   ※「ｅｘｔ３」と「ｅｘｔ４」がどう違うのかとかは未確認ですが。。。   ただ、普通にインストールしようとするとファイルシステムの「ｅｘｔ４」が選択できません。   ファイルシステムで「ｅｘｔ４」を選択できるようにするには、 インストールディスク起動直後に表示される「ｂｏｏｔ：」プロンプトで   linux ext4   とオプション指定しないといけないようです。   で、パーティション設定はカスタマイズで行います。 ここで注意しないといけないのが、ブートローダのパーティションには「ｅｘｔ４」は指定できない、ということです。 なので、ブートローダのパーティションには「ｅｘｔ３」は指定、それ以外を「ｅｘｔ４」にします。   あとのインストールはいつもどおりでＯＫです。   「ｅｘｔ４」にした結果、「ｅｘｔ３」と比べてどうかというと、 はっきり言って、体感的にはわからないです。   やっぱ、この時代「ｅｘｔ４」でしょう？と思った次第です。   ま、今日はただ、 ＣｅｎｔＯＳを「ｅｘｔ４」でインストールするためのメモを残したかった というだけです。   次は、ＶＭｗａｒｅか余ったマシンでリリースされたばかりの「Ｆｅｄｏｒａ１３」でもいじってみようかなあ・・・   ではまた。   ","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/06/01/01002039/",
        "teaser": null
      },{
        "title": "ＬＶＭ － Ｐａｒｔｉｍａｇｅでバックアアップ不可！",
        "excerpt":"今日は、知ってる人は知っていることかもしれませんが、 ＫｎｏｐｐｉｘやＳｙｓｔｅｍＲｅｓｃｕｅＣＤなどのパーティションバックアップツール「Ｐａｒｔｉｍａｇｅ」では ＬＶＭ（論理ボリューム管理）のパーティションはバックアップできないようです。   ＬＶＭはパーティションタイプが「ｕｎｋｎｏｗｎ」と表示され、それを無視してバックアップしようとしてもエラーになります。   調べてみると、たしかにＬＶＭは「Ｐａｒｔｉｍａｇｅ」ではバックアップできないとあらゆる人が書いています。   私はよくサーバ構築した際に、 構築直後の安定した状態を「Ｐａｒｔｉｍａｇｅ」でパーティションごとバックアップしておくようにしていましたが、 今回ＬＶＭでサーバ構築してみた時にそれができなくて、 ちょっとだけショックでした。。。   新たな発見でした。   今日はそれだけです。   ではまた。   ","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Linux"],
        "url": "/2010/06/03/03002001/",
        "teaser": null
      },{
        "title": "デザイン微変更！",
        "excerpt":"こんにちは。   ご無沙汰していました。   今日はブログのデザインを少しだけ変更しました。   ※ヘッダ画像以外は、どこを変更したかはわからないかもしれません。   今日はそれだけです。   では。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/08/22/22154949/",
        "teaser": null
      },{
        "title": "Google AdSense 開始！",
        "excerpt":"こんにちは。   前々から気になっていたＧｏｏｇｌｅのアフィリエイトサービス   「Ｇｏｏｇｌｅ ＡｄＳｅｎｓｅ」   をついに開始しました。    自分のホームページやブログはたいした物ではないけど、   無いよりはあったほうがよいと思ったので。   で、無事審査も通ったので早速ソースを貼り付けてみたんだけれども、   何か表示がおかしい？！   なんと、英語表記しかされないではないですか？！   そこで調べてみると、 日本語表示にするためのコードが必要のようでした。 以下のように２行目を追加しました。    ``` javascript    ```    これで無事日本語表示となりました。   ところが、これからが重要！！   さらに調べていると、 「コードの改変はポリシー違反になり、Ｇｏｏｇｌｅから警告がくる」 とのこと。   これは困ると思い、さっそく元に戻しました。   でも、今度はちゃんと日本語表示されている。。。   登録した初期だけの現象だったのだろうか？？？   まあ、ひと安心。ということで。   以上、「Ｇｏｏｇｌｅ ＡｄＳｅｎｓｅ」メモでした。   ではまた。   ","categories": ["ブログ","Webサイト"],
        "tags": ["SEO","アフィリエイト"],
        "url": "/2010/08/23/23105736/",
        "teaser": null
      },{
        "title": "Ｇｏｏｇｌｅカスタム検索！",
        "excerpt":"先日、「Ｇｏｏｇｌｅ ＡｄＳｅｎｓｅ」を導入したのを機に、   サイト内の検索機能を「Ｇｏｏｇｌｅカスタム検索」に変更しました。   こんなの↓      当サイトの右上をご確認ください。   検索結果は、 この自分のページ内に表示する方法とＧｏｏｇｌｅのページに表示する方法がありますが、 当方の場合はこのページに綺麗に埋め込むには横幅に無理があったり、 全体的な色合いが不釣合いになったりしたので、 Ｇｏｏｇｌｅのページに表示する方法をとりました。   ぜひお試しください。   今日は以上です。   ではまた。   ","categories": ["ブログ"],
        "tags": ["Google"],
        "url": "/2010/08/25/25002042/",
        "teaser": null
      },{
        "title": "バリューコマース導入！",
        "excerpt":"もうお気づきの方もいらっしゃるかと思いますが、   当ブログにアフィリエイトサービスの   「バリューコマース」   を導入しました。   これで、   先日導入した「Ｇｏｏｇｌｅ ＡｄＳｅｎｓｅ」と   以前からの「楽天アフィリエイト」、「Ａｍａｚｏｎアソシエイト」とで   このブログサイトも若干派手になりました。   ※かと言って、しっかり「ＳＥＯ対策」しないとお小遣いにもなりませんが。。。   ぜひ、広告をクリックして、気に入った商品があれば購入してください。   では。   ","categories": ["ブログ"],
        "tags": ["SEO","アフィリエイト"],
        "url": "/2010/08/28/28002031/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － ３Ｄタククラウド導入！",
        "excerpt":"今まで当ブログでは「タグクラウド」なるものは使用していませんでした。 しかし、他の方のブログを閲覧していて３Ｄでクルクル動くタグクラウドに興味をそそられたため、 当方もプラグインを探して導入してみました。 今回導入したプラグインは「ＷＰ−Ｃｏｍｕｌｕｓ」というプラグインです。 導入手順 アーカイブファイル取得 こちら（WordPress ＞ WP-Cumulus ≪ WordPress Plugins）からＺＩＰファイルをダウンロードする。 ※当記事執筆時点では「wp-cumulus.1.23.zip」が最新でした。 アーカイブファイル展開 先ほどダウンロードした「wp-cumulus.1.23.zip」を展開する。 アップロード 展開してできた「wp-cumulus」フォルダをフォルダごとサーバの「wp-content/plugins」ディレクトリへアップロードする。 日本語対応 デフォルトでは日本語タグには対応していないので、「ぷるぷるダーツ日記」さんご提供の「tagcloud.swf（このリンクを右クリックで対象を保存）」をダウンロードし、既存の「tagcloud.swf」と差し替える。 プラグイン有効化 ＷｏｒｄＰｒｅｓｓの「管理画面」−「プラグイン」で「ＷＰ−Ｃｏｍｕｌｕｓ」を有効化する。 設定 ＷｏｒｄＰｒｅｓｓの「管理画面」−「設定」−「ＷＰ Ｃｏｍｕｌｕｓ」でオプションの設定を行う。 Display options 　　Width of the Flash tag cloud ：タグクラウドを表示する幅（px） 　　Height of the Flash tag cloud ：タグクラウドを表示する高さ（px） 　　Color of the tags ：タグの色 　　　（左） ：使用数の多いタグの色 　　　Optional second color...","categories": ["ブログ"],
        "tags": ["WordPress","タグクラウド"],
        "url": "/2010/09/01/01002055/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － アクセスカウンタ修正！",
        "excerpt":"当ブログに表示しているアクセスカウンタ（「CounterizeII」というＷｏｒｄＰｒｅｓｓ用のプラグイン）について、   そう言えば、深夜０時になってもカウンタがリセットされていない。。。   （ずっと前から気づいていましたが・・・）    多分、９時間（ＵＴＣとＪＳＴの差）遅れでカウンタがリセットされている。   ちょっと調べてみたら、ＷｏｒｄＰｒｅｓｓがインストールされているフォルダ内ある「wp-settings.php」の３２行目を以下のように修正すればよいようです。   date_default_timezone_set( 'UTC+9' );　← \"+9\"を追加    これで、深夜０時にカウンタがリセットされるようになりました。   そして、 今まで表示していたアクセスカウンタの数字が微妙に意味合いが違っていたので、 ついでに修正（＋α）しました。   サイドバー上部でご確認ください。   ちなみに      ＰＶ ＰａｇｅＶｉｅｗの略でアクセスされた延べ回数のこと   ＩＰ 同じＩＰアドレスは１つとカウントするいわゆる訪問者数のこと   です。   今日は以上です。   ではまた。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/09/03/03002058/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１４ － Ａｌｐｈａリリース！",
        "excerpt":"当方のサーバは現在安定性を重視してＣｅｎｔＯＳで運用していますが、 以前Ｆｅｄｏｒａで運用していたこともあって、 Ｆｅｄｏｒａの動向も若干気なるところであります。     最近どうなっているのか調べてみると、 先日、Ｆｅｄｏｒａ１４のＡｌｐｈａ版がリリースされていました。   とりあえず、 ＩＳＯファイル（ＤＶＤ版）・ＣＨＥＣＫＳＵＭファイルをダウンロードしてみました。   ※こちらから↓ ftp://download.fedora.redhat.com/pub/fedora/linux/releases/test/14-Alpha/Fedora/i386/iso/ （アルファ版のためいづれリンクが切れるので、ここでもリンクしていません。）   そして、 当ブログの「ＩＳＯイメージ破損チェック！」の方法でＩＳＯイメージのチェックも行いました。   今日はダウンロード・ＣＨＥＣＫＳＵＭチェックしてみただけです。 気が向いたら、仮想環境にでもインストールして遊んで（検証して）みます。   今日は以上です。   ではまた。   ","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2010/09/05/05002034/",
        "teaser": null
      },{
        "title": "WordPress - PC用テーマがKtaiStyleのテーマに！",
        "excerpt":"当ブログ（ＷｏｒｄＰｒｅｓｓ）には携帯から同じＵＲＬにアクセスすると携帯用のテーマで表示できるように「ＫｔａｉＳｔｙｌｅ」というプラグインを導入しています。   で、先日「ＫｔａｉＳｔｙｌｅ」を久々にアップデートしたときに、ＰＣでいつも表示しているテーマが携帯用になっているではありませんか？！    よくよくググって調べてみると、   「ＷＰ Ｓｕｐｅｒ Ｃａｃｈｅ」というプラグイン（ページをキャッシュしておいて２回目以降はキャッシュを見るので表示が速くなるプラグイン）が絡んでいるようです。   そうです。携帯でアクセスしたした際のキャッシュが保存されているからです。   対応方法   １．“plugins/ktai_style/patches”ディレクトリの”supercache-ktaistyle.php”というファイルを”plugins/wp-super-cache/plugins”ディレクトリ内に配置する。 ２．ＷｏｒｄＰｒｅｓｓの管理画面（プラグイン）で「ＫｔａｉＳｔｙｌｅ」、「ＷＰ Ｓｕｐｅｒ Ｃａｃｈｅ」を有効にする。 ３．「ＷＰ Ｓｕｐｅｒ Ｃａｃｈｅ」の設定画面を開き、「Mobile Device Support」をオンにする。 ４．さらに「ＷＰ Ｓｕｐｅｒ Ｃａｃｈｅ」の設定画面の一番下にある「Ktai Style Support」を有効にする（「使用する」をクリックする）。 ５．ＷｏｒｄＰｒｅｓｓの管理画面からログアウトし、クッキーを削除した状態でＰＣでページを閲覧、そしてリロードしたときのページソースを確認してみる。 一番最後に以下のような記述がされていることを確認する。    ``` html    ```   （→　ＰＣ用ページが正しくキャッシュされていることの確認） ６．携帯電話で同じページを閲覧して、携帯用テーマで正しく表示されていることを確認する。 （→「ＫｔａｉＳｔｙｌｅ」が正しく動作し、ＰＣ用キャッシュを見ていないことの確認） ７．再度、ＰＣで同じページを閲覧して、携帯用テーマで表示されていないことを確認する。 （→携帯用ページがキャッシュされていないことの確認）     ※上記「３」の「Mobile Device Support」をオンにせず、オフにして「Update Mod_Rewrite Rules」を設定する方法もあるようです。   ■参考サイト■ CentOSでLinuxを勉強してみよう！WordPressとXperiaもね♪ - いつの間にかKtai StyleとWP Super Cacheの併用方法が変わってる？ —   今日は以上です。   ではまた。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/09/08/08002009/",
        "teaser": null
      },{
        "title": "Ｗ３Ｃ（ＸＨＴＭＬ１．０）エラー！",
        "excerpt":"以前の記録「W3Cのチェック！」のとおり、 今まで当ブログは「Ｗ３Ｃ（ＸＨＴＭＬ１．０）」チェックＯＫとして表示していました。 正当なＨＴＭＬであるとして「Ｗ３Ｃ（ＸＨＴＭＬ１．０）」のロゴも表示させていました。 しかし、先日導入したアフィリエイト（ＧｏｏｇｌｅＡｄＳｅｎｓｅ・バリューコマース）のリンクコードが、 「Ｗ３Ｃ（ＸＨＴＭＬ１．０）」チェックでエラーとなってしまいます。 自分で修正することが可能なものもありますが、広告表示用として取得したコードなので勝手に修正するとまずい！！！ やむを得ずこのままコードを貼り付けて使用するしかないのか？ と調査してみました。 広告表示用に別ファイルを作成し、objectタグで取り込むと、「Ｗ３Ｃ（ＸＨＴＭＬ１．０）」チェックがＶａｌｉｄ（正当）にできるようです。 さらに、objectタグを使用することで、広告の表示遅延も回避できるようです。 （参考サイト：広告スクリプトを object タグで読み込む方法 : 亜細亜ノ蛾 - Weblog） でも、この方法はＧｏｏｇｌｅプログラムポリシーに違反とならないのか？とも思いましたが、 これも大丈夫（確認済み）のようです。 （参考サイト：Google AdSense を XHTML valid に : 亜細亜ノ蛾 - Weblog） また、objectタグは対応していないブラウザもあるのでご注意ください。 ということで、広告スクリプトを object タグで読み込む方法 : 亜細亜ノ蛾 - Weblogを参考に以下のようにしました。 ＧｏｏｇｌｅＡｄＳｅｎｓｅを呼び出す例 呼び出される側 ファイル名：obj_google_adsense.php （今回はＷｏｒｄＰｒｅｓｓのテーマフォルダ内に配置しました） &lt;?php header(\"Content-Type: text/html;charset=utf-8\"); ?&gt; &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML...","categories": ["ブログ","Webサイト"],
        "tags": ["W3C","XHTML","アフィリエイト"],
        "url": "/2010/09/10/10002055/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － Ｗ３Ｃ（ＣＳＳ）がＳｙｎｔａｘＨｉｇｈｌｉｇｈｔｅｒでエラー！",
        "excerpt":"先日あたりから、再チェックしてきた「Ｗ３Ｃ（ＸＨＴＭＬ１．０・ＣＳＳ）」チェック。   うまくいっているように見えましたが、   記事内にソースコードを記載する際に「ＳｙｎｔａｘＨｉｇｈｌｉｇｈｔｅｒ」というコードを綺麗に表示させるプラグインを使用すると、 このプラグインの「shCore.css」で「Ｗ３Ｃ（ＸＨＴＭＬ１．０・ＣＳＳ）」チェックがエラーとなってしまいます。        そこで、以下のように対応しました。      次のプロパティが正しくありません : min-height  auto は min-height で利用できる値ではありません : auto  auto →　「min-height：auto」はＩＥ７用だが削除しても問題なかった。 →　したがって削除。   プロパティ overflow-y は CSS レベル 2.1 に存在しませんが、[css3] に存在します : hidden  hidden →　「CSS レベル 2.1」においては「overflow」はOKだが「overflow-y」はＮＧのようです。 →　したがって削除。   文法解析エラーが発生しました  [,] →　あってはならない箇所に「,」カンマが記述されている。 →　したがって削除。   以下のブラウザで上記の修正が影響しないことを確認しました。      ＦｉｒｅＦｏｘ３．６．８   Ｏｐｅｒａ１０．６１   ＩＥ６   ＩＥ７   ＩＥ８   ＧｏｏｇｌｅＣｈｒｏｍｅ５．０   ここで１つ注意点。 ■今回の修正は一時的なものなので、「ＳｙｎｔａｘＨｉｇｈｌｉｇｈｔｅｒ」をアップデート（バージョンアップ）した場合は再度チェックしてみる必要がある。 ということ。 （ま、投稿するたびにＷ３Ｃチェックしていれば、エラーに気付くはずですが・・・）   今日は以上です。   ではまた。   ","categories": ["ブログ"],
        "tags": ["CSS","W3C","WordPress","プラグイン"],
        "url": "/2010/09/13/13002018/",
        "teaser": null
      },{
        "title": "SyntaxHighlighter for WordPress のテーマ変更！",
        "excerpt":"今日も、ＷｏｒｄＰｒｅｓｓのソースコードを整形・ハイライト表示してくれるプラグイン 「SyntaxHighlighter for WordPress」 についてです。 このプラグインを標準で使用するとデザインが白ベースのものになります。 しかし、当方のように黒っぽいデザインのページには白ベースのデザインがあまり似合いません。 なので、変更してみました。 「SyntaxHighlighter for WordPress」でなく「SyntaxHighlighter Evolved」ならば、ＷｏｒｄＰｒｅｓｓの管理画面の設定に「SyntaxHighlighter」の項目があるので、そこで簡単に各種設定（テーマの変更も含め）が簡単に変更できますが、「SyntaxHighlighter for WordPress」は管理画面ではソースを編集することしか出来ません。 （今回はソースを編集してテーマを変更するだけなのでこれでもＯＫですが） テーマは「syntax_highlighter.php」のデフォルトのテーマを指定している箇所をを変更するだけです。 今回は「Ｅｍａｃｓ」テーマに変更してみました。 ``` php class SyntaxHighlighter extends wokController { /* Start Class */ var $plugin_ver = '2.1.364'; var $theme = 'ThemeEmacs'; var $default_atts = array( ``` これでデザインがクールになりました。 ちなみに選択できるテーマは「wp-content\\plugins\\syntax-highlighter\\css」フォルダにあるＣＳＳファイルによると以下のとおり。 Default Django Eclipse Emacs FadeToGrey Midnight RDark...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/09/15/15002026/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － 画像アップロード時サムネイルが選択できない！",
        "excerpt":"今さら？っていう感じですが、 「ＷｏｒｄＰｒｅｓｓで画像をアップロードする際にフルサイズ以外のラジオボタンが選択されない」 という不具合が起こることがあります。 こんな感じで。 以下がその解決方法です。 ※サーバＯＳ「ＣｅｎｔＯＳ５．５」での作業です。（Ｆｅｄｏｒａでも同じだと思います） [root@hoge ~]# yum -y install php-gd　← 「ｐｈｐ−ｇｄ」のインストール Loaded plugins: downloadonly, fastestmirror, priorities, versionlock Loading mirror speeds from cached hostfile * addons: ftp.yz.yamagata-u.ac.jp * base: ftp.yz.yamagata-u.ac.jp * extras: ftp.yz.yamagata-u.ac.jp * rpmforge: fr2.rpmfind.net * updates: ftp.yz.yamagata-u.ac.jp Excluding Packages in global exclude list Finished 420 packages excluded...","categories": ["サーバ構築","ブログ"],
        "tags": ["CentOS","WordPress"],
        "url": "/2010/09/18/18002043/",
        "teaser": null
      },{
        "title": "ホームページにブログ更新履歴を表示！",
        "excerpt":"今日は、このブログとは別に公開しているＷｅｂサイト「ｍｋ−ｍｏｄｅ ＳＩＴＥ」のトップページにブログの更新履歴を表示させてみました。   少しググってみると、      ＲＳＳフィードをJavaScriptを使用して取得する方法   ＲＳＳフィードを取得するブログパーツを使用する方法   などを見かけました。   当方の場合、Ｗｅｂサイトとブログサイトは同じ自作サーバ上に構築しているので、ＲＳＳフィードを使用する方法はまわりくどい感じがしましたので、ＰＨＰでＷｏｒｄＰｒｅｓｓのデータベース（ＭｙＳＱＬ）（テーブル：wp_posts）を直接読み込む方法をとりました。   ＰＨＰとデータベース（ＭｙＳＱＬ）の知識があれば、意外と簡単に出来ると思います。   以下が簡単な手順（ＰＨＰでの処理）      ＤＢオープン   ＳＱＬ文作成   ＳＱＬ実行   ＨＴＭＬ整形   ＤＢクローズ   ※注意する点      ＭｙＳＱＬ側とＷｅｂサイト側で文字コードが異なる場合、ＭｙＳＱＬから取得して値をそのまま表示すると文字化けするので、表示する際に文字コードを変換させる必要があります。   ※ＷｏｒｄＰｒｅｓｓのテーブル情報は以下を参照      データベース概要 - WordPress Codex 日本語版   今日は以上です。   ではまた。   ","categories": ["ブログ","Webサイト"],
        "tags": ["MySQL","PHP","WordPress"],
        "url": "/2010/09/20/20002055/",
        "teaser": null
      },{
        "title": "Ｇｏｏｇｌｅ Ｎｅｗｓ Ｓｈｏｗ！",
        "excerpt":"最近、自分の中でブームの「Ｇｏｏｇｌｅ」さんですが、 今日はＧｏｏｇｌｅニュースの最新記事を掲載できるウィジェット（ブログパーツ）についてです。   それは「ＧｏｏｇｌｅＮｅｗｓＳｈｏｗｓ」というものでＧｏｏｇｌｅニュースの検索結果のヘッドラインを自分のサイトに表示できるものです。      ウィザードに従ってサイズや検索トピック、キーワード等をすると、コードが生成されるのでそれを任意の場所に貼り付けるだけでＯＫです。 Ｇｏｏｇｌｅアカウントを所有していなくてもＯＫです。   ただし、表示できるサイズは「７２８ｘ９０」、「３００ｘ２５０」の２種類のみで作成されるコードは＜iframe＞タグです。   【補足】 上記のようにウィザードで作成されたコードを貼り付けるだけの方法のほかに、 ＡＰＩのライブラリをロードしてＮｅｗｓＳｈｏｗオブジェクトを作成する方法もあるようです。 （ＡＰＩキーの取得が必要です）   ※ＡＰＩキーを使用すると何がいいのか？ ↓　↓　↓　↓ AJAX API キーの使用 - Google AJAX Search API - Google Code   ＧｏｏｇｌｅＮｅｗｓＳｈｏｗのできばえはこちらでご確認ください。 ↓　↓　↓　↓      あと、この「ＧｏｏｇｌｅＮｅｗｓＳｈｏｗ」とは別に「ＧｏｏｇｌｅＮｅｗｓＢａｒ」というのもあるようです。 当方は未導入です。 こちら　→　Google AJAX Search API - News Bar Wizard   今日は以上です。   ではまた。   ","categories": ["ブログ","Webサイト"],
        "tags": ["Google"],
        "url": "/2010/09/22/22002035/",
        "teaser": null
      },{
        "title": "ホームページに外部ＲＳＳを表示！",
        "excerpt":"今日はホームページに外部のＲＳＳフィードを表示してみました。   まず、ネット上にいろいろと公開されているＰＨＰスクリプトの中から「MagpieRSS - PHP で使える RSS パーサー。」というものを使用してみました。    手順どおりに表示させることができまた。   しかし、「Ｗ３Ｃ」チェックを実行してみると、記事タイトルに色んな特殊文字が使用してあるせいでどうしても「Ｗ３Ｃ」チェックをパスできません。   そこで、自分が表示させたいと思っていた「＠ＩＴ」のＲＳＳフィードの説明ページを見ていたら、いいツールがあるではありませんか！   「ＦｅｅＭｏ」というものです。   サイズ、色、取得先を指定後スクリプトを作成して、そのスクリプトを自分のホームページ（もしくはブログページ）の適当な場所に貼り付けるだけです。 ＪａｖａＳｃｒｉｐｔで動いているので、特殊文字もはエラーになりません。   今回は      ＠ＩＴ   ＰＣ Ｗａｔｃｈ   ＩＴ Ｍｅｄｉａ   を表示するようにしました。 ※ちなみに、これら全てＲＳＳフィードを自由に使用しても問題ないとされています。   できばえは、こちらでご確認を。      ｍｋ−ｍｏｄｅ ＳＩＴＥ   以前、新聞社のＲＳＳフィードを表示しようと考えていろいろ調べていると、「Pressnet 日本新聞協会」の見解に著作権的に問題がある、というようなことが記載されていました。（ただし、ＲＳＳフィードのリンクを貼ることについては明言がないのでなんとも言えませんが・・・）   外部のＲＳＳフィードを自分のページに表示させるには注意が必要のようです。   ではまた。   ","categories": ["Webサイト"],
        "tags": ["W3C","XHTML"],
        "url": "/2010/09/23/23002057/",
        "teaser": null
      },{
        "title": "ＷｉｎｄｏｗｓでのＭｙＳＱＬの大文字・小文字区別！",
        "excerpt":"当方のサーバはＣｅｎｔＯＳで稼動させているのですが、 何かとテストを行うのはＷｉｎｄｏｗｓマシンを使用しています。   そこで、データベースＭｙＳＱＬをいじっている時に気付いたのですが、 Ｗｉｎｄｏｗｓ版のＭｙＳＱＬは、デフォルトでテーブル名等が強制的に小文字にされてしまいます。 たとえば「abCDef」としたいのに、「abcdef」になってしまうなど。 これは設定ファイル「 my.ini 」の[mysqld]の項に   lower_case_table_names=0    の記述を追加してＭｙＳＱＬを再起動すればＯＫのようです。   ちなみにこの記述をしない場合、      Ｕｎｉｘ →　「 0 」 （大文字・小文字を区別して保管される）   Ｗｉｎｄｏｗｓ →　「 1 」 （大文字・小文字を区別せず全て小文字で保管される）   Ｍａｃ ＯＳ Ｘ →　「 2 」 （大文字・小文字を区別して保管されるが、参照時小文字に変換される）   で動作するようです。   ■参考サイト MySQL :: MySQL 5.1 リファレンスマニュアル :: 8.2.2 識別子の大文字/小文字区別   今日は以上です。   ","categories": ["サーバ構築"],
        "tags": ["Linux","MySQL","Windows"],
        "url": "/2010/09/25/25002035/",
        "teaser": null
      },{
        "title": "Apache HTTP でのアクセスを自動的に HTTPS に rewrite する方法！",
        "excerpt":"今日は、ＨＴＴＰでのある特定のフォルダへのアクセスを自動的にＨＴＴＰＳにリダイレクトする方法です。 例： [ http://www.hogehoge.com/hogehoge/ ]へアクセスしたら自動で [ https://www.hogehoge.com/hogehoge/ ]にリダイレクトする。 通常はあまり必要性を感じないかもしれませんが、 当方はどうしてもこの処理が必要となる場面に遭遇してしまいましたので。 作業記録 【前提条件】 ・サーバＯＳはＣｅｎｔＯＳ ・WｅｂサーバはＡｐａｃｈｅ２．２ １．「mod_rewrite」の有効化 Ａｐａｃｈｅ設定ファイル「/etc/httpd/conf/httpd.conf」を以下のように編集する。 # vi /etc/httpd/conf/httpd.conf 　： ↓↓コメント化されていればコメント化を解除 LoadModule rewrite_module modules/mod_rewrite.so 　： ２．「mod_rewrite」の有効化 同じくＡｐａｃｈｅ設定ファイル「/etc/httpd/conf/httpd.conf」を以下のように編集する。 # vi /etc/httpd/conf/httpd.conf ↓↓適当な場所に以下を追加 &lt;IfModule mod_rewrite.c&gt; 　　RewriteEngine On 　　RewriteLog \"logs/rewrite_log\" 　　RewriteLogLevel 0 　　RewriteCond %{SERVER_PORT} !^443$ 　　RewriteRule ^/hogehoge/(.*)?$ https://%{HTTP_HOST}/hogehoge/$1 [L,R] &lt;/IfModule&gt; RewriteEngine On rewriteを有効にする。...","categories": ["サーバ構築","Webサイト"],
        "tags": ["Apache"],
        "url": "/2010/09/28/28002045/",
        "teaser": null
      },{
        "title": "ホームページで自分のブログ記事一覧表示！",
        "excerpt":"少し前の「ホームページにブログ更新履歴を表示！」でも報告したとおり、当方のホームページのトップページにこのブログの更新情報を表示させるようにしています。     そして、今回は更新履歴とは別にカテゴリー別・年月別に記事の一覧を表示させ、さらに記事をクリックすることでブログの記事のページを表示させるさせるようにしました。（もちろん、ＰＨＰを使用して）   ＳＱＬ・ＰＨＰを駆使して、ＷｏｒｄＰｒｅｓｓのデータベースに直接アクセス、情報を取得しＨＴＭＬを整形しています。 （セレクトボックスを使用しているの、ほんの少しだけ「ＪａｖａＳｃｒｉｐｔ」も使用）   ■参考■      データベース概要 - WordPress Codex 日本語版   出来栄えは、こちらの「ＢＬＯＧ」メニューから入ってご確認ください。   今日は以上です。   ではまた。   ","categories": ["ブログ","Webサイト"],
        "tags": ["MySQL","PHP","WordPress"],
        "url": "/2010/09/30/30002010/",
        "teaser": null
      },{
        "title": "Windows - 画像認証「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」インストール！",
        "excerpt":"お問合せなどでサイト管理者へメール送信等行う際に、スパム対策として画像認証させる方法です。（今回は「ＷｉｎｄｏｗｓＸＰ編」） 簡単に言うと、画像認証とは文字入りの画像を人間が判断して入力しＯＫなら認証させる、というものです。 文字が画像になっているので、コンピュータには認識が多少（？）は困難です。 画像認証には通常「Ｃａｐｔｃｈａ」というＰｅａｒパッケージを使用します。 「Ｃａｐｔｃｈａ」には色々と種類があるようですが、中でもおそらく一番オーソドックスであろう「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」を使用してみます。 ※認証用画像にカタカタやひらがなを使用するもの、簡単な計算をさせるものなどもあるようです。 さらには、画像認証ではなく音声認証させるものもあるようです。 作業記録 【前提条件】 ＯＳはＷｉｎｄｏｗｓＸＰ（ＳＰ３） ＷｅｂサーバはＡｐａｃｈｅ２．２ ＰＨＰは５．２．１４ ※上記に類似な環境ならＯＫだと思いますが、ＰＨＰのバージョンによってはＰｅａｒがインストールできないバグがあるようなので注意！ 当方もＰＨＰ５．２．１２ではＰｅａｒのインストールができませんでした。 １．Ｐｅａｒのインストール ＰＨＰインストールディレクトリ（当方は「C:\\php」）の中にある「go-pear.bat」をダブルクリックもしくはコマンドプロンプトから実行する。 途中の問いにはすべてエンターで応答する。 ※バッチファイルの実行の代わりに以下を実行してもＯＫ。 （バッチファイルは以下のことをしているだけです） C:\\php&gt;php -d output_buffering=0 PEAR\\go-pear.phar ２．「php.ini」の設定 「php.ini」の「include_path」に「;C:\\php\\PEAR」を追加する。 include_path = \".;C:\\php\\includes;C:\\php\\PEAR\" ３．「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」のインストール 画像認証パッケージ「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」をインストールします。 コマンドプロンプトで以下のようにして実行すると、 C:\\php&gt;pear install Text_CAPTCHA Failed to download pear/Text_CAPTCHA within preferred state \"stable\", latest rel ease is version 0.4.0, stability \"alpha\",...","categories": ["Webサイト"],
        "tags": ["Windows","スパム対策"],
        "url": "/2010/10/03/03002031/",
        "teaser": null
      },{
        "title": "Windows - 画像認証「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」使用方法！",
        "excerpt":"前回、Ｗｉｎｄｏｗｓ環境に「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」をインストールしたので、今回は使ってみました。 ↓インストール方法はこちら↓ Windows - 画像認証「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」インストール！ 作業記録 【前提条件】 ＯＳはＷｉｎｄｏｗｓＸＰ（ＳＰ３） ＷｅｂサーバはＡｐａｃｈｅ２．２ ＰＨＰは５．２．１４ １．作業用ディレクトリの作成 Ｗｅｂサーバのドキュメントルートに「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」用の作業ディレクトリを作成します。 当方は以下のようにしました。 ドキュメントルート 　　｜ 　　＋captcha（Text_CAPTCHA用ディレクトリ） 　　　　｜ 　　　　＋fonts（使用するフォントファイルを格納するディレクトリ） 　　　　｜ 　　　　＋img　（作成された画像ファイルを格納するディレクトリ） ２．フォントの準備 画像認証に使用するフォントを先ほど作成した「fonts」ディレクトリに配置します。 フォントは自分の気に入ったものをネットで探してもよいし、Ｗｉｎｄｏｗｓのフォントフォルダにあるものを使用してもよいです。 当方は、オーソドックスにＷｉｎｄｏｗｓのフォントフォルダの「ＣＯＵＲ．ＴＴＦ」を使用します。 （Ｗｉｎｄｏｗｓのフォントフォルダからコピーするにはコマンドプロンプト[COPYコマント]を使用しないとコピーできません） ３．ＰＨＰソース作成 ネットで調べると非常に色々とサンプルがあります。 適当なものを用意します。 当方は以下のようにしました。 （ファイル名は [適当].php） &lt;?php session_start(); //画像のパス $img_dir = \"captcha/img/\"; // ← 画像を格納するディレクトリを指定 $file_path = $img_dir.md5(session_id()).\".png\"; //POST送信があれば認証 if($_SERVER['REQUEST_METHOD'] == \"POST\") { if($_POST['input_captcha_auth'] ==...","categories": ["Webサイト"],
        "tags": ["PHP","Windows","スパム対策"],
        "url": "/2010/10/04/04002000/",
        "teaser": null
      },{
        "title": "CentOS – 画像認証「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」インストール！",
        "excerpt":"前回まではＷｉｎｄｏｗｓＸＰで「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」を使って画像認証を試してみました。 今回はＣｅｎｔＯＳで試してみました。 （結局うまくいきませんでしたが・・・） 今回はまず「ＣｅｎｔＯＳ」に「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」をインストールしてみました。 ↓Ｗｉｎｄｏｗｓでのインストール・使用はこちら↓ Windows - 画像認証「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」インストール！ Windows – 画像認証「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」使用方法！ 作業記録 【前提条件】 ＯＳはＣｅｎｔＯＳ５．５ ＷｅｂサーバはＡｐａｃｈｅ２．２ ＰＨＰは５．１．６ １．Ｐｅａｒのインストール 当方はインストール済みでしたが、通常以下のようにしてインストールします。 # yum -y install php-pear ２．「php.ini」の設定は不要？ Ｗｉｎｄｏｗｓでは「php.ini」にの「include_path」を設定しましたが、Ｌｉｎｕｘでは不要でしょうか？ 当方は「include_path」の設定はしていません。 ３．「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」のインストール Ｗｉｎｄｏｗｓでの作業と同じように、画像認証パッケージ「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」をインストールします。 以下のようにして実行すると、 # pear install Text_CAPTCHA Failed to download pear/Text_CAPTCHA within preferred state \"stable\", latest release is version 0.4.0, stability \"alpha\", use \"channel://pear.php.net/Text_CAPTCHA-0.4.0\"...","categories": ["Webサイト"],
        "tags": ["CentOS","スパム対策"],
        "url": "/2010/10/05/05002027/",
        "teaser": null
      },{
        "title": "CentOS – 画像認証「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」使用方法！",
        "excerpt":"今回はＷｉｎｄｏｗｓで試してみた時と同じように、「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」の使用に挑戦してみました。 ↓Ｗｉｎｄｏｗｓでのインストール・使用はこちら↓ Windows - 画像認証「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」インストール！ Windows – 画像認証「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」使用方法！ ↓ＣｅｎｔＯＳへのインストールはこちら↓ CentOS – 画像認証「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」インストール！ 作業記録 【前提条件】 ＯＳはＣｅｎｔＯＳ５．５ ＷｅｂサーバはＡｐａｃｈｅ２．２ ＰＨＰは５．１．６ １．作業用ディレクトリの作成 Ｗｅｂサーバのドキュメントルートに「Ｔｅｘｔ＿ＣＡＰＴＣＨＡ」用の作業ディレクトリを作成します。 当方は以下のようにしました。 ドキュメントルート 　　｜ 　　＋captcha（Text_CAPTCHA用ディレクトリ） 　　　　｜ 　　　　＋fonts（使用するフォントファイルを格納するディレクトリ） 　　　　｜ 　　　　＋img　（作成された画像ファイルを格納するディレクトリ） ２．フォントの準備 画像認証に使用するフォントを先ほど作成した「fonts」ディレクトリに配置します。 フォントは自分の気に入ったものをネットで探してもよいし、Ｗｉｎｄｏｗｓのフォントフォルダにあるものを使用してもよいです。 当方は、オーソドックスにＷｉｎｄｏｗｓのフォントフォルダの「ＣＯＵＲ．ＴＴＦ」をサーバにコピーして使用します。 ３．ＰＨＰソース作成 ネットで調べると非常に色々とサンプルがあります。 適当なものを用意します。 当方は以下のようにしました。 （ファイル名は [適当].php） &lt;?php session_start(); //画像のパス $img_dir = \"captcha/img/\"; // ← 画像を格納するディレクトリを指定 $file_path = $img_dir.md5(session_id()).\".png\"; //POST送信があれば認証...","categories": ["Webサイト"],
        "tags": ["CentOS","PHP","スパム対策"],
        "url": "/2010/10/06/06002043/",
        "teaser": null
      },{
        "title": "HTML - テキストボックスをクリックで全選択！",
        "excerpt":"今さらですが、ＨＴＭＬ（ＪａｖａＳｃｒｉｐｔ）でテキストボックス内の文字列を全選択する方法です。   正確には、ｉｎｐｕｔタグで作成されたテキストボックス内の文字列をマウスクリック１つで全選択する方法です。     以下、作成例です。   &lt;input type=\"text\" style=\"width: 400px;\" onclick=\"this.select(0,this.value.length)\" readonly=\"readonly\" value=\"http://www.hogehoge.com/hogehoge/\" /&gt;   ブログのトラックバックなどに利用できます。   今日は以上です。   ではまた。   ","categories": ["ブログ","Webサイト"],
        "tags": ["JavaScript"],
        "url": "/2010/10/09/09002011/",
        "teaser": null
      },{
        "title": "ＷｉｎｄｏｗｓＸＰ － Ｒｕｂｙ１．９．２をインストール！",
        "excerpt":"当方の地元「松江市」は「Ｒｕｂｙ」を開発し名誉松江市民にもなられた「まつもとゆきひろ」氏ゆかりの街です。 そこで、当方も「Ｒｕｂｙ」に触れてみようと、とりあえずＷｉｎｄｏｗＸＰ環境に「Ｒｕｂｙ」をインストールしてみました。 ちなみに「Ｒｕｂｙ」の各種情報は「Ｒｕｂｙ公式サイト」を参照してください。 ※開発者が日本人であることもあって日本語での情報が豊富ですし、メーリングリストも利用できます。 今回は以下のことを行いました。 Ｒｕｂｙ本体 のインストール 拡張ライブラリ のインストール Ｒｕｂｙ ｏｎ Ｒａｉｌｓ のインストール 超簡単な動作確認 以下がその記録です。 Ｒｕｂｙ本体 のインストール １．バイナリファイルのダウンロード ソースコードからのインストールも出来るようですが、今回はバイナリファイルからのインストールとしました。 mswin32版を提供している有志のWebサイト「Ruby-mswin32 (ja)[mswin32版を提供している有志のWebサイト]」の「Release」ページから、アーカイブファイル「ruby-1.9.2-p0-i386-mswin32.zip」をダウンロードします。 ２．バイナリファイルの展開 先ほどダウンロードしたアーカイブファイルを展開し、出来たフォルダを「ruby」とリネームします。 そして、そのフォルダをＣドライブ直下に配置します。 （どこに配置してもＯＫです） ３．環境変数の設定 「コントロールパネル」−「システム」の［詳細設定］タブの画面でシステム環境変数の「Path」に以下の記述を追加します。 ;C:\\ruby\\bin そして、この設定を反映させるためにＷｉｎｄｏｗｓを再起動させます。 ４．インストールの確認 「Ｒｕｂｙ」がインストールできたか、コマンドプロンプトで以下のように入力＋エンターし確認します。 C:\\Documents and Settings\\hoge&gt;ruby -v ruby 1.9.2p0 (2010-08-18 revision 29036) [i386-mswin32]　←　このように出力されればＯＫ 拡張ライブラリ のインストール １．ライブラリ「GNU Readline」のインストール 「ｉｒｂ」と呼ばれるインタラクティブシェル（対話形式でRubyを実行できる環境）を導入します。 「ｉｒｂ」を利用するために必要なライブラリが、「GNU Readline」です。 「Just another...","categories": ["プログラミング"],
        "tags": ["Ruby","Windows"],
        "url": "/2010/10/11/11002011/",
        "teaser": null
      },{
        "title": "ＷｉｎｄｏｗｓＸＰ – Ruby on Rails 3.0.0 で MySQL！",
        "excerpt":"最近、地元（島根県松江市）ゆかりの「Ｒｕｂｙ」がマイブームです。 「Ｒｕｂｙ」に関しては素人なので目下勉強中ですが、試しにＷｉｎｄｏｗｓの「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ ３．０．０」で「ＭｙＳＱＬ」も試してみようと思ってインストールしてみました。 ＷｉｎｄｏｗｓＸＰへの「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ ３．０．０」インストール作業についてはこちら。 （もちろん、ＷｉｎｄｏｗｓＸＰに「ＭｙＳＱＬ」がインストールされている必要があります） しかし、「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」の標準の簡易データベース「ＳＱＬｉｔｅ３」はすんなり動くものの、「ＭｙＳＱＬ」がうまく動きません。 通常、「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ ３．０．０」で「ＭｙＳＱＬ」を動作させるにはアダプターとして「ｍｙｓｑｌ２」を使用するようなのですが、それがうまくインストールできません。 調べてみると、Ｗｉｎｄｏｗｓ版「ＭｙＳＱＬ２」は現在調整中（？）みたいです。 なので、アダプタは「ｍｙｓｑｌ２」が使用できるようになるまでは「ｒｕｂｙ−ｍｙｓｑｌ」を使用することにします。 実際には ●（アプリのディレクトリ）\\Gemfile #gem 'mysql2' 　↓　変更　↓ gem 'ruby-mysql' ●（アプリのディレクトリ）\\config\\database.yml #adapter: mysql2 　↓　変更　↓ adapter: mysql #host: localhost 　↓　変更（Ｓｏｃｋｅｔエラー回避のために）　↓ host: 127.0.0.1 こちらを参考にさせてもらいました。 Windows上で Ruby1.9.2 + Rails3 + SQLite or MySQL 環境を構築 - Everyleaf Lab...","categories": ["サーバ構築"],
        "tags": ["Rails","Ruby","Windows"],
        "url": "/2010/10/13/13002035/",
        "teaser": null
      },{
        "title": "WordPress - 月別アーカイブをドロップダウンボックスに！",
        "excerpt":"ブログを続けていると、サイドバーの月別アーカイブのリストが（デフォルトの状態だと）下に長くなっていきます。 当ブログは開設してからまだ１年９ヶ月ほどですが、それでも気になります。        直近１年、などと指定することも可能ですが、今回はドロップダウンボックス化してみました。   方法はこちらのとおり      テンプレートタグ/wp get archives - WordPress Codex 日本語版   もろに方法が掲載されています。   これで、スペースがコンパクト化されました。         今日は以上です。   ではまた。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/10/15/15002023/",
        "teaser": null
      },{
        "title": "ＷｉｎｄｏｗｓＸＰ – Ruby on Rails 3 を Mongrel で！",
        "excerpt":"現在、Ｒｕｂｙ というか 「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」を勉強中です。 いずれ、うちのサーバ（ＣｅｎｔＯＳ＋Ａｐａｃｈｅ＋ＭｙＳＱＬ）も「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」化したいと思っています。 そこで、練習（開発）用にと以下のようにＷｉｎｄｏｗｓに「Ｒｕｂｙ」、「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」をインストールしたわけです。 ＷｉｎｄｏｗｓＸＰ − Ｒｕｂｙ１．９．２をインストール！ ＷｉｎｄｏｗｓＸＰ – Ruby on Rails 3.0.0 で MySQL！ で、Ｗｅｂサーバは本運用ではＡｐａｃｈｅ＋Ｐａｓｓｅｎｇｅｒ（Ｒｕｂｙ ｏｎ Ｒａｉｌｓ で構築されたＷｅｂアプリを運用するためのＡｐａｃｈｅモジュール）を使用するつもりなので、ＷｉｎｄｏｗｓのＡｐａｃｈｅでも 「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」が動くようにしたいわけです。 しかし、いろいろ試行錯誤してみたものの、ＷｉｎｄｏｗｓのＡｐａｃｈｅで「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」を動かすのは非常に困難なため断念しました。 ■断念した理由 Ａｐａｃｈｅ＋Ｐａｓｓｅｎｇｅｒ はＷｉｎｄｏｗｓでは動かない模様 Ａｐａｃｈｅ＋ＦａｓｔＣＧＩ（ＣＧＩを高速化するもの）は現在は非推奨（少し前まではよく使う方法のようだった） 「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」にはデフォルトで「ＷＥＢｒｉｃｋ」という簡易Ｗｅｂサーバが附属しているので、開発用にはそれでも充分なのですが、せっかくなので「Ｍｏｎｇｒｅｌ」というＷｅｂサーバを導入してみました。 通常、以下のようにインストールすると起動できるはずですが、 &gt;gem install mongrel うちの環境（今の環境？）では以下のようにしないとダメでした。 １．（Ｒａｉｌｓアプリのフォルダ）\\Gemfile に以下の記述を追加 gem 'mongrel', '&gt;= 1.2.0.pre2'...","categories": ["サーバ構築"],
        "tags": ["Rails","Ruby","Windows"],
        "url": "/2010/10/17/17002047/",
        "teaser": null
      },{
        "title": "ＭｙＳＱＬ - クエリ結果のキャッシュで高速化！",
        "excerpt":"ＷｏｒｄＰｒｅｓｓなどで使用しているデータベース「ＭｙＳＱＬ」はデフォルトではクエリ結果のキャッシュを行っていません。 クエリ結果をキャッシュしてやることで高速化が期待できます。 こちらを参考 MySQL :: MySQL 5.1 リファレンスマニュアル :: 4.13 MySQL クエリ キャッシュ 作業記録 （今回ははＣｅｎｔＯＳでの作業ですが、Ｗｉｎｄｏｗｓでも同様です） １．クエリ結果キャッシュの有効・無効確認 ＭｙＳＱＬサーバーへrootユーザでログインし、以下のように確認する。 mysql&gt; show variables like 'query_cache_size'; +------------------+-------+ | Variable_name | Value | +------------------+-------+ | query_cache_size | 0 | ← 無効(0M)になっている +------------------+-------+ 1 rows in set (0.00 sec) ２．「my.cnf」の設定 ＭｙＳＱＬ設定ファイル「my.cnf」の[mysqld]の項に以下のように記載を追加する。 # vi /etc/my.cnf [mysqld] query_cache_limit=1M...","categories": ["サーバ構築","ブログ"],
        "tags": ["MySQL","WordPress"],
        "url": "/2010/10/20/20002031/",
        "teaser": null
      },{
        "title": "ＥＸＴ４ － Ｐａｒｔｉｍａｇｅでバックアアップ不可！",
        "excerpt":"最近、ＣｅｎｔＯＳでもファイルシステムに「ＥＸＴ４」が使用できるようになり、現在うちのサーバも「ＥＸＴ４」で運用しています。 （但し、「ｂｏｏｔ」ディレクトリは「ＥＸＴ３」でないといけないです）     今まで「ＥＸＴ３」で運用していた時は、サーバ構築直後の良い状態のものを「ＲｅｓｃｕｅＣＤ」や「Ｋｎｏｐｐｉｘ」の「Ｐａｒｔｉｍａｇｅ」を使ってパーティションごとバックアップして障害に備えていました。   しかし、「ＥＸＴ４」で構築したサーバは「Ｐａｒｔｉｍａｇｅ」でバックアップしようとすると、   Can't read block 0 from image   たしかこんなエラーが発生してバックアップできません。   そこで調べてみると、 やっぱり「Ｐａｒｔｉｍａｇｅ」は「ＥＸＴ４」に未対応とのことでした。 いつか対応するのでしょうか？？？   ということで「Ｐａｒｔｉｍａｇｅ」でのバックアップは断念しました。 どうしてもパーティションごとバックアップしたいときだけ「ＲｅｓｃｕｅＣＤ」や「Ｋｎｏｐｐｉｘ」のパーティション操作ツール「ＧＰａｒｔｅｄ」を使って、あまった（ちょっと古い）大容量ハードディスクにコピーすることにします。（市販のソフト使ったり、ｄｄコマンドを使うという手もありますが・・・）   ※バックアップしたものをリストアして使用するときは、ブートローダのインストールが必要になることもあります。 （実際にリストアしていませんので、なんとも不確実ですが・・・）   今日はそれだけです。   ではまた。   ","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Knoppix"],
        "url": "/2010/10/25/25002004/",
        "teaser": null
      },{
        "title": "Ｒｕｂｙ ｏｎ Ｒａｉｌｓ インストール － ＣｅｎｔＯＳ",
        "excerpt":"以前、ＷｉｎｄｏｗｓＸＰに「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」をインストールしましたが、今回はＣｅｎｔＯＳサーバにインストールしました。 作業記録 １．ライブラリ準備 関連するライブラリ（以下の３つ）が未インストールならインストールする。 [root@hoge ~]# yum -y install zlib-devel [root@hoge ~]# yum -y install openssl-devel [root@hoge ~]# yum -y install mysql-devel ２．アーカイブダウンロード 今回はソースから「Ｒｕｂｙ」をインストールします。 現時点で最新の「ruby-1.9.2-p0」のアーカイブファイルをダウンロードする。 [root@hoge ~]# cd /usr/local/src　← 「/usr/local/src」ディレクトリへ移動 [root@hoge src]# wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p0.tar.gz ３．アーカイブファイル展開 ダウンロードしたアーカイブファイルを展開する。 [root@hoge src]# tar xfz ruby-1.9.2-p0.tar.gz [root@hoge src]# cd ruby-1.9.2-p0　← 展開して出来たディレクトリへ移動 ４．「Ｒｕｂｙ」インストール 以下の手順でインストールする。...","categories": ["Webサイト"],
        "tags": ["Rails","Ruby"],
        "url": "/2010/10/27/27002041/",
        "teaser": null
      },{
        "title": "Ｒｕｂｙ ｏｎ Ｒａｉｌｓ を Ａｐａｃｈｅ２で動かす！",
        "excerpt":"前回は、「ＣｅｎｔＯＳ」サーバに「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」をインストールしました。 今回は「Ａｐａｃｈｅ２」で「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」が動作するように設定しました。 作業記録 １．「Ｐａｓｓｅｎｇｅｒ」Ｇｅｍｓパッケージのインストール 「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」で構築されたＷｅｂアプリケーションを運用するためのＡｐａｃｈｅモジュール「Ｐａｓｓｅｎｇｅｒ」のＧｅｍｓパッケージをインストールする。 [root@hoge ~]# gem install passenger ２．「Ｐａｓｓｅｎｇｅｒ」Ａｐａｃｈｅモジュールのインストール Ａｐａｃｈｅモジュール「Ｐａｓｓｅｎｇｅｒ」をインストールする。 [root@hoge ~]# yum -y install httpd-devel　← これがないとエラーとなる [root@hoge ~]# passenger-install-apache2-module ※仮に何かが無いためにインストールに失敗する場合は、メッセージをよく見てみるとインストール方法が表示されているので、そのとおりにすればよい。 ３．「Ｐａｓｓｅｎｇｅｒ」の設定 「Ｐａｓｓｅｎｇｅｒ」Ａｐａｃｈｅモジュールのインストールに成功すると、表示されているメッセージの途中に 　・・・　途中省略　・・・ The Apache 2 module was successfully installed. Please edit your Apache configuration file, and add these lines: LoadModule...","categories": ["Webサイト"],
        "tags": ["Apache","Rails","Ruby"],
        "url": "/2010/10/29/29002004/",
        "teaser": null
      },{
        "title": "ホームページを３０１リダイレクト！",
        "excerpt":"今日は、ＨＴＴＰでのある特定のページへのアクセスを自動的に別のページにリダイレクトする方法です。 例： [ http://www.hogehoge.com/index.php/ ]へアクセスしたら自動で [ http://www.hogehoge.com/rails/ ]にリダイレクトする。 Ａｐａｃｈｅ２の「ｈｔｔｐｄ．ｃｏｎｆ」ファイルで設定できます。 ちなみに、この手のリダイレクトには「３０１」と「３０２」があります。 「３０１」は永久的に転送する（ホームページのＵＲＬが永久的に変更になった）場合 「３０２」は一時的に転送する（ホームページのメンテ中などの一時的な）場合 ※別に一時的な転送でも「３０１」を使用してもよいと思いますが。。。 作業記録 【前提条件】 ・サーバＯＳはＣｅｎｔＯＳ ・WｅｂサーバはＡｐａｃｈｅ２．２ ・今回はＰＨＰで運用していたものを「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」に移行 １．「mod_rewrite」の有効化 Ａｐａｃｈｅ設定ファイル「/etc/httpd/conf/httpd.conf」を以下のように編集する。 # vi /etc/httpd/conf/httpd.conf 　： ↓↓コメント化されていればコメント化を解除 LoadModule rewrite_module modules/mod_rewrite.so 　： ２．「mod_rewrite」の有効化 同じくＡｐａｃｈｅ設定ファイル「/etc/httpd/conf/httpd.conf」を以下のように編集する。 （一例です） # vi /etc/httpd/conf/httpd.conf ↓↓適当な場所に以下を追加 &lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteLog \"logs/rewrite_log\" RewriteLogLevel 0 RewriteRule ^/$ /rails/ [R=301]...","categories": ["Webサイト"],
        "tags": ["Apache","Rails","Ruby"],
        "url": "/2010/11/01/01002012/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１４リリース！",
        "excerpt":"「Ｆｅｄｏｒａ１４」がリリースされました。   早速ＩＳＯファイルをダウンロード・破損チェックを行いました。   ちなみにダウンロードはこちらから行いました。 → ftp://ftp.riken.jp/Linux/fedora/releases/14/Fedora/i386/iso/   当方の自宅サーバは「ＣｅｎｔＯＳ５．５」なので「Ｆｅｄｏｒａ１４」で稼動させようとは思っていませんが、少しくらいは触れてみよう（試験的にサーバ構築してみよう）とは思っています。   今日はこれだけです。   ","categories": ["サーバ構築"],
        "tags": ["Fedora"],
        "url": "/2010/11/04/04002040/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ － ＷａｋｅＯｎＬａｎ！",
        "excerpt":"Ｌｉｎｕｘ（ＣｅｎｔＯＳ）マシンから他のマシンをネットワーク経由で起動させる方法です。 作業記録 １．起動対象の情報取得 ＷａｋｅＯｎＬａｎで起動したいマシンでＩＰアドレス・Ｅｔｈｅｒｎｅｔ情報を確認する。 ●Ｌｉｎｕｘの場合 [root@hoge ~]# ifconfig eth0 Link encap:Ethernet HWaddr 99:99:99:99:99:99 　← ＥｔｈｅｒｎｅｔのＭＡＣアドレス inet addr:192.168.xxx.xxx 　← ＩＰアドレス 　・・・以下省略・・・ ●Ｗｉｎｄｏｗｓの場合 C:\\Documents and Settings\\hoge&gt;ipconfig /all Ethernet adapter ローカル エリア接続: Connection-specific DNS Suffix . : Description . . . . . . . . . . . : Marvell Yukon 88E8056...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/11/07/07002033/",
        "teaser": null
      },{
        "title": "JavaScript － カンマ編集！",
        "excerpt":"今日は「ＪａｖａＳｃｒｉｐｔ」で数値を３桁ごとのカンマ区切りにしたり、逆にカンマ付き数値からカンマを削除する方法についてです。 //カンマ挿入関数 function insertComma( str ) { var num = new String( str ).replace( /,/g, \"\" ); while ( num != ( num = num.replace( /^(-?\\d+)(\\d{3})/, \"$1,$2\" ) ) ); return num; } //カンマ削除関数 function deleteComma( str ) { var num = new String( str ).replace( /,/g, \"\" ); return...","categories": ["PC_Tips","Webサイト"],
        "tags": ["JavaScript"],
        "url": "/2010/11/09/09002005/",
        "teaser": null
      },{
        "title": "JavaScript － ゼロサプレス・ゼロパディング！",
        "excerpt":"今日は「ＪａｖａＳｃｒｉｐｔ」で上位桁にゼロのある数値ｊからゼロを削除したり、逆に指定の桁に満たない数値にゼロを付加する方法についてです。   //ゼロサプレス function zeroSuppress( val ) { return val.replace( /^0+([0-9]+)/, \"$1\" ); }   //ゼロパディング function zeroPudding( val ) { return ( \"0\" + val ).slice( -2 ) }   ※上記のゼロパディングは２桁の例。   実際には当方は「onfocus」（テキストボックス編集）時にゼロサプレス関数、「onblur」（ロストフォーカス）時にゼロパディング関数を呼び出して使用しています。   以上です。   ","categories": ["PC_Tips","Webサイト"],
        "tags": ["JavaScript"],
        "url": "/2010/11/10/10002058/",
        "teaser": null
      },{
        "title": "ロト６・ミニロト・ナンバーズデータ公開！",
        "excerpt":"今までも当方のホームページで「ロト６」の当選データを閲覧・ＣＳＶダウンロードできるようにしていましたが、今回「ミニロト」・「ナンバーズ３」・「ナンバーズ４」についても同様に閲覧・ＣＳＶダウンロードできるようにしました。（この際に「販売実績」の項目も追加しています）      ｍｋ−ｍｏｄｅ ＳＩＴＥ     表向きは単に「ミニロト」・「ナンバーズ３」・「ナンバーズ４」が追加されたですが、このデータを公開するために、ウラでは「Ｒｕｂｙ」を駆使して「みずほ銀行・宝くじコーナー」から自動でデータを取得し、ＣＳＶデータを作成するようにしています。   ※ちなみに「みずほ銀行・宝くじコーナー」では古いデータは当選口数・当選金額は公開されていませんので、その部分のデータは別のサイトから取得しています。が、販売実績・ナンバーズ口数の古いデータには取得できていないものもあります。   ※当方のデータは保証できるものではありません。 あくまでも、個人で分析するために活用しているだけです。   ※正式なデータは「みずほ」宝くじコーナーでご確認ください。   ※データに不具合があれば教えてください。   以上。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2010/11/12/12002009/",
        "teaser": null
      },{
        "title": "ホームページ － アクセスカウンタ更新！",
        "excerpt":"当方のホームページ（Ｒｕｂｙ ｏｎ Ｒａｉｌｓ で作成）に表示させているアクセスカウンター。   ちょっと不正確？   データベース１レコードで管理しているため、      同じＩＰからのアクセスでも指定時間を越えてアクセスされたら別カウントになる   同じＩＰからの２回のアクセスの間に別のＩＰからのアクセスがあると別カウントとなる   など・・・   というわけで、 アクセスされるたびにデータベースに「ＩＰ」・「参照されたページ」・「リファラ」・「検索キーワード」・「ユーザエージェント」を記録し、同一日の同じＩＰからのアクセスは１回のカウントとするようにしました。   表向きはＩＰのカウントを表示させていますが、データベースに全アクセスを保存しているのでＰａｇｅＶｉｅｗのカウントも取得可能です。   実際には当方は管理用のページを作成し、アクセスされたページ・リファラＵＲＬ・検索キーワード・ユーザエージェント（ブラウザ・ＯＳ情報）を閲覧できるようにしています。   で、どのようにしてこのようなアクセス解析を実現できたのかというと、ブログシステム「ＷｏｒｄＰｒｅｓｓ」のアクセス解析用プラグイン「ＣｏｕｎｔｅｒｉｚｅＩＩ」の「ＰＨＰ」ソースを参考にして「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」に移植したからです。   非常に苦労しました。（特にユーザエージェントを解析する部分）   とりあえず、このロジックでアクセスカウンタを稼動させていますが、まだ不具合があるかもしれません。少し様子を見てみる必要がありそうです。   今日は以上です。   ","categories": ["Webサイト"],
        "tags": ["Rails"],
        "url": "/2010/11/15/15002035/",
        "teaser": null
      },{
        "title": "Ｐａｓｓｅｎｇｅｒを３．０．０にアップデート！",
        "excerpt":"「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」で構築されたＷｅｂアプリケーションを運用するためのＡｐａｃｈｅモジュール「Ｐａｓｓｅｎｇｅｒ」（Ｇｅｍパッケージ）に「２．２．１５」を使用していたが「３．０．０」がリリースされているのでアップデートする。 作業記録 ※「Ｐａｓｓｅｎｇｅｒ」はＧｅｍパッケージなので、コンソールで”gem update passenger”としてみたが、古いバージョンを残したまま新バージョンがインストールされるので、一旦古いバージョンをアンインストールして新バージョンをインストールした。 １．旧バージョンの「Ｐａｓｓｅｎｇｅｒ」をアンインストール [root@hoge ~]# gem uninstall passenger ２．新バージョンの「Ｐａｓｓｅｎｇｅｒ」をインストール [root@hoge ~]# gem install passenger ３．「Ｐａｓｓｅｎｇｅｒ」のインストール確認 [root@hoge ~]# gem list *** LOCAL GEMS *** ・・・途中省略・・・ passenger (3.0.0) ・・・途中省略・・・ ４．「Ｐａｓｓｅｎｇｅｒ」Ａｐａｃｈｅモジュールのインストール [root@hoge ~]# passenger-install-apache2-module ※仮に何かが無いためにインストールに失敗する場合は、メッセージをよく見てみるとインストール方法が表示されているので、そのとおりにすればよい。 ５．「Ｐａｓｓｅｎｇｅｒ」の設定 「Ｐａｓｓｅｎｇｅｒ」Ａｐａｃｈｅモジュールのインストールに成功すると、表示されているメッセージの途中に ・・・　途中省略　・・・ The Apache 2 module was successfully installed. Please edit your...","categories": ["Webサイト"],
        "tags": ["Apache","Rails","Ruby"],
        "url": "/2010/11/20/20002028/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ － smartctl でハードディスク温度取得！",
        "excerpt":"当方の稼動中のサーバの監視ツールとして「ＭＲＴＧ」を使用しているのですが、今までそこでハードディスクの温度を「ｈｄｄｔｅｍｐ」を利用してハードディスクの温度を取得していました。 しかし、最近「ｈｄｄｔｅｍｐ」でハードディスクの温度を取得するのが一般的でないという事に気づきました。 普通は「ｓｍａｒｔｃｔｌ」を使用するようです。 「ｓｍａｒｔｃｔｌ」は標準で備わってて「ｈｄｄｔｅｍｐ」は別途インストールが必要なので、「ｓｍａｒｔｃｔｌ」を使用するのも当然か・・・ ということで、「ｓｍａｒｔｃｔｌ」についてのメモです。 ハードディスクのS.M.A.R.T.サポート状況を表示する [root@hoge ~]# smartctl -i /dev/sda smartctl version 5.38 [i686-redhat-linux-gnu] Copyright (C) 2002-8 Bruce Allen Home page is http://smartmontools.sourceforge.net/ === START OF INFORMATION SECTION === Model Family: Maxtor DiamondMax 10 family (SATA/300) Device Model: Maxtor 6V250F0 Serial Number: V501XATG Firmware Version: VA111630 User Capacity: 251,000,193,024...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/11/25/25002009/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ － サーバ監視ツール「ｍｕｎｉｎ」導入！",
        "excerpt":"当方のサーバでは今まで「ＭＲＴＧ」を使用して監視を行っていましたが、導入が簡単でデフォルトで様々な情報に対応している「ｍｕｎｉｎ」を導入してみました。 ※「ｍｕｍｉｎ」（ムーミン）ではなく「ｍｕｎｉｎ」（ムーニン）です。 「ｍｕｎｉｎ」とは？ 「ｍｕｎｉｎ」（ムーニン）は、オープンソースで公開されているサーバー監視、グラフ化ツールです。 「ＭＲＴＧ」・「ｃａｃｔｉ」 などと同様のツールですが、これらよりも導入・利用が簡単です。 主な特徴 比較的導入が簡単 設定が非常に簡単 グラフの種類が豊富 プラグインによる取得データの拡張が出来る ベースは「 ＲＲＤＴｏｏｌ 」 ( ＭＲＴＧの後継 ) グラフ化部（マスタ）とデータ取得部（ノード）が違うプログラムになっている マスタ（ｍｕｎｉｎ）とノード（ｍｕｎｉｎ−ｎｏｄｅ）の役割 マスタ： 監視する側（ データ収集 ＋ グラフ化 ） ノード： 監視される側（ マスターへのデータ提供 ） 以下が導入記録です。 導入記録 １．yumリポジトリの追加 「ｍｕｎｉｎ」を「yum」でインストールするのですが、「CentOS-Base.repo」では「ｍｕｎｉｎ」のパッケージが見つけられないので「dag.repo」を使用します。 [root@hoge ~]# vi /etc/yum.repos.d/dag.repo [dag] name=Dag RPM Repository for Red Hat Enterprise Linux baseurl=http://apt.sw.be/redhat/el5/en/i386/dag/ gpgcheck=1 enabled=0 ２．ＰＧＰ...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/11/30/30002046/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ － 「ｍｕｎｉｎ」でＣＰＵ温度監視！",
        "excerpt":"前回、サーバー監視ツール「ｍｕｎｉｎ」を導入し、ハードディスク温度の監視も追加しました。 ※参照 → ＣｅｎｔＯＳ − サーバ監視ツール「ｍｕｎｉｎ」導入！ 導入記録 【前提条件】 ●マザーボートモニタツール「ｌｍ＿ｓｅｎｓｏｒｓ」導入済み。 ※導入方法はこちらを参照 → ＭＲＴＧでＣＰＵ温度監視！ １．「ｌｍ＿ｓｅｎｓｏｒｓ」確認 「ｌｍ＿ｓｅｎｓｏｒｓ」が動作しているか確認する。 [root@hoge ~]# sensors smsc47m192-i2c-0-2d Adapter: SMBus I801 adapter at 2000 +2.5V: +2.51 V (min = +0.00 V, max = +3.32 V) VCore: +1.15 V (min = +0.00 V, max = +2.99 V) +3.3V: +3.35 V (min...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/12/03/03002058/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ － 「ｍｕｎｉｎ」フォント設定！",
        "excerpt":"サーバー監視ツール「ｍｕｎｉｎ」を導入したのはいいのだが、グラフの下部に表示される文字が等幅フォントでないらしく、不揃いで見た目があまりよくない。     　↓こんな感じ↓      対処法をググって見たら、１つだけヒット！   対処方法   １．設定ファイル修正   [root@hoge ~]# vi /usr/share/munin/munin-graph '--font' ,'LEGEND:7:/usr/share/munin/VeraMono.ttf', 　↓↓↓　変更　↓↓↓ '--font-render-mode','light', '--font' ,'LEGEND:7:Monospace'    ２．「ｍｕｎｉｎ−ｎｏｄｅ」再起動   [root@hoge ~]# service munin-node restart Stopping Munin Node agents:                                [  OK  ] Starting Munin Node:                                       [  OK  ]    ３．確認   ５分後にブラウザで「 http://＜サーバ名＞/munin/ 」にアクセスして確認してみる。 横位置が揃いました。        以上です。   ","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2010/12/06/06002039/",
        "teaser": null
      },{
        "title": "Ｌｉｎｕｘ － ベンチマークテスト（ＳｕｐｅｒＰＩ編）！",
        "excerpt":"ＣＵＩベースのＬｉｎｕｘで簡単なベンチマークテストを実行する方法です。 今回はよくある円周率を計算させて結果が出るまでの時間を計測する「ＳｕｐｅｒＰＩ」というものを使用します。 詳細はこちら → 東京大学金田研究室 作業記録 １．アーカイブファイルダウンロード [root@hoge ~]# cd /home/hogehoge/work [root@hoge work]# wget ftp://pi.super-computing.org/Linux_jp/super_pi-jp.tar.gz ２．アーカイブファイル解凍 [root@hoge work]# tar zxvf super_pi-jp.tar.gz pi super_pi Readme_jp.txt ３．テスト実行 今回は２の２０乗（＝1,048,576桁）計算させてみます。 [root@hoge work]# ./super_pi Version 2.0 of the super_pi for Linux OS Fortran source program was translated into C program with version 19981204 of f2c,...","categories": ["サーバ構築"],
        "tags": ["Linux","円周率"],
        "url": "/2010/12/10/10002036/",
        "teaser": null
      },{
        "title": "Ｌｉｎｕｘ － ベンチマークテスト（姫野ベンチマーク編）！",
        "excerpt":"昨日に引き続き、今日もＣＵＩベースのＬｉｎｕｘで簡単なベンチマークテストを実行する方法です。 今回は理研・情報基盤センター・センター長の姫野龍太郎氏が考案した「姫野ベンチマーク」というものを使用します。 詳細はこちら → 姫野ベンチマーク 作業記録 １．アーカイブファイルダウンロード いろいろ種類がありますが、今回は（C, static allocate version）のＭサイズを使用してみます。 [root@noah ~]# cd /home/hogehoge/work [root@noah work]# wget http://accc.riken.jp/assets/files/himenob_loadmodule/cc_himenoBMTxp_m.lzh ２．アーカイブファイル解凍 [root@noah work]# lha e cc_himenoBMTxp_m.lzh [root@noah work]# mv himenobmtxps.c himenoBMTxps.c [root@noah work]# make gcc -c -O3 -DMIDDLE himenoBMTxps.c gcc -o bmt himenoBMTxps.o -O3 -DMIDDLE ３．テスト実行 [root@noah work]# ./bmt mimax =...","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2010/12/11/11002013/",
        "teaser": null
      },{
        "title": "ＦｒｅｅＢＳＤサーバ試行中！",
        "excerpt":"当方のサーバは現在「ＣｅｎｔＯＳ」で運用中なのですが、最近ＢＳＤ系ＯＳが気になり「ＦｒｅｅＢＳＤ」をＶＭｗａｒｅにインストールしていろいろ試しています。     「ＦｒｅｅＢＳＤ」とは簡単に言うと、      ＵＮＩＸ系のＯＳのＢＳＤの子孫でオープンソース。   安定性に優れている。   パフォーマンス面・セキュリティ面に優れている。   高負荷に強い。   初心者にはとっつき難い部分もありますが、Ｌｉｎｕｘと同様じＵＮＩＸ系ということでコマンドもほとんど同じなのでＬｉｎｕｘ系ユーザには若干入りやすいです。   今回はとりあえずＶＭｗａｒｅに「ＦｒｅｅＢＳＤ８．１」をインストール・サーバ構築してみました。 ※構築方法はこちらのとおり → FreeBSDサーバー構築マニュアル   あとは、いろいろと肉付け（Ｒｕｂｙ on Ｒａｉｌｓ、ＷｏｒｄＰｒｅｓｓ等）し、納得できるまでになれば物理マシンでサーバ構築をしてみます。 ※最終的には「ＣｅｎｔＯＳ」に代わって本運用させるかもしれません。   以上です。   ","categories": ["サーバ構築"],
        "tags": ["FreeBSD"],
        "url": "/2010/12/15/15002004/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － 投稿リビジョンを削除するプラグイン！",
        "excerpt":"ＷｏｒｄＰｒｅｓｓで記事を作成すると自動で下書きが保存され、場合によっては過去のリビジョンが大量に溜まってしまいます。 それだけデータベースも圧迫されます。   そこで投稿リビジョンを一括で削除できるプラグイン「Ｄｅｌｅｔｅ−Ｒｅｖｉｓｉｏｎ」を使用します。   作業手順   アーカイブダウンロード   こちら「Ｄｅｌｅｔｅ−Ｒｅｖｉｓｉｏｎ」からアーカイブファイルをダウンロード・解凍し、サーバのプラグインフォルダに転送する。   プラグイン有効化   ＷｏｒｄＰｒｅｓｓの管理画面−「プラグイン」で「Delete-Revision」を有効化する。   投稿リビジョン削除   ＷｏｒｄＰｒｅｓｓの管理画面−「設定」−「Delete-Revision」を実行。 ・「Check Redundant Revision」をクリック。      ・投稿リビジョン一覧が表示されるので、最下部の「Yes, I would like to delete them!」をクリック。      ・削除完了        作業以上です。   あとは、定期的（投稿リビジョンが溜まったら）に実行させてやればＯＫ！   ではまた。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/12/20/20002024/",
        "teaser": null
      },{
        "title": "ＷｏｒｄＰｒｅｓｓ － データ移行メモ！",
        "excerpt":"サーバマシン移行時のＷｏｒｄＰｒｅｓｓのデータ移行について、個人的なメモです。     移行元・移行先が同じ環境の場合   （ＯＳ・ＭｙＳＱＬが同じバージョン、（ＷｏｒｄＰｒｅｓｓは必ずしも同じバージョンでなくてもＯＫ？）） 基本的にまったく同じものが移行先にできればよい。 （通常、wp-optionテーブル以外をコピーして再設定するが、環境が同じなのでwp-optionも含めて全テーブルコピー）      移行元のデータベースを丸ごとダンプ （当方は、ＷｏｒｄＰｒｅｓｓのプラグインＤＢ−Ｍａｎａｇｅｒを使用）   移行先にデータベースを丸ごとインポート （当方は、サーバでmysqlコマンドで上記のダンプを取り込み）   移行先のＵＲＬ等を移行元と異なるものにする場合は、wp-optionテーブルを直接修正 （当方は、ｐｈｐMyAdminを使用）   移行元・移行先が異なる環境の場合   （ＯＳが異なったり、ＭｙＳＱＬのバージョンが異なったりする場合） wp-optionテーブル以外をコピーして再設定する方法では細かな不具合が発生するので、移行先で設定し直しデータのみインポートする。      移行元の管理画面でデータをＸＭＬエクスポート。   移行先で各種設定を行う。 （プラグインのインストール等も一から行う。アップロードデータも移行元から移行先へコピーしておく）   プラグイン「ＷｏｒｄＰｒｅｓｓ Ｉｍｐｏｒｔｅｒ」を使用して、ＸＭＬデータをインポート。   以上です。   ","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2010/12/25/25002040/",
        "teaser": null
      },{
        "title": "Ｗｉｎｄｏｗｓ － ファイルの完全削除！",
        "excerpt":"今日はＷｉｎｄｏｗｓでファイルを完全に削除する方法についてです。   通常、ファイルを削除するにはＤｅｌｅｔｅキー等でごみ箱移動し、さらにごみ箱からも削除する、という方法をとると思います。   しかし、ご存知のように実際には物理的にはファイルは完全には削除されておらず、復元ソフトを使用すれば復元できてしまいます。（復元ソフトにもよると思いますが、削除後時間が経過しすぎると復元できないこともあります）     そこで、ファイルを完全に削除するフリーソフト等を使用しますが、Ｗｉｎｄｏｗｓの場合、そのようなソフトを使用しなくても、ファイルを完全に削除できます。   コマンドプロンプトを立ち上げて、「 CIPHER 」コマンドを使用するのです。削除領域に別の無意味なデータが上書きされるのです。   例えば、Ｃドライブの削除ファイルを完全に削除するには次のようにします。   CIPHER /W:C:    もちろん、削除ファイルのみ完全削除されるので、削除ファイル以外のファイルが削除されることはありません。   「 CIPHER 」コマンドの詳細は以下でご確認ください。   CIPHER /?    このコマンドは通常、個人使用のパソコンではあまりメリットは感じられませんが、パソコンをＯＳの入ったまま他人に譲渡する場合などには有効かもしれません。   ※大容量のパーティションだと数時間（半日以上）かかるかもしれませんので、要注意！   以上。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2010/12/31/31002056/",
        "teaser": null
      },{
        "title": "ＦｒｅｅＢＳＤ － デスクトップ環境構築 ｏｎ ＶＭｗａｒｅＰｌａｙｅｒ！",
        "excerpt":"最近、ＦｒｅｅＢＳＤに興味があって少しずつ勉強しているところであります。   少し前にはＶＭｗａｒｅＰｌａｙｅｒにＦｒｅｅＢＳＤサーバを構築してみましたが、今回はデスクトップ環境の構築に挑戦してみました。     ＦｒｅｅＢＳＤでデスクトップ環境と言えば、主に「ＸＦＣＥ」、「ＫＤＥ」、「ＧＮＯＭＥ」がありますが、「ＫＤＥ」は重そうなので今回は「ＸＦＣＥ４」と「ＧＮＯＭＥ２」の構築に挑戦してみました。（構築先は「ＶＭｗａｒｅＰｌａｙｅｒ３」、ＦｒｅｅＢＳＤのバージョンは「８．１ＲＥＬＥＡＳＥ」です）   主に参考にしたサイト      FreeBSDで遊ぼう - [SILVER SACKの自画自賛]   VMware上のFreeBSD 8.1でVMware Toolsを使えるようにする   「ＸＦＣＥ４」、「ＧＮＯＭＥ２」ともにインストールはできたように思えます。（細かいところは使ってみないとわかりませんが・・・）   ＶＭｗａｒｅＴｏｏｌｓもインストールできました。（画面の解像度の変更、マウスのゲストＯＳ・ホストＯＳのシームレスな移動も可能になりました） ※ＶＭｗａｒｅＴｏｏｌｓをインストールせずに画面の解像度を変更すると、画面が砂嵐になって私のような「ＦｒｅｅＢＳＤ素人」にはどうにもなりませんので注意。   以下はスクリーンショット（多少デザインを変更しています）   ・ＸＦＣＥ４      ・ＧＮＯＭＥ２      以上です。   ","categories": ["PC_Tips"],
        "tags": ["FreeBSD"],
        "url": "/2011/01/05/05002029/",
        "teaser": null
      },{
        "title": "現在のＰＣ環境について！",
        "excerpt":"このブログを公開し始めた当初に当方のＰＣ環境について触れましたが、あれから約２年が経過し若干変化があったのであらためた整理してみました。（但し、当方はマシンをあれこれと弄るのがすきなので、また変更になると思います） パソコン接続図 主な機器の接続図です。 マシン・その他 ここでは主なものだけをご紹介。 サーバ ケース ： Antec NOAH800-B マザーボード ： Intel D945GCLF ＣＰＵ ： Intel(R) Atom(TM) CPU 230 1.60GHz (オンボード) チップセット ： Intel 945GC メモリ ： DDR2-667 (PC2-5300) 1GB ＨＤＤ ： 日立GST HTS723232L9A360 (2.5inch STATII300, 320GB, 7200rpm) ビデオカード ： Intel GMA950 (オンボード) 光学ドライブ ： 無し ネットワーク ： Realtek...","categories": ["自作PC"],
        "tags": [],
        "url": "/2011/01/15/15002000/",
        "teaser": null
      },{
        "title": "数字選択式宝くじ当選データ！",
        "excerpt":"当方のサイトでは「数字選択式宝くじ」（ナンバーズ３・４、ミニロト、ロト６）の当選情報を公開しています。 ＝＝＝＞ mk-mode SITE   当方自宅で運用しているＣｅｎｔＯＳサーバでみずほ銀行の宝くじコーナーから「Ｒｕｂｙ」を駆使して毎日自動で取得しています。   しかし、今週月曜日からうまく取得できていないようなので調べてみると、みずほさんのサイトのデザイン（レイアウト）が変更されているではありませんか！？   というわけで、急遽コード修正作業をしました。   今のところ、問題なく動作するようになりましたが、サイトデザイン（レイアウト）が変更されて間もないので、当分要チェックです。   今日は以上です。   ","categories": ["ロト６"],
        "tags": ["Rails","Ruby"],
        "url": "/2011/01/19/19002052/",
        "teaser": null
      },{
        "title": "MySQL － クラッシュしたテーブルの修復！",
        "excerpt":"今日自分のブログ（ＣｅｎｔＯＳ＋ＭｙＳＱＬ＋ＷｏｒｄＰｒｅｓｓ）を見ていたら、アクセスカウンターがおかしい（ゼロになっている）ことに気づきました。   いろいろログを見てみると、 「 /var/log/mysqld.log 」に以下のような記述がありました。     110124 10:10:24 [ERROR] /usr/libexec/mysqld: Table './wordpress/table_hoge'   is marked as crashed and last (automatic?) repair failed    どうやらテーブルtable_hoge（仮名）がクラッシュしているようです。 ログの履歴からすると思い当たる節が、、、 そういえば、ＵＳＢメモリをサーバにマウント・アンマウントしたときに動作がおかしくてマシンを電源ボタンで強制リブートしたので、おそらくそれが原因でしょう。   ｐｈｐMyAdminで確認してみると、対象のテーブルのみ使用中となっています。      このテーブルをチェックして「テーブルを修復する」を選択します。      これで修復完了のようです。      無事にアクセスカウンタが表示されるようになりました。   ※通常、ＭｙＳＱＬテーブルのチェック、修復、最適化、そして分析を行うには「 mysqlcheck 」コマンドを使用するようです。上記の方法でよかったのか否か。。。   今日は以上です。   ","categories": ["サーバ構築","ブログ"],
        "tags": ["MySQL","WordPress"],
        "url": "/2011/01/25/25002005/",
        "teaser": null
      },{
        "title": "Ｒｕｂｙ １．９．２－ｐ１３６ にアップデート！",
        "excerpt":"当方のホームページは「ＣｅｎｔＯＳ ＋ Ａｐａｃｈｅ２ ＋ Ｒｕｂｙ１．９．２ｐ０ ＋ Ｒａｉｌｓ ３．０．３」で運用しているのですが、「Ｒｕｂｙ」の修正版が出ているのではないかと思って、「Ｒｕｂｙ」の公式サイトを覗いてみるとやっぱり修正版がリリースされていました。   早速、「 Ruby_1.9.2-p136 」をソースからインストールしました。（「 Ruby_1.9.2-p0 」は残したまま）   インストール方法は過去記事参照 → 「 Ｒｕｂｙ ｏｎ Ｒａｉｌｓ インストール − ＣｅｎｔＯＳ 」   既存のソースで不具合がないか、当分の間は要チェックです。   今日はそれだけです。   ","categories": ["サーバ構築","Webサイト"],
        "tags": ["Apache","CentOS","Rails","Ruby"],
        "url": "/2011/01/28/28002023/",
        "teaser": null
      },{
        "title": "phpMyAdmin － タイムアウト時間の変更！",
        "excerpt":"最近、Ｗｉｎｄｏｗｓマシンでもデータベースに「 ＳＱＬＳｅｒｖｅｒ 」ではなく「 ＭｙＳＱＬ 」を使用することが多くなったため、ＧＵＩツールの「 ｐｈｐＭｙＡｄｍｉｎ 」をよく使用します。 しかし、コーディングを３０分くらいして、ＤＢの内容を「 ｐｈｐＭｙＡｄｍｉｎ 」で確認しようとすると、セッションが切れてて再ログインしなければなりません。（初期設定で、１８００秒とか１４４０秒とかになっている） 頻繁に「 ｐｈｐＭｙＡｄｍｉｎ 」で操作している間はよいのですが、別の作業に集中したりするすぐに制限時間を過ぎてしまい若干不便です。 以下の方法でセッションタイムアウト時間を変更できるようなのでメモしておきます。 「 ｐｈｐＭｙＡｄｍｉｎ 」がインストールしてあるフォルダ内のファイル「 config.inc.php 」の最後のほうあたりに次の１行を追加してＷｅｂサーバをリロード（再起動）するだけです。 （ファイル「 config.inc.php 」が存在しない場合は、「 config.sample.inc.php 」をコピーして「 config.inc.php 」を作成する） // 43,200秒(12時間)に設定。 // 60 * 60 * 12 という記述でもＯＫ！ ini_set(\"session.gc_maxlifetime\", 43200); $cfg['LoginCookieValidity'] = 43200; ちなみに、色々試してみた結果、Ｌｉｎｕｘでは「 ini_set ～ 」の行はなくても良かったのですが、Ｗｉｎｄｏｗｓではこの行がないとログイン後以下のエラメッセージが表示されます。 Your PHP parameter session.gc_maxlifetime is lower...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Linux","MySQL","PHP","Windows"],
        "url": "/2011/02/05/05002056/",
        "teaser": null
      },{
        "title": "phpMyAdmin － リンクテーブルを処理するための追加機能が無効になっています。。。",
        "excerpt":"今回も前回に引き続き、「 ｐｈｐＭｙＡｄｍｉｎ 」についてです。 「 ｐｈｐＭｙＡｄｍｉｎ 」にログインした際にページの下部の方に以下のような警告が表示されることがあると思います。 リンクテーブルを処理するための追加機能が無効になっています。 理由についてはこちらをご覧ください これは、追加機能についての警告なので無視してもＯＫなのですが、以下のようにして対応可能です。 作業記録 それほど問題にならない警告なので、発生する警告メッセージを表示させない設定で対応することも可能のようですが、それでは若干気持ち悪いので以下のように対応。 １．リンクテーブル作成 「 ｐｈｐＭｙＡｄｍｉｎ 」に「 root 」でログインして、「 インポート 」タグで「 /（phpmyadminインストールフォルダ）/scripts/create_tables.sql 」を指定して実行する。 ※もしくは「 ＳＱＬ 」タグで「 /（phpmyadminインストールフォルダ）/scripts/create_tables.sql 」の内容をコピペして実行する。 ※もしくはコンソール（Ｗｉｎｄｏｗｓならコマンドプロンプト）で「 mysql -u root -p &lt; /（phpmyadminインストールフォルダ）/scripts/create_tables.sql 」を実行する。 ２．「 config.inc.php 」の編集 「 config.inc.php 」ファイルを以下のように変更する。 /* User for advanced features */　// 全てコメント化解除 $cfg['Servers'][$i]['controluser'] = 'root';...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Linux","MySQL","PHP","Windows"],
        "url": "/2011/02/08/08002035/",
        "teaser": null
      },{
        "title": "Windows － バッチファイルでのウェイト処理！",
        "excerpt":"今日はＷｉｎｄｏｗｓのバッチ処理（バッチファイルの実行）で一定時間ウェイト（待機）させる方法についてです。 例えば、ある処理をバッチファイルで順次実行させる際、「１つ前に起動をかけた処理が完全に起動してから次の処理を実行させたい」というようなケース。（起動をかけてから完全に起動するおおよその時間が把握できる場合のみですが） 調査の結果、以下の２つの方法で実現可能のようです。 「 ping 」コマンドのタイムアウトを使用する方法 「 WSH 」（Windows Script Host）を使用する方法 ２の方法はバッチファイル以外にウェイト処理を行うコーディングを記述したWSHファイルを別途用意する必要があります。 今回は１の方法を試してみました。 実行方法 ※今回試行した環境は「 ＷｉｎｄｏｗｓＸＰ（ＳＰ３） 」です。 実際にはバッチファイル内のウェイト処理を行いたい位置に以下のような記述をするだけです。（約５秒間ウェイトする例） ping 0.0.0.1 -w 5000 -n 1 これは、 「 0.0.0.1 」は存在しないＩＰアドレスを指定する。 （ただし、「 0.0.0.0 」だと「 Destination specified is invalid. 」と即エラーが返ってくるので注意！） 「 -w 5000 」はタイムアウトするミリ秒を指定する。 「 -n 1 」はpingする回数を指定する。 という意味で「 ５０００ミリ秒 × １回 ＝ ５秒...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2011/02/15/15002050/",
        "teaser": null
      },{
        "title": "MySQL － 「Can’t connect to MySQL server on ‘localhost’ (10048)」エラー！",
        "excerpt":"最近、ＷｉｎｄｏｗｓＸＰマシンで「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」＋「ＭｙＳＱＬ」のアプリを作成していると以下のようなエラーが発生するようになりました。 Can’t connect to MySQL server on 'localhost' (10048) 調べてみると、どうやらＷｉｎｄｏｗｓだけの問題らしいです。（Ｌｉｎｕｘ等では問題ないようです） 今後のために記録として残しておきます。 原因 ＷｉｎｄｏｗｓＸＰやＷｉｎｄｏｗｓ２００３ＳｅｒｖｅｒなどのＷｉｎｄｏｗｓＯＳでは、一時的な接続のために使用可能な通信ポートとして、1025番から5000番までを使用する設定になっている。 このため、セッション数が増大すると使用可能なポートが不足し、ＯＳ側で新しい接続を受け付けられなくなることがある。 ※具体的には、ＷｉｎｄｏｗｓＯＳからＭｙＳＱＬサーバに毎秒２０回程度以上接続・切断を繰り返すと数千回くらいで接続エラーになる。ということ。 解決策 私が調べた結果、以下の２通りの解決方法があるようです。 解決方法１ ＭｙＳＱＬサーバへの接続回数が毎秒２０回程度以下になるようにプログラムを書き換える。 ※具体的には、ループしながら何千回とＭｙＳＱＬサーバへアクセスさせるのではなく、なるべくまとめてアクセスするようにする。 解決方法２ Ｗｉｎｄｏｗｓのレジストリ設定を変更する。 ※レジストリ操作は危険が伴います。必ず作業前にバックアップを取り、各自の責任で作業すること。 レジストリを編集することによる如何なる問題に対しても当方は保証をいたしかねます。 ※また、当方は前述の「解決方法１」で対応できたため、実際にはこの「解決方法２」は試していません。 レジストリエディタで次の２ヵ所のレジストリを変更します。（値が存在しない場合には追加する） １．「 MaxUserPort 」 「HKEY_LOCAL_MACHINE」-「SYSTEM」-「CurrentControlSet」-「Services」-「Tcpip」-「Parameters」 とたどっていき、「 MaxUserPort 」の値を変更する。（ＭＡＸは「65534」） ※「 MaxUserPort 」は、使用可能な最大ポート番号。（デフォルトは「5000」） ２．「 TcpTimedWaitDelay 」 「HKEY_LOCAL_MACHINE」-「SYSTEM」-「CurrentControlSet」-「Services」-「Tcpip」-「Parameters」 とたどっていき、「 TcpTimedWaitDelay 」の値を変更する。 ※「 TcpTimedWaitDelay 」は、「TIME_WAIT」ステータスの継続時間。（デフォルトは「240（秒）」） 最適な値は環境により異なるため、徐々に数値を減らし適切な値に調整する。（推奨は「60（秒）」） 【参考】...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["MySQL","Windows"],
        "url": "/2011/02/19/19002009/",
        "teaser": null
      },{
        "title": "MySQL － オーバーヘッドの削除！",
        "excerpt":"また、ＭｙＳＱＬの話です。   「ｐｈｐＭｙＡｄｍｉｎ」でＭｙＳＱＬのＤＢを眺めていたら、あるテーブルだけ「オーバーヘッド」の欄に数字が表示されていて気になったので調べてみました。        「オーバーヘッド」とは、レコードの挿入・更新・削除を繰り返しているうちに作成される未使用領域（ゴミのようなもの）だそうです。   対処方法は、最適化すればよいようです。   以下がその手順です。   対処方法   「ｐｈｐＭｙＡｄｍｉｎ」での作業です。   １．最適化   最適化したいテーブルにチェックを入れ、ドロップダウンリストから「テーブルを最適化する」を選択して実行。      ２．完了   最適化作業が正常終了する。      ３．確認   オーバーヘッドが削除されています。        これだけです。   もちろん、コンソールでＭｙＳＱＬの該当のＤＢにログインして以下のコマンドを実行しても同じ結果が得られます。   OPTIMIZE TABLE ＜最適化したいテーブル＞    以上です。   ","categories": ["PC_Tips","サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2011/02/23/23002046/",
        "teaser": null
      },{
        "title": "FreeBSD - 8.2 Release!",
        "excerpt":"およそ１ヶ月前がリリース予定だった「ＦｒｅｅＢＳＤ ８．２Ｒｅｌｅａｓｅ」がやっとリリースされたようです。   少し前だったら「待ってました！」とばかりに「ＦｒｅｅＢＳＤ」でのサーバ構築・デスクトップ環境構築作業にとりかかるのですが、今は、私用で「Ｒｕｂｙ ｏｎ Ｒａｉｌｓ」のアプリ開発作業に没頭しているので、「ＦｒｅｅＢＳＤ」は手を付けられません。   少し時間に余裕ができてからの作業になりそうです。 ※どっちみち、「ＦｒｅｅＢＳＤ」については疎いのでしばらくしてネット上に色々情報が出てからのほうがいいし。。。   ちなみに、本家のサイト「The FreeBSD Project」ではＤＶＤ版ＩＳＯファイルはｘｚ圧縮されているので、Ｗｉｎｄｏｗｓなどで解凍するにはｘｚファイル対応の解凍ソフトが必要になります。（当方は「Ｌｈａｚ」を使用）   今日は以上です。   ","categories": ["サーバ構築"],
        "tags": ["FreeBSD"],
        "url": "/2011/02/28/28002007/",
        "teaser": null
      },{
        "title": "Ｒｕｂｙ － 「ｐｉｋ」で複数バージョン共存！",
        "excerpt":"今回は、Ｗｉｎｄｏｗｓで複数のバージョンのＲｕｂｙを共存させる「ｐｉｋ」というツールを導入してみました。 （ちなみに、Ｌｉｎｕｘなら「ｒｖｍ」というツールを使用するらしい） 現在、当方はＷｉｎｄｏｗｓＸＰでは「Ｒｕｂｙ１．９．２（ｍｓｗｉｎ３２）」を主に使用しながら、時々「１．９．１」や「１．８．７」を使用しています。（環境変数は固定でインストールフォルダ名を変更して対応） それほど面倒な作業ではないのですが、「ｐｉｋ」というツールを使えば便利であることを知り早速導入してみました。 以下が導入記録です。 導入記録 【前提条件】 ＯＳはＷｉｎｄｏｗｓＸＰ（ＳＰ３） 「Ｒｕｂｙ１．９．２（ｍｓｗｉｎ３２）」を「C:\\Ruby192」にインストール済み。 「Ｒｕｂｙ１．９．１（ｍｓｗｉｎ３２）」を「C:\\Ruby191」にインストール済み。 「Ｒｕｂｙ１．８．７（ｍｓｗｉｎ３２）」を「C:\\Ruby187」にインストール済み。 「ｇｅｍ」で「ｐｉｋ」インストール 「ｐｉｋ」は既存のＲｕｂｙ環境に「ｇｅｍ」でインストールします。 （アーカイブをダウンロードしてインストールする方法もあるようです） コマンドプロンプトで以下のようにする。 ↓念のため、現在のＲｕｂｙバージョンを確認しただけ ＞ruby -v ruby 1.9.2p136 (2010-12-25) [i386-mingw32] ↓「ｇｅｍ」でＲｕｂｙに「ｐｉｋ」をインストール ＞gem install pik ・・・（途中省略）・・・ Successfully installed pik-0.2.8 1 gem installed Installing ri documentation for pik-0.2.8... Installing RDoc documentation for pik-0.2.8... Ｗｉｎｄｏｗｓに「ｐｉｋ」インストール ↓「ｐｉｋ」用ディレクトリを作成 ＞mkdir \"C:\\Program Files\\pik\" ↓Ｗｉｎｄｏｗｓに「ｐｉｋ」をインストール ＞pik_install...","categories": ["PC_Tips"],
        "tags": ["Ruby","Windows"],
        "url": "/2011/03/05/05002009/",
        "teaser": null
      },{
        "title": "ブラウン博士の１４のマスターワード！",
        "excerpt":"今日はめずらしくＰＣ・ＩＴ関連以外のお話です。   当方、社会人になってかなりの月日が経つのですが、勉強するという心を常に持っていなければならないと思っているところであります。     そこで、ＮＨＫ教育テレビもよく視聴しているのですが、高校生（大学受験生）向けの番組に「テストの花道」という所ジョージさん・ＴＯＫＩＯ城島さんがメインＭＣの番組があり、高校生以外の人でも非常に役に立つ勉強法などが紹介されています。   その中で以前、英単語の記憶法で「ブラウン博士の１４単語」とかいうものが紹介されていました。   ご存知の方もおられると思いますが、当方は初めて知ったことで感動すらしました。   最低限の１４個ほどの英単語の語源さえ知っていれば、それらから何万語の英単語が推測できるというものです。   当方は高校卒業後２０年近く経っているのですが、この記憶法を高校生時代に知っていれば今頃は違う人生を歩んでいたかも知れない、というくらい当方にとっては衝撃的な情報でした。   そこで、遅まきながら自分用に表を作成しＰＣの壁紙にしたりしています。   ＰＤＦにしていますのでよかったらご自由にお使いください。   →　→　こちら ←　←   以上。   ","categories": ["その他"],
        "tags": [],
        "url": "/2011/03/10/10002027/",
        "teaser": null
      },{
        "title": "バッチファイルで１０個以上の引数を扱う！",
        "excerpt":"今日はＷｉｎｄｏｗｓでバッチファイルを使用する際、通常引数は９個（%1～%9）までしか指定できません。（ちなみに%0は実行ファイルそのもの）   １０個以上引数を使用するということはそれなりにロジックが煩雑化することにもなりかねないため、引数を簡略化することも考えなくてはなりません。   しかし、どうしても１０個以上の引数を使用したい場合は「SHIFT」コマンドを使用し引数を１個ずつ取得していく方法をとります。     以下がそのサンプルです。   サンプル（TEST_SHIFT.bat）   :LOOP_START @IF \"%1\"==\"\" GOTO :LOOP_END @SET ARG_STRING=%ARG_STRING% %1 @SHIFT @GOTO :LOOP_START :LOOP_END  @ECHO %ARG_STRING%    使用例   D:\\hoge&gt;TEST_SHIFT 1 2 3 4 5 6 7 8 9 10 11  1 2 3 4 5 6 7 8 9 10 11    今日は以上です。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2011/03/15/15002028/",
        "teaser": null
      },{
        "title": "Windows － Ruby/TK を使用する！",
        "excerpt":"Ｒｕｂｙ（ｏｎＷｉｎｄｏｗｓ）でＧＵＩプログラミングをしたくなり、ＲｕｂｙのＧＵＩライブラリの中でも定番でかつＬｉｎｕｘにもＭａｃＯＳにも対応している「Ｒｕｂｙ/Ｔｋ」というものを導入してみようと考えました。   今回「Ｒｕｂｙ/Ｔｋ」を導入しようとしているＲｕｂｙ（ｏｎＷｉｎｄｏｗｓ）は１．９．２でＯｎｅ−Ｃｌｉｃｋ−Ｒｕｂｙ−Ｉｎｓｔａｌｌｅｒでインストールしています。   ネット上で導入方法を調べてみると、ＡｃｔｉｖｅＴｃｌのサイトからフリーの「ＡｃｔｉｖｅＴｃｌ」をダウンロードしてインストールする方法が主に紹介されていますが、最近のＲｕｂｙ（１．９～？）ではこの方法ではインストールはできてもうまく動作しません。   さらに調べてみると、「ＡｃｔｉｖｅＴｃｌ」はインストールせず、「Ruby/Tk - Ruby/Tk-Kit」から[ rubytk-simple-w-img_ext-20100523-for-RubyInstaller191.zip ]をダウンロードし、Ｒｕｂｙインストールフォルダ配下の「lib/ruby/1.9.1」 の下に展開すればよいとのこと。   一発で動きました。   こんな感じ。   #! ruby -Ks require 'tk'  TkRoot.new{|a|   a.title(\"Hello, World! TK\")   a.geometry(\"260x60+0+0\")   TkLabel.new(a) {     text \"RubyTK テスト\"     pack   } }  Tk.mainloop      以上、忘れた時のためのメモでした。   ","categories": ["PC_Tips"],
        "tags": ["Ruby"],
        "url": "/2011/03/20/20002005/",
        "teaser": null
      },{
        "title": "Ｗｉｎｄｏｗｓ － エクスプローラの表示位置を固定！",
        "excerpt":"当方のデスクトップ環境はＷｉｎｄｏｗｓＸＰなのですが、エクスプローラを開いた時にいつも同じ位置・同じサイズで表示されていたものがいつの頃からか前回の表示状態を保持できなくなり、開くたびにサイズ・位置を調整しないといけなくなってしまいました。   ※原因は不明です。   そんな時に前回の表示状態を保持する方法をメモしておきます。   方法   １．エクスプローラを普通に起動 ２．エクスプローラを最大化 ３．エクスプローラを閉じる ４．エクスプローラを再度起動 ５．エクスプローラを元のサイズに戻す ６．エクスプローラを希望の位置・サイズに変更 ７．エクスプローラを閉じる     これで、次にエクスプローラを起動したら前回終了時の位置・サイズで表示されます。   ＜2011.03.29追記＞ と思って、様子を見ていましたがまた表示位置・サイズが狂ってしまいます。   別の方法   １．エクスプローラを普通に起動 ２．エクスプローラを希望の位置・サイズに変更 ３．「ＣＴＲＬ」キーを押しながらエクスプローラを閉じる   今度はこれで様子を見てみます。   ＜2011.03.31追記＞ やっぱり、上記の方法でもいつの間にか狂ってしまいます。 （バッチファイルを使用する方法もあるようですが・・・） というわけで、この話題はなかったことにします。   以上。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2011/03/28/28002015/",
        "teaser": null
      },{
        "title": "LOTO6 － 週2回抽選に！",
        "excerpt":"久々に「ロト6」についてのお話です。   でも、ただ今月から抽選日が月曜日と木曜日の週2回になったというだけです。   当方のホームページで公開している当選情報も対応しました。   ＣＳＶデータも用意していますので、よろしかったらご自由にご活用ください。   （ナンバーズ、ミニロトもあります。）   今回はそれだけです。   ではまた。   ","categories": ["ロト６"],
        "tags": [],
        "url": "/2011/04/05/05002031/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ５．６ リリース！",
        "excerpt":"「ＣｅｎｔＯＳ」５系の最終バージョン５．６がやっとリリースされましたね。   当方のＣｅｎｔＯＳサーバは自動アップデートにしているので、昨日確認してみたら５．６にアップデートされていました。   # cat /etc/redhat-release CentOS release 5.6 (Final)    今後のためにＩＳＯファイルもダウンロードしました。 （当方はこちらからダウンロード → http://ftp.riken.jp/Linux/centos/5/isos/i386/ ）   そして、「sha1sum.txt」もダウンロードしＩＳＯ破損チェックをしておきました。 ※ ＩＳＯ破損チェックはこちらを参照 → 「ＩＳＯイメージ破損チェック！ 」 　（ コマンドは「 sha1sum.exe 」を使用 ）   「５．６」がリリースされたばかりですが、はやくも「６」が待ち遠しいです。   以上。   ","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2011/04/13/13002038/",
        "teaser": null
      },{
        "title": "カレンダー作成！",
        "excerpt":"六曜ってご存知ですか？ 「先勝、友引、先負、仏滅、大安、赤口」というやつです。   これらを表示できるカレンダーを自分で作成してみました。   単に数字を並べるだけのカレンダーは簡単に作成できるのですが、六曜が絡むと非常に面倒です。   なぜなら、旧暦（日本なら、天保暦という暦）を計算しないとからです。   調査してみると、 QRSAMP「旧暦計算サンプルスクリプト の awk のロジックを使用させてもらうのが一番手っ取り早いことが判明！   このロジックでは旧暦、六曜、二十四節気等が計算できます。   ここでは詳しい説明はしません。（複雑すぎてまとめるのが難しすぎる） 詳しいことは上記のソース＋説明書をご参照ください。   また、用語の意味も調べればわかると思います。   当方は他のサイトも参考にしながら、旧暦・六曜・二十四節気の他に毎日の干支・雑節・節句・休日・月齢も計算しました。   作成した環境は Ruby + MySQL です。 そして、作成したデータを Ruby on Rails で参照できるようにしました。 （カレンダー・休日一覧・二十四節気一覧・雑節一覧・節句一覧）   ぜひご利用ください → こちら ※参照可能なデータは西暦1900年～2099年です。  ※休日は現時点の「国民の祝日に関する法律」によるものです。  ※様々なカレンダーサイトと比較して相違がないことは確認済みですが、おかしなところがあれば教えてください。   このカレンダーを作成するにあたり勉強になったこと。      万国共通の基準日からの経過日数（ユリウス通日）があること。   旧暦は二十牛節気の春分が基準であること。   二十四節気は太陽の黄経で決まること。   旧暦の一日は太陽の黄経と月の黄経で決まること。   旧暦には閏月（同じ月が２月続く）が数年に１回あること。   六曜は旧暦の月日によって決まること。   現在の暦（グレゴリオ暦）の閏年の計算根拠。   等々。   非常におもしろかったです。   これをきっかけに、各地の日の出・日の入も計算してみたくなりました。 と思ったけど、日々変わる日の出の方向やその方向にある山の高さなんかは到底個人で計算できるレベルではないのであきらめ・・・ （国立天文台におまかせ）   以上。   ","categories": ["プログラミング"],
        "tags": ["カレンダー","MySQL","Rails","Ruby"],
        "url": "/2011/04/15/15002052/",
        "teaser": null
      },{
        "title": "緊急地震速報 - SignalNow Express！",
        "excerpt":"「この度の東日本大震災で被災された皆様に対し、心からお見舞い申し上げますとともに、一日も早く復旧されることをお祈りいたします。」   さて、あの日から１ヶ月以上が経過しましたが、いまだに毎日のようにテレビ（ＮＨＫ）で「緊急地震速報」が発表されています。     「緊急地震速報」を受信するにはテレビやラジオをつけていなければなりません。   私の所有しているドコモの携帯ではエリアメールで知らせてくれるものの、自分の住んでいるところ以外のことはわかりません。 ※私の居住地島根県は地震が少ない（気象庁の統計ページによると関東や東北の１０分の１以下）ので、このエリアメールさえ実際には受信したことがありません。   そこでパソコン用の「緊急地震速報」ソフトを探してみました。   よくあるのはウェザーニュースの「The Last 10-Second」です。 動画サイトなどで「The Last 10-Second」を観てみるとかなり良さそうですが、このソフトを使用するにはウェザーニュースの会員登録が必要で月額３１５円の費用がかかります。   無料のものを探してみると、ストラテジー株式会社の「SignalNow Express」というものがありました。（Ｗｉｎｄｏｗｓ７、Ｖｉｓｔａ、ＸＰ用、プロキシサーバ非対応）      インストールするにはストラテジー株式会社のダウンロードページからソフトをダウンロードしてインストールするだけですが、ライセンス登録（メールアドレス登録）が必要です。ソフトの使用には登録後に送信されるメールに記載されているライセンスキーの入力が必要です。   自分の居住地（都道府県）、予測する震源地マグニチュード・居住地震度を設定するだけで使用できます。 （このソフトでの音量調整は今のところ不可のようなので各自で音量調整が必要）      「緊急地震速報」には、テレビやラジオなどで発表される「一般向けの緊急地震速報（警報）」と鉄道会社・工場・病院等向けの「高度利用者向けの緊急地震速報（予報）」がありますが、「SignalNow Express」は「高度利用者向けの緊急地震速報（予報）」を利用しているようです。 （気象庁の説明サイト参照 → 「緊急地震速報のしくみと予報・警報」）   「一般向けの緊急地震速報（警報）」と「高度利用者向けの緊急地震速報（予報）」の違いは気象庁サイトによると以下のとおり。      一般向けの緊急地震速報（警報） 複数の地点で観測されたデータを解析し、最大震度が震度５弱以上と予測された場合。   高度利用者向けの緊急地震速報（予報） どこかの観測地点で、Ｐ波またはＳ波の振幅が１００ガル以上となった場合。 地震波を解析した結果、震源・マグニチュード・各地の予測震度が求まり、そのマグニチュードが３．５以上、または最大予測震度が３以上である場合。   さらに「高度利用者向けの緊急地震速報（予報）」は１回のみの発表ではなく、地震検知から１分くらいの間に数回（５～１０回）発表されるようです。 ある地点で１回地震を検知しても他の地点で検知されなければ、それはキャンセルされたりします。（落雷による局所的な揺れなど） 高度利用者（登録した事業者）はこれらのデータを独自に処理して、大規模災害に備えているようです。   「SignalNow Express」はストラテジー株式会社の「SignalNow」という緊急地震速報装置の個人利用版ＰＣソフトのようなものですが、おそらく送られたデータをそのまま利用しているだけです。（複数の地震データを解析するには高度な計算が必要だと思います。）   ですから、テレビ等で発表される「緊急地震速報」と若干異なる場合があります。 （予測マクニチュード・震度が異なったり、テレビ等では発表されていなくても「SignalNow Express」は検知していたり（またはその逆））   当方は使用を開始してまだ２日程度ですがこの間に４回検知しています。 検知直後テレビ（ＮＨＫ）をつけると「緊急地震速報」が同じ震源で発表されていました。 マグニチュードの予測には多少の誤差はありますが、検知自体の精度はよいと思います。      「緊急地震速報」が発表されたのに実際には大したことがなかった、ということは逆に大したことがなくて良かったと考えればよいので、自分の中ではこのソフトは好評です。   以上。   ","categories": ["その他"],
        "tags": ["Windows"],
        "url": "/2011/04/18/18002047/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ５．６ － Ｅｘｔ４について！",
        "excerpt":"先日、当方のＣｅｎｔＯＳサーバを５．６で再構築してみました。 実際のところＣｅｎｔＯＳ５．５がアップデートされて５．６となっていましたが、新規にインストールすることで発見できることもあったりするので、新規インストールしてみました。 ファイルシステムでＥｘｔ４がフルサポートされたとのことだったので、インストール時にＥｘｔ４を指定しようとしたら指定できない。 ＣｅｎｔＯＳ５．５の時のようにインストール開始直後の”boot:”プロンプトで”linux ext4”と指定するとＥｘｔ４が（/bootディレクトリはＥｘｔ３でないといけない）選択できました。 しかし、インストールは普通に完了できたものの、リブートさせると起動できません。 （ログは記録していませんが、ファイルシステムがおかしいようなエラーが表示されてストップします） よくよくネットで調べてみると、こちらに以下のような記述がありました。 As of Red Hat Enterprise Linux 5.6 the ext4 file system is fully supported. However, provisioning ext4 file systems with the anaconda installer is not supported, and ext4 file systems need to be provisioned manually after the installation. Ｅｘｔ４はフルサポートされるようにはなったが、インストール時にはＥｘｔ４は指定せず、インストール後に手動でＥｘｔ４に変換させる必要があるようです。 その他の情報によると、ＣｅｎｔＯＳ６からはＥｘｔ４がデフォルトになるとのこと。 というわけで、Ｅｘｔ３をＥｘｔ４に変換してまで運用するメリット（スピードアップ等）もあまり感じられないので、今回（ＣｅｎｔＯＳ５．６）はＥｘｔ３で運用することにしました。 以上...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2011/04/27/27002017/",
        "teaser": null
      },{
        "title": "旧暦カレンダー - CSV データ！",
        "excerpt":"先日 Ruby + MySQL で作成した旧暦カレンダーを公開しましたが、CSV データも用意しております。   ぜひご活用ください。   こちら → mk-mode SITE : カレンダーCSVデータダウンロード   以上。   ","categories": ["Webサイト"],
        "tags": ["カレンダー","MySQL","Ruby"],
        "url": "/2011/05/08/08002001/",
        "teaser": null
      },{
        "title": "CentOS6.0のリリース時期について！",
        "excerpt":"ＣｅｎｔＯＳ５．６のリリースとＲｅｄＨａｔＥｎｔｅｒｐｒｉｓｅＬｉｎｕｘ６．０のリリースから早数ヶ月。   通常、ＲｅｄＨａｔＥｎｔｅｒｐｒｉｓｅＬｉｎｕｘがリリースされてから早い段階でＣｅｎｔＯＳがリリースされますが、今回はかなり遅れている（ヒートアップしている）ようです。     ですが、こちらによると今月末にはＣｅｎｔＯＳ６．０がリリースされる模様です。   ※当記事執筆時点では２０１１年５月３１日に各ミラーサイトにアップされる模様（何度もスケジュールが後ろへずれているので、正確ではないかも知れませんが。。。）   当方は、ＣｅｎｔＯＳ６．０を待ちきれず、ＳｃｉｅｎｔｉｆｉｃＬｉｎｕｘ６．０を弄ってでＣｅｎｔＯＳ６．０のリリースに備えています。   巷では、同じくＣｅｎｔＯＳ６．０を待ちきれずに、ＳｃｉｅｎｔｉｆｉｃＬｉｎｕｘ６．０に浮気している方も多いようです。   ではまた。   ","categories": ["サーバ構築"],
        "tags": ["CentOS","Linux"],
        "url": "/2011/05/16/16002043/",
        "teaser": null
      },{
        "title": "Fedora15のリリース時期について！",
        "excerpt":"昨日は、CentOS6.0のリリース時期について！記載しましたが、こちらによるとＦｅｄｏｒａも今月中にはＦｅｄｏｒａ１５がリリースされるようです。   ※当記事執筆時点では２０１１年５月２４日にリリースされる模様（例によってこちらも日々後ろへスケジュールがずれ込んでいるので現時点では未確定ですが。。。）   当方、ＬｉｎｕｘではＲｅｄＨａｔ系が一番好きなのでＣｅｎｔＯＳ６．０、Ｆｅｄｏｒａ１５どちらも待ち遠しいです。   ちなみに、ＣｅｎｔＯＳ６．０がリリースされてもすぐにＲｅｄＨａｔＥｎｔｅｒｐｒｉｓｅＬｉｎｕｘ６．１がリリースになるようですが、ＣｅｎｔＯＳは追いつけるのでしょうか？   以上。   ","categories": ["サーバ構築"],
        "tags": ["CentOS","Fedora","Linux"],
        "url": "/2011/05/17/17002030/",
        "teaser": null
      },{
        "title": "CentOS6.0 － リリース危うし？",
        "excerpt":"一昨日、ＣｅｎｔＯＳ６．０のリリース時期について記事にしたばかりですが、こちら（2011年5月17日　CentOS 6.0は本当にリリースされるのか？─メイン開発者の離脱が意味するメッセージ）によるとＣｅｎｔＯＳのメイン開発者がプロジェクトから離脱した模様。   そのためにＣｅｎｔＯＳ６．０のリリースが遅れているようです。   ＣｅｎｔＯＳ６．０のリリースが危うい感じがするほか、今後のＣｅｎｔＯＳプロジェクトの存続自体も危うい感じがするのは私だけでしょうか？   やっぱり、ＳｃｉｅｎｔｉｆｉｃＬｉｎｕｘに乗り換えようかと思っている次第です。   以上。   ","categories": ["サーバ構築"],
        "tags": ["CentOS","Linux","ScientificLinux"],
        "url": "/2011/05/18/18002015/",
        "teaser": null
      },{
        "title": "ＳｃｉｅｎｔｉｆｉｃＬｉｎｕｘ６．０ － サーバ運用開始！",
        "excerpt":"先日までは、ＣｅｎｔＯＳ６．０のリリースが待ち遠しい！というようなことをつぶやいていましたが、やはりあまりにも待たされ過ぎているのとＣｅｎｔＯＳの今後が非常に不安、ということから当サーバをＳｃｉｅｎｔｉｆｉｃＬｉｎｕｘに移行し運用を開始しました。 （当記事執筆時点、こちらによると、また６日後ろへずれ込んでいます。もう信用できない感じ？！）   ＳｃｉｅｎｔｉｆｉｃＬｉｎｕｘの構築方法はＣｅｎｔＯＳやＦｅｄｏｒａの方法を参考にしました。（ほとんど同じです。）   当分、ＳｃｉｅｎｔｉｆｉｃＬｉｎｕｘで運用します。   ＣｅｎｔＯＳ６．０リリース後は様子を見てＣｅｎｔＯＳに戻すかどうか考えます。   以上。   ","categories": ["サーバ構築"],
        "tags": ["CentOS","ScientificLinux"],
        "url": "/2011/05/20/20002047/",
        "teaser": null
      },{
        "title": "Ｆｅｄｏｒａ１５ － リリース！",
        "excerpt":"ついにＦｅｄｏｒａ１５がリリースされました。   日付が変わったので昨日（５月２４日）となりますが、２０時過ぎに日本国内のＦｅｄｏｒａのミラーサイトを複数チェックしてみました。   ２０時過ぎ時点では、北陸先端科学技術大学院大学のダウンロードサイトだけにＩＳＯイメージがアップされていました。 （世界標準時で１４：００という情報があったので日本では２３：００だと思っていましたが）   その他（理化学研究所、ＫＤＤＩ研究所、奈良先端科学技術大学院大学、ＤＴＩ、山形大学）はこの時点ではまだアップされていませんでした。   これらも随時ＩＳＯイメージがアップされるでしょう。   ※ちなみに、本家なら こちら 。  また、torrent なら こちら 。   当方は早速北陸先端科学技術大学院大学のダウンロードサイトからＩＳＯイメージをダウンロードしました。   早速、色々試してみようかと思います。   本命のＣｅｎｔＯＳ６もそろそろリリースなので、そちらのほうも待ち遠しいですが。。。   以上。   ","categories": ["サーバ構築"],
        "tags": ["CentOS","Fedora","Linux"],
        "url": "/2011/05/25/25002024/",
        "teaser": null
      },{
        "title": "ＣｅｎｔＯＳ６．０ － リリースさらに遅延？！",
        "excerpt":"ＣｅｎｔＯＳ６．０はこちら（ＱＡｗｅｂ）の最新の情報（当記事執筆時点）によると６月６日には外部ミラーサイトへアップ開始となっていました。 （なぜか５月２７日のＩＳＯイメージがＱＡチームに引き渡される日をリリース日と勘違いされておられる方も見受けられますが。。。）    しかし、ＣｅｎｔＯＳ６のＴｗｉｔｔｅｒを見てみるとさらに１０日ばかりリリースが遅れると載っているではありませんか！ ＜引用＞   The full CentOS 6.0 tree is not yet available to the QA team. The planning for the CentOS 6 release is delayed of 10 days approximately.    テストを行うＱＡチームが開発チームからに入手できていないものがある。 と言うようなこと？   ＲｅｄＨａｔＥｎｔｅｒｐｒｉｓｅＬｉｎｕｘが６．１をリリースし、６．０をリリースしているＳｃｉｅｎｔｉｆｉｃＬｉｎｕｘもこの夏には６．１のアルファ版をリリースしようしている中、ＣｅｎｔＯＳはもう信用がた落ちです。   仮にこんなにドタバタした後にＣｅｎｔＯＳ６．０がリリースされても、ＳｃｉｅｎｔｉｆｉｃＬｉｎｕｘ６．０と同程度の安定性が確保されるのか疑問です。   当方のサーバはＣｅｎｔＯＳの将来性に不安を感じ、１０日ほど前にＳｃｉｅｎｔｉｆｉｃＬｉｎｕｘ６．０に移行しました。 今までのＣｅｎｔＯＳ（５．６）に比べて非常に安定しています。 （カーネルも新しいし、ファイルシステムもＥｘｔ３からＥｘｔ４になっています。）   ＣｅｎｔＯＳは当分少し離れたところから見守る感じになるでしょう。   以上。   ","categories": ["サーバ構築"],
        "tags": ["CentOS","RedHatEnterpriseLinux","ScientificLinux"],
        "url": "/2011/05/31/31004536/",
        "teaser": null
      },{
        "title": "Ｔｗｉｔｔｅｒ － CentOS6とは？",
        "excerpt":"昨日、当方が見つけたＴｗｉｔｔｅｒのＣｅｎｔＯＳ６というアカウントの書き込み。 ＜２０１１年５月３０日のツイート＞   The full CentOS 6.0 tree is not yet available to the QA team. The planning for the CentOS 6 release is delayed of 10 days approximately.    これって、何？   ひょっとして、ニセモノ？   今、ＣｅｎｔＯＳ６．０のリリースがまだかまだかと注目されている割にはフォローしている数も少なすぎるし。。。   ちょっと、こちらは信用しないことにしました。   ＣｅｎｔＯＳ開発者Karanbir SinghのＴｗｉｔｔｅｒ、Karanbir Singhのブログを信用することにしました。 ※QAWebのカレンダーも合わせて注目。   以上。   ","categories": ["サーバ構築"],
        "tags": ["CentOS","Twitter"],
        "url": "/2011/06/01/01002047/",
        "teaser": null
      },{
        "title": "WindowsXP - 安全にメモリ解放！",
        "excerpt":"パソコンを長時間使用していると次第に使用可能メモリが減少していって、動作が重くなることがよくあるともいます。 メモリ解放ツールはフリーウェア・シェアウェアのものがいくつかありますが、導入した環境によっては不具合が発生するケースがあるようです。 そこで、マイクロソフトがメモリを安全にメモリ解放するツール（正確には「Windows Server 2003 Resource Kit Tools」というアプリの「empty.exe」コマンド）を提供していることを知り、早速当方のＷｉｎｄｏｗｓＸＰマシンに導入してみました。 ※アプリ名は「Windows Server 2003 ・・・」となっていますが、「Windows Server 2003」と「Windows XP」に対応しているようです。 以下がその記録です。 導入手順 １．「Windows Server 2003 Resource Kit Tools」のダウンロード こちらから、「rktools.exe」をダウンロードする。 ２．「Windows Server 2003 Resource Kit Tools」のインストール ダウンロードした「rktools.exe」を実行して普通にインストールする。 ３．「empty.exe」抜き出し インストールフォルダー（標準でインストールしたなら「C:\\Program Files\\Windows Resource Kits\\Tools」）から「empty.exe」というファイルを抜き出し、「C:\\Windows\\System32」フォルダへコピーする。 ４．「Windows Server 2003 Resource Kit Tools」のアンインストール 「empty.exe」以外のツールは特に必要ないので、「プログラムの追加と削除」から普通にアンインストールする。 ５．メモリ解放バッチファイル作成 簡単に実行できるよう以下の内容でバッチファイル（ファイル名は「empty.bat」とした）を作成する。 @echo off empty.exe * ６．メモリ解放バッチファイル実行...","categories": ["PC_Tips"],
        "tags": ["Windows","バッチ"],
        "url": "/2011/06/09/09002058/",
        "teaser": null
      },{
        "title": "Windows - タスクスケジューラでバッチファイル実行時DOS窓を最小化にする！",
        "excerpt":"通常、Ｗｉｎｄｏｗｓでバッチファイルを実行時DOS窓を表示させないようにしたい場合、そのバッチファイルのショートカットを作成後、そのショートカットのプロパティで「実行時の大きさ」を「最小化」にすると、実現可能です。 しかし、タスクスケジューラでバッチファイルをスケジュール実行する場合、ショートカットを指定することができないので、バッチファイル実行時DOS窓が表示されないようにはできません。 でも、VBSを使用すれば実現可能です。 以下がその記録です。（VBSファイルを作成するだけです） VBSファイル ファイル名：hoge.vbs、実行するバッチファイル：hoge.bat Set objWSHShell = CreateObject(\"WScript.Shell\") objWSHShell.Run \"cmd.exe /c hoge.bat\", 7 ・cmd.exe の後ろの “/c” はバッチ実行後終了することを意味しています。 ・最後の “7” はウィンドウを最小化にすることを意味しています。 ちなみに、WScript.ShellオブジェクトのRunメソッドの第２引数はこちらによると以下のとおり。 0 : ウィンドウを非表示にし、別のウィンドウをアクティブにします。 1 : ウィンドウをアクティブにして表示します。ウィンドウが最小化または最大化されている場合は、 　　 元のサイズと位置に戻ります。アプリケーションでウィンドウ を最初に表示するときには、 　　 このフラグを指定してください。 2 : ウィンドウをアクティブにし、最小化ウィンドウとして表示します。 3 : ウィンドウをアクティブにし、最大化ウィンドウとして表示します。 4 : ウィンドウを最新のサイズと位置で表示します。アクティブなウィンドウは切り替わりません。 5 : ウィンドウをアクティブにし、現在のサイズと位置で表示します。 6 : 指定したウィンドウを最小化し、Z オーダー上で次に上位となるウィンドウをアクティブにします。...","categories": ["PC_Tips"],
        "tags": ["Windows","バッチ"],
        "url": "/2011/06/11/11002008/",
        "teaser": null
      },{
        "title": "WordPress - Syntax Highlighter でＷ３Ｃエラー！",
        "excerpt":"当方のＷｏｒｄＰｒｅｓｓで構築しているプログで、ソースコードをきれいに表示してくれるプラグイン「Syntax Highlighter」（バージョン：３．０．８３）を使用しているのですが、最近ＣＳＳのＷ３Ｃチェックでエラーが発生するようになりました。 ※Ｗ３Ｃチェックとは何か？という方は以下の過去記事をご参照ください。 W3Cのチェック！ W3Cのチェック（ＣＳＳ）！ エラーの内容 プロパティ -moz-border-radius は存在しません : 0 0 0 0 0 0 0 0 プロパティ -webkit-border-radius は存在しません : 0 0 0 0 0 0 0 0 プロパティ box-sizing は CSS レベル 2.1 に存在しませんが、[css3] に存在します : content-box content-box 次のプロパティが正しくありません : min-height auto は min-height で利用できる値ではありません : auto...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2011/06/15/15002010/",
        "teaser": null
      },{
        "title": "緊急地震速報 - SignalNow Express 音量調節可能に！",
        "excerpt":"以前、ストラテジー株式会社の「SignalNow Express」という無料の緊急地震速報アプリについてお話しました。（Ｗｉｎｄｏｗｓ７、Ｖｉｓｔａ、ＸＰ用、プロキシサーバ非対応） （　過去記事 → 「緊急地震速報 – SignalNow Express！」　）        今まで使用してきましたが、音量調節ができませんでした。 （「SignalNow Express」は他のＷｉｎｄｏｗｓアプリより音量が大きすぎるので、速報検知後慌てて音量を小さくする必要があった）   ですが、このたび、バージョンアップされて音量調節ができるようになりました。   音量調節の他に、以下のような機能も追加されました。      検知後に音量をオフにする機能   今までどおり1箇所の観測点から検知するか（速度優先）、２箇所の観測点から検知するか（精度優先）、選択可能に   広告表示機能（無料配信の安定化のために）   ちなみに当方は、ＧｏｏｇｌｅＣｈｒｏｍｅの緊急地震速報の拡張機能      緊急地震速報 by Extension   earthquake Notify(緊急地震速報)   も併用していますが、検知するスピードは以下のとおりです。（平均的な体感スピード）      緊急地震速報 by Extension   SignalNow Express　（↑の直後（１秒くらい））   earthquake Notify(緊急地震速報)　（↑の数秒後（遅いときは５分後くらい））   以上。   ","categories": ["その他"],
        "tags": ["Windows"],
        "url": "/2011/06/23/23002000/",
        "teaser": null
      },{
        "title": "WordPress - パーマリンク変更にともなう問題点！",
        "excerpt":"当方のブログはWordPressを使用しています。 ブログ開設当初は不勉強のため、パーマリンクはデフォルトのままにしていました。 ( “/?p=9999” というようなクエリストリングを使用した動的ＵＲＬになる )     ＳＥＯ対策を考えると動的ＵＲＬより静的ＵＲＬがよいとのことなので、パーマリンクを変更しようと考え、WordPressのパーマリンク設定でデフォルト以外を選択してみました。   少し前のWordPressだと、パーマリンクを変更した際は旧ＵＲＬへのアクセスを新ＵＲＬへリダイレクトするようなプラグインを導入する必要があったようですが、最近のWordPressでは自動でリダイレクトしてくれます。   リダイレクトに関してはよかったのですが、問題点がありました。 （当方の環境だけ？）   【問題１】　ブログのトップページを表示する時は問題ないのですが、１つの投稿ページを表示しようとするとスポンサード・リンク( Google Adsense, Amazon, ValueCommerce )が表示されない。   のです。   当方のブログでは広告以外のページを高速表示するために、広告関連はobjectタグを使用しています。 ( objectタグがどのようなものかはここでは説明しません。 )   そこで、ページの表示速度を犠牲にしてでも、パーマリンク変更を実現させるためにobjectタグの使用をやめると、今度は   【問題２】　W3Cチェックで不当なHTMLと判定されてしまう。   これは、表示させようとしている広告(特にValueCommerce)の提供されているスクリプトがW3Cに対応していないから。 ( W3Cタグがどのようなものかはここでは説明しません。 )   そして、さらにもう一つ問題が。それは   【問題３】　objectタグはWordPressでは非対応。   とのこと。( → http://en.support.wordpress.com/code/ )   以下のどちらかを選択すれば解決するのですが、どうしてもどちらも譲れない。      広告表示をあきらめる。   W3Cチェックあきらめる。   少し保留です。 当分、デフォルトのパーマリンクでの運用を続けます。   ではまた。   ","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2011/07/04/04002040/",
        "teaser": null
      },{
        "title": "WordPress - パーマリンク変更！",
        "excerpt":"昨日WordPressのパーマリンク変更での問題点について記事にしたばかり（こちら）ですが、WordPressでobjectタグが非推奨というのがどうしても気にかかるので、ページ表示スピードを犠牲にしてobjectタグを使用しない方法に戻しました。     その際、アフィリエイト（ValueCommerce）表示時にW3Cチェックでエラーとなる項目について、さらに調査しソースを修正してみました。   ValueCommerceのサポートページ（FAQ）に掲載されていた修正方法は以下のとおりでした。   Q.XHTML1.1に準拠した形での記載へ変更したいのですが、どのようにすればよいでしょうか？ A.弊社にて提供しているHTMLコードを変更されることは規約により禁止しておりますが、XHTML1.1 に準拠する場合のみ以下の変更が可能です。 ・大文字箇所の小文字への修正 ・空要素タグへの\"/\"の追加 ・imgタグ内へのalt属性(alt=\"\")の追加　（altの中身は空欄）    しかし、これらの修正を施しても、以下のエラーが残ります。      there is no attribute “allowtransparency” →　iframeタグに非対応のallowtransparency属性が使用されている。   required attribute “type” not specified →　javascriptを読み込むのにlanguage属性を使っている。   これらはValueCommerceのサポートページには明記されていないようですが、W3Cに準拠させるため、ということで以下のように修正しました。      script language=”javascript” を script type=”text/javascript” に変更。   allowtransparency=”true” を削除。   これで、W3CチェックがOKとなりました。   W3CチェックがOKとなったので、パーマリンク構造をデフォルトから変更しました。 ちなみに、当方は   /%year%/%monthnum%/%day%%hour%%minute%%second%/    としてみました。（いろいろ調べてみた結果、どれが一番いいのかは一概に言えないようなので）   当分これで運用してみます。   以上。   ","categories": ["サーバ構築","ブログ"],
        "tags": ["WordPress"],
        "url": "/2011/07/05/05002015/",
        "teaser": null
      },{
        "title": "Twitter始めました！",
        "excerpt":"当方も遅ればせながら、Twitterを始めました。   こまごまとつぶやくことはそんなにないと思っていました。   ブログの更新をもっと広く知ってもらいたいという思いからTwitterを始めました。     なので、当ブログのWordPressに以下のようなプラグインを導入しました。      ブログを投稿したら自動的にツイートする。   投稿記事をツイートできるボタンを設置する。   ブログサイトにフォローしてもらうようにボタンを追加する。   実際に導入したプラグインについては、今後Twitterを利用していくうちにより便利なものに変更するかもしれないので、現時点では明言しません。（ネットで簡単に調べられますので）   取り急ぎ、以上です。   ページ右側ボタンからフォローよろしくお願いいたします。   以上。   ","categories": ["SNS"],
        "tags": ["Twitter"],
        "url": "/2011/07/08/08002008/",
        "teaser": null
      },{
        "title": "Twitter - WordPressサイドバーにツイート表示！",
        "excerpt":"昨日Twitterを始めたばかりですが、今日は当WordPressブログのサイドバーに自分のツイートを表示させてみました。     使用したのはTweetsWindというブログパーツです。 案内されるとおりに作業を進めていき、最後に出来上がったソースを自分のWordPressソースの適当な場所に貼り付けるだけです。   WordPressならこの手のものにウィジェットを使用するものがあるようですが、当方のブログのテーマは自分で作ったものでウィジェットに対応していないこともあり、TweetsWindを使用することにしました。 ※テーマを少し細工すれば、ウィジェット対応も可能のようですが。。。   出来ばえは、このブログの右側のサイドバーをご覧ください。   同様に、当方のホームページにも同様にしてTweetsWindを導入しました。   フォローしたり、リツイートしたり、Twitterって面白いですね。   以上です。   ","categories": ["SNS","ブログ"],
        "tags": ["Twitter"],
        "url": "/2011/07/09/09002016/",
        "teaser": null
      },{
        "title": "Twitter - ツイートボタンでW3Cエラー！",
        "excerpt":"当方のWordPressのブログ記事にTweetボタンを設置しようと思い、手っ取り早くプラグインで導入していました。 しかし、Twitterの公式サイトにTweetボタン用HTMLソース作成サービスがあることを知り、早速こちらを試してみました。（公式に公開されているもを使わない理由もないので） 簡単な手順でHTMLソースが作成されます。このソースを好みの場所に貼り付ければ完了です。 しかし、W3C（XHTML1.0）のチェック（XHTML1.0）でValid（正当）にならない。 there is no attribute \"data-count\" there is no attribute \"data-via\" there is no attribute \"data-lang\" のようなエラーとなります。 どうやら、「data-*」という属性はHTML5の Custom Data Attribute（リンク切れ）というもので、HTML5ならValidになるが、それ以外ではValidにならないようです。 以下にW3C（XHTML1.0）でValidにするための対応方法を記録しておきます。 対応方法 標準のHTMLソース作成 Twitterの公式サイトのTweetボタン作成ページにて、HTMLソースを作成する。 HTMLソース修正 「data-*」という属性をクエリストリングに変換する。 ●修正前 &lt;a href=\"http://twitter.com/share\" class=\"twitter-share-button\" data-count=\"none\" data-via=\"ko_masaru\" data-lang=\"ja\"&gt;Tweet&lt;/a&gt; &lt;script type=\"text/javascript\" src=\"http://platform.twitter.com/widgets.js\"&gt;&lt;/script&gt; ●修正後 &lt;a href=\"http://twitter.com/share?count=none&amp;via=ko_masaru&amp;lang=ja\" class=\"twitter-share-button\"&gt;Tweet&lt;/a&gt; &lt;script type=\"text/javascript\" src=\"http://platform.twitter.com/widgets.js\"&gt;&lt;/script&gt; （注）「ko_masaru」は私のTwitterアカウントです。ご自分のものに訂正してください。 参考にしたサイト [Tweet...","categories": ["サーバ構築","ブログ"],
        "tags": ["Twitter","W3C"],
        "url": "/2011/07/11/11002035/",
        "teaser": null
      },{
        "title": "CentOS6.0 - やっとリリース！",
        "excerpt":"RedHatEnterpriseLinux6.0(以後、RHEL6.0)クローンのCentOS6.0がやっと2011/07/11にリリースされました。 5月末のリリース予定から毎週のように遅延しながらのリリースで、RHEL6.0のリリースから約8ヶ月の遅れでした。 公式サイトにもアナウンスがやっと載りました。（事後報告） （内部のリリーススケジュールや開発者ブログ・ツイッターでは細かなやり取りがありましたが・・・）     この大幅な遅れはメイン開発者のDagが離脱したのが主な原因（その原因もコミュニティ内部の問題か？）のようです。   当方の自宅サーバはCentOSの将来性を危惧してすでに5月末にはScientifiLinux6.0に移行しています。 おそらくですが、もうCentOSに戻ることはないと思います。   この7月中か8月上旬にはScientificLinuxは6.1がリリースされる予定です。 CentOSは今後6.0のセキュリティアップデートを行いながら6.1の開発を進めるようですが、仮にコミュニティの内部に問題がるのならばCentOS6.1も6.0と同程度かそれ以上遅れることは避けられないと思います。   穴の空いたもの（CentOS6.0）が穴をふさいだもの（RHEL6.0、ScientificLinux6.0）と共存するとなるとかなりの危険があると思うのですが。。。   まあ、とは言えCentOS6.0も触ってみたいので、ISOイメージをダウンロードしておきました。 当方はこちらからダウンロード → ftp://ftp.riken.jp/Linux/centos/6.0/isos/ ※ちなみに、正式アナウンス（2011/07/11）前にすでに上記のリンクにフライングでアップされていましたが、それはバグありのようです。   CentOSの今後の動きに注目です。   以上。   ","categories": ["サーバ構築"],
        "tags": ["CentOS","ScientificLinux"],
        "url": "/2011/07/12/12002041/",
        "teaser": null
      },{
        "title": "SignalNow Express（緊急地震速報）が的中した瞬間！",
        "excerpt":"2011年3月11日の東日本大震災以降、自宅のWindowsXPマシンにはフリーの緊急地震速報ソフト「SignalNow Express」を導入しています。 震源地マグニチュードが4.0以上、所在地震度が1以上で発動するように設定しています。     過去記事参照      緊急地震速報 - SignalNow Express！   緊急地震速報 - SignalNow Express 音量調節可能に！   この他にもGoogo Chromeの以下の拡張機能も併用しています。      緊急地震速報 by Extension   earthquake Notify(緊急地震速報)   当方は島根県松江市在住ですが、緊急地震速報ソフト導入以降、地震を検知しても震源が東日本だったり規模が小さかったりで、実際に自宅で揺れを感じることはありませんでした。 また、このマシンはサーバマシンではないので、夜中や外出時は電源を落としているので検知できません。   そんな中、7月5日19時18分・和歌山県北部を震源とする地震が発生した際には、ＮＨＫ総合を観ながらパソコンを操作していました。 以下の順で緊急地震速報が起動しました。（気象庁の速報内容）      NHKの緊急地震速報   緊急地震速報 by Extension   SignalNow Express   earthquake Notify(緊急地震速報)   はっきり覚えていませんが、１～４で１０秒以内だったと思います。   SignalNow Expressの画面によると島根県松江市が「震度１」で到達まで残り４０秒くらいでした。      ※SignalNow Expressの履歴に残っていた画像。   本当に揺れるのだろうかと思ってカウントダウンを眺めていると、ほぼ時間通りに揺れ始めました。（１、２秒くらいでしたが） 実際の震度も「松江市」は「震度１」で当たっていました。   これらのフリーソフトが今後も役に立つだろうと実感した次第です。   自宅はダイニングのTV横に地元のケーブルテレビ局提供の屋内告知端末（行政情報住民告知システム）を設定しているので、松江市で震度４以上の揺れが予測される場合には最大音量で告知してくれるようです。 大きな地震の際にはこれも役立ちそうです。   以上。   ","categories": ["その他"],
        "tags": ["Windows"],
        "url": "/2011/07/15/15002053/",
        "teaser": null
      },{
        "title": "Ruby - TwitterタイムラインをOAuth認証で取得！",
        "excerpt":"Twitterを始めてまだ10日ばかりですが、面白さにはまりRubyで実用的なものを作ろうと考えました。 今回作ってみたものは、「自分のTwitterタイムラインをバックアップするRubyスクリプト」です。 Rubyスクリプトの概要 TwitterへOAuth認証でログイン。 自分のアカウントのタイムラインをリツイートも含めて全て取得。 取得したタイムラインデータをデータベース(MySQL)へINSERT。 詳細は説明はしませんが、おおまかな流れは説明します。 ※各項目の詳細はそれぞれWeb等で調べれば大体わかると思います。 作業手順 前提条件 Rubyがインストールされ使用可能である。 MySQLがインストールされ使用可能である。 ある程度のLinuxの知識。（Linuxで開発・運用する場合） ある程度のRubyの知識。 ある程度のMySQLの知識。 ある程度のTwitterAPIの知識。 １．gemパッケージインストール RubyでのTwitter関連、OAuth関連の開発を行うのに必要なGemパッケージをインストールする。 （WindowsでもLinuxでも同様。おそらくBSD系OSでも同様。） gem install twitter gem install oauth ２．連携アプリの登録 (1) twitterにログインしていなければログインする。 (2) twitterの設定ページのアプリ連携タブないの「連携アプリの追加と設定はこちらから変更できます。」のこちらをクリックする。 (3) twitter developersのログインページに移るので、twitterのユーザ名・パスワードを入力してログインする。 (4) 「Create a new application」ボタンをクリックする。 (5) 「Name」、「Description」、「WebSite」を入力、「Yes, I agree」にチェックを入れ、認証用文字を入力して、「Create your Twitter application」ボダンをクリックする。 (6) 「Consumer key」、「Consumer secret」が発行されるので控えておく。 （twitter...","categories": ["SNS","Webサイト"],
        "tags": ["Rails","Ruby","Twitter"],
        "url": "/2011/07/17/17002038/",
        "teaser": null
      },{
        "title": "Twitter - MySQLに保存したツイートをホームページで公開！",
        "excerpt":"昨日、「Ruby – TwitterタイムラインをOAuth認証で取得！」で紹介したとおり、自分のツイートを手元のScientificLinuxサーバのMySQLに登録するRubyスクリプトを作成しました。     手元のDBにデータがあればあとは自由自在に加工が可能なので、早速「Ruby on Rails」で公開中の当方のホームページへ一覧表示させてみました。   既にMySQLからデータを取得して表示するようなページを作成しているので、そのソースをコピー・カスタマイズして完成しました。 なので、結構容易でした。 とりあえず、月別に一覧表示するようにしてみました。   基本的に自分のバックアップ用に作成したものなので、他人の過去のつぶやきにはあまり興味はないかもしれませんが、参考までに公開しておきます。（→こちら）   Twitterの大元のサーバがダウンしてデータがパーになることはないとは思いますが、自分のデータを自分の手元においておくという安心感があります。 （フリーのTwitterバックアップソフト等もありますが、自分には若干使いにくいものが多かったし・・・）   以上。   ","categories": ["SNS","Webサイト"],
        "tags": ["Rails","Ruby","Twitter"],
        "url": "/2011/07/18/18002048/",
        "teaser": null
      },{
        "title": "ScientificLinux6.0 - インストール動画！",
        "excerpt":"当方の自宅サーバは２０１１年５月末からScientificLinux6.0で運用しています。   それに関連して、WindowsXP上の仮想マシンVMwarePlayer3.1.3でのScientificLinux6.0インストール（サーバ用途）を動画にしてみました。 （メモリは512MBに設定。パーティション設定はデフォルト。パッケージはMinimal＋開発ツール。）     動画はScientificLinux6.0以外も含め、こちらからご覧になれます。 YouTubeにもアップしています。（ → こちら ）   サーバの細かい設定はここでは説明しません。 以下のサイト等をご参照ください。      Scientific Linuxで自宅サーバー構築   Server World - ネットワークサーバー構築   以上。   ","categories": ["サーバ構築"],
        "tags": ["ScientificLinux"],
        "url": "/2011/07/20/20002018/",
        "teaser": null
      },{
        "title": "エアコンの除湿！",
        "excerpt":"昨今、省電力化が騒がれています。 中でも消費電力が大きいエアコンでは省電力化が必要です。     さて、「冷房」より「除湿」（ドライ）が消費電力が小さいと思って、省電力化・低コスト化をしているつもりの方はおられませんか？   結論から言うと、「エアコンの除湿は必ずしも冷房より省電力・低コストではない」です。   なぜ「必ずしも」かというと、ご存知の方も多いかもしれませんが、実は同じ「除湿」でもエアコンの種類によって消費電力が「冷房」よりも小さかったり大きかったりするようです。   通常、「除湿」は「冷房」と同じ原理で空気中の湿気を取り除くので「単なる除湿」は「冷房」同様に気温が下がります。 しかし、最近のエアコンの「除湿」は気温を下げずに湿気を取り除く（下がろうとする気温を下げないように再加熱する）タイプ「再熱除湿」が多いようです。   結局のところ以下のようになります。      温度を下げずに除湿（再熱除湿）をするエアコン（最近のエアコンに多い） →　冷房より消費電力「大」   温度が下がるタイプの単なる除湿（古いエアコンに多い） →　冷房より消費電力「小」   まとめると、      再熱除湿 ＞　冷房 ＞　単なる除湿   です。   エアコンの「除湿」が「再熱除湿」か「単なる除湿」かを取扱説明書で確認してみる必要があるようです。   以上。   ","categories": ["その他"],
        "tags": [],
        "url": "/2011/07/21/21002046/",
        "teaser": null
      },{
        "title": "Ruby on Rails - jQueryを導入！",
        "excerpt":"今日はJavaScriptのライブラリの「jQuery」を「Ruby on Rails」環境に導入してみました。 今までは「jQuery」の必要性は感じませんでしたが、このたび使用したいJavaScriptで「jQuery」が必要だったので。 以下が作業記録です。 作業記録 前提条件 使用OSはWindowsXP ( Linuxは Scientific Linux 6.0 ) Rubyのバージョンは 1.9.2-p180 Railsのバージョンは 3.0.5 WebサーバはRails標準の Mongrel ( Linuxは Apache + Phusion Passenger ) HTML、Railsの若干の知識がある。 ※Rails3.1系やRails2系は若干操作が異なるので、「rails/jquery-ujs - GitHub」を参照すること。 ※Linux版でもほぼ同様の手順で可能。（ScientificLinux6.0 + Ruby1.9.2-p180 + Rails3.0.3 で確認） １．「Gemfile」の編集 「rails/jquery-ujs - GitHub」の説明にあるとおり、Gemfileに以下の記述を追加する。 gem 'jquery-rails', '&gt;= 1.0.12' ２．「jQuery」のインストール コマンドプロンプトでRailsアプリのディレクトリへ移動し以下のようにしてインストールする。 bundle install 以下のようにエラーが発生する場合、...","categories": ["プログラミング"],
        "tags": ["JavaScript","Rails","Ruby"],
        "url": "/2011/07/23/23002037/",
        "teaser": null
      },{
        "title": "JavaScript - PageTopボタン配置！",
        "excerpt":"昨日は「Ruby on Rails - jQueryを導入！」のとおり「Ruby on Rails」でJavaScriptのライブラリ「jQuery」を使用できるようにしました。 今日は、その「jQuery」を使用したJavaScriptの例を紹介します。 それは、Webページを下のほうへスクロールした際に一気にページの最上部へ戻るためのボタンです。 もっと間単に実現する方法もあるかもしれませんが、当方は以下の方法で実現しました。 作業記録 前提条件 ・Ruby on Rails を使用。 ・Rubyのバージョンは1.9.2-p180。 ・Railsのバージョンは3.0.3。 ・Railsに「jQuery」がインストール済み。 ※若干のHTML等の知識があれば、Railsの知識がなくても大丈夫でしょう。 １．ソース・画像の準備 「Dynamic Drive DHTML scripts- jQuery Scroll to Top Control」から以下をダウンロードする。 scrolltopcontrol.js ボタンイメージ(up.png) ※ボタンイメージは自分の好きなイメージを準備すればよい。 そして「scrolltopcontrol.js」は「public/javascripts」配下へ、ボタンイメージは「public/images」配下へ配置する。 ２．HTMLソースの編集 HTMLソースで「scrolltopcontrol.js」を読み込むために&lt;head&gt;タグ内へ以下の記述を追加する。 &lt;%= javascript_include_tag \"scrolltopcontrol.js\" %&gt; ※Railsではなく普通のHTMLなら以下のようなコードとなります。 &lt;script src=\"/javascripts/scrolltopcontrol.js\" type=\"text/javascript\"&gt;&lt;!--mce:0--&gt; （”/javascripts/scrolltopcontrol.js”の部分は環境に合わせて変更） ３．「scrolltopcontrol.js」のカスタマイズ ボタンイメージを読み込めるよう「scrolltopcontrol.js」のパス指定部分を環境に合わせて編集する。 サイズも使用するものに合わせる。 controlHTML: '&lt;img...","categories": ["プログラミング"],
        "tags": ["JavaScript","Rails","Ruby"],
        "url": "/2011/07/24/24002043/",
        "teaser": null
      },{
        "title": "WordPress - テーマ変更！",
        "excerpt":"今まで使用してきた当方のWordPressブログのデザイン、当ブログサイト開設時から約２年半。 この度変更してみました。   今まで使用してきたテーマはWordPress2.7の時代にテキストを参考に自作したものでした。 今回はまた最初から作成するのも大変なので、今までのテーマをカスタマイズすることにしました。 （ついでにWordPressのバージョンも 3.2.1 にアップデートしました）     基本的に黒っぽいデザインが好きなので、今回も黒っぽいデザインです。 ウィジェットも使用可能のはずです。 （個人的にはウィジェットは使用しませんが・・・）   今回の変更概要は以下のとおり。   変更概要   ヘッダ画像の変更。   新たな画像を作成したり、フリーのものを探すより手軽で今まで使用していた画像も気に入っていたので、その画像をPaint.Netというペイントソフトで加工しました。   配置の変更   今までは記事部分の両側にサイドバーを配置するデザインでしたが、今回はサイドバー２カラムを右側に配置するデザインにしました。   ページナビゲータの配置   最近は投稿記事の数も多くなってきたので、ページ移動が容易にできるようページナビのプラグイン「WP-PageNavi」を導入しました。   表示ページの概要欄を設置   表示しているページ内の記事タイトルを人目で確認できるようページの先頭部分に記事リストを設置しました。   ページトップボタンの配置   ページを下部へスクロールした際にクリック一つでページトップへ戻れるようJavaScript(jQuery)製のボタン「scrolltopcontrol.js」を設置しました。   アクセスカウンターの変更   「counterize ii」というプラグインカスタマイズして使用していたアクセスカウンター。PageViewの表示をやめ、IPカウンターのみの表示としました。(ページビューはツールチップ表示にしました)   その他   背景画像の変更その他細かな変更も行いました。   苦労したこと      Google API Fontを使用して綺麗なフォントで表示しようと考えたが、Google API Fontは「CSS3」のため2.1勧告の「W3C CSS検証」でエラーとなるので断念し別のフォントを使用した。   IEやGoogle Chrome用にCSSをカスタマイズしようと考えたが、これも「W3C CSS検証」でエラーとなるので断念。 → そのためIEやGoogle Chromeではレイアウトが若干崩れる箇所がある。（ヘッダ画像部分のpadding部分？）     出来栄えはこのページでご確認いただけますが、将来のため以前のデザインと今回のデザインのハードコピーもとっておきました。 [変更前]      [変更後]      「XHTML1.0」と「CSS2.1」は「W3Cチェック」をパスするようになっているはずです。サイドバーのバナーから確認できます。 おかしな点があれば、コメントにて連絡ください。   今後も少しずつメンテはしていくと思います。   最後に、せっかくテーマを作成したのだから公開すればいいのに、と思うかもしれませんが、自分用にかなりカスタマイズしているしソースがスマートではないので公開はしません。   以上。   ","categories": ["ブログ"],
        "tags": ["CSS","PHP","WordPress","XHTML"],
        "url": "/2011/07/25/25003046/",
        "teaser": null
      },{
        "title": "松江市 - 特例市へ向かって！",
        "excerpt":"当方が生誕し長年にわたって居住してきた島根県「松江市」はこのたび2011年8月1日付けで、隣の「東出雲町」を編入する形で合併することになりました。名前は変わらず「松江市」です。 ※時々、お隣の「鳥取県」や松山市のある「愛媛県」などと間違われますが、「松江市」は神々の国「島根県」です。     この合併により人口は20万人以上となり、山陰地方（島根県＋鳥取県）では最大となります。 全国の県庁所在地の中では最下位だったのが「山口市」、「鳥取市」についで３番目となります。   人口が20万人を超えるので、市議会・県議会の議決を経て政令で指定されると「特例市」となり県の事務権限が一部移譲されます。 もちろん「松江市」は「特例市」の指定を目指しています。   逆に人口が20万人を割った場合、同様に手続きをしない限り「特例市」は指定解除とならないようです。 現に合併時20万人以上だった「鳥取市」が現在は20万人を割っていますが、手続きをしていないので「特例市」のままです。   「特例市」になった場合に期待されることは主には以下のとおり。      イメージアップになる。   新たな交流の創出や地域経済の活性化。   「環境」、「都市計画・建設」、「産業・経済」分野の市民生活に密着した事務権限が県から委譲されるので、独自に特色ある街づくりができる。   ただ、合併によりあらゆる事柄において統一作業等が必要になるため、当分の間は県・市などの関連部署の方々は落ち着けないでしょう。 市民も生活面において何かと変更事項などが発生してくるでしょう。   そして、2011年10月1日には同じく「島根県」で「出雲市」が「斐川町」を編入する形で新「出雲市」も誕生します。   以上。   ","categories": ["その他"],
        "tags": [],
        "url": "/2011/07/27/27002017/",
        "teaser": null
      },{
        "title": "Ruby - Twitter MentionsをOAuth認証で取得！",
        "excerpt":"少し前に、「Ruby – TwitterタイムラインをOAuth認証で取得！」のとおり、Ruby + TwitterAPI + OAuth認証+ MySQL で自分のTwitterタイムラインを取得してバックアップするようにしました。 これでは、自分宛のMentionsが取得できないのでタイムライン取得のRubyスクリプトを流用してMentions取得スクリプトを作成しました。 「Ruby – TwitterタイムラインをOAuth認証で取得！」ができているものとして、今回行った作業は以下のとおりです。 （MySQLのRubyGemsパッケージ部分を除いて、WindowsでもLinuxでも同じでした） 今回も詳細は説明しません。概要のみです。 作業内容 テーブル作成 Mentionsデータ保存用DBテーブルを作成する。 ソース作成 タイムライン取得のRubyスクリプトをコピーして修正する。 改修部分は、 DB読み込み部分 DB書き込み部分 タイムライン取得メソッドをMentions取得メソッドに変更 今回の作業はこれぐらいです。 OAuth認証部分もそのまま使用可能なので、スクリプト改修作業はすぐに終了しました。 ちなみにユーザタイムライン取得、Mentions取得で取得した項目は以下のとおりです。 ■ユーザタイムライン取得 user - name ( 名前 ) user - screen_name ( ユーザ名 ) id ( TweetステータスID ) text ( Tweet内容 ) source (...","categories": ["SNS"],
        "tags": ["MySQL","Ruby","Twitter"],
        "url": "/2011/07/28/28002008/",
        "teaser": null
      },{
        "title": "PHP - タイムゾーンエラー！",
        "excerpt":"当方の自宅サーバ(ScientificLinux6.0)で何か動きが重いことがあるのでログをチェックしてみると、 apacheのエラーログに以下のようなエラーが非常に大量に出力されていました。 ログローテーションしているけどファイルが2GB以上になっていて、Tripwireのファイル改ざんチェックでも引っかかっています。 [Sun Jul 03 03:55:52 2011] [error] [client 999.999.999.999] PHP Warning: strtotime(): It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting...","categories": ["サーバ構築"],
        "tags": ["PHP","ScientificLinux"],
        "url": "/2011/07/29/29002055/",
        "teaser": null
      },{
        "title": "Apache - PhusionPassenger関連のエラー？",
        "excerpt":"最近、自宅サーバ(ScientificLinux6.0)のApacheのエラーログを別の件で検証していたところ、以下のようなメッセージがいくつか出力されてるのを発見しました。 [ pid=15278 thr=3078633296 file=ext/apache2/Hooks.cpp:789 time=2011-07-10 09:49:52.554 ]: Either the vistor clicked on the 'Stop' button in the web browser, or the visitor's connection has stalled and couldn't receive the data that Apache is sending to it. As a result, you will probably see a 'Broken Pipe' error in this...","categories": ["サーバ構築"],
        "tags": ["Apache","Rails","Ruby","ScientificLinux"],
        "url": "/2011/07/31/31002036/",
        "teaser": null
      },{
        "title": "座右の銘！",
        "excerpt":"今日は、私が最近「座右の銘」にしている言葉をご紹介します。     それは先の小惑星探査機「はやぶさ」でプロジェクトマネージャーを務められたISAS/JAXA（独立行政法人宇宙航空研究開発機構・宇宙科学研究所）の教授の「川口淳一郎」博士のことばです。   以前、テレビ東京系「カンブリア宮殿」に出演された際にもおっしゃっていて、その時に感銘を受けました。   以下のような言葉です。   高い塔（技術開発）を建ててみなければ、新たな水平線は見えてこない。    自分なりに解釈してみると、   土台を固めることも大事だが、それで終わりにしてはいけない。 土台を固めたら遠くを望むための塔を建てることが必要である。 そして、その塔が建ったらさらに遠くを望むために もっと高い塔を建てることが必要である。 高い塔を建ててみなければ、新たな水平線は見えない。    ということでしょうか。 言い換えてみれば、   基礎を固めることも大事だが、それで終わりにしてはいけない。 基礎を固めたら、新たな目標を立てることが必要である。 そして、その目標を達成したらさらに新しい発見をするために 更なる目標を立てることが必要である。 高い目標を立ててみなければ、新たな展開はない。    ということでしょう。   理系人間の自分としては、大変すばらしい言葉だと感銘を受けました。 （この言葉を思い浮かべるときには、政府の事業仕分けの時のあのスパコン発言も思い浮かびますが・・・）   以上。   ","categories": ["その他"],
        "tags": [],
        "url": "/2011/08/01/01002050/",
        "teaser": null
      },{
        "title": "WordPress - 導入プラグイン！",
        "excerpt":"当方のWordPress(3.2.1)ブログに今現在導入しているプラグインの一覧です。 導入プラグイン Akismet WordPressにデフォルトでインストールされている言わずと知れたスパム対策プラグイン。 Broken Link Checker サイト内のリンク切れを自動的にチェックしてくれるプラグイン。 Counterize II アクセス解析が可能なアクセスカウンタープラグイン。 Delete-Revision 投稿リビジョン（記事の編集中に自動保存された変更履歴）を削除するためのプラグイン。 Hello Dolly WordPressにデフォルトでインストールされている管理パネルの右上に歌詞をランダムに表示するプラグイン。 Ktai Entry 携帯電話等からWordPressにメールで投稿するためのプラグイン。 Ktai Style WordPressブログを携帯で閲覧した際に軽量化した表示を行うためのプラグイン。 Post-Plugin Library 投稿記事に関連している記事を表示するためのプラグイン”Similar Post”の動作に必要なプラグイン。 Quick Cache サイト表示速度を高速化するためにキャッシュを作成するプラグイン。 Realtime Calendar カレンダーの土・日・祝日に色づけを行うプラグイン。 Similar Posts 投稿記事に関連している記事を表示するためのプラグイン。 Simple Tags WordPress標準のタグ機能を強化・拡張するプラグイン。 StatPress アクセス解析をするプラグイン。 SyntaxHighlighter Evolved ソースコードを美しく表示する”SyntaxHighlighter”プラグイン。 TinyMCE Advanced ビジュアルエディタをさらに便利にするプラグイン。 Twitter Follow Me Box...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2011/08/02/02002043/",
        "teaser": null
      },{
        "title": "ブログ - Ping送信先削除！",
        "excerpt":"今日も、たまたま自宅サーバのApacheのエラーログを見ていたら、以下のようなエラーが出力されているのを発見。     [error] [client 192.168.11.2] File does not exist: /var/www/html/xmlrpc.m    どうも、WordPressのブログを投稿時に発せしている模様。   調べてみると、Ping送信先が存在しないためエラーとなっているようです。   WordPressのPing送信先一覧をチェックしてみると確かにそのようなURLの記述がありました。      http://ping.ask.jp/xmlrpc.m   一覧から削除しました。   以上。   ","categories": ["ブログ"],
        "tags": ["Apache","WordPress"],
        "url": "/2011/08/03/03002001/",
        "teaser": null
      },{
        "title": "WindowsXP - DCOM システムエラー！",
        "excerpt":"最近、WindowsXPマシンを起動するたびに以下のメッセージボックスが表示されるようになった。 イベントビューアを見てみると案の定エラーになっている。 何個もエラーが表示されているがとりあえず、１つのエラーに注目してみた。 エラーのプロパティを見てみると、 「[IIS]DCOM でイベント ID 10005 が記録される」によると 本現象は、システムの起動時に、IIS Admin サービスが停止状態（無効）の場合、Print Spooler サービスの起動のタイミングで出力されます。これは、IIS Admin サービスと Print Spooler サービスが共にインストールされている環境の場合、Print Spooler サービスの起動時に IIS Admin サービスに依存するインターネット印刷の初期化が行われるために発生しています。また、IIS Admin サービスが停止状態（無効）の時に、インターネット インフォメーション サービス スナップ インが含まれる Microsoft 管理 コンソール（MMC）を起動した場合にも同様のイベントが記録されます。この場合、イベント ログのユーザー項には、その MMC を起動したユーザー名が記録されます。 だそうだ。 確かにサービスを確認してみると、IIS Admin サービスのスタートアップの種類が「無効」になっている。 解決策はIIS Admin サービスのスタートアップの種類を「自動」にするか、IIS Admin サービスをアンインストールするか、のようです。 あと、別で調べた結果、プリンタを使用しない環境ならPrint Spooler サービスを「無効」にするという方法もあるようです。 ※但し、プリンタは使用しない環境だがPDF作成ソフトを導入している場合、プリンタを使用している環境と考えます。 当方はIIS...","categories": ["PC_Tips"],
        "tags": ["Windows","レジストリ"],
        "url": "/2011/08/04/04002058/",
        "teaser": null
      },{
        "title": "WindowsXP - Kingsoftシステムエラー！",
        "excerpt":"昨日の「WindowsXP - DCOM システムエラー！」に引き続き、今日もWindowsXPでのシステムエラーについてです。     昨日のDCOMのエラーと同時に、Kingsoft系のシステムエラーが発生していました。 イベントビューアのプロパティを確認してみると、      となっていました。   「Kingsoft」と言えば、ウィルス対策・ファイアウォールのソフトです。 当方は以前導入していましたが、別のソフトに乗り換えたためアンインストールしたはずです。 それでもレジストリに残骸が残っているようです。                  「[無料・ウイルス対策＆セキュリティソフト｜サポート       Kingsoft Internet Security をレジストリから削除してアンインストールするには？](http://www.kingsoft.jp/support/security/kis_150.html “無料・ウイルス対策＆セキュリティソフト｜サポート       Kingsoft Internet Security をレジストリから削除してアンインストールするには？”)」を参考にレジストリを整理しました。           実際には、以下のことを行いました。   作業手順概要   ※レジストリ操作は大変危険を伴います。失敗するとマシンが起動しなくなります。必ずレジストリのバックアップを取ってから作業してください。      レジストリをバックアップする。   レジストリエディタを開く。（「regedit.exe」）   “kingsoft”という文字列を検索して削除可能なものは全て削除する。 ( 関連のフォルダも削除。 )   “C:\\Program Files”内の”Kingsoft”フォルダを削除。 ( 当方の場合、アンインストールしたはずなのにインストールフォルダが残っていたので。 )   マシン再起動。     これで、Kingsoftのシステムエラーはなくなりました。   ※レジストリ削除後に http://download.kingsoft.jp/kis2007/KISRemov.EXE を実行してみたら、という記述もありましたが、これを実行しなくても今のところは大丈夫そうです。   以上。   ","categories": ["PC_Tips"],
        "tags": ["Windows","レジストリ"],
        "url": "/2011/08/05/05002047/",
        "teaser": null
      },{
        "title": "MySQL - 最大接続数の確認・設定方法",
        "excerpt":"今日は、MySQLでの同時に接続可能な最大コネクション数の確認と設定方法についてです。 確認方法 MySQLサーバにログイン後、 mysql&gt; show variables like 'max_connections'; +-----------------+-------+ | Variable_name | Value | +-----------------+-------+ | max_connections | 151 | +-----------------+-------+ 設定方法（MySQLサーバ起動中に動的に反映させる設定） MySQLサーバにログイン後、 mysql&gt; set global max_connections=200; mysql&gt; show variables like 'max_connections'; +-----------------+-------+ | Variable_name | Value | +-----------------+-------+ | max_connections | 200 | +-----------------+-------+ 設定方法（MySQLサーバ起動時に反映させる設定） 「my.cnf」(Linuxの場合)、「my.ini」(Windowsの場合)の [mysqld] に以下のように記述する。 [mysqld]...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2011/08/06/06002000/",
        "teaser": null
      },{
        "title": "MySQL - 最大クエリサイズの確認・設定方法！",
        "excerpt":"今日は、MySQLで一度に発行できるクエリのサイズ確認・設定方法についてです。 確認方法 MySQLサーバにログイン後、 mysql&gt; show variables like 'max_allowed_packet'; +--------------------+---------+ | Variable_name | Value | +--------------------+---------+ | max_allowed_packet | 1048576 | +--------------------+---------+ ※ 1048576(B) = 1024(KB) = 1(MB) 設定方法（MySQLサーバ起動中動的変更） MySQLサーバにログイン後、 mysql&gt; set global max_allowed_packet=2097152; ※”2097152”の部分を”2048KB”, “2MB”では指定できない。 MySQLサーバに再ログイン後、 mysql&gt; show variables like 'max_allowed_packet'; +--------------------+---------+ | Variable_name | Value | +--------------------+---------+ | max_allowed_packet...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2011/08/07/07002046/",
        "teaser": null
      },{
        "title": "WordPress - PHP5.1.0以降はタイムゾーンの設定注意！",
        "excerpt":"PHP5.1.0以降では「date_default_timezone_set」関数で無効なパラメータを指定するとエラー（正確にはE_NOTICE（エラーを発しうる状況））となります。 （参照 → PHP: date_default_timezone_set - Manual） 最近のPHPなら大体5.1.0より新しいバージョンだと思います。(当方のサーバはPHP5.3.3) WordPressのアクセスカウンター用プラグイン「CounterizeII」でUTCとの9時間の時差による不具合を解消するために、「wp-settings.php」内で date_default_timezone_set( 'UTC+9' ); などとしている方も多いと思います。 しかしこれでは、何らかの処理で「wp-settings.php」が呼び出された際、以下のようにApacheのエラーログにエラーとして出力されるはずです。 [Fri Aug 05 20:27:36 2011] [error] [client 192.168.11.13] PHP Notice: date_default_timezone_set(): Timezone ID 'UTC+9' is invalid in /var/www/wordpress/wp-settings.php on line 37, referer: http://www.mk-mode.com/wordpress/wp-admin/edit.php 「PHP: サポートされるタイムゾーンのリスト - Manual」によると’UTC+9’は有効なパラメータの一覧に存在しません。 正しくは’Asia/Tokyo’です。 ですから、「wp-settings.php」内では、 date_default_timezone_set( 'Asia/Tokyo' ); と設定しなければなりません。 以前の設定のまま、PHPだけがバージョンアップされる状況では、ある種の罠とも言えます。 ただ、現時点ではエラーメッセージは出力されるものの動作は正常のようです。 が、あくまでも旧バージョンとの互換を考えての猶予期間によるものだと考えます。...","categories": ["ブログ"],
        "tags": ["PHP","WordPress"],
        "url": "/2011/08/08/08002033/",
        "teaser": null
      },{
        "title": "WordPress - プラグインにPHP5非推奨のコードがある！",
        "excerpt":"WordPressに関連して、Apacheのエラーログをチェックしてたときのこと。 こんなエラーが出力されていました。 [Sat Jul 09 12:24:57 2011] [error] [client 999.999.999.999] PHP Deprecated: Assigning the return value of new by reference is deprecated in /var/www/wordpress/wp-content/plugins/ktai_entry/Mail_mimeDecode.php on line 324, referer: /2011/05/31/31004536/ [Sat Jul 09 12:24:57 2011] [error] [client 999.999.999.999] PHP Deprecated: Assigning the return value of new by reference is deprecated in...","categories": ["ブログ"],
        "tags": ["PHP","WordPress"],
        "url": "/2011/08/09/09002044/",
        "teaser": null
      },{
        "title": "網戸の使い方！",
        "excerpt":"夏になると網戸にして過ごすことが多いと思います。   しかし、網戸にしているにもかかわらず、外から蚊が入ってきて困ることはありませんか？ 網戸の位置を確認してみてください。 網戸の位置が左右逆になってはいませんか？     通常、ガラスサッシ（窓ガラス）は右側が手前、左側が外側に配置されているはす。      そこで、網戸を左側に付けて左側のガラスサッシを途中まで開けると、以下のようになります。      お近くのガラスサッシで確認してみてもわかるように隙間ができます。 ガラスサッシ・網戸のふちにゴム状の隙間を埋めるためのヒダが付いているものでも隙間はできてしまいます。 これでは蚊のような小さな昆虫は室内に侵入可能です。   網戸を左側にした場合でも、ガラスサッシを目いっぱい開けた場合は隙間が無くなる場合もありますが、大抵は少なからず隙間はできます。   通常、網戸は次のように右側に付けるものです。      これだと隙間はできません。   室内の配置によりどうしても左側しか窓が開けられない場合は仕方ありませんが、そうでなければ、網戸を右側にして右側の窓を開けるようにしてみてはどうでしょうか？   ※もちろん網戸が破れていたり、元々隙間が大きかったりする場合は、満足する結果は得られないかもしれません。   以上。   ","categories": ["その他"],
        "tags": [],
        "url": "/2011/08/10/10002030/",
        "teaser": null
      },{
        "title": "Ruby - PrawnでPDF作成！",
        "excerpt":"今日はRubyでPDFを出力するテストをしてみました。 調べてみると色々と方法があるようですが、一番資料があって理解しやすそうだったGemパッケージ「Prawn」を使用する方法をとりました。 以下の作業手順はWindowsXP上のRubyでのものですが、Linuxサーバでも同様の手順で可能です。 以下が手順です。 作業手順 前提条件 OS は WindowsXP SP3 ( Linuxでも同様 ) Ruby は 1.9.2-p290 がインストールされている。 １．Prawn のインストール コマンドプロンプトで以下のようにしてGemパッケージ「Prawn」をでインストールする。 gem install prawn ２．フォントインストール IPAフォントのダウンロード || OSS iPediaからIPAフォント(ttfファイル)をダウンロードし、これから作成するttfファイルをアクセス可能な場所へ配置する。 当方は、とりあえず「IPA明朝」「IPA P明朝」「IPAゴシック」「IPA Pゴシック」の４書体パックをダウンロードし・解凍し、全部をRubyスクリプト作成予定のフォルダへ配置しました。（実際は必要なフォントのみでよい） ３．コーディング Rubyスクリプトのコーディングを行います。 “Prawn::Document.generate・・・”というコーディング方法と”Prawn::Document.new・・・”というインスタンス化する方法とあるようです。 参考のために両方の記述例を以下に掲載します。 ●test_pdf_1.rb ( “Prawn::Document.generate・・・” ) # -*- coding:utf-8 -*- begin require 'rubygems' rescue LoadError end require...","categories": ["プログラミング"],
        "tags": ["Ruby","Windows"],
        "url": "/2011/08/11/11002006/",
        "teaser": null
      },{
        "title": "WordPress - 半角ハイフン文字化け対応！",
        "excerpt":"当方、WordPressブログでタイトルを記述する際、文字列と文字列を「半角スペースで挟んだ半角ハイフン」で結合したような形式にすることが多いです。（この記事のタイトルもそうです） 現在「UTF-8」で作成しているホームページに「半角スペースで挟んだ半角ハイフン」を含んだタイトルを表示させた際は問題ないのですが、ブログのタイトルをTwitterで投稿すると「半角スペースで挟んだ半角ハイフン」の部分が「？」表示になっていることに気づきました。 「UTF-8」でないであろう携帯アプリで確認した時に気づきました。 そう言えば、以前「Shift-JIS」で作成したホームページにブログ記事から「半角スペースで挟んだ半角ハイフン」を含んだタイトルを表示させていた時、半角スペースで挟んだ半角ハイフンが「？」表示なっていたことも思い出しました。 最近はその現象を目にすることがなかったので気にもしていませんでしたが、気づいてしまった以上修正せずにおられません。 調べた結果、原因がはっきりわかりました。 WordPress自体がそのような特殊（？）な文字列を変換しているようです。 三連の半角ハイフンを1つの半角ハイフンに変換したりもしていました。 以下、対応方法です。 対応方法 「formatting.php」の修正 WordPressインストールフォルダの「wp-includes/formatting.php」というファイルの53行目あたり(WordPress3.2.1の場合)を以下のように編集する。 （「–」と「—」を「-」に置換するように修正） ↓変更前↓ $static_characters = array_merge(array('---', ' -- ', '--', ' - ', 'xn&amp;#8211;', '...', '``', '\\'\\'', ' (tm)'), $cockney); $static_replacements = array_merge(array('&amp;#8212;', ' &amp;#8212; ', '&amp;#8211;', ' &amp;#8211; ', 'xn--', '&amp;#8230;', $opening_quote, $closing_quote, ' &amp;#8482;'), $cockneyreplace); ↓変更後↓ $static_characters...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2011/08/12/12002055/",
        "teaser": null
      },{
        "title": "Ruby - Sanitize Gemパッケージのインストール！",
        "excerpt":"RubyでHTMLタグを含む文字列からHTMLタグを除去するためには「Sanitize」というGemパッケージが必要です。 当方、WindowsXPではすんなりインストールできたのですが、Linux側では少してこずったので、記録として残しておきます。 作業記録 「Sanitize」GemパッケージにはHTMLパーサーの「Nokogiri」Gemパッケージが必要なので、「Nokogiri」Gemパッケージをインストール作業から始めます。 １．「Nokogiri」Gemパッケージインストール 以下のように「Nokogiri」Gemパッケージをインストールしてみるが、エラーが発生。 # gem install nokogiri Building native extensions. This could take a while... ERROR: Error installing nokogiri: ERROR: Failed to build gem native extension. /usr/local/bin/ruby extconf.rb checking for libxml/parser.h... no ----- libxml2 is missing. please visit http://nokogiri.org/tutorials/installing_nokogiri.html for help with installing dependencies. ----- *** extconf.rb...","categories": ["プログラミング"],
        "tags": ["Linux","Ruby"],
        "url": "/2011/08/13/13002005/",
        "teaser": null
      },{
        "title": "MySQL - オーバーヘッドの最適化！",
        "excerpt":"WordPressをしばらく使用していると、時々MySQLが原因で動作が重くなることがあります。 その主な原因は、DBへのINSERTやDELETEが頻繁に行われることによるフラグメンテーションの増加です。 今日はその解決方法についてです。 解決方法 その１．phpMyAdminによるテーブル最適化 過去記事「MySQL − オーバーヘッドの削除！」を参照。 その２．SQL文による最適化 MySQLサーバにログイン後、以下のコマンドを実行する。 （参照 → MySQL :: MySQL 5.1 リファレンスマニュアル :: 12.5.2.5 OPTIMIZE TABLE 構文） OPTIMIZE TABLE wp_options; ※上記はwordpressデータベースのwp_optionsテーブルの例です。 ※この方法はストレージエンジン「MyISAM」、「InnoDB」のテーブルに有効です。 その３．コマンドラインからの最適化 シェルコマンドラインで以下のコマンドを実行する。 （参照 → MySQL :: MySQL 5.1 リファレンスマニュアル :: 7.11 mysqlcheck - テーブル メンテナンスと修復プログラム） mysqlcheck -o -r -u root -phogehoge wordpress ※上記はMySQLサーバにrootでログインし、wordpressデータベースの全テーブルを最適化・修復する例です。...","categories": ["サーバ構築"],
        "tags": ["MySQL","ScientificLinux"],
        "url": "/2011/08/14/14002020/",
        "teaser": null
      },{
        "title": "Ruby - PrawnでTweetリストPDF作成！",
        "excerpt":"少し前に「Ruby - PrawnでPDF作成！」で公開したとおり、Rubyで「Pwarn」Gemパッケージを使用してPDFを作成する方法を紹介しました。 今回はPDF作成処理を実用化してみました。 独学で習得したものなので、あまり綺麗ではありませんがソース(Linux版)を公開します。 参考になれば幸いです。 前提条件 Linux（当方はScientificLinux6.0）を使用している。 LinuxにRuby（当方はRuby1.9.2-p290）がインストールされている。 LinuxにMySQLがインストールされていて、使用するテーブルが作成されている。 Ruby Gemパッケージ「mysql2」がインストールされている。 Ruby Gemパッケージ「sanitize」がインストールされている。 （過去記事「Ruby - Sanitize Gemパッケージのインストール！」も参照） Ruby Gemパッケージ「prawn」がインストールされている。 Rubyスクリプト MySQLに保存している自分のTwitterのツイートを一覧にするPDF作成スクリプトです。 Windows版でもほぼ同じですが、MySQLのGemパッケージは異なりますしコーディングも若干異なります。 「IPA P明朝」というフォントが必要です。 Rubyスクリプト、フォントファイルの配置場所は”/home/src”ディレクトリ配下です。 引数を指定せずに実行すると、前月１日から前月末日の1ヶ月分を取得します。 引数を２つ（ YYYYMMDD, YYYYMMMDD ）指定すると第１引数から第２引数までの期間のデータを取得します。 出来上がるPDFのファイル名は”TweetList_YYYYMMDD-YYYYMMDD.pdf”で保存先は”/home/src/twitter”です。 ファイル名：twitter_make_pdf_tweet.rb # -*- coding: utf-8 -*- #------------------------------------- # 引数 : 無し # or # 第１：99999999(取得開始年月日(YYYYMMDD)) # 第２：99999999(取得終了年月日(YYYYMMDD)) #-------------------------------------...","categories": ["SNS","プログラミング"],
        "tags": ["Linux","MySQL","Ruby","ScientificLinux","Twitter"],
        "url": "/2011/08/15/15002017/",
        "teaser": null
      },{
        "title": "JavaScript - ブラウザ別にCSSを読み込む！",
        "excerpt":"今日はHTMLソース内でCSSファイルを読み込む際にブラウザによって読み込むCSSファイルを変える方法についてです。 通常、HTMLレベルではIF文を使用してInternetExplorerかそれ以外しかブラウザは判定できません。 しかし、JavaScriptのjQueryライブラリを使用すれば、その他のブラウザも判定可能です。 以前はjQuery.browserでブラウザ判定が可能でしたが、jQuery1.3以降は非推奨となっています。 jQuery.supportの各プロパティがブラウザによって戻り値が異なるのでその特性を活用して判定することになります。 jQuery.supportについて jQuery.support - プロパティ一覧 （戻り値：全てBoolean型） プロパティ説明 boxModelブラウザが、W3C CSS Box Model に基づいてページをレンダリングしている場合はtrueを返します。 （IE6もしくは7のQuirksモードでは、falseを返します。） このプロパティは、DOM要素の読み込みが終了し、準備が完了するまではnullを返します。 checkClonecloneNode()を使用して要素を複製する場合、要素のチェック状態も含めコピーする場合はtrueを返します。 （WebKitの場合はチェック状態がコピーされないため、falseを返します。） checkOnチェックボックスの値が指定されていない場合、デフォルト値が\"on\"である場合はtrueを返します。 （WebKitの場合、デフォルト値は\"\"です。） cssFloatCSSのFloatの値をcssFloatプロパティで取得できる場合にはtrueを返します。 （IEの一部のバージョンでは、styleFloatで取得するため、falseを返す場合があります。） deleteExpando拡張した要素の属性を、delete演算子で削除できる場合はtrueを返します。 （IEではfalseを返します。） hrefNormalizedgetAttribute()メソッドを使用して href 属性値を取得する場合、href 属性値をそのまま返す場合はtrueを返します。 （IEの一部のバージョンでは、hrefの値を完全修飾するため、falseを返す場合があります。） htmlSerializeinnerHTMLを使用して値を取得する場合、シリアライズされた値を返す場合はtrueを返します。 （IEではfalseを返します。） leadingWhitespaceinnerHTMLを使用して値を取得する場合、先頭の空白をそのまま返す場合はtrueを返します。 （IE6-8ではfalseを返します。） noCloneEvent要素がコピーされる場合に、要素が持つイベントハンドラをコピーしない場合はtrueを返します。 （IEではfalseを返します。） objectAllgetElementsByTagName('*')メソッドを呼び出した場合に、全ての子孫要素を返す場合はtrueを返します。 （IE7/8ではfalseを返します。） opacityopacityプロパティで透明度を指定できる場合はtrueを返します。 （IEでは、alpha filtersで指定するためfalseを返します。） scriptEvalappendChild()やcreateTextNode()といった標準的なメソッドを使用して要素を追加した場合に、インラインスクリプトを自動的に評価して実行する場合はtrueを返します。 （IEではfalseを返します。IEでは .text を使用すれば、インラインスクリプトを自動的に評価して実行します。） style要素のstyle属性を、getAttribute('style')で取得できる場合はtrueを返します。 （IEではfalseを返します。IEでは .cssText を使用して、要素のstyle属性を取得します。）...","categories": ["Webサイト"],
        "tags": ["HTML","JavaScript"],
        "url": "/2011/08/16/16002055/",
        "teaser": null
      },{
        "title": "jQuery版LightBox導入！",
        "excerpt":"先日、当方のWebサイト・ブログサイトでページ下部へスクロースした際にページトップへ戻れるようボタンを設置しました。その際JavaScriptライブラリ「jQuery」を導入しました。 この影響で、Webサイトで今まで使用していた画像をポップアップしてスライドショーを可能にする「LightBox」（言わば、prototype版）が動かなくなりました。 どうやら、「jQuery」は「prototype」とは共存できないようです。 そこで、jQuery版のLightBoxが存在することを知ったので、早速導入しました。 （ちなみに、WordPressブログの方はデフォルトでjQuery対応のため、問題ありませんでした。） 導入記録 前提条件 導入先はRuby on Railsで作成したWebサイト。 （他の環境の場合でも、若干の変更で対応可能です。） JavaScriptのライブラリjQueryを導入済み。 （過去記事参照「Ruby on Rails - jQueryを導入！」） １．ソースダウンロード こちら「jQuery lightBox plugin」からZIPファイルをダウンロードし解凍しておく。 ２．ファイル配置 解凍後、cssフォルダ内のファイル「jquery.lightbox-0.5.css」をRailsアプリのstylesheetsフォルダに配置。 imagesフォルダ内のgifファイルをRailsアプリのimagesフォルダに配置。 jsフォルダ内の「jquery.js」以外のjsファイルをRailsアプリのjavascriptsフォルダに配置。 （jQuery未導入なら「jquery.js」もRailsアプリのjavascriptsフォルダに配置） ３．JavaScript, CSSファイルの読み込み LightBox用のJavaScript, CSSファイルを読み込むため、HTMLソースの&lt;head&gt;タグ内に以下の記述を追加する。 ※jQuery導入済みの場合です。jQuery未導入なら「jquery.js」の読み込みも必要です。 ※以下はRailsでのJavaScript, CSSファイルの読み込み方法です。通常のHTML等なら読み替えてください。 &lt;head&gt; ・・・　途中省略　・・・ &lt;script type=\"text/javascript\"&gt;// &lt;![CDATA[ $(document).ready(function() { $('a[rel*=lightbox]').lightBox(); }); // ]]&gt;&lt;/script&gt; ・・・　途中省略　・・・ &lt;/head&gt; ４．HTMLソース編集 HTMLソース内の画像リンクにLightBoxを割り当てるため、タグにrel属性を設定します。 これでページ内の画像がグループ化され「PREV」・「NEXT」ボタンでのスライドショーが可能になります。 逆にスライドショーから画像を外すにはrel属性を設定しなければよいです。...","categories": ["ブログ","Webサイト"],
        "tags": ["CSS","HTML","JavaScript","Rails"],
        "url": "/2011/08/17/17002022/",
        "teaser": null
      },{
        "title": "VBScript - 不快指数計算！",
        "excerpt":"最近、節電で不快に感じることが多いので「不快指数」を計算する超簡単なVBScriptアプリを作成してみました。 （WSHが動作可能なWindowsで使用可能です。大抵はデフォルトで使用可能だと思います。） さらに、簡単なので「Visual C#」でGUIアプリも作成しました。（文末参照） 不快指数の計算式は一般的には以下のとおりです。（別の計算式も存在します） 「不快指数」= 0.81 * 温度 + 0.01 * 湿度 * ( 0.99 * 温度 - 14.3 ) + 46.3 そして、不快指数と体感の関係は以下のようになっています。 不快指数 体感 ～55 寒い 55～60 肌寒い 60～65 何も感じない 65～70 快い 70～75 暑くない 75～80 やや暑い 80～85 暑くて汗が出る 85～ 暑くてたまらない 作業手順 1. VBScriptファイルの作成 例として以下の内容でファイル（ファイル名：fukai.vbs）を作成します。 Set StdIn = Wscript.StdIn...","categories": ["PC_Tips","プログラミング"],
        "tags": ["VBScript","VisualC++"],
        "url": "/2011/08/19/19002027/",
        "teaser": null
      },{
        "title": "WordPress - カテゴリ別投稿数をaタグ内に表示させる！",
        "excerpt":"WordPressでカテゴリリストに各カテゴリ毎の投稿数を表示させる場合、通常はwp_list_categoriesテンプレートタグのパラメータに’show_count=1’を指定すると思います。 （参照 → テンプレートタグ/wp list categories - WordPress Codex 日本語版 ） しかし、これでは件数がaタグの外側に表示されてしまい、カテゴリ名の部分以外はクリックできません。 この状態で、aタグのCSSに’display:block;’を指定するとカテゴリ名だけに適用され、件数が次の行に流れてしまいます。 当ブログサイト構築当初にこの問題を把握していましたが、当時は他のことも考えていて細かなことまで頭が回っていませんでした。 最近改めて精査しなおしたところ、解決策が見つかり対処できました。 （参照 → WordPress - フォーラム - カテゴリーの投稿数を出力する際、Aタグの内側に表示させたい。 ） 以下がその記録です。 作業記録 「functions.php」編集 WordPressのthemeフォルダ内の「functions.php」に以下の記述を追加する。 （「wp-includes」フォルダ内の「functions.php」ではありません） add_filter( 'wp_list_categories', 'my_list_categories', 10, 2 ); function my_list_categories( $output, $args ) { $output = preg_replace('/\\s*\\((\\d+)\\)/',' ($1)',$output); return $output; } 要は、&lt;/a&gt;の後ろの記述を正規表現を利用して&lt;/a&gt;の前に移動させているだけです。 （関数「add_filter」についてはこちらを参照） CSS編集...","categories": ["ブログ"],
        "tags": ["CSS","WordPress"],
        "url": "/2011/08/20/20002055/",
        "teaser": null
      },{
        "title": "Excel製の数学文書をLATEXで整形！",
        "excerpt":"以前、ロト６の当選データを分析するために、「単回帰曲線」の解法、「重回帰式」の解法を調べたときに今後のためにとExcelを使用してPDF化していました。 （「単回帰曲線」の解法、「重回帰式」の解法は、大学の数学科時代に使用していた統計関係の書籍を読みあさってまとめました。） しかし、Excelで作成したので、見た目がいかにもExcelって感じで専門的（数学的）な感じがしませんでした。 そこで、よく学術論文、卒論等で使用する電子組版ソフト「TEX」の派生版「LATEX」を使用して書き直してみました。自分で言うのもなんですが相当綺麗になりました。     「TEX」や「LATEX」がどんなものか？とか「TEX」や「LATEX」の使用方法について小生は疎いので、簡単に説明できません。ネット上で調べると多数引っかかります。ご容赦ください。   以下で「Excel」と「LATEX」の違いをご確認いただけます。      「単回帰曲線の求め方」 - Excel版   「単回帰曲線の求め方」 - LATEX版   「重回帰式の求め方」 - Excel版   「重回帰式の求め方」 - LATEX版   ※一部、偏微分時の符号が誤っていたので「LATEX」版では修正しています。   「LATEX」を使いこなせるようになりたいと思いましたが、現在は研究職でも学生でもないので使いときに使う程度です。   ちなみに、上記の計算方法を調べるためには、２・３年前に購入した以下の書籍も参考にしました。   以上。   ","categories": ["PC_Tips","数学"],
        "tags": ["Excel","TeX"],
        "url": "/2011/08/21/21002012/",
        "teaser": null
      },{
        "title": "jQuery - 文字に影をつける！",
        "excerpt":"通常、Webサイトで文字に影（ぼかし）を付ける際、CSSの”text-shadow”を使用すると簡単に実現できます。 しかし、この”text-shadow”は現在W3C勧告のCSS2.1では非推奨のため、W3Cチェックでエラーとなります。 （以前のCSS2.0や将来（ずいぶん先）勧告される予定のCSS3.0では大丈夫のようです） そこで、CSSを使用せずにJavaScriptの「jQuery」ライブラリを使用して文字に影（ぼかし）を付ける方法を発見しましたので、記録として残しておきたいと思います。 作業記録 前提条件 WebサイトはRuby on Railsで作成されている。 （記述を変更することでRuby on Railsでなくても対応可能です） 使用するのは「jQuery」ドロップシャドウプラグイン「Drop Shadow Effect」です。 1. Drop Shadow Effect の入手 Drop Shadow Examplesから「jquery.dropshadow.js」をダウンロードします。 2. jsファイルの配置 ダウンロードした「jquery.dropshadow.js」を適切な場所に配置します。 当方の場合、Ruby on Railsなので「public/javascripts」フォルダ配下に配置しました。 3. HTMLソース編集 HTMLソースの内に以下のように記述（「jquery.dropshadow.js」読み込み部分、ドロップシャドウ適用部分）を追加します。 --( 中略 )-- &lt;%= javascript_include_tag :defaults %&gt; &lt;%= javascript_include_tag \"jquery.dropshadow.js\" %&gt; &lt;script type=\"text/javascript\"&gt; $(function(){ $('#header h1').dropShadow({ left :...","categories": ["ブログ","Webサイト"],
        "tags": ["CSS","HTML","JavaScript","PHP","Rails"],
        "url": "/2011/08/22/22002014/",
        "teaser": null
      },{
        "title": "Ruby on Rails - アメダスデータ取得！",
        "excerpt":"Ruby on Railsで気象庁のアメダスデータのページから気温・湿度等の最新のアメダスデータを取得してみました。 以下がその記録です 作業記録 前提条件 ・Ruby on Railsの環境が構築済みであること。（Windows, Linux, BSD等OSは問わない） ・取得するアメダスデータは「島根県松江市」。 （データの存在する都市であれば、URL内のコードを変更することで「島根県松江市」以外も対応可能） ・最新のデータといっても、1時間毎のデータです。 1. Gemfile編集 “hpricot”をインストールするため、Railsアプリフォルダ内の”Gemfile”の最終行に以下の記述を追加する。 gem 'hpricot' 2. hpricotのインストール コマンドラインでRailsアプリのディレクトリへ移動し、以下のコマンドで”hpricot”をインストールする。 bundle install 3. ソース作成 “app/controllers”ディレクトリ内の”application_controller.rb”に以下の内容でメソッドを追加する。 # アメダス取得 def get_amedas require 'hpricot' require 'open-uri' # データ取得先URL url = \"http://www.jma.go.jp/jp/amedas_h/today-68132.html?groupCode=51&amp;areaCode=212\" # HTML取得 html = Hpricot( open( url ) ) array...","categories": ["プログラミング","Webサイト"],
        "tags": ["HTML","Rails","Ruby"],
        "url": "/2011/08/24/24002005/",
        "teaser": null
      },{
        "title": "WordPress - CounterizeIIから人気記事リスト取得関数作成！",
        "excerpt":"今更ながら、アクセス数の多い記事の一覧を表示させて見ました。 最初は人気記事リスト取得用のプラグインを探して試用してみましたが、プラグイン導入時からのアクセスを集計しているように見えるし、こんなことごときにプラグインなんてと思い、既に導入済みのアクセス集計プラグイン「CounterizeII」を利用できないかと考えてみました。 【2011/12/26追記】下記の方法は「投稿日時ベース」となっております。「アクセス日時ベース」で集計するには「WordPress - 人気記事一覧修正！」をご参照ください。 「CounterizeII」導入時からのアクセスデータがMySQLに書き込まれているわけですから、それを利用しない手はありません。意外と簡単に実現可能でした。 テーマフォルダ内にある関数ファイル「functions.php」に関数を追加作成して、それを該当の場所で呼び出せばよいのです。（”wp-includes”フォルダ内の「functions.php」ではありません） 作業記録 1. SQL実行テスト 関数をいきなり作成する前に、前もってSQLを作成してテスト見る必要があります。 phpMyAdmin等でSQL文を作成・実行して、希望通りの結果が得られるか確認します。 今回は投稿記事データが記録されている「wp_posts」とページアクセス状況が記録されている「wp_Counterize_Pages」テーブルをJOINして「投稿ID」・「投稿タイトル」・「アクセス数」を取得します。 以下がテスト用SQLです。（過去30日間のアクセス数の多い上位10件） SELECT B.postID, A.post_title, B.CNT FROM `wp_posts` AS A INNER JOIN ( SELECT postID, SUM( count ) AS cnt FROM `wp_Counterize_Pages` GROUP BY postID ) AS B ON A.ID = B.postID WHERE B.postID IS NOT NULL AND...","categories": ["ブログ"],
        "tags": ["PHP","WordPress"],
        "url": "/2011/08/25/25002055/",
        "teaser": null
      },{
        "title": "WordPress - CounterizeIIから記事毎のアクセス数取得関数作成！",
        "excerpt":"昨日はアクセス解析プラグイン「CounterizeII」のデータから人気記事の一覧を取得する関数を作成しました。（参照「WordPress - CounterizeIIから人気記事リスト取得関数作成！」） 今日はその応用で各記事の総アクセス数を取得する関数を作成してみました。昨日よりも簡単。 以下に記録しておきます。 作業記録 1. SQL実行テスト 関数をいきなり作成する前に、前もってSQLを作成してテスト見る必要があります。 phpMyAdmin等でSQL文を作成・実行して、希望通りの結果が得られるか確認します。 今回はページアクセス状況が記録されている「wp_Counterize_Pages」テーブルから特定の「投稿ID」の「アクセス数」を取得します。 以下がテスト用SQLです。 SELECT SUM( count ) FROM `wp_Counterize_Pages` WHERE postID = 4767 GROUP BY postID 【2011/09/14修正】wp_Counterize_Pagesには同じ”postID”でも複数レコードが存在するため、同じ”postID”は合算するように修正。 2. 関数作成 上記のSQLを関数化します。投稿IDを引数で指定します。 WordPressの使用中のテーマ内の「functions.php」に以下のように記述を追加します。 function get_pageviews( $postID ) { global $wpdb; $sql = \"SELECT SUM( count ) \" . \" FROM `wp_Counterize_Pages` \" ....","categories": ["ブログ"],
        "tags": ["PHP","WordPress"],
        "url": "/2011/08/26/26002013/",
        "teaser": null
      },{
        "title": "Ruby + MySQL で郵便番号データ取り込み！",
        "excerpt":"Ruby on Rails 上で郵便番号を検索できるシステムを作成することを思いつき、まずは日本郵便のサイトからダウンロードしたCSVファイルを Ruby + MySQL で取り込むことを考えてみました。 ※日本郵便のサイトによると、郵便番号データは「郵便事業株式会社は著作権を主張しません。自由に配布していただいて結構です。」となっております。 詳細は説明しませんが、全体の作業の流れは以下のとおり。 予め、こちらからCSVファイルをダウンロード・解凍を手動で行っておきます。 CSVファイル名は “KEN_ALL.CSV” 固定。 CSVファイルは「読み仮名データの促音・拗音を小書きで表記しないもの」と「読み仮名データの促音・拗音を小書きで表記するもの」のどちらにも対応可能。 （ローマ字データや事業所の個別番号データも存在しますが、現時点では対応しません。） MySQLにデータベース・テーブルを作成。 後述のテーブルスクリプトを参照。 Rubyスクリプトを実行する。 後述のRubyスクリプトを参照。 参考までに当方が作成したテーブルのテーブルスクリプト、Rubyスクリプトを掲載しておきます。 当然ながら、Ruby + MySQL が動作する環境が必要です。（文字コード等の調整が必要な場合もあります） 詳細についてはソースの随所にコメントを記述していますので、Rubyソースをご覧ください。そんなに複雑な処理は行っていなませんので、ご理解いただけるかと思います。 テーブルスクリプト CSVファイルの全カラムを取得するようテーブルを作成しています。 ストレージエンジンは高速性を重視し “MyISAM” を指定しています。 現時点では、インデックスは未確定です。 ( 検索条件により変更する可能性有り ) 環境によっては、MySQL自体の設定のチューニングが必要になるかもしれません。 postal_codes.sql CREATE TABLE IF NOT EXISTS `postal_codes` ( `id` int(11) NOT NULL AUTO_INCREMENT, `public_code`...","categories": ["プログラミング"],
        "tags": ["MySQL","Rails","Ruby"],
        "url": "/2011/08/28/28002011/",
        "teaser": null
      },{
        "title": "Ruby on Rails - 郵便番号検索システム作成！",
        "excerpt":"昨日は、Ruby + MySQL で日本郵便提供の郵便番号CSVデータを取り込む作業を行いました。（参照 → Ruby + MySQL で郵便番号データ取り込み！）   今回は、MySQL に取り込んだデータを Ruby on Rails で検索できるようにしてみました。     過去に作成した各種Railsアプリを参考にしたので、意外と簡単にできました。   詳細はここでは書ききれないので紹介しません。あしからず。   ※ちなみに、      別途、圧縮ファイルをダウンロード・解凍するRubyスクリプト   既存のCSVファイルタイムスタンプが異なればMySQL登録するRubyスクリプト（参照 → Ruby + MySQL で郵便番号データ取り込み！）を実行するシェルスクリプト   を作成し、cron で毎日チェックするようにしています。（ですから常に最新のデータのハズ）   この検索システムは当方のWebサイトにも公開しています。ご確認ください。   【2011/11/29 追記】 但し、郵便番号データの仕様を見ても分かるように、町域の文字列が長い場合は複数行に分割されたり、同じ郵便番号でも複数の町域が存在したり（その逆もあり）しますが、これらには非対応です。  今のところ、個人で使用するには支障が無いからです。  時間があれば対応します。   以上。   ","categories": ["プログラミング","Webサイト"],
        "tags": ["MySQL","Rails","Ruby"],
        "url": "/2011/08/29/29002026/",
        "teaser": null
      },{
        "title": "MySQL - SELECT結果をCSV出力！",
        "excerpt":"今日は、MySQLでSELECT文を発行した際の結果をCSVファイルに出力する方法についてです。 と言っても、SQL文を作成する際に、少しばかし記述を追加するだけです。 記述例 Windows上でテーブル”hoge”の全レコード・全カラムのデータを”D:\\Work\\hoge.csv”に出力する例です。 コマンドラインからMySQLにログインするか、GUIツール「phpMyAdmin」にrootでログインして実行してください。 SELECT * INTO OUTFILE \"D:\\\\Work\\\\hoge.csv\" FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' FROM hoge \"D:\\\\Work\\\\hoge.csv\" はWindowsでの記述例です。”\"はエスケープ処理が必要です。サーバがLinuxサーバならファイルの作成先もLinuxサーバ側にします。 TERMINATED BY ',' は区切り文字の設定です。 ENCLOSED BY '\"' は文字列カラムをダブルクォーテーションでくくる設定です。 LINES TERMINATED BY '\\n' はレコード単位で意図的に改行していますが、デフォルトで改行されるので無くても大丈夫だと思います。 ダブルクォーテーションでくくる必要も無く、意図的に改行もしないのであれば、 SELECT * INTO OUTFILE \"D:\\\\Work\\\\hoge.csv\" FIELDS TERMINATED BY ',' FROM...","categories": ["PC_Tips"],
        "tags": ["MySQL"],
        "url": "/2011/08/31/31002049/",
        "teaser": null
      },{
        "title": "Ruby - cronで「invalid byte sequence in US-ASCII」例外発生！",
        "excerpt":"LinuxでRubyスクリプトを普通に実行してもエラーとならないのに、このRubyスクリプトをcron登録して実行すると以下のような例外が発生することがあります。 invalid byte sequence in US-ASCII RubyでHTMLを解析・編集するライブラリ 「 hpricot 」 を使用している場合にcronで実行すると 「 US-ASCII 」 として処理しようとして例外が発生しているようです。 （ Ruby1.9でのみで発生。Ruby1.8では発生しない模様。 ） 【 2012.11.14 追記 】 この現象は、Rails アプリから Ruby スクリプトを実行した際にも発生する場合があります。 この場合も、以下の 3 については同様に対応が可能です。 調査してみたところ、解決方法が３つ見つかりました。 解決方法 元のRubyスクリプトがUTF-8エンコードされていることが前提です。 （Shift-JISエンコード等については未確認です） 1. Rubyバージョンを1.8に下げる この例外はRuby1.9系で発生し、Ruby1.8系では発生しません。どうやらRuby1.9からは文字コードの扱いが変わったようです。 1.9系のRubyをインストールしている場合は、1.8系にインストールし直す。 2. cron内で文字コードを指定する cronでの実行時に文字コードの部分で例外が発生しているので、cron内に文字コードを指定する記述を追加する。 LC_CTYPE=ja_JP.utf8 LANG=ja_JP.utf8 10 0 * * * root /usr/local/bin/ruby /home/src/hoge.rb...","categories": ["プログラミング"],
        "tags": ["Linux","Ruby"],
        "url": "/2011/09/01/01002024/",
        "teaser": null
      },{
        "title": "2011年8月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"当WordPressブログではアクセス解析に「CounterizeiII」を一部カスタマイズして使用していますが、月ごとのOS（バージョン別）・ブラウザ（バージョン別）の集計ができません。 そこで、月ごとのOS（バージョン別）・ブラウザ（バージョン別）の集計を行うSQLを作成しました。 単純にOS別（バージョン別）・ブラウザ別（バージョン別）に集計するには１つのテーブルを参照すればよいのですが、そこには日付情報がありませんので、月別の集計ができません。 元の wp_Counterize テーブルの日付情報を紐付けしないといけません。 結局以下のようなSQLを作成しました。 SQL アクセスをOS別に集計するSQL SELECT B.osName, COUNT(*), ( COUNT(*) / E.cnt ) * 100 FROM `wp_Counterize` AS A INNER JOIN `wp_Counterize_UserAgents` AS B ON A.agentID = B.agentID, ( SELECT COUNT(*) AS cnt FROM `wp_Counterize` AS C INNER JOIN `wp_Counterize_UserAgents` AS D ON C.agentID = D.agentID...","categories": ["ブログ"],
        "tags": ["MySQL","WordPress"],
        "url": "/2011/09/02/02002014/",
        "teaser": null
      },{
        "title": "VisualBasic - CSVをTABLEタグに変換！",
        "excerpt":"CSVファイルをTABLEタグに簡単に変換できるよう、少し前に Ruby で処理を作ってみました。 これはこれで使えるのですが、コマンドラインからCSVファイルを引数に指定して実行し、出力ファイルを開かないと結果を確認できませんでした。   もっと簡単にできないものかと考え、「Microsoft Visual Basic 2008 Express Edition」でGUIアプリ（Windows専用）を作成してみました。 かなり便利になりました。     ▼こんなのです▼      使用方法      アプリを起動後、上段テキストボックスにCSV形式でデータを入力するか、もしくは、CSVファイルをドラッグ＆ドロップする。   「変換」ボタンをクリックする。   「クリップボードへCOPY」のクリックでクリップボードへコピーされるので、希望の場所に貼り付ける。   注意      個人使用が目的で作成したものですので、列幅や色の設定等細かな属性設定はできません。   単純に１行ずつ &lt;tr&gt;・&lt;/tr&gt; で囲み、カンマが有ればそこで区切って &lt;td&gt;・&lt;/td&gt; で囲んでいるだけです。     当方は、ブログに表を貼り付けたい場合によく使用しています。 表のレイアウトはCSSに任せています。   もしよろしければ、使ってみてください。ダウンロードはこちら。   以上。   ","categories": ["PC_Tips"],
        "tags": ["HTML","VisualBasic","Windows"],
        "url": "/2011/09/04/04002010/",
        "teaser": null
      },{
        "title": "Ruby on Rails - 地方公共団体一覧作成！",
        "excerpt":"Ruby + MySQL で 「 財団法人地方自治情報センター 」 から全国の地方公共団体（都道府県・区市町村）のコード・住所等の一覧を取得し、当方の Ruby on Rails で構築している Webサイト に表示させてみました。     Ruby でWebサイト上の HTML から情報を取得するには 「 hpricot 」 ライブラリを使用しています。 その他は以前に作成したことのある Rails アプリのコピペで対応しました。   別にこんな一覧など当方が公開しなくてもよいのですが、「 自分で色々とやってみたい 」 性格なので。。。   ちなみに、公開しているデータは出所を明確にすれば転載してもかまわないと 「 財団法人地方自治情報センター 」 のサイトに記載されていました。   ただ閲覧するだけですが、もしよかったらご覧ください。      mk-mode SITE : 地方公共団体一覧   ※データは Linux サーバで cron により毎日最新に更新するようにしています。   以上。   ","categories": ["Webサイト"],
        "tags": ["MySQL","Rails","Ruby"],
        "url": "/2011/09/06/06002033/",
        "teaser": null
      },{
        "title": "Ruby - 旧暦カレンダー作成スクリプト！",
        "excerpt":"自作の「旧暦カレンダー作成Rubyスクリプト」によりあらかじめ MySQL にカレンダーを作成し、そのデータを Ruby on Rails 製のホームページ上で公開しています。 この時に作成した「旧暦カレンダー作成Rubyスクリプト」は作成対象範囲を年で指定し年単位でカレンダーデータを作成していました。 今回はそのRubyスクリプトを流用して、コマンドラインから日付・オプションを指定して実行すると、その日付に対する各種カレンダー情報を出力するRubyスクリプトを作成しました。（１週間くらい前に） 概要をまとめましたので公開します。 コマンドラインで動作しますので、バッチファイル等で利用できるかと思います。 2000行オーバーのスクリプトなので、このページでは表示できませんが、ソースをダウンロードできるようにしておきます。興味のある方はどうぞ。 旧暦カレンダーRubyスクリプト ※当方作成のRubyスクリプトの他に、旧暦カレンダー計算部分で参考にした高野英明氏作成のjgAWKスクリプトも同梱。 使用方法 動作確認について 当Rubyスクリプトは WindowsXP(SP3) にインストールした Ruby1.9.2-p290 で動作確認しています。 別途Gemパッケージ等の導入も不要です。 他の環境（Linux等）で実行させるには文字コードの変更が必要になる場合があります。 使用方法 ダウンロードした圧縮ファイルを解凍後、コマンドプロンプトで”calendar.rb”を実行するだけです。 &gt;ruby calendar.rb [オプション] [日付] オプションについて オプションは半角小文字の英字で指定します。 オプションを指定しない場合は取得可能な全項目を出力します。 オプションを複数指定する場合は間を空けずに文字を記述します。 オプションに指定できるものは以下のとおりです。 オプション 出力項目 a 曜日 b 休日 c ユリウス通日 d 干支 e 旧暦 f 六曜 g 二十四節気...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2011/09/10/10002053/",
        "teaser": null
      },{
        "title": "旧暦カレンダー作成実行ファイル！",
        "excerpt":"前回、Rubyで旧暦カレンダー情報をコマンドラインで表示させるスクリプトを作成しました。 Ruby - 旧暦カレンダー作成スクリプト！ Rubyの動く環境限定でしたが、今回は同じロジックを使用して Microsoft Visual C# 2010 Express Edition で実行(EXE)ファイルを作成しました。 VC#ソースは公開しませんが、実行(EXE)ファイルをダウンロードできるようにしておきます。興味のある方はどうぞ。 Ruby - 旧暦カレンダー実行ファイル 使用方法 動作確認について アプリ作成・動作確認は WindowsXP SP3 + .NET Framework 4.0 Client Profile で行いました。 特別な処理は盛り込んでいませんので、.NET Framework は 2.0, 3.0, 3.5, 3.5 Client Profle, 4.0 でも動作すると思います。 使用方法 ダウンロードした圧縮ファイルを解凍後、コマンドプロンプトで”Calendar.exe”を実行するだけです。 &gt;Calendar [オプション] [日付] オプションについて オプションは半角小文字の英字で指定します。 オプションを指定しない場合は取得可能な全項目を出力します。 オプションを複数指定する場合は間を空けずに文字を記述します。 オプションに指定できるものは以下のとおりです。 オプション...","categories": ["プログラミング"],
        "tags": ["VisualC＃"],
        "url": "/2011/09/12/12002027/",
        "teaser": null
      },{
        "title": "Ruby - 日・月の出・入・南中スクリプト作成！",
        "excerpt":"先日は「旧暦カレンダー作成Rubyスクリプト」を紹介しました。 Ruby - 旧暦カレンダー作成スクリプト！ 今回は、日の出・入の時刻・方位角、日の南中の時刻・高度、月の出・入の時刻・方位角、月の南中の時刻・高度を計算するRubyスクリプトを作成してみました。 コマンドラインで日付、緯度、経度、標高を指定して実行すると計算結果を出力します。( 時刻は日本時間(UTC+9)固定 ) 【2016-06-09 追記】 RubyGems ライブラリ mk_calendar - RubyGems.org（or komasaru/mk_calendar - GitHub） を作成しました。 今後はできればこちらのライブラリの方をご活用ください。 【追記ここまで】 1500行ほどのスクリプトなので、このページでは表示できませんが、ソースをダウンロードできるようにしておきます。興味のある方はどうぞ。 日・月の出・入・南中Rubyスクリプト 使用方法 動作確認について 当Rubyスクリプトは WindowsXP(SP3) にインストールした Ruby1.9.2-p290 で動作確認しています。 別途Gemパッケージ等の導入も不要です。 他の環境（Linux等）で実行させるには文字コードの変更が必要になる場合があります。 使用方法 ダウンロードした圧縮ファイルを解凍後、コマンドプロンプトで引数を指定して”sun_moon.rb”を実行するだけです。 &gt;ruby sun_moon.rb 第１引数 第２引数 第３引数 第４引数 [ 第５引数 ] 引数について 日付・緯度・経度・標高は必須です。オプションは省略すると全情報を出力します。 オプションを省略した場合の出力順は下記の第５引数の説明に記載のアルファベット順となります。 オプションを指定した場合は指定した順に出力します。 引数 : 第１...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2011/09/15/15002042/",
        "teaser": null
      },{
        "title": "Ruby on Rails - 日・月の出・入・南中を計算・表示！",
        "excerpt":"昨日は、Ruby 単独で日・月の出・入時刻・方位角、日・月の南中時刻・高度を算出するスクリプトを紹介しました。      Ruby - 日・月の出・入・南中スクリプト作成！     今日は、そのスクリプトを殆どそのまま（若干の調整のみ）で当方のRuby on Rails製のホームページに応用しました。   昨日のRubyスクリプトをRailsアプリのlibフォルダに突っ込みます。 そして、コントーラ部分で require, include して値を取得し、ヘッダ画像部分へ表示させました。   出来栄えは、こちら「 mk-mode SITE 」で確認いただけます。   ちなみに、島根県松江市（島根県庁）の位置情報（北緯35度28分20秒、東経133度03分02秒）固定です。     そして、同じライブラリを使用し、各都道府県庁所在地や任意の緯度・経度・標高で計算させるページも作成しました。      mk-mode SITE : 日・月の出・入・南中計算   ※1900～2099年を月単位で計算・表示できます。   以上。   ","categories": ["プログラミング","Webサイト"],
        "tags": ["Rails","Ruby"],
        "url": "/2011/09/16/16002000/",
        "teaser": null
      },{
        "title": "日・月の出・入・南中計算実行ファイル！",
        "excerpt":"先日は「日・月の出・入・南中計算Rubyスクリプト」を紹介しました。 Ruby - 日・月の出・入・南中スクリプト作成！ そのRubyスクリプトを Microsoft Visual C# Express Edition に移行して実行(EXE)ファイルを作成してみました。 コマンドラインで日付、緯度、経度、標高を指定して実行すると計算結果を出力します。( 時刻は日本時間(UTC+9)固定 ) ソースは公開しませんが、実行(EXE)ファイルをダウンロードできるようにしておきます。興味のある方はどうぞ。 日・月の出・入・南中実行ファイル 使用方法 動作確認について アプリ作成・動作確認は WindowsXP SP3 + .NET Framework 4.0 Client Profile で行いました。 特別な処理は盛り込んでいませんので、.NET Framework は 2.0, 3.0, 3.5, 3.5 Client Profle, 4.0 でも動作すると思います。 使用方法 ダウンロードした圧縮ファイルを解凍後、コマンドプロンプトで引数を指定して”SunMoon.exe”を実行するだけです。 &gt;SunMoon 第１引数 第２引数 第３引数 第４引数 [ 第５引数 ] 引数について...","categories": ["プログラミング"],
        "tags": ["VisualC＃"],
        "url": "/2011/09/18/18002020/",
        "teaser": null
      },{
        "title": "日数計算の方法！",
        "excerpt":"Ａ年Ｂ月Ｃ日はＤ年Ｅ月Ｆ日から何日経過しているのか計算したくなることがよくあると思います。 簡単なものなら表計算ソフトで関数を使用して計算すると思います。 今日は表計算ソフト等を使用せずに計算する方法を紹介します。 それは、２つの日付（グレゴリオ暦）の「修正ユリウス日」というものを計算し、それらの差を求めるというものです。 （グレゴリオ暦とは現在の日付表現方法のことです） 「ユリウス日」とは世界標準時の紀元前4713年1月1日正午からの経過日数で、日付や時刻等の暦関連の計算では必ず使用します。 「ユリウス日」では数字が大きすぎるし、正午から計算日数のため午前０時だと端数の “.5” が付いてしまうので、「ユリウス通日」から 2400000.5日 を引いた「修正ユリウス日」というものを使用します。 そこで、「修正ユリウス日」の計算方法ですが、幸いなことに計算式があります。 「フリーゲルの公式」というものです。グレゴリオ暦の西暦年・月・日から「修正ユリウス日」が計算できます。 フリーゲルの公式 「修正ユリウス日」 = floor( 365.25y ) 　　　　　　　　　 + floor( y / 400 ) 　　　　　　　　　 - floor( y / 100 ) 　　　　　　　　　 + floor( 30.59 ( m - 2 ) ) 　　　　　　　　　 + d 　　　　　　　　　 - 678912 ※...","categories": ["その他"],
        "tags": ["カレンダー"],
        "url": "/2011/09/22/22002000/",
        "teaser": null
      },{
        "title": "Windows - カレンダーGUIアプリ完成！",
        "excerpt":"これまで、Rubyスクリプト版やコマンドラインExeアプリを作成してきたカレンダー等のソフト。 Ruby - 旧暦カレンダー作成スクリプト！ 旧暦カレンダー作成実行ファイル！ Ruby - 日・月の出・入・南中スクリプト作成！ 日・月の出・入・南中計算実行ファイル！ 今回は、Windows .NET Framework で動作するGUIアプリを作成しました。 初版なのでバグ等あるかもしれませんし、さらに機能を追加するかもしれませんが、とりあえず公開してみます。 ダウンロード → カレンダーアプリ (Ver.1.0.0.0) ※その他のアプリ等も置いています。[ mk-mode SITE : アーカイブ ] アプリ説明 アプリに添付している”Readme.txt”を掲載します。 ====================================================================== 【ソ フ ト名】 MK-Calendar 【バージョン】 Ver1.0.0.0 【登録名】 MKCalendar.lzh 【著作権者】 mk-mode.com 【作成方法】 lhaで解凍 【ソフトウェア種別】 フリーソフト ====================================================================== 【ソフト紹介】 Microsoft Visual C# Express Edition で作成したカンレンダーアプリです。 日めくりカレンダー・月間カレンダー・年間カレンダーの表示が可能です。...","categories": ["プログラミング"],
        "tags": ["VisualC＃","Windows"],
        "url": "/2011/09/26/26002040/",
        "teaser": null
      },{
        "title": "NetBeans 7.0.1 - Ruby on Railsプラグインをインストール！",
        "excerpt":"当方は、現在 Ruby とか Ruby on Rails で開発する際に「NetBeans」を使用しています。「Aptana」とかJava系開発に使用していた「Eclipse」とかも使用してみましたが、あまりに重いのでそれらでの開発は断念しました。 Ruby 単独なら「RDE」でもよいのですが、Ruby に特化してしまうのが嫌でこちらも今は殆ど使用していません。 デフォルトで Java・PHP・C/C++・Ruby の開発が可能だった「NetBeans 6.9.1」ですが、「NetBeans 7.0.1」になって、Ruby がはずされています。 しかし、有志によって「Ruby on Rails」プラグインが開発されていますので、それをインストールすれば「NetBeans 7.0.1」でも Ruby・Ruby on Rails が今までどおり開発できるようになります。 以下にインストール方法を記録しておきます。 インストール方法 NetBeans 7.0.1をダウンロードして普通にインストール。 （今回は「すべて」バージョンをダウンロード） メニューから [ツール］-［プラグイン］を選択。 ［設定］タブを選択。 ［追加］ボタンをクリック。 ［名前］に「Final」（適当な保存名）と入力。 ［URL］に「http://dlc.sun.com.edgesuite.net/netbeans/updates/7.0/uc/final/distribution/catalog.xml.gz」と入力。 ［了解］ボタンをクリック。 ［使用可能なプラグイン］タブを選択。 ［カタログを再読み込み］ボタンをクリック。 ［Ruby and Rails］をチェック。 ［インストール］ボタンをクリック。 ［次へ］ボタンをクリック。 ［すべてのライセンス契約条件に同意する］をチェック。 ［インストール］ボタンをクリック。 「NetBeans」を再起動。 参考サイト NetBeans 7.0にRuby on...","categories": ["プログラミング"],
        "tags": ["Rails","Ruby"],
        "url": "/2011/09/28/28002002/",
        "teaser": null
      },{
        "title": "旧暦の月日から六曜を求める方法！",
        "excerpt":"旧暦の考え方の中に「六曜」というものがあります。 「先勝・友引・先負・仏滅・大安・赤口」というおなじみのものです。 各六曜の意味は以下のとおりです。 六曜 読み(一例) 簡単な意味 備考 先勝 せんがち 急ぐことは良い 午前吉、午後凶 友引 ともびき 祝い事は良い、葬式は忌む 朝夕吉、正午凶 先負 せんまけ 控えめに平静が良い 午前凶、午後吉 仏滅 ぶつめつ すべて悪い、葬式・法事は良い 終日凶 大安 たいあん すべて良い、特に婚礼に良い 終日吉 赤口 しゃっこう 祝い事に悪い 朝夕凶、正午吉 この六曜は旧暦の月と日がわかれば、簡単に計算可能です。 旧暦の各月の１日の六曜が決まっていてあとは月末で繰り返すのです。 各月１日の六曜 月 六曜 １・７月 先勝 ２・８月 友引 ３・９月 先負 ４・１０月 仏滅 ５・１１月 大安 ６・１２月 赤口 ですから結局のところ、旧暦の月と日をたした数を６で割った余りによって六曜を決定することができます。 (...","categories": ["その他"],
        "tags": ["カレンダー"],
        "url": "/2011/09/30/30002016/",
        "teaser": null
      },{
        "title": "2011年9月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"10月になったので、先月9月分の当ブログアクセス状況を公開します。 一発でMySQLを集計してHTMLタグを付けるRubyスクリプトを作成したので、今回からは簡単に記事にできるようになりました。 月が変わって20分後の10月1日0時20分（いつも投稿は0時20分に予約投稿してるので）の投稿に間に合いました。 （そこまで、慌てなくてもいいのですが・・・） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 17,689 86.2668 Mac OS 1,332 6.4960 Linux 762 3.7162 unknown 474 2.3116 Ubuntu Linux 94 0.4584 FreeBSD 45 0.2195 Fedora Linux 33 0.1609 Debian GNU/Linux 26 0.1268 PalmOS 22 0.1073 RedHat Linux 15 0.0732 Solaris 6 0.0293 SuSE Linux 5...","categories": ["ブログ"],
        "tags": ["MySQL","WordPress"],
        "url": "/2011/10/01/01002027/",
        "teaser": null
      },{
        "title": "WordPress - アクセス状況をRuby on Railsで公開！",
        "excerpt":"最近、毎月あたまにブログのアクセス状況を公開するようになって先日も2011年9月分について公開しました。   今回は同じようなロジックで、当方の Ruby on Rails 製のホームページで WordPress ブログのアクセス状況を閲覧できるようにしてみました。     と言っても、「OS別」・「OS・バージョン別」・「ブラウザ別」・「ブラウザ・バージョン別」に任意の期間を指定してPageViewを集計したものを表示しているだけです。      OS別   OS・バージョン別   ブラウザ別   ブラウザ・バージョン別   ※表示可能期間は当ブログをWordPressで正式に公開開始した2009年01月からです。   セレクトボックスの onchange でサブミットしているので重く感じるかもしれません。。。 ※他人にはあまり興味がないことだと思って、楽な作り方をしました。   もし良かったご覧ください。   以上。   ","categories": ["ブログ"],
        "tags": ["Rails","Ruby"],
        "url": "/2011/10/03/03002029/",
        "teaser": null
      },{
        "title": "Ruby - Windowsイベントログ取得！",
        "excerpt":"うちのメインマシン（WindowsXP SP3）では、毎朝タスクでマシンを休止状態から自動復帰し、”eventquery.vbs”を組み込んだバッチファイルによりイベントログをバックアップ（日付毎に「application」「security」「system」のCSVファイルを作成）しています。 ※”eventquery.vbs” とはWindowsXPに標準で準備されているイベントログ操作用のVBスクリプトで “%systemroot%\\system32” にあります。 Ruby でも Windows イベントログが取れることを耳にしたので、試してみました。 以下にイベントログを取得して表示してみる手順を記録しておきます。 作業手順 前提条件 ・作業OSは、WindowsXP SP3 です。 ・使用したRubyは、Ruby-1.9.2-p290 です。 ・試したイベントログは「system」です。 １．Gemsパッケージ「win32/eventlog」のインストール コマンドプロンプトで以下のようにしてGemsパッケージ「win32/eventlog」をインストールします。 &gt;gem install win32-eventlog ※win32-api, windows-api, windows-pr もインストールされます。 ２．Gemsパッケージ「win32/eventlog」の一部修正 「win32/eventlog」をインストールしたデフォルトの状態では、”eventlog.rb”の14行目で invalid byte sequence in US-ASCII (ArgumentError) とエラーとなってしまいます。 そこで”eventlog.rb”の14行目の直前に以下のような記述を追加します。 class String # Return the portion of the string up to the...","categories": ["PC_Tips","プログラミング"],
        "tags": ["Ruby","Windows"],
        "url": "/2011/10/05/05002054/",
        "teaser": null
      },{
        "title": "Ruby on Rails - Windowsイベントログ閲覧！",
        "excerpt":"先日は、RubyでWindowsイベントログの取得を試みました。      Ruby - Windowsイベントログ取得！   さらに、バッチファイルで毎日MySQLサーバへバックアップするようにしました。   そして、今回は Ruby on Rails で閲覧できるようにしました。     既存のほかのRailsアプリを流用しての作成なのですぐに完成しました。         これは当方の管理用なので公開はしていません。   Windowsのイベントビューアで閲覧できますが、過去のログは消去されます。（保存容量は設定できますが）   ログは採っておきたい主義なので、試しに Ruby とか Rails で弄ってみたしだいです。   ちなみに今回の作業で、      “type” は MySQL のカラム名に使用できるものの、Rails の ActiveRecord では予約語に当たるためエラーとなる。   ということがわかりました。   以上。   ","categories": ["PC_Tips","プログラミング"],
        "tags": ["MySQL","Rails","Ruby"],
        "url": "/2011/10/07/07002004/",
        "teaser": null
      },{
        "title": "2038年問題！",
        "excerpt":"** 更新履歴 ** [2015-01-03 14:00] ソーススクリプト修正、Gist アップロード [2020-01-30 20:00] ソーススクリプト整形 こんばんは。 今日は「2038年問題」についてです。 一般に C 言語では、 UNIX の仕様に基づいて時刻を 1970年01月01日00時00分00秒（UTC（世界標準時））からの経過秒数で表しています。そのうちの多くが、時刻を記録する領域として32ビット（4バイト）の符号付き整数を使用しています。すなわち、二進数で32桁分（10進数で2の32乗）の数が用意されていることになります。 但し、符号付き整数では、二進数の最上位（下位から32桁目）が 0 の場合は正の数、 1 の場合は負の数として扱う。このため、正の数として扱える上限の数は、 二進数 : 01111111 11111111 11111111 11111111 十進数 : 2,147,483,647 ( = 2の31乗 - 1 ) となる。 つまり、1970年01月01日00時00分00秒 から 21億4748万3647秒 経過した 2038年1月19日3時14分07秒（UTC）、日本時間（JST）では 同12時14分07秒 までの時刻は、正の数として正常に処理することが可能だが、これを1秒でも超えると最上位が 1 の負の数となり、プログラムが誤作動する。 こういうこと。 ：...","categories": ["PC_Tips","プログラミング"],
        "tags": ["Ruby"],
        "url": "/2011/10/10/10002027/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOXデータ読み込み！",
        "excerpt":"Windows でメールを扱う場合、メールの保存形式は UNIX MBOX 形式にすることがあると思います。 当方も Thunderbird で UNIX MBOX 形式を使用しています。 この UNIX MBOX形式のデータを MySQL に保存してみたくて、まずは Rubyで 読み込んでみようと考えました。 Ruby1.8系であれば “mailread” や “tmail” ライブラリを使用するみたいですが、Ruby1.9系では標準では使用できないみたいです。 そこで “mail” ライブラリはどうかと思い調べてみましたが、メールの送受信系はこれで出来ますが、UNIX MBOX 形式データの解析については README を読んでも記述がなかったため出来ないと判断。 そこで “mailread” のソースを眺めてみたところ、数十行のソースだったし簡単に埋め込めそうだと思い、直接該当のRubyスクリプトに埋め込んでみました。 参考までに以下にRubyスクリプトを掲載します。 ※試験的に作成したものなので、細部で不具合は出るかと思います。なんとなく流れがわかればと・・・ UNIX MBOX データ読み込みRubyスクリプト 処理の流れ 存在するメールボックスの一覧を取得。 各メールボックス中のMBOXファイルの一覧を取得。 各MBOXファイルを読み込む。 “From “で始まる行を１メールの先頭と判断。 最初の空行でメールヘッダの終了を判断。 各メールヘッダはハッシュに格納。 以降、１メールの最後までをメールボディと判断。 ※メールヘッダの属性値は１つずつしか保存できないので、”Received”のように複数あるものは最後の１件分が保存されます。（当方、今のところ”Received”は保存対象にしていないので問題はない） ※multipart や...","categories": ["プログラミング"],
        "tags": ["Mail","MySQL","Ruby"],
        "url": "/2011/10/12/12002046/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX メールヘッダ「Date」検証！",
        "excerpt":"先日は、Ruby でメールの UNIX MBOX データの読み込みを試してみました。 Ruby - UNIX MBOXデータ読み込み！ 今後、この読み込んだデータを MySQL に保存することを考えていますが、何万件とあるデータを一気に取り込もうとすると少なからず不正なデータ存在します。 そこで、少しずつ Ruby でデータの検証をしてみようと考えました。 今回は、メールヘッダの「Date」属性を検証してみました。 このメールヘッダの「Date」は「RFC 5322」（以前の「RFC 2822」・「RFC 822」）に準拠した書式でなければなりません。 Fri, 14 Oct 2011 23:59:59 +0900 というような書式です。 参考サイト RFC 5322 RFC 2822 RFC 822 ※「RFC 822」の改訂版が「RFC 2822」で「RFC 2822」の改訂版が「RFC 5322」ですが、今でも「RFC 822」や「RFC 2822」に準拠した記述をしているものがあるようです。（実際、多数あります） ※「RFC」の詳細はWeb等で検索してみてください。 補足すると、 曜日部分 “Fri, “ はなくてもよい。 秒部分 “:59” はなくてもよい。...","categories": ["プログラミング"],
        "tags": ["Mail","MySQL","Ruby"],
        "url": "/2011/10/14/14002049/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX メールヘッダ「From」検証！",
        "excerpt":"先日は、Ruby でメールの UNIX MBOX データのの Date 属性を検証してみました。 Ruby - UNIX MBOX メールヘッダ「Date」検証！ 引き続いて今回は、Ruby でメールヘッダの「From」属性を検証してみました。 From属性にはメールの送信者（実質的には作成者）がメールアドレス＋αで設定されているはずです。 大抵は１件が設定されていますが、作成者は１人とは限らず、複数設定されているケースもまれにあります。 複数設定は正常なので問題ありませんが、Fromが設定されていないものがあります。 また、設定されるメールアドレスは「Date」同様「RFC 5322」（「RFC 2822」・「RFC 822」) に準拠した書式でなければなりません。 参考サイト RFC 5322 ※RFCの詳細はWeb等で検索してみてください。 この「From」属性のメールアドレスが「RFC 5322」に準拠した書式となっているかどうかを「正規表現」を使用してチェックしてみようと思いましたが、正確にチェックするには非常に複雑なので、ある程度のチェックにとどめました。 大抵はプロバイダ側で制限しているので問題になるようなアドレスは設定されないはずです。 正確に正規表現でチェックしようと思ったら、こちら「メールアドレスの正規表現」を参考にされるとよいと思います。（あまりの長さにびっくりすると思います） 今回は以下のような「From」属性のグループ分けとこれらにマッチしないもの、「From」属性が設定されていないものをチェックしてみます。 0 : \"xxxx\" &lt;xxx@xxx.xxx&gt; 1 : \"\" &lt;xxx@xxx.xxx&gt; 2 : xxxx &lt;xxx@xxx.xxx&gt; 3 : &lt;xxx@xxx.xxx&gt; 4 : \"xxxx\" &lt;xxx@xxx.xxx&gt;...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/16/16002036/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX メールヘッダ・アドレス系属性の検証！",
        "excerpt":"前回は、UNIX MBOX メールデータ中のヘッダ「From」属性を Ruby で検証してみました。 Ruby - UNIX MBOX メールヘッダ「From」検証！ 今回は、同じ Ruby スクリプトを少しだけ改良して、「To」・「Cc」・「Reply-to」・「Sender」・「Return-Path」属性を検証しました。 「To」・「Cc」・「Reply-to」属性は「From」属性同様複数がカンマで区切られて設定される可能性があるもの、「Sender」・「Return-Path」は複数設定はされないもの、です。 Ruby - UNIX MBOX メールヘッダ「From」検証！で紹介した Ruby スクリプトを多少修正すれば対応可能ですので、今回はもう掲載しません。 参考までに、当方の UNIX MBOX メールデータ（61,665件）を検証した結果を掲載します。 それぞれの属性が設定されているか、どのような書式で設定されているか、不正なものはないかを検証しています。 To属性 １メールに複数設定されている可能性がある属性です。 全件数 = 65592 非設定 = 444 \"xxxx\" &lt;xxx@xxx.xxx&gt; = 906 \"\" &lt;xxx@xxx.xxx&gt; = 0 xxxx &lt;xxx@xxx.xxx&gt; = 441 &lt;xxx@xxx.xxx&gt; = 7006 \"xxxx\"...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/17/17002009/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX メールヘッダ・Message-ID系属性の検証！",
        "excerpt":"前回は、UNIX MBOX メールデータ中のヘッダのうち、メールアドレス系の属性を Ruby で検証してみました。 Ruby - UNIX MBOX メールヘッダ・アドレス系属性の検証！ 今回は、同じ Ruby スクリプトをまた少しだけ改良して、「Message-ID」系の属性「Message-ID」・「In-Reply-To」・「References」を検証しました。 「Message-ID」は世界に１つだけのメールの識別番号です。 「Message-ID」・「In-Reply-To」属性は１つのメールに複数設定はされないもの、「References」は複数設定される可能性があるもの、です。 Ruby - UNIX MBOX メールヘッダ「From」検証！で紹介した Ruby スクリプトを多少修正すれば対応可能ですので、今回はもうスクリプト全体は掲載しません。 参考までに、当方の UNIX MBOX メールデータ（61,665件）を検証した結果を掲載します。 それぞれの属性が設定されているか、どのような書式で設定されているか、不正なものはないかを検証しています。 使用した正規表現 メールアドレス系の属性を検証する際に使用した正規表現を多少修正しています。 RFC 5322 に厳密に準拠している訳ではありませんが、これで充分対応可能です。 &lt; と &gt; で囲まれたメールアドレス様の書式です。 ※こちらも参照 → RFC 5322 - Internet Message Format /^&lt;([\\w+-=?^-~$%]+(?:\\.[\\w+-=?^-~$%]+)* @[-\\w]+(?:\\.[-\\w]+)*(?:\\.[a-zA-Z])*)&gt;$/ ※実際は改行なしの１行で記述。 Message-ID属性 １メールに複数設定されることはない属性です。 全件数...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/18/18002059/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX メールヘッダ・Mime-Version属性の検証！",
        "excerpt":"最近行っている Ruby による UNIX MBOX メールデータ中のヘッダ検証。 以下を参照。 Ruby - UNIX MBOXデータ読み込み！ Ruby - UNIX MBOX メールヘッダ「Date」検証！ Ruby - UNIX MBOX メールヘッダ「From」検証！ Ruby - UNIX MBOX メールヘッダ・アドレス系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Message-ID系属性の検証！ 今回は、「Mime-Version」属性を検証しました。 「Mime-Version」はメールの本文が対応している「MIME（Multipurpose Internet Mail Extensions）」のバージョン番号です。 と言っても、現在は “1.0” しかありません。 また、書式は「RFC 2045」に準拠していなければなりません。 RFC 2045 - Multipurpose Internet Mail Extensions (MIME) Part...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/19/19002002/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX メールヘッダ・Content-Type属性の検証！",
        "excerpt":"今日は Ruby で UNIX MBOX メールデータ中のメールヘッダ「Content-Type」属性を検証してみました。 以下の過去記事も参照。 Ruby - UNIX MBOXデータ読み込み！ Ruby - UNIX MBOX メールヘッダ「Date」検証！ Ruby - UNIX MBOX メールヘッダ「From」検証！ Ruby - UNIX MBOX メールヘッダ・アドレス系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Message-ID系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Mime-Version属性の検証！ RFC 2045 によると書式は以下のようになっていないといけないようです。 type/subytype(; attribute=value) そして、”type” は “text”, “image”, “audio”, “video”, “application”, “message”, “multipart”...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/21/21002031/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX メールヘッダ・Content-Transfer-Encoding属性の検証！",
        "excerpt":"今日は Ruby で UNIX MBOX メールデータ中のメールヘッダ「Content-Transfer-Encoding」属性を検証してみました。 以下の過去記事も参照。 Ruby - UNIX MBOXデータ読み込み！ Ruby - UNIX MBOX メールヘッダ「Date」検証！ Ruby - UNIX MBOX メールヘッダ「From」検証！ Ruby - UNIX MBOX メールヘッダ・アドレス系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Message-ID系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Mime-Version属性の検証！ Ruby - UNIX MBOX メールヘッダ・Content-Type属性の検証！ この「Content-Transfer-Encoding」属性とは、どのような方法でエンコードされたかを表しているものです。 RFC 2045 に準拠していないといけません。 RFC 2045 - Multipurpose Internet...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/22/22002038/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX メールヘッダ・User-Agent, X-Mailer属性の検証！",
        "excerpt":"今日は Ruby で UNIX MBOX メールデータ中のメールヘッダ「User-Agent」属性と「X-Mailer」属性を検証してみました。 以下の過去記事も参照。 Ruby - UNIX MBOXデータ読み込み！ Ruby - UNIX MBOX メールヘッダ「Date」検証！ Ruby - UNIX MBOX メールヘッダ「From」検証！ Ruby - UNIX MBOX メールヘッダ・アドレス系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Message-ID系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Mime-Version属性の検証！ Ruby - UNIX MBOX メールヘッダ・Content-Type属性の検証！ Ruby - UNIX MBOX メールヘッダ・Content-Transfer-Encoding属性の検証！ 「User-Agent」属性とは RFC 2616 でルール化されているもので、MUA（Mail...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/23/23002031/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX メールヘッダ・Subjcet属性の検証！",
        "excerpt":"今日は Ruby で UNIX MBOX メールデータ中のメールヘッダ「Subjcet」属性を検証してみました。 以下の過去記事も参照。 Ruby - UNIX MBOXデータ読み込み！ Ruby - UNIX MBOX メールヘッダ「Date」検証！ Ruby - UNIX MBOX メールヘッダ「From」検証！ Ruby - UNIX MBOX メールヘッダ・アドレス系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Message-ID系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Mime-Version属性の検証！ Ruby - UNIX MBOX メールヘッダ・Content-Type属性の検証！ Ruby - UNIX MBOX メールヘッダ・Content-Transfer-Encoding属性の検証！ Ruby - UNIX MBOX...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/24/24002038/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX メールヘッダ・Received属性の検証！",
        "excerpt":"今日は Ruby で UNIX MBOX メールデータ中で一番肝のメールヘッダ「Received」属性を検証してみました。 以下の過去記事も参照。 Ruby - UNIX MBOXデータ読み込み！ Ruby - UNIX MBOX メールヘッダ「Date」検証！ Ruby - UNIX MBOX メールヘッダ「From」検証！ Ruby - UNIX MBOX メールヘッダ・アドレス系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Message-ID系属性の検証！ Ruby - UNIX MBOX メールヘッダ・Mime-Version属性の検証！ Ruby - UNIX MBOX メールヘッダ・Content-Type属性の検証！ Ruby - UNIX MBOX メールヘッダ・Content-Transfer-Encoding属性の検証！ Ruby - UNIX MBOX...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/26/26002048/",
        "teaser": null
      },{
        "title": "Ruby - 地球上の2点間の距離をほぼ正確に計算！",
        "excerpt":"最近、 Ruby での UNIX MBOX メールヘッダの検証をやってきましたが、今回は気分転換に違った話題です。 それは「Rubyを使って地球上の2点間の距離を出来るだけ正確に計算してみよう」というものです。 ※きっかけは、地元の原子力発電所と自宅の距離を正確に知りたかったから。 ご存知のように地球は完全な球体ではありません。 赤道方向の半径が極方向の半径より若干大きいです。 地球が完全な球体なら、高校数学程度の知識で計算できます。 ちなみに、球面三角法による算出方法は以下のとおり。 正確に計算するには、まず正確な赤道半径・極半径が必要になります。 測地学 - Wikipedia、測地系 - Wikipedia によると以下の3種類の測地系（測量の前提になる考え方）というものが存在し、それぞれに長半径（赤道半径）・短半径（極半径）が設定されています。 測地系 長半径（赤道半径） 短半径（極半径） Bessel 6377397.155 m 6356079.000000 m GRS 80 6378137.000 m 6356752.314140 m WGS 84 6378137.000 m 6356752.314245 m これらの測地系のうち、「GRS 80」と「WGS 84」が歴史も新しく精度も良いようで、中でも「GRS 80」が一番精度が良いようです。 （と言っても、それぞれの誤差はわずかなものです） 次に、計算方法ですが一番正確な方法は国土地理院のサイトに掲載の方法のような気がします。 距離と方位角の計算 計算式 しかし、非常に複雑で簡単に実現できそうな気がしません。 そこで、さらに調べてみると「ヒュベニの公式」というものが存在することが判明。 カシミール...","categories": ["プログラミング","数学","その他"],
        "tags": ["Ruby"],
        "url": "/2011/10/28/28002050/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX ヘッダ集計！",
        "excerpt":"また、 Ruby での UNIX MBOX メールヘッダについてです。 そろそろ、ヘッダ部分ではなくて本文部分について検証しようかと考えていましたが、ヘッダ部分についてもう一つ調べておきたいことを思いつきました。 今までは、主要なフィールドのみの検証を行ってきましたが、「どんなフィールドがどれだけ存在しているのか？」ということを調べておかないといけないな、と感じたところです。 単純に、UNIX MBOX メールデータを全件読み込み、ヘッダ部分をカウントしただけです。 参考までに、当方の61,665件のメールデータでの集計結果を掲載します。 ※「だから何？」と言われても、「近い将来に目論んでいる事のための自分用の記録です。」としか言いようがありません。あしからず。。。 使用した正規表現 Rubyでメールデータの各行を判別するために使用した正規表現です。 （コロンの左側に半角英数字・”-“・”_“を1文字以上含むもを判定） /^([\\w\\-_]+?):/ UNIX MBOX ヘッダフィールド集計結果 フィールド名 件数 Authentication-results 10,787 Auto-submitted 7,517 Bcc 14 Bounces-to 600 Cc 889 Comment 170 Comments 709 Content-class 306 Content-disposition 562 Content-language 25 Content-return 13 Content-transfer-encoding 37,981 Content-transfer-encording 77 Content-type 59,241...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/29/29002014/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX 本文Multipart検証！",
        "excerpt":"いよいよ UNIX MBOX メールデータの本文部分の検証を行ってみることにしました。 （検証には Ruby を使用していますが、ソースまでは公開していませんのであしからず） メール本文は単純に１つの文章で成り立っているものだけではなく、添付ファイルがあったり、本文が複数に分割されていたりします。 メール本文が分割されているかどうかは、メールヘッダを見ればわかります。 “Content-Type” フィールドに “multipart” が設定されています。 さらに “multipart” 属性には、 “boudary” 文字列というパラメータが設定されていて、その文字列ごとに本文が分割されていることになっています。 また、分割された本文はそれぞれにもヘッダ情報が付加されています。 そこで今回は、メールヘッダの “Content-Type” フィールドに “multipart” が設定されているメールの本文がどのように構成されているのかを検証してみました。 具体的には、以下のことを検証。 本文が何個に分割されているかを集計 分割されている各パートに設定されているヘッダフィールドの集計 参考までに、当方の61,665件のメールデータでの集計結果を掲載します。 ※「だから何？」と言われても、「近い将来に目論んでいる事のための自分用の記録です。」としか言いようがありません。あしからず。。。 メールヘッダ Content-Type フィールドの検証 先日の「Ruby - UNIX MBOX メールヘッダ・Content-Type属性の検証！」では、RFC に準拠しているか否かの検証を行っていましたが、準拠していなくてもメール自体は存在するため、準拠しないものも再度集計しなおしました。 （「非存在」以外は、第１レベル：”type”、第２レベル：”subtype”、第３レベル：”parameter”の属性です） 非存在 = 2,430 件 application = 3 件 octet-stream = 3...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/10/31/31002008/",
        "teaser": null
      },{
        "title": "2011年10月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"11月になったので、先月10月分の当ブログアクセス状況を公開します。 毎月、そんなに変わり映えしないですが・・・ 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 17,548 85.1349 Mac OS 1,182 5.7345 unknown 898 4.3567 Linux 701 3.4009 Ubuntu Linux 95 0.4609 RedHat Linux 49 0.2377 Fedora Linux 44 0.2135 FreeBSD 36 0.1747 PalmOS 21 0.1019 Debian GNU/Linux 10 0.0485 SuSE Linux 8 0.0388 PlayStation 7 0.0340 Android...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2011/11/01/01002038/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX 添付ファイル検証！",
        "excerpt":"今回は UNIX MBOX メールデータの添付ファイルを検証してみました。 （検証には Ruby を使用していますが、ソースまでは公開していませんのであしからず） 添付ファイルの検証と言っても、実際にどんなファイルが添付されているのかを検証したわけではなく、どのようにファイルが添付されているかを検証してみました。 基本的に、添付ファイルは RFC 2231 に準拠して以下のように添付されます。 メールヘッダの “Content-Type” フィールドに “multipart” が設定される。 本文部分がメール本文とファイル等に boundary文字列で分割される。（分割された１つを part を呼ぶことにする） 分割された本文部分の１つの part に添付ファイルが設定される。 ファイル名は part のヘッダ部分に記載される “Content-Disposition” フィールドの “filename” パラメータに設定される。 しかし、上記のように各 part のヘッダ部分で “Content-Disposition” フィールドの “filename” パラメータで設定せず、 各partのヘッダ部分の “Content-Type” フィールドの “name” または “filename” パラメータに設定している。 場合もあります。 そしてまた、各partのヘッダ部分の “Content-Type” フィールドと “Content-Disposition”...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/11/03/03002046/",
        "teaser": null
      },{
        "title": "UNIX MBOX - 「pgp-signature」について！",
        "excerpt":"Ruby で UNIX MBOX メールデータを解析していると、添付ファイル（厳密には添付ファイルとは言えないですが）に “pgp-signature” が設定されているものがありました。 （当方のデータには4件ほどあり、そのうちファイル名が設定されているものは1件でしたが） Ruby - UNIX MBOX 本文Multipart検証！ 実際には、メールヘッダの “Content-Type” に Content-Type: multipart/signed; boundary=\"pgp-sign-Multipart_Wed_Sep__8_21:19:07_2010-1\"; micalg=pgp-sha1; protocol=\"application/pgp-signature\" のように設定され、また本文が --pgp-sign-Multipart_Wed_Sep__8_21:19:07_2010-1 Content-Type: text/plain; charset=ISO-2022-JP （（（（　本　文　）））） --pgp-sign-Multipart_Wed_Sep__8_21:19:07_2010-1 Content-Type: application/pgp-signature Content-Transfer-Encoding: 7bit -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.4.10 (FreeBSD) iEYEABECAAYFAkyHfzsACgkQkgvvx5/Z4e6YiACgx0cQgNChewArCAmFwEu2oOIs lhkAn1uONVihjS9YkMyYbqTyT4rlpTL8 =IRdX -----END PGP SIGNATURE----- --pgp-sign-Multipart_Wed_Sep__8_21:19:07_2010-1-- のようになっているものです。 この “pgp-signature” とは、本文をPGP署名していることを表しているようです。...","categories": ["PC_Tips"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/11/05/05002011/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX 本文検証！",
        "excerpt":"今日は UNIX MBOX メールデータの本文の検証を行ってみました。 （検証には Ruby を使用していますが、ソースまでは公開していませんのであしからず） 本文の検証と言っても、 Content-Type のタイプが “text”・未設定の場合のサブタイプ・文字コード・エンコード別の集計をしたり、 Content-Type のタイプが “multipart” の場合の各パートをサブタイプ・文字コード・エンコード別に集計をしたり 本文が設定されていないものを集計したり しました。 以下の当ブログ過去記事等ともダブる点もありますが、個人の記録として掲載していますので、ご了承ください。 Ruby - UNIX MBOX メールヘッダ・Content-Type属性の検証！ Ruby - UNIX MBOX メールヘッダ・Content-Transfer-Encoding属性の検証！ Ruby - UNIX MBOX 本文Multipart検証！ ちなみに、Content-Type が設定されていないものは、”text/plain; charset=us-ascii” が設定されているものとしています。（ RFC 2045 に準拠 ） また、Content-Type のタイプ/サブタイプに “multipart/alternative” が設定されている場合は、各パートの Content-Type のタイプが “text” のものを本文としてカウントしています。 参考までに、当方の61,665件のメールデータでの集計結果を掲載します。...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/11/07/07002014/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX ヘッダ検証！",
        "excerpt":"（最近、ブログタイトルが似たようなものになっていますが、微妙に内容が異なっていますのであしからず） さて、今日は UNIX MBOX メールデータのヘッダの検証を行ってみました。 （検証には Ruby を使用していますが、ソースまでは公開していませんのであしからず） 今までも、何度かヘッダのフィールド毎に検証したり、どんなヘッダで成り立っているのかを検証したりしてきました。 以下、の当ブログ過去記事等も参照。 Ruby - UNIX MBOX ヘッダ集計！ しました。 ところが、実際に UNIX MBOX データをデータベース（MySQL）に登録しようと考えた場合、 ヘッダの各フィールドの文字数が一体どれくらいあるのか？ということを確認しておかなければ、テーブル設計が出来ないことが判明！ ということで、今回はヘッダの各フィールドのキー・値の文字数をチェックしました。 参考までに、以下に当方の 61,665 件のメールデータで検証した結果を載せておきます。 （個人の記録です。あしからず） ちなみに、１つのフィールドが複数行にわたる場合は、2行目以降の先頭の半角空白・タブを半角空白1個に変換して検証しています。 ヘッダ部分の検証 フィールドの数別に集計 文字数を集計する前に、１つのメールに何個のフィールドが設定されているかを集計してみました。 通常、”Received”フィールドは複数存在しますが、存在する分だけカウントしています。 個数 件数 　 個数 件数 9 17 34 935 10 23 35 1,202 11 47 36 494 12 158...","categories": ["プログラミング"],
        "tags": ["Mail","MySQL","Ruby"],
        "url": "/2011/11/09/09002027/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX ヘッダFrom行検証！",
        "excerpt":"今日は、もう一つ UNIX MBOX メールデータのヘッダの検証を行いました。 （検証には Ruby を使用していますが、ソースまでは公開していませんのであしからず） 今までも、何度かヘッダのフィールド毎に検証したり、どんなヘッダで成り立っているのかを検証したりしてきました。 当ブログの過去約１ヶ月の “UNIX MBOX” 関連の記事等もご参照ください。 今回検証したのは、ヘッダの中でも１行目の “From “ （最初の５文字が “From” + 半角スペース１個）で始まる行についてです。 この行は他のヘッダフィールドと違い、各メールの分割を表すために使用するものです。 １行目以外のヘッダの “From:” とは違います。 １行目の “From “ は大抵の場合、以下のように “From “ の後ろに差出人のメールアドレスと送信日時が記録されているようです。 From hogehoge@hoge.com Fri Aug 07 20:41:58 2009 但し、この書式が RFC に準拠したものでなければならないかどうかは調べてもよくわかりませんでした。 当方で検証したのは、ヘッダ１行目の “From “ で始まる行がどんな書式で設定されているのかです。 参考までに、以下に当方の 61,665 件のメールデータで検証した結果を載せておきます。 （個人の記録です。あしからず） 検証結果 ちなみに、書式は...","categories": ["プログラミング"],
        "tags": ["Mail","Ruby"],
        "url": "/2011/11/10/10002052/",
        "teaser": null
      },{
        "title": "UNIX MBOX メールデータ用 DB設計！",
        "excerpt":"UNIX MBOX (Thunderbird) メールデータを DB (MySQL) へ登録すべく、最近各種検証を行ってきました。 本文・添付ファイル抽出・デコード部分はとりあえず考えず、DB登録（保存）することだけを考えています。 ※使用する言語は Ruby を想定。 まずは、DB (MySQL) を設計しないいけません。 色々考えた結果、とりあえずは以下のテーブルを用意しました。 ※本当に「とりあえず」です。今後作業していく中で変更が発生する可能性は大です。 テーブル一覧 テーブル名 名称 詳細・説明 mst_mbox メールボックスマスタ メールボックスの基本設定 dat_mail メール登録情報 メールデータの各種登録情報（登録日時等） dat_header ヘッダデータ メールデータのヘッダデータ dat_body ボディデータ メールデータの本文、添付ファイル 各テーブルの詳細 Indexは今後の作業の中で追加していくことになると思います。 他についても今後の作業で追加・変更が出てくると思います。 メールボックスマスタ メール登録情報 ヘッダデータ ボディデータ 【変更（2011/11/16）】メール登録情報・ヘッダデータを変更（INDEX追加等） 各テーブルのCreateスクリプト 参考までに各テーブルを作成するためのスクリプトも掲載しておきます。 ※DBエンジンは高速性を重視して「MyISAM」にしています。 【メールボックスマスタ】mst_mbox CREATE TABLE IF NOT EXISTS `mst_mbox`...","categories": ["プログラミング"],
        "tags": ["Mail","MySQL","Ruby"],
        "url": "/2011/11/12/12002043/",
        "teaser": null
      },{
        "title": "MySQL - Out of memory 対策！？",
        "excerpt":"WindowsXP + Ruby + MySQL で大量（あるテーブルでは数千万件）のデータを処理していると、以下のようなエラーが発生しました。 Out of memory (Needed 8164 bytes) MySQL 側の問題と思い、MySQL のログを確認してみると同じようなエラーを出力していました。 [ERROR] Out of memory; check if mysqld or some other process uses all available memory; if not, you may have to use 'ulimit' to allow mysqld to use more memory or you can add more...","categories": ["サーバ構築","プログラミング"],
        "tags": ["MySQL","Ruby"],
        "url": "/2011/11/14/14002045/",
        "teaser": null
      },{
        "title": "ルービックキューブ - DaYan ZhanChi！",
        "excerpt":"当ブログでは久々の「ルービックキューブ」ネタです。 小学生時代から何度目かのマイブームです。 今回のブームは今までで最も気合が入っていて、スピードキュービングと呼ばれるものに結構ハマっています。 今までは「メガハウス」製の既製のキューブを使用していました。 （既製のものはステッカーがすぐ剥がれるので、「CSKit」さんのもので張替えて使用） しかし、スピードキュービングはスピードが命ということで、回し心地を重視して、「メガハウス」製のスピードキュービングキットも使用してみました。（こちらのキューブは４・５日しが使用していません） 回し心地は調整できるので、軽くして使用していました。 （紙やすりでかるくバリもとり、もちろんシリコンスプレーも注して） 既製品に比べて動きは軽くはなりましたが、まだ馴染んでないせいか若干のひっかかり感は感じていました。 ここからが、今回の本題です。 スピードキュービング界では中国・大雁（DaYan）製のキューブが定番（もちろん他のメーカーもありますが）のようです。 最近、スピードキュービングのことを調べていて、初めて知りました。 早速、「triboxストア」で購入してみました。 キューブの構造もわかるし若干低価格のDIYキット（黒素体・白素体）を購入しました。 ステッカーはオリジナル版ではなくtriboxバージョンを選択しました。 以下、先日組み立てた時の記録です。 特に説明書はありませんが、ルービックキューブを分解したことがある人なら簡単に組み立てられます。 DaYan ZhanChi DIY キット 組み立て等 DIYキットなので、こんな感じで届きます。 コア（中心の軸）部分のパーツです。 最初から１個だけセンターキューブが取り付けられていました。 センターキューブです。 センターキューブのキャップです。 ツメは１箇所しかありません。（最初は折れているのかと思ってしまいました） エッジキューブです。（実は更に３つのパーツに分解できますが今回はパス） コーナーキューブです。（実はこれも３つのパーツに分解できますが今回はパス） ネジ・スプリング・ワッシャー部分を確認するために、コア部分に最初から取り付けてあるセンターキューブを取り外してみました。 想定どおりでした。 コアの５箇所に５個のセンターキューブを取り付けます。（この時点ではネジは仮留め） ２個のコーナーキューブと１個のエッジキューブを並べてみたところです。 ２個のコーナーキューブと１個のエッジキューブをくっ付けるとうまい具合にかみ合います。 コーナーキューブ・エッジキューブを互いにうまくかみ合うように取り付けていきます。 すべてのキューブを取り付けたら、残していたセンターキューブを取り付けます。 そして、実際に回してみながらネジの締め具合を調整します。 ※場合により、シリコンスプレーを注したりします。 センターキューブにキャップを取り付けます。 貼り付けるステッカーです。（triboxバージョン）思ったより厚みは薄いです。 ステッカーを日本配色で貼り付けます。 triboxバージョンは転写シールがないのでピンセット等で１枚ずつ丁寧に貼り付けて完成です。 同様に、白素体も組み立て。 所感 「メガハウス」製のキューブ（既製品・ＳＣＫ）と比べてみて主に感じたことです。 ポップしないように構造が複雑になっている。 実測までしていないが、体感で重量が若干軽い ひっかかり感が全くない。 シリコンスプレーを注さなくても動きが軽い。...","categories": ["ルービックキューブ"],
        "tags": [],
        "url": "/2011/11/16/16002000/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX 一意性検証！",
        "excerpt":"今日は、UNIX MBOX メールデータを DB（MySQL） へ登録しようと考えた場合、そのメールが登録済みかどうかをチェックしなければなりません。 そのチェックをどうするかを考えた場合、メールサーバで一意に付けられる Message-ID をチェックする方法が考えられます。 しかし、転送メール等の場合は Message-ID が同一のままなので、結局同じ Message-ID のメールが複数存在することになります。 そこで、同じ Message-ID でも他のヘッダフィールドを比較してみたり、本文の行数を比較してみたりしてみました。 （検証には Ruby + MySQL を使用していますが、ソースまでは公開していませんのであしからず） 当方の個人的な記録です。 「へぇ、そうなんだ！」程度でご覧ください。 以下は、当方の 61,665 件の UNIX MBOX テストデータでの検証結果です。 Message-ID が同一のもの Message-ID が同一のものを個数別に集計。 同一のMessage-IDの個数 件数 2 2,533 3 417 4 6 6 3 8 1 From行（ヘッダ１行目）が同一のもの ヘッダの１行目のFrom行が同一のものを個数別に集計。 同一のFrom行の個数 件数 2...","categories": ["プログラミング"],
        "tags": ["Mail","MySQL","Ruby"],
        "url": "/2011/11/18/18002049/",
        "teaser": null
      },{
        "title": "Ruby - 新旧２つのテキストファイルの差分ファイル作成！",
        "excerpt":"今日は、新旧２つのテキストファイルの差分ファイルを作成する方法を試してみました。 ここで言う２つのテキストファイルとは、全く別物ではなく、旧テキストファイルに追記していったものが新テキストファイルとなっています。 通常、Ruby で差分ファイルを作成しようと考えた場合、以下のようになると思います。 file_diff.puts open( file_new, \"r\" ).readlines - open( file_old, \"r\" ).readlines しかし、当方で検証してみた結果、以下のデメリットを確認しました。 読み込んだ２つのテキストファイルの内容を配列に確保するため、大サイズのテキストファイルだとメモリエラーになる。 空白行が削除されてしまう（上記のスクリプトの場合だけ？） というわけで、テキストファイルを１行ずつ読み込んで差分ファイルを作成する方法を試行！ 処理手順概要 旧テキストファイルの行数をカウント 新テキストファイルを順次読み込む 旧テキストファイルの行数分は読み飛ばし 旧テキストファイルの行数分より後ろの行は差分ファイルへ書き込む ※２つのファイルを同時に１行ずつ読んで双方を比較する方法もありますが、数万行レベルになると処理が遅くなるし、新テキストファイルが旧テキストファイルに追記した形になっていると最初からわかっているので、読み飛ばす方法を採っています。 Ruby スクリプト 参考までに、今回の検証で使用した Ruby スクリプトです。 ※検証環境は、Windows XP (SP3) + Ruby 1.9.2-p290 です。 # -*- coding: utf-8 -*- # # 新旧２つのテキストファイルの差分ファイルを作成 # # date name version #...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2011/11/20/20002057/",
        "teaser": null
      },{
        "title": "Ruby - UNIX MBOX データをMySQLへ保存！",
        "excerpt":"最近、よく記事にしていた UNIX BOX メールデータの検証を一旦終了し、いよいよ UNIX MBOX データを MySQL へ登録する作業を試行しました。 ※データ登録作業には Ruby を使用していますが、スクリプトは掲載していません。 後述のとおり、２種類の方法を試行しました。 結局、第１の方法がしっくり来なかったので、第２の方法を採択しました。 第１の方法 毎回、直接 UNIX MBOX メールデータを全件読み込み、MySQL 登録済みかどうかをチェックしながら、INSERT していく方法。 MySQL 登録済みかどうかはヘッダ全行が同一かどうかで判定しています。 DB登録処理 第２の方法 第１の方法では、コピーなどで複数存在する同一メールは１つとみなされること、毎回全件 TABLE チェックを行うため処理に時間がかかりすぎることから、前回処理済の UNIX MBOX データと今回処理しようとしている UNIX MBOX データの差分ファイルを作成し、その差分ファイル分のみを無条件で MySQL INSERT する方法にしています。 差分ファイル作成処理 DB登録処理 DB登録処理は読込元が異なるだけなので第１の方法で使用したDB登録処理をそのまま使用しています。 差分ファイル作成処理については、当ブログ過去記事もご参照ください。 Ruby - 新旧２つのテキストファイルの差分ファイル作成！ UNIX MBOX データについても当ブログ過去記事をご参照ください。 mk-mode BLOG -...","categories": ["プログラミング"],
        "tags": ["Mail","MySQL","Ruby"],
        "url": "/2011/11/22/22002044/",
        "teaser": null
      },{
        "title": "Ruby - ThinReports で帳票出力！",
        "excerpt":"以前、Ruby で帳票出力するのに Prawn というGemsパッケージを使用した記事を投稿しました。 Ruby - PrawnでPDF作成！ Ruby - PrawnでTweetリストPDF作成！ 今回は、我が「Ruby City MATSUE」の企業が開発した Ruby・Rails に特化した 帳票生成機能を実現するオープンソースソフトウェア「ThinReports」を試してみました。 （というかこれも Prawn が絡んでいるようですが・・・） ※作者さんによる「ThinReports」の紹介動画も USTREAM にアップされていました。→ 「ThinReports」の開発で知るOSSの威力 特徴としては、帳票デザインを行うためのソフト「ThinReports Editor」で視覚的にデザインでき、そのレイアウトに対してソースコードで値を埋めていく（ジェネレートする）感じでしょうか！？ 動作環境・インストール方法・使い方などは、「ThinReports」に非常に丁寧でわかりやすく記載されていますので、ここでは紹介しません。 Ruby がインストールされている環境であれば、「ThinReports」の環境はすぐに整い、サンプルのレイアウト・Rubyスクリプトもすぐに作れます。 サンプルのPDF出力まで30分とかかりませんでした。 そして、ついでに上記のサンプルとは別に独自にサンプルを作成してみました。 架空の「損益計算書」です。 ThinReports Editor デザイン画面です。 Rubyスクリプトサンプル サンプルのRubyスクリプトです。 今回はサンプルなので、数字をベタ打ちしています。 # coding: utf-8 # ThinReports サンプル # ( 架空の損益計算書を作成 ) require 'thinreports' report...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2011/11/24/24002014/",
        "teaser": null
      },{
        "title": "Fedora 16 - 仮想マシンへインストール！",
        "excerpt":"今日は、先日リリースされた Fedora 16 を仮想マシンへインストールしてみました。 （実際には、64bit 版をサーバ用途で VMware Player へ、デスクトップ用途で VirtualBox へインストールしました） 最近、当方は Linux サーバは Scientific Linux を使用しているので、Fedora を本格的に使用する予定はありませんが、どんな感じなのかを確かめるための試用インストールです。 詳細は説明しませんが、基本的にサーバ・デスクトップどちらも最小インストールしています。 VMware Player へのサーバインストール ゲストOSに 1GB のメモリを割り当てて最小構成＋開発ツール＋ベースのインストールを動画（デスクトップ操作を録画）にしています。 当方の Webサイト mk-mode SITE へのアップのほか、YouTube へもアップしています。 mk-mode SITE : アーカイブ YouTube - Install Fedora 16 (64bit) on VMware Player 3.1.5 ※mk-mode SITE : アーカイブには他の OS...","categories": ["サーバ構築"],
        "tags": ["Fedora","Linux","ScientificLinux"],
        "url": "/2011/11/26/26002018/",
        "teaser": null
      },{
        "title": "Ruby - ThinReports でTweet一覧出力！",
        "excerpt":"先日は、我が「Ruby City MATSUE」の企業が開発した Ruby・Rails に特化した 帳票生成機能を実現するオープンソースソフトウェア「ThinReports」を試用してみた記事を書きました。 Ruby - ThinReports で帳票出力！ 今回は以前、Ruby + Prawn で作成したTwitter の自分のツイート一覧を作成するスクリプトを、 Ruby + ThinReports に変更してみました。 帳票デザイン ThinReports Editor を使用して帳票のデザインを行います。 今回作成したデザインは以下のとおり。 【ファイル名：tweet_list.tlf】 Ruby スクリプト 今回作成した Ruby スクリプトの PDF 作成部分の抜粋です。 DB（MySQL）に保存してあるデータを取得する部分等の掲載は割愛しています。 #### [START] PDF作成処理 #### # 作成するPDFファイル名 pdf_file = 'TweetList_' + date_f + \"-\" + date_t + '.pdf'...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2011/11/28/28002047/",
        "teaser": null
      },{
        "title": "Visual C# - 郵便番号検索アプリ！",
        "excerpt":"昔、日本郵便が提供している郵便番号データ（CSV形式）を検索するアプリを VisualBasic で作成したことがありました。 ちなみに、こんな画面。 また、最近では当方の Ruby on Rails 製 Webサイト でも検索できるようにしています。 mk-mode SITE : 郵便番号検索 郵便番号検索ごときならこれらのツールでも充分なのですが、スタンドアロンで動くものを Visual C# で作ってみました。 但し、郵便番号データの仕様をみても分るように、町域の文字列が長い場合は複数行に分割されたり、同じ郵便番号でも複数の町域が存在したり（その逆もあり）しますが、これらには非対応です。 今のところ、個人で使用するには支障が無いからです。 時間があれば対応します。 当ブログにアクセスいただいている方の80%以上が Windows で、Mac、Linuxはそれぞれ10%未満であることから、今のところ Windows 限定としています。 ※.NET Framework 4.0 Client Profile で作成しておりますが、単純なアプリなので .NET Framework 4.0 Client Profile 未満でも OK ではないかと・・・（未確認） 本来は個人使用が目的ですが、ダウンロードできるようにもしています。 よろしければ、どうぞ。 「mk-mode SITE : アーカイブ（その他）」 使用方法 郵便番号データの取得 日本郵便の郵便番号データダウンロードサイトからLZH圧縮されているCSVデータ（できれば「全国一括」）をダウンロード・解凍する。...","categories": ["プログラミング"],
        "tags": ["C#"],
        "url": "/2011/11/30/30002055/",
        "teaser": null
      },{
        "title": "2011年11月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"12月になったので、先月11月分の当ブログアクセス状況を公開します。 いつもと同じような比率です。 多少の違いはあるにしても、世界的なシェアとも似たような比率になっています。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 17,532 85.8949 Mac OS 1,352 6.6239 Linux 730 3.5765 unknown 502 2.4595 Ubuntu Linux 190 0.9309 Fedora Linux 27 0.1323 RedHat Linux 23 0.1127 FreeBSD 17 0.0833 PalmOS 15 0.0735 Debian GNU/Linux 14 0.0686 Solaris 5 0.0245 PlayStation 4 0.0196 合　計...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2011/12/01/01002046/",
        "teaser": null
      },{
        "title": "Windows - Cygwin インストール！",
        "excerpt":"昔（５年位前？）、PostgreSQL を試したくて、Windows XP マシンに Cygwin をインストールしたことがありました。 ※Cygwin とは Windows 上で動作する UNIX 用の環境です。 今回、以下の理由から Windows XP マシンに再度 Cygwin をインストールしました。 自宅サーバを Scientific Linux で構築・運用していることから Linux に触れる機会が多いこと。 予備のLinuxテストマシンがあるものの、都度起動させるのが面倒。 Windows 上で仮想マシンにインストールした Linux 環境でテストするにも、仮想マシンはメモリを食いすぎること。 等々。 インストール自体は簡単です。 Cygwin から setup.exe をダウンロード・実行します。 （パッケージ類を丸ごとローカルへダウンロード後、インストールする方法もあります） 途中の選択項目 インストール方法は “Install from Internet” を選択する。 使用ユーザは “ALL Users” を選択する。 ダウンロードしたパッケージを配置する場所を “E:TEMP”（適当な場所）とする。 インターネット接続方法は “Direct...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Cygwin","Linux","Windows"],
        "url": "/2011/12/02/02002001/",
        "teaser": null
      },{
        "title": "Cygwin - Ruby をソースからインストール！",
        "excerpt":"先日は、Windows XP マシンに UNIX 用環境の Cygwin をインストールしました。 Windows - Cygwin インストール！ 今日は、その Cygwin 環境に Ruby をインストールしました。 通常は、Cygwin の setup.exe を実行して Ruby パッケージを選択してインストールするのですが、それではバージョンが 1.8.7 と古いです。 今回は、バージョン 1.9.2-p290 をソースからインストールしてみました。 以下が手順です。 １．準備 先日インストールした Cygwin 環境はデフォルトでインストールしたものなので、不足しているパッケージが多数あります。 ソースのビルド（コンパイル）に必要なパッケージを予め Cygwin の setup.exe でインストールします。 インストールしたものは以下のとおり。 Devel/autoconf Devel/binutils Devel/bison Devel/flex Devel/gcc-core Devel/gcc-g++ Devel/libstdc++6-devel Devel/make Devel/patchutils Web/wget ２．アーカイブダウンロード Ruby...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Cygwin","Linux","Ruby","Windows"],
        "url": "/2011/12/04/04002057/",
        "teaser": null
      },{
        "title": "Ruby on Rails - 郵便番号検索システム修正！",
        "excerpt":"以前、日本郵便提供の郵便番号データ（CSVデータ）を使って以下の作業をしました。 Ruby + MySQL で郵便番号データ取り込み！ Ruby on Rails - 郵便番号検索システム作成！ しかし、日本郵便提供の郵便番号データ（CSVデータ）は仕様上非常に危険なデータとなっています。 日本郵便サイトの情報の転載は禁止されているので、ここには仕様を転載できません。 郵便番号データの説明 をご覧ください。 Ruby や Rails で作業するに当たって、当然この仕様のことは承知の上でしたが、個人レベルで使用するには支障がなかったので対応しておりませんでした。 最近この郵便番号データが危険であることについてコメントを頂いたこともあり、今回の改修作業に踏み切りました。 ※ちなみに、どうしても自動での対応が出来ないものもあります。 ※以下に登場する「郵便番号」は全て7桁の郵便番号のことを示しています。 以下に記録します。 データの仕様から判明する事実 データの仕様に目を通したり、データを目で見て判明した重要な事実です。 提供されているデータは文字コードに Shift-JIS 、文字セットに JIS X0208-1983 を使用しているため、定義されていない漢字はひらがなで設定されている。 町域名フリガナが76文字を超える、または、町域名漢字が38文字を超える場合は複数レコードに分割されている。 全国地方公共団体コード毎に、”イカニケイサイガナイバアイ”（”以下に掲載がない場合”）、”○○ノツギニバンチガクルバアイ”（”○○の次に番地がくる場合”）、五十音順となっている。（但し、町域名が長いために分割される場合は五十音順ではなく連続して配置されている） 上記3のようにソートされているため、同じ郵便番号でも不連続となっているものが多数ある。 問題点 【問題点１】 実際は漢字なのに、ひらがなで表示されているものがある。 【問題点２】 「一つの郵便番号で二以上の町域を表す場合の表示」が「0」（非該当）にも関わらず同じ郵便番号が連続して重複する場合は町域名の文字列長が長いことより分割されているということなので、無条件に結合すればよい。 しかし、「一つの郵便番号で二以上の町域を表す場合の表示」が「1」（該当）の場合は、本来は結合する必要はないが、それらのレコードの中に町域名の文字列長が長いことより分割されているものも存在する。 これを判断するフラグが存在しないため、人間の目で見て判別する必要がある。 上記の問題点を解消するための事前調査 2011/11/28付のデータ（レコード件数：123,048件）を使用して検証してみました。 ●「一つの郵便番号で二以上の町域を表す場合の表示」が「0」（非該当）で「郵便番号」が連続して重複しているものを検証 重複 件数 なし 122,498 2件 166 3件...","categories": ["サーバ構築","プログラミング"],
        "tags": ["MySQL","Rails","Ruby"],
        "url": "/2011/12/06/06002042/",
        "teaser": null
      },{
        "title": "Scientific Linux - OpenCV をソースからインストール",
        "excerpt":"現在、当方のサーバ（Scientific Linux 6.1）でUSBカメラのキャプチャ画像をライブカメラとして運用するのに、「xawtv」というキャプチャソフトを使用しています。 使用しているUSBカメラはこれ↓ 導入方法は以下の過去記事参照。（Fedora での構築方法ですが同じです） Ｆｅｄｏｒａ１２ - Ｗｅｂカメラ構築！ Ｗｅｂカメラを構築後！ Fedora10サーバにＷｅｂカメラを構築！ しかし、サーバでは Ruby を使ってUSBカメラを操作したいと思い、OpenCV を導入してみました。 この OpenCV とは、インテル社が開発したオープンソースのライブラリ集（C/C++）で、画像から人間の顔を検出して自動でモザイクをかけたり、動く物体を自動で追跡したりと様々な処理が可能です。 実際に Ruby で OpenCV を使用するには、本家の OpenCV 導入とは別に Ruby/OpenCV が必要のようですが、今回はとりあえず本家の OpenCV を導入しました。 当方の Linux サーバは Scientific Linux なので、yum を使えば OpenCV パッケージはインストールできますが、リポジトリの関係でバージョンが多少古いです。 ※当記事執筆時点で OpenCV の最新は 2.3.1a なのに対して、yum でのインストールバージョンは 2.0。 そこで、ソースからのインストールを試みました。 OpenCV 導入手順 OpenCV の最新は...","categories": ["サーバ構築"],
        "tags": ["Ruby","ScientificLinux"],
        "url": "/2011/12/08/08002006/",
        "teaser": null
      },{
        "title": "Linux Mint - 仮想マシンへインストール！",
        "excerpt":"最近 Ubuntu より話題の Linux Mint を仮想マシン VirtualBox へインストールしてみました。 Linux Mint は Ubuntu ベースの快適なデスクトップ環境を提供することを主目標としている Linux ディストリビューションです。（もちろんサーバ構築も可能ですが） そして、最近は Ubuntu のベースとなっている Debian を直接ベースとし、より軽快な Linux Mint Debian というディストリビューションも存在します。 インストールはそれほど難しくないです。 まず、ISO イメージファイルは Linux Mint から をダウンロードします。 今回はインストール先が物理マシンではなく仮想マシン VirtualBox なので、ISO イメージファイルをディスクへは焼かずマウントしてインストールします。 ISO イメージは LiveDVD となっているため、仮想マシンを起動すると普通にデスクトップ環境が起動します。 それでも充分使えますが、メニューから「Install Linux Mint」を実行してハードディスクへインストールします。 あとは特に迷うことなくインストールできるはずです。 ※ちなみに当方は、ゲストOS用メモリは1GBとし、ISOイメージは全て32bit版を使用しました。 当方、Linux は RedHad 系が好きなので、Debian 系を今後使用するつもりはありませんが、どんな感じかイメージをつかむためだけのインストールです。 詳しい検証もいていませんので、あしからず。。。...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2011/12/10/10002017/",
        "teaser": null
      },{
        "title": "Ruby - Ruby/OpenCV インストール！",
        "excerpt":"先日、当方のサーバ（Scientific Linux 6.1）にインテル社が開発したオープンソースの画像処理ライブラリ集（C/C++）OpenCV をソースからインストールしました。 導入方法は以下の過去記事参照。 Scientific Linux - OpenCV をソースからインストール 今回は、OpenCV ライブラリを Ruby で操るために、Ruby/OpenCV というパッケージを導入しました。 現在では gem パッケージを作成してインストールする方法も可能のようですが、当方はできませんでした。 （Gem のバージョン違い等が影響しているようなので、バージョンを調整したりしましたが・・・） なので、普通にソースからインストールしました。 ちなみに、使用している USB カメラは、Logicool QuickCam S7500 です。 （Linux は動作保障外ですが、V4L 対応です） 導入手順 以下に導入手順を公開します。 当方は、元々 CUI ベースの Scientific Linux サーバで USB カメラでのライブカメラ構築を行っているため、ご使用の環境によっては不足しているものがあるかもしれません。 不足しているもがあれば、適宜導入してください。 以下の過去ブログも参照。 Webカメラ - mk-mode BLOG インストール手順 以下のような順序でコマンドを入力していきます。 # git...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Linux","Ruby","ScientificLinux"],
        "url": "/2011/12/12/12002047/",
        "teaser": null
      },{
        "title": "Linux - 複数の静止画から動画を作成！",
        "excerpt":"当方の自宅サーバ（Scientific Linux 6.1）では USB カメラを使用してライブカメラを運用しています。 ※正確には30秒毎にキャプチャした静止画（JPEG）を公開しているだけですが・・・ Webカメラ - mk-mode BLOG たいした画像ではありませんが、当方のWebサイトを探せばキャプチャ画像は見られます。 先日は、Ruby + OpenCV によるキャプチャも試してみました。 キャプチャは可能でしたが、画質がイマイチなので、当面 Ruby + OpenCV での運用は断念しました。（本来推奨されている C による方法では未検証） Scientific Linux - OpenCV をソースからインストール Ruby - Ruby/OpenCV インストール！ 小さなファイルですが、日々大量のJPEG画像が保存されていくので、深夜に1週間前の画像を削除する処理を走らせています。 そこで、折角なので1日分のJPEG画像を1つの動画にまとめてみようと思い立ちました。 調べてみると、ffmpeg を使用する方法と mencoder を使用する方法が主にヒットしましたが、今回は mencoder を使用する方法を試行しました。 以下に今回試した手順を記録。 （色々なサイトを参考しました） 作業手順 １．前提条件 以下の作業を行う上での前提条件です。 使用環境は Scientific Linux 6.1 静止画の保存先ディレクトリは /hoge/webcam/...","categories": ["サーバ構築"],
        "tags": ["Linux","ScientificLinux","Webカメラ"],
        "url": "/2011/12/14/14002047/",
        "teaser": null
      },{
        "title": "Visual C# - 郵便番号検索アプリ修正！",
        "excerpt":"先日、日本郵便 提供の郵便番号データ（CSVデータ）の危険性、その対応方法などについて記事にし、当方の Ruby on Rails 製郵便番号検索システムも修正しました。      Ruby on Rails - 郵便番号検索システム修正！   ついでなので、Visual C# で作成していたスタンドアロンで動く郵便番号検索アプリも改修しました。    修正方法は先日の「Ruby on Rails - 郵便番号検索システム修正！」の記事と同じです。      「一つの郵便番号で二以上の町域を表す場合の表示」が「0」（非該当）にも関わらず同じ「郵便番号」が連続して重複する場合は町域名の文字列長が長いことより分割されているということなので、無条件に結合する。   「丁目を有する町域の場合の表示」・「一つの郵便番号で二以上の町域を表す場合の表示」・「郵便番号」が連続して重複し「一つの郵便番号で二以上の町域を表す場合の表示」が「1」（該当）の場合は、、結合はしないが分割されている可能性があるので、その旨を把握できるように町域名の先頭に「※」を付加する。   ソースは公開しませんが、アプリはダウンロード可能にしています。 よろしければ、こちらからどうぞ → mk-mode SITE : アーカイブ ※ただし、元来個人利用が目的で作成したもので、データは保証できるものでもなく当方は一切責任を負いません。個人の責任でご利用ください。   スナップショット      「一つの郵便番号で二以上の町域を表す場合の表示」が「0」（非該当）で「郵便番号」が連続して重複しているもの。   無条件に結合して１件のデータとして扱えるようになりました。            「一つの郵便番号で二以上の町域を表す場合の表示」が「1」（該当）で「郵便番号」・「丁目を有する町域の場合の表示」が連続して重複しているもの。   分割されていないデータだが、フラグだけでは自動判別不可能なため、「※」マークを不可している。         「一つの郵便番号で二以上の町域を表す場合の表示」が「1」（該当）で「郵便番号」・「丁目を有する町域の場合の表示」が連続して重複しているもの。   分割されているデータだが、フラグだけでは自動判別不可能なため、「※」マークを付加している。   （同じ郵便番号なのに「※」マークが付加されていないデータは連続したデータでないから）      参考サイト等      郵便番号データの説明                                   [郵便番号データの落とし穴           YU-TANG’s MS-Access Discovery](http://www.f3.dion.ne.jp/~element/msaccess/AcTipsKenAllCsv.html “郵便番号データの落とし穴           YU-TANG’s MS-Access Discovery”)                             以上。   ","categories": ["プログラミング"],
        "tags": ["VisualC＃"],
        "url": "/2011/12/16/16002023/",
        "teaser": null
      },{
        "title": "Cygwin - Windows の gVim を使う方法！",
        "excerpt":"少し前に、Windows XP マシンに UNIX 用環境の Cygwin をインストールしたり、Ruby 環境を構築したりしました。 Windows - Cygwin インストール！ Cygwin - Ruby をソースからインストール！ 次に、Cygwin 上に高機能テキストエディタ の Vim をインストールしようと考えました。 通常なら、Cygwin の setup.exe を実行して Vim をインストールしたり、ソースを用意して自前でビルドしたりします。 しかし、折角 Windows 上に GUI 版 Vim の gVim をインストールしているのだから、Cygwin 上からその gVim を使用できるようにした方が今後使用し続けていく上で有用ではないかと考えました。 案の定、Web で調べてみるとその方法がいくつか見つかりましたので、まとめました。 以下が手順です。 １．既導入の Vim をアンインストール 仮に Vim を既にインストール済みでしたら、不要なのでアンインストールします。 ２．シェルスクリプトの作成 Windows...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Cygwin","Windows"],
        "url": "/2011/12/18/18002054/",
        "teaser": null
      },{
        "title": "WordPress - コメント返信時にメール通知！",
        "excerpt":"当ブログは WordPress で運営しています。   そう言えば、コメントを頂いて管理者である私が返信をした際に、同じページを開いてみない限り相手にはいつ返信があったのか分らないのではないか？と思いました。 実際、自分でコメントしてみて確認してみたところ、返信時にはメールが届きませんでした。 ※本当のところ、コメントに返信した際は自動でコメント投稿者にメール通知するものだと思い込んでいました。    コメントした人はそのページを気にかけているので、いずれ返信があったことは気付くはずですが、それでは不親切です。   自分で実装するのも容易ではなさそうなので、プラグインを探してみました。   ありました。   「Subscribe to Comments」というものです。   普通にインストールして使用可能です。 細かな使用方法はまだ正確には把握していませんが、設定画面で表示文字列の設定をしたりできます。   当方は英語表記の部分を日本語に変更して使用しています。      これで、コメントに返信したり、他のコメントがあったりした場合に、コメント投稿者にメール通知できるようになりました。   以上。   ","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2011/12/20/20002037/",
        "teaser": null
      },{
        "title": "Cygwin - zlib インストール！",
        "excerpt":"少し前に、「Cygwin - Ruby をソースからインストール！」に記載したように、Cygwin に Ruby をソースからインストールしました。 ※Cygwin の setup.exe でインストールできる Ruby はバージョンが古いため。   しかし、Ruby のパッケージ管理システム RubyGems を使用するには、zlib というデータの圧縮や伸張を行うためのフリーのライブラリをインストールしておかなければなりません。    今回はソースからではなく Cygwin の setup.exe で zlib をインストールしました。 （同時に、依存関係にある zlib-devel もインストールされます）   インストール自体はこれでよいのですが、zlib よりも前に Ruby をソースからインストールしている場合は、gem コマンドでの Gems パッケージのインストールやアップデートができません。   Ruby の再ビルド・インストールが必要のようです。   と言うわけで、再度「Cygwin - Ruby をソースからインストール！」のとおりに Ruby をソースからビルド・インストールしました。   今日はそれだけです。   ","categories": ["サーバ構築","プログラミング"],
        "tags": ["Cygwin","Ruby"],
        "url": "/2011/12/22/22002032/",
        "teaser": null
      },{
        "title": "Cygwin - RubyGems インストール！",
        "excerpt":"先日は、Cygwin をインストールしたり、Ruby 環境を構築したりしました。 Windows - Cygwin インストール！ Cygwin - Ruby をソースからインストール！ Cygwin - Windows の gVim を使う方法！ 今日は、Cygwin 上に Ruby のパッケージ管理システム RubyGems をインストールしました。 以下が記録です。 １．アーカイブのダウンロード・展開 こちらのサイトから RubyGems の最新アーカイブをダウンロードし、展開します。 $ wget http://rubyforge.org/frs/download.php/75573/rubygems-1.8.12.tgz $ tar zxvf rubygems-1.8.12.tgz ※当記事執筆時点の最新は 1.8.12 でした。 ２．インストール 展開したディレクトリへ移動し、セットアップスクリプトを実行します。 $ cd rubygems-1.8.12 $ ruby setup.rb RubyGems 1.8.12 installed ==...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Cygwin","Ruby"],
        "url": "/2011/12/24/24002056/",
        "teaser": null
      },{
        "title": "WordPress - 人気記事一覧修正！",
        "excerpt":"以前、WordPress のアクセス統計プラグイン「CounterizeII」を使って人気記事一覧を表示する方法（SQL）を紹介しました。 WordPress - CounterizeIIから人気記事リスト取得関数作成！ （「CounterizeII」を弄ったことのある方なら、テーブル名・フィールド名に馴染みがあると思います） しかし、考え方を間違えていたことが発覚！ 【誤】過去30日以内に投稿された記事のアクセス数を集計 【正】過去30日以内にアクセスのあった記事のアクセス数を集計 使用するSQLを修正しました。 SQL文の修正 【誤】過去30日以内に投稿された記事のアクセス数を集計 SELECT B.postID, A.post_title, B.CNT FROM `wp_posts` AS A INNER JOIN ( SELECT postID, SUM( count ) AS cnt FROM `wp_Counterize_Pages` GROUP BY postID ) AS B ON A.ID = B.postID WHERE B.postID IS NOT NULL AND A.post_date &gt;...","categories": ["ブログ"],
        "tags": ["SQL","WordPress","プラグイン"],
        "url": "/2011/12/26/26002023/",
        "teaser": null
      },{
        "title": "Cygwin - apt-cyg インストール！",
        "excerpt":"Cygwin でパッケージをインストールする際、setup.exe を起動する方法があります。 しかし、それが少し面倒に感じます。 そこで、Debian 等でパッケージ管理する際に使用する apt-get, aptitude や RedHat 系でパッケージ管理する際に使用する yum の Cygwin 版があるので、それをインストールしてみました。 apt-cyg というコマンドです。 以下が導入手順です。 前提条件 wget コマンドインストール済み bzip2 コマンドインストール済み gawk コマンドインストール済み apt-cyg インストール apt-cyg コマンドをダウンロードして権限付与します。 配置先は /usr/bin ディレクトリ配下です。 wget http://apt-cyg.googlecode.com/svn/trunk/apt-cyg mv apt-cyg /usr/bin chmod +x /usr/bin/apt-cyg 動作確認 使用方法出力 $ apt-cyg apt-cyg: Installs and removes Cygwin packages....","categories": ["サーバ構築"],
        "tags": ["Cygwin"],
        "url": "/2011/12/28/28002027/",
        "teaser": null
      },{
        "title": "Cygwin - MySQLクライアントインストール！",
        "excerpt":"今日は、Cygwin にインストールした Ruby で MySQL を操作する目的で、 MySQL のクライアントをインストールしました。 サーバは既に Windows 側にインストールされているのでそれを使用します。 ライブラリのみが必要だったためにクライアントのみのインストールとしました。 ※libmysqlclient-dev をインストールするという記事も見かけましたが、Cygwin でのパッケージからのインストール方法やソースからのインストール方法がイマイチ不明でした。（昨日記事にした「Cygwin - apt-cyg インストール！」の apt-cyg の方法でもパッケージが存在しないためダメでした） 以下が手順です。 １．アーカイブダウンロード・展開 MySQL :: MySQL Downloads の「MySQL Community Server」からソースコードを取得して展開します。 当記事執筆時点では 5.5.19 が最新ですが、以下（※）の理由から、これではなく「Looking for previous GA versions?」というリンクへ入り 5.1.60 のソースコードを取得します。 ※5.5.8 以降は configure ではなく cmake を使用するため、サーバをインストールしないオプション（–without-server）がわからないし、サーバも含めて cmake しようとすると stdlib.h 内の dtoa とカチ合ってエラーとなる。（一時的に...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Cygwin","MySQL","Ruby"],
        "url": "/2011/12/30/30002055/",
        "teaser": null
      },{
        "title": "Cygwin - MySQL2 Gemパッケージインストール！",
        "excerpt":"Ruby で MySQL を使用する際には MySQL アダプタの Gem パッケージが必要です。 そこで、当方の Cygwin 環境に MySQL アダプタの新しいバージョン MySQL2 の Gem パッケージをインストールしました。 導入手順 １．下準備 Cygwin で MySQL2 Gem パッケージをインストールするには予め以下の記事のとおりの作業を済ませておくことが必要です。 でないと、ライブラリが不足しているなどのエラーでインストールできません。 Cygwin - zlib インストール！ Cygwin - RubyGems インストール！ Cygwin - MySQLクライアントインストール！ ２．MySQL2 Gem パッケージインストール 以下のコマンドを実行してインストールします。 $ gem install mysql2 Building native extensions. This could take...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Cygwin","MySQL","Ruby"],
        "url": "/2011/12/31/31002033/",
        "teaser": null
      },{
        "title": "2011年12月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"あけましておめでとうございます。 今年は皆が幸せになりますように。 さて、1月になったので、先月12月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 20,965 86.1552 Mac OS 1,550 6.3697 unknown 725 2.9794 Linux 661 2.7164 Ubuntu Linux 318 1.3068 PalmOS 33 0.1356 RedHat Linux 30 0.1233 FreeBSD 23 0.0945 Fedora Linux 19 0.0781 Debian GNU/Linux 5 0.0205 Android 3 0.0123 PlayStation 1 0.0041 Solaris...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/01/01/01002028/",
        "teaser": null
      },{
        "title": "VMware Player - 仮想マシンのコピー！",
        "excerpt":"仮想マシン実行環境 VMware Player で一度作成した仮想マシンをコピーすることが頻繁ではないにしてもあると思います。 コピー自体は単純ですが、コピー後の環境でネットワークが繋がらないということが発生することがあります。 今日は、仮想マシン（ゲストOSは CentOS を想定）のコピーからネットワークの調整までを記録しておきます。 ※自分の今後のための記録です。実際には環境等によって作業手順が異なる場合があるかもしれませんので悪しからず。 以下が作業記録です。 Ⅰ．仮想マシンコピー 仮想マシンのコピーだけでなく、仮想マシンの名前を変更する場合は２からの作業です。 １．フォルダコピー コピーしたい仮想マシンのフォルダをフォルダごとコピーします。 ２．フォルダ名、ファイル名変更 仮想マシンのフォルダ名、ファイル名（nvram, vmdk, vmsd, vmx, vmxf）を変更後のものにする。 ３．vmxファイル、vmxfファイルの編集 vmxファイル、vmxfファイルを開き、ファイル名の部分を全て変更後のものにする。 Ⅱ．ネットワーク設定の調整 上記のように仮想マシンをコピーした場合は、仮想マシン起動時に「Device eth0 does not seem to be present, delaying initialization」と表示され、ネットワークが繋がらない場合があります。 その場合は以下のようにします。（ゲストOSは CentOS を想定） １．ネットワーク設定確認 以下のコマンドを実行してみて、eth0 が存在しない事を確認する。 # ifconfig -a ２．ファイル 70-persistent-net.rules の編集 ファイル “/etc/udev/rules.d/70-persistent-net.rules” を開き、NAME=”eth0” と記述されてる行を削除する。 さらに、NAME=”eth1”...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["VMware"],
        "url": "/2012/01/03/03002024/",
        "teaser": null
      },{
        "title": "Cygwin - RVM 環境構築！",
        "excerpt":"今日は、複数の Ruby 環境を簡単に切り替えて使用可能にする環境 RVM(Ruby Version Manager) を Cygwin に構築してみました。 Cygwin に Gem パッケージ RVM をインストールするには、 公式サイトで配布されている tarball からのインストール GitHub からのインストール Gem でのインストール の方法があるようです。 当方の Cygwin には既に Ruby 1.9.2 がインストールされていますので、「Gem でのインストール」をしてみました。 以下はその記録です。 RVM 環境構築記録 前提条件 以下の環境を前提としています。 Windows XP SP3 (32bit) 上に導入した Cygwin 1.7.9 で作業。 Cygwin 上に Ruby 1.9.2 p290 がインストール済み。 インストール済み...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Cygwin","Ruby"],
        "url": "/2012/01/05/05002031/",
        "teaser": null
      },{
        "title": "Cygwin - Ruby で OpenSSL！",
        "excerpt":"Cygwin 上の Ruby で ‘openssl’ を require しているスクリプトを実行すると以下のようなエラーが発生する場合があります。 $ ruby hoge.rb /usr/local/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require': no such file to load -- openssl (LoadError) from /usr/local/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require' from hoge.rb:21:in `&lt;main&gt;' ‘openssl’ がロードできないと言っています。 通常なら openssl-devel というパッケージをインストールするだけでよいのですが、Cygwin の場合はそれだけではなかったので対策を記録として残しておきます。 作業記録 ここで言う Ruby とは RVM(Ruby Version Manager) でインストールした Ruby ではなく、システムにソースからビルド・インストールした Ruby のことです。 ※バージョンは Ruby 1.9.2-p290 です。 １．openssl-devel...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Cygwin","Ruby"],
        "url": "/2012/01/07/07002019/",
        "teaser": null
      },{
        "title": "Ruby - Twitter アプリで MultiJson ワーニング！",
        "excerpt":"自作の Twitter 関連の処理をする Ruby スクリプト。 当方のサーバ（CentOS 6.2）上や、Windows 上では特にワーニングは出力されなかったのですが、Cygwin 上で起動させてみると以下のようなワーニング出力されました。 Warning: multi_json is using default ok_json engine. Suggested action: require and load an appropriate JSON library. 「適切な JSON ライブラリが見つからず、デフォルトの JSON エンジンを使用している」と言っているようです。 ※システムに導入されているパッケージのバージョンや Gem パッケージのバージョンの違いにより発生している模様。 別に Ruby スクリプト自体は正常に動作しているので、このまま放っておいてもいいのですが、やっぱり気になるので調べて対応しておきました。 対応記録 １．ライブラリのソースを確認 MultiJson ライブラリのソースを見てみます。 今回は Cygwin での作業なので、/usr/local/lib/ruby/gems/1.9.1/gems/multi_json-1.0.4/lib/multi_json.rb です。 #### 途中省略 #### REQUIREMENT_MAP = [...","categories": ["プログラミング"],
        "tags": ["Cygwin","Ruby","Twitter"],
        "url": "/2012/01/08/08002016/",
        "teaser": null
      },{
        "title": "Windows - サービスの手動削除！",
        "excerpt":"Windows でサービスを手動で削除する方法についてのメモです。 通常、インストール時にサービスも登録するようなソフトはアンインストール時にサービスも削除されますが、稀にアンインストールに失敗したりするなどでサービスが残ってしまうことがあります。 記録 Windows XP で確認しています。 以下で登場する “sc.exe” は Windows XP や Windows 2003 では標準で装備されていますが、他の Windows ではりソースキットの導入が必要のようです。 １．サービス存在確認 コマンドプロンプトを開き、”sc.exe query ＜サービス名＞”と実行します。 サービス名は管理ツールの「サービス」等で確認しておいてください。 （サービスの「表示名」ではなく「サービス名」です） &gt;sc.exe query cygserver SERVICE_NAME: cygserver TYPE : 10 WIN32_OWN_PROCESS STATE : 1 STOPPED (NOT_STOPPABLE,NOT_PAUSABLE,IGNORES_SHUTDOWN) WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2012/01/10/10002052/",
        "teaser": null
      },{
        "title": "Cygwin - Ruby on Rails で MySQL ソケットエラー！",
        "excerpt":"当方の Cygwin 環境に Ruby を導入したことだし、Linux サーバで運用中の Ruby on Rails アプリを Cygwin 上で動かしてみようと考えました。 Ruby、RubyGems、MySQL は導入済みなので、後は Gem で Rails をインストールしてソースを用意すればよいだけです。 ※MySQL は Cygwin 側ではなく Windows にインストールし、Cygwin 側には MySQL クライアントのみをインストール。 ※Web サーバはとりあえず Rails 標準の WEBrick を使用。 　（いずれ、Mongrel、Apache2 + Phusion Passenger、Nginx で動かしてみるかもしれません） しかし、実際に動かしてみると以下のようなエラーが出力されます。 Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2) Cygwin...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Cygwin","MySQL","Rails","Ruby"],
        "url": "/2012/01/12/12003036/",
        "teaser": null
      },{
        "title": "Cygwin - Apache2 インストール！",
        "excerpt":"今日は Cygwin に Web サーバ Apache2 環境を構築しました。 以下、作業記録です。 作業記録 １．Apache2 インストール Cygwin の setup.exe から apache2 をインストールする。 もしくは、パッケージ管理 apt-cyg を導入済みなら、以下のようにしてインストールする。 $ apt-cyg install apache2 ２．cygrunsrv インストール UNIX デーモンプログラムを Windows NT/2000/XP 上のサービスとして動作させるためのパッケージ cygrunsrv を Cygwin の setup.exe からインストールする。 もしくは、パッケージ管理 apt-cyg を導入済みなら、以下のようにしてインストールする。 $ apt-cyg install cygrunsrv ３．環境変数設定 動作に必要な環境変数 CYGWIN を設定します。 Cygwin フォルダ配下にある...","categories": ["サーバ構築"],
        "tags": ["Apache","Cygwin"],
        "url": "/2012/01/13/13002044/",
        "teaser": null
      },{
        "title": "Cygwin - Ruby on Rails を Apache2 + Passenger で！",
        "excerpt":"Cygwin に構築した Ruby on Rails 環境が Rails 標準の WEBrick では動くことを確認しました。 Cygwin - Ruby on Rails で MySQL ソケットエラー！ その流れで、Gem パッケージ Mongrel をインストールして動作確認もしました。 こちらはなんなく動作しました。 そこで、Linux サーバで導入している Apache2 + Phusion Passenger という環境を Cygwin 上でも実現させようと試みました。 Cygwin への Apache2 のインストールは以下をご参照ください。 Cygwin - Apache2 インストール！ Phusion Passenger モジュールのインストールは試行錯誤の結果、失敗しています。 参考程度にお考えください。 作業記録 Cygwin に Ruby 1.9.2-p290, Apache2...","categories": ["サーバ構築"],
        "tags": ["Apache","Cygwin","Rails","Ruby"],
        "url": "/2012/01/14/14003130/",
        "teaser": null
      },{
        "title": "Ruby on Rails 3.1 では auto_link メソッド使用不可！",
        "excerpt":"当方、Ruby on Rails 3.0 系で作成した Web サイト・アプリを 3.1 系へ移行しようと作業していました。 作業自体は簡単ですが、いざ実行してみると以下のようなエラーが出力されます。 undefined method 'auto_link' auto_link とは、文字列内の URL を自動でリンクにするメソッドです。 このメソッドが Rails 3.1 系では使用できなくなっているようです。 色々調べてみたところ、使用できない理由は、 May not be safe つまり、危険だからということ。 標準では使用できませんが、別途 Gem で導入できるようです。 元の Ruby スクリプトは手を加えることなく、Rails アプリのルートにある Gemfile を編集して bundle update するだけです。 Gemfile には以下のような記述を追加します。 gem 'rails_autolink' ※ちなみに、Rails でなく Ruby スクリプト単体なら以下のようにします。 require 'rails_autolink' これだけです。...","categories": ["サーバ構築","プログラミング","Webサイト"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/01/16/16002000/",
        "teaser": null
      },{
        "title": "Ruby 1.9.3 - ソースからのインストールは注意！",
        "excerpt":"当方、テスト環境での Ruby は RVM を使用したりしていますが、本運用サーバではソースからビルド＆インストールした Ruby １本で運用しています。 その Ruby ( 1.9.2-p290 ) を 1.9.3-p0 に入れ替えようとテスト環境（今回は CentOS 6.2）でソースからのインストールテストをしてみました。 しかし、gem のバージョン確認等で以下のようなワーニングが出力されます。 # gem -v /usr/local/lib/ruby/1.9.1/yaml.rb:56:in `&lt;top (required)&gt;': It seems your ruby installation is missing psych (for YAML output). To eliminate this warning, please install libyaml and reinstall your ruby. 1.8.13 どうやら libyaml...","categories": ["サーバ構築","プログラミング"],
        "tags": ["CentOS","Ruby"],
        "url": "/2012/01/17/17002008/",
        "teaser": null
      },{
        "title": "Ruby on Rails 3.1 - 起動時に JavaScript Runtime エラー！",
        "excerpt":"当方、Ruby on Rails 3.0 系から 3.1 系へ移行すべく、各種テストをしていた時のことです。 Rails アプリを production モードで起動させようとすると、以下のようなメッセージが出力されました。 ※development モードや test モードでは以下のようなメッセージは出力されません。 Error message: Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable) 調査してみたところ、「Rails 3.1 execjs and Could not find a JavaScript runtime - Stack Overflow」によると node.js という JavaScript ランタイムが必要のようです。 http://nodejs.org/dist/...","categories": ["サーバ構築","Webサイト"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/01/18/18002057/",
        "teaser": null
      },{
        "title": "Ruby on Rails 3.1 - Asset Pipeline プリコンパイルエラー！",
        "excerpt":"昨日に引き続き、Ruby on Rails 3.0 系から 3.1 系へ移行すべく、各種テストをしていた時のことです。 Rails アプリを production モードで起動させようとすると、以下のような内部エラーが発生しました。 ※development モードや test モードでは以下のようなメッセージは出力されません。 ActionView::Template::Error (hoge.gif isn't precompiled): hoge.gif がプリコンパイルされていない、と言っているようです。 調査してみたところ、Rails 3.1 から導入された Asset Pipeline という機能では production （公開）モードで公開する際、assets ディレクトリ内のファイルがプリコンパイルされていないといけないようです。 ※Asset Pipeline とは何か？はここでは説明しません。各自調べてください。 メモ Rails アプリのディレクトリで以下のように実行するだけです。 # bundle exec rake assets:precompile RAILS_ENV=production その他 上記のように予めプリコンパイルしておく方法のほかに、”config/application.rb” の “config.assets.compile” を true にする方法もあります。 実行時に逐次コンパイルする方法です。...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/01/19/19002041/",
        "teaser": null
      },{
        "title": "Linux - Apache 再起動で Address already in use！",
        "excerpt":"先日、自宅サーバの Apache2 を再起動しようとしたら、以下のようなエラーが出力されて起動できませんでした。 # /etc/rc.d/init.d/httpd restart httpd を停止中: [ OK ] httpd を起動中: (98)Address already in use: make_sock: could not bind to address [::]:80 (98)Address already in use: make_sock: could not bind to address 0.0.0.0:80 no listening sockets available, shutting down Unable to open logs 他のプロセスがポート 80 を既に使用している場合に出力されるエラーメッセージのようです。 httpd が正常に停止できなったなら、起動時にエラーになるのも納得できるのですが・・・...","categories": ["サーバ構築"],
        "tags": ["Apache","Linux"],
        "url": "/2012/01/20/20002012/",
        "teaser": null
      },{
        "title": "Linux コマンド find で検索 + 処理！",
        "excerpt":"今日は Linux(Unix) コマンドの “find” についての個人的メモです。 時々、Linux で以下のような事をする必要が出てくることあります。 あるディレクトリ配下全てのディレクトリに同じパーミッションを設定 あるディレクトリ配下全てのファイルにディレクトリとは別のパーミッションを設定 以下、メモです。 例１ hoge ディレクトリ配下全てのディレクトリにパーミッション 755 を設定する例です。 # find hoge -type d -exec chmod 755 {} \\; “-type d” はディレクトリを検索するオプション。 “-exec” は以降 “;” までの処理を実行するという意味のオプション。 “{}” の中に find で検索した結果が代入される。 “;” の前の “\" は “;” がシェルに解釈されないようにするためのエスケープ（バックスラッシュ or 円マーク）。 例２ hoge ディレクトリ配下全てのファイルにパーミッション 644 を設定する例です。 #...","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2012/01/21/21002041/",
        "teaser": null
      },{
        "title": "CentOS 6.2 - IPv6 無効化！",
        "excerpt":"自宅サーバ CentOS 6.2 で IPv6 の機能は使用しないので、 # chkconfig ip6tables off で自動起動しないようにしていたつもりでしたが、ifconfig で確認してみると IPv6 が起動していました。 と言うわけで、ちゃんと設定しなおしました。 設定手順 １．ifconfig 確認 ifconfig コマンドで確認してみます。 # ifconfig eth0 Link encap:Ethernet HWaddr 99:99:99:99:99:99 inet addr:192.168.11.2 Bcast:192.168.11.255 Mask:255.255.255.0 inet6 addr: fe80::230:1bff:feba:81eb/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:7473658 errors:0 dropped:0 overruns:0 frame:0 TX packets:8055945 errors:0...","categories": ["サーバ構築"],
        "tags": ["CentOS","Linux"],
        "url": "/2012/01/22/22002025/",
        "teaser": null
      },{
        "title": "株式市場 - 銘柄を集計！",
        "excerpt":"久々に株式のお話です。 と言っても、Ruby + MySQL で自作した株価管理システム（閲覧は Rails）内の銘柄をSQLのみで集計してみただけです。 ※最近は取引はひかえていますが、データを弄るのがおもしろい分野なので。。。 集計結果 2012年1月20日現在上場している銘柄 3,604 件を集計してみました。 業種別銘柄数 銘柄コード 業種 件数 0050 水産・農林業 11 1050 鉱業 9 2050 建設業 174 3050 食料品 133 3100 繊維製品 58 3150 パルプ・紙 25 3200 化学 213 3250 医薬品 57 3300 石油・石炭製品 13 3350 ゴム製品 19 3400 ガラス・土石製品 64 3450 鉄鋼...","categories": ["プログラミング","株式"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/01/23/23002025/",
        "teaser": null
      },{
        "title": "CentOS - Rails ログローテーション！",
        "excerpt":"今日は、CentOS 6.2 上に構築した Ruby on Rails 環境のログの肥大化対策についてです。 Ruby on Rails で Web 公開（production モードでの運用）すると Web サーバのログとは別にログが記録されます。 開発（development）モードほどではありませんが、公開（production）モードもログは日々肥大化していきます。 Rails のロガー機能を使用する方法もあるようですが、今回は CentOS 上で様々なログのローテーションを行っている logrotate を使用してみます。 以下がその記録です。 作業記録 １．logrotate 全体設定の確認 全体的な logrotate の設定を確認してみます。 # cat /etc/logrotate.conf # see \"man logrotate\" for details # rotate log files weekly weekly # keep 4 weeks worth...","categories": ["サーバ構築"],
        "tags": ["CentOS","Linux","Rails"],
        "url": "/2012/01/25/25002016/",
        "teaser": null
      },{
        "title": "VirtualBox - ハードディスク容量変更！",
        "excerpt":"Windows 上の VirtualBox で使用する仮想マシンのハードディスク容量を変更する方法についての個人的メモです。 容量変更と言っても、拡張することしか出来ません。 また、物理的に容量が大きくなるだけなので、ゲストOSのパーティションサイズは別途拡張する必要があります。     記録   前提   今回の作業は以下の環境を前提としています。      ホストOSは WindowsXP SP3   VirtualBox のバージョンは 4.1.8 r75467   ゲストOSの拡張前の HDD 容量は 20GB   ゲストOSの種類・メモリ容量等は何でもよい   作業   コマンドプロンプトを開き、ゲストOSの VDI ファイルが存在するフォルダへ移動し、以下のようにコマンドを入力・実行する。   &gt;vboxmanage modifyhd hoge.vdi --resize 40960 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%      vboxmanage.exe に PATH が通ってなければフルパスで指定。   対象の VDI ファイル名は hoge.vdi   変更後のディスクサイズは MByte 単位で指定。（40GB = 40960MB）     これで、ディスク容量自体は拡張できています。 あとは、パーティションエディタ等でパーティションを拡張すれば OK！   以上。   ","categories": ["PC_Tips"],
        "tags": ["VirtualBox"],
        "url": "/2012/01/26/26002022/",
        "teaser": null
      },{
        "title": "VirtualBox - VDIファイルコピー！",
        "excerpt":"Windows 上の VirtualBox で使用する仮想マシンの VDI ファイルをコピーする方法についての個人的メモです。 コピーと言っても、VDI ファイルを別名に変更すると言った方がよいかもしれません。 単純にファイル名を変更するだけではダメなので。     記録   前提   今回の作業は以下の環境を前提としています。      ホストOSは WindowsXP SP3   VirtualBox のバージョンは 4.1.8 r75467   ゲストOSの拡張前の HDD 容量は 20GB   ゲストOSの種類・メモリ容量等は何でもよい   作業   コマンドプロンプトを開き、ゲストOSの VDI ファイルが存在するフォルダへ移動し、以下のようにコマンドを入力・実行する。   &gt;vboxmanage clonevdi hoge.vdi hoge_2.vdi 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%      vboxmanage.exe に PATH が通ってなければフルパスで指定。   コピー元の VDI ファイル名は hoge.vdi   コピー先の VDI ファイル名は hoge_2.vdi     これで、VDI ファイルがコピーできました。   以上。   ","categories": ["PC_Tips"],
        "tags": ["VirtualBox"],
        "url": "/2012/01/27/27002552/",
        "teaser": null
      },{
        "title": "VirtualBox - ハードディスク最適化！",
        "excerpt":"Windows 上の VirtualBox で使用する仮想マシンのハードディスクを最適かする方法についての個人的メモです。     記録   前提   今回の作業は以下の環境を前提としています。      ホストOSは WindowsXP SP3   VirtualBox のバージョンは 4.1.8 r75467   ゲストOSの拡張前の HDD 容量は 20GB   ゲストOSの種類・メモリ容量等は何でもよい   作業   コマンドプロンプトを開き、ゲストOSの VDI ファイルが存在するフォルダへ移動し、以下のようにコマンドを入力・実行する。   &gt;vboxmanage modifyhd --compact hoge.vdi 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%      vboxmanage.exe に PATH が通ってなければフルパスで指定。   対象の VDI ファイル名は hoge.vdi     これで、VDI ファイルが最適化できました。 ファイルサイズは、さほど変わりません。   以上。   ","categories": ["PC_Tips"],
        "tags": ["VirtualBox"],
        "url": "/2012/01/28/28002059/",
        "teaser": null
      },{
        "title": "Apache2 - 脆弱性対策！",
        "excerpt":"最終的には Apache2 の脆弱性の対策を施していますが、経緯から記録します。 確認・対策した環境は CentOS 6.2 です。 経緯 １．サーバダウン 最初、自宅の CentOS サーバにアクセスできなくなっていて発覚しました。 異常に HDD アクセスをしていて、重くなっているようでした。 ２．サーバ再起動 全くサーバへのアクセスが出来ないので、強制的にサーバマシンをリブートしました。 ３．再度サーバダウン サーバマシンリブート後しばらくは順調に稼動していましたが、数日後くらいにはまた、同じような現象に陥りました。 ４．ログ調査 ここで初めて、ログ調査してみました。 “/var/log/messages” には以下のようなメッセージが出力されいました。 ====&lt; 途中省略 &gt;==== Jan 17 10:12:53 hoge kernel: error invoked oom-killer: gfp_mask=0x201da, order=0, oom_adj=0, oom_score_adj=0 Jan 17 10:13:08 hoge kernel: error cpuset=/ mems_allowed=0 Jan 17 10:13:08 hoge...","categories": ["サーバ構築"],
        "tags": ["Apache","CentOS"],
        "url": "/2012/01/30/30002016/",
        "teaser": null
      },{
        "title": "2012年1月 – OS・ブラウザ別アクセス状況！",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 21,636 76.6745 Linux 3,655 12.9527 Mac OS 1,949 6.9069 unknown 609 2.1582 Ubuntu Linux 250 0.8860 RedHat Linux 38 0.1347 FreeBSD 36 0.1276 Fedora Linux 14 0.0496 PalmOS 14 0.0496 Debian GNU/Linux 11 0.0390 PlayStation 3 0.0106 Solaris 2 0.0071 Android 1 0.0035...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/02/01/01002050/",
        "teaser": null
      },{
        "title": "MySQL - 5.5.20 アップデート時エラー！",
        "excerpt":"ローカルテスト用にと Windows マシンに MySQL をインストールしているのですが、ふとエラーログを見てみると ERROR が出力されていました。 以下、現象と対処の記録です。 記録 前提 以下の環境で確認しています。（Linux 等でも同様と思われる） OS : Windows XP SP3 MySQL : 5.5.20 現象 MySQL のエラーログに以下のようなエラーメッセージが出力される。 ※Windows のシステムログにも同様のメッセージが出力されている。 しかし、以下のようなエラーが出力されていても MySQL は問題なく機能しているように見える。 120201 22:39:35 InnoDB: 1.1.8 started; log sequence number 10920470799 120201 22:39:35 [ERROR] Missing system table mysql.proxies_priv; please run mysql_upgrade to create it...","categories": ["サーバ構築"],
        "tags": ["MySQL","Windows"],
        "url": "/2012/02/02/02002042/",
        "teaser": null
      },{
        "title": "MySQL - UPDATE/DELETE 時の Error:1175！",
        "excerpt":"MySQL を GUI で管理・操作できるツール MySQL Workbench でのエラーについての対処メモです。 ※MySQL 自体の設定の問題なので、MySQL Workbench に限った話でもありませんが。 MySQL Workbench 上で UPDATE や DELETE の SQL 文を実行する際に、エラーとなる場合があります。 記録 現象 次のような SQL 文を実行。 ※実行環境：WindowsXP(SP3) + MySQL 5.5.20 + MySQL Workbench 5.2.37 DELETE FROM hoge WHERE fuga &gt;= 100; 出力されるエラーは以下のとおり。 Error Code: 1175. You are using safe update mode...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2012/02/04/04002048/",
        "teaser": null
      },{
        "title": "CentOS - SSL サーバ証明書の有効期限通知！",
        "excerpt":"Webサーバー間の通信内容を暗号化するため、 Apache に mod_ssl を導入している場合、サーバ証明書に有効期限が設定されているので、更新作業を忘れると有効期限が切れてしまいます。 そのような状況に陥らないためには、SSLサーバ証明書の有効期限まで1ヶ月を切ったら、root宛にメールで通知してくれるツールを導入しておくとよいです。 当方の場合、SSLサーバ証明書の有効期限をデフォルトの 365 日から 3650 日に変更しているので、実際は導入していません（インストールできることを確認しアンインストールした）が、後学のために記録として残しておきます。 記録 前提条件 サーバOSは CentOS 6.2 Apache 2.2 導入済み。 Webサーバー間通信内容暗号化ツール mod_ssl 導入済み。 インストール方法 yum で以下のコマンドを実行するだけです。 yum install crypto-utils 結果 crypto-utils がインストールされると /etc/cron.daily/ ディレクトリに certwatch というスクリプトが作成されます。 このスクリプトが毎日、SSLサーバ証明書の有効期限までの日数をチェックし、１ヶ月を切ると以下のような内容のメールがroot宛に送信するようです。 ################# SSL Certificate Warning ################ Certificate for hostname 'www.mk-mode.com', in file: /etc/pki/tls/certs/XXXXXXXX.cer The certificate...","categories": ["サーバ構築"],
        "tags": ["Apache","CentOS"],
        "url": "/2012/02/06/06002057/",
        "teaser": null
      },{
        "title": "Apache2 - DoS 攻撃対策！",
        "excerpt":"少し前に、「Apache2 - 脆弱性対策！」で紹介したとおり、Apache2 脆弱性（DoS攻撃）対策として、Apache 設定ファイルに不正なヘッダーやリクエストそのものを拒否する記述を追加する方法を採っていました。 ※本来は、Apache2 のバージョンを 2.2.20 以上にする事が一番妥当な方法ですが。。。 しかし、この方法でも DoS 攻撃を受けているみたいで、数日経つと OOM-Killer によりあらゆるサービスが徐々に停止していく現象に陥ります。 そこで、別の方法（Rangeを許容しない方法）も試してみましたが、OOM-Killer が動くことは無かったのですが、いまいち挙動が不安定（数時間試しただけですが）だったので、さらに別の方法を試してみました。 Apache2 に mod_evasive というDoS攻撃対策モジュールを導入してみました。 色々調べ結果、全て同じ対応方法が記載されていましたので、これで間違いないと思います。 導入記録 前提条件 以下の条件で作業・確認しております。 サーバOSは CentOS 6.2 Apache2 のバージョンは 2.2.15 １．httpd-devel のインストール httpd-devel が未インストールならインストールする。 # yum -y install httpd-devel ２．mod_so.c の存在確認 mod_evasive の導入には mod_so.c が必要になるので存在するか確認する。 # httpd -l Compiled in...","categories": ["サーバ構築"],
        "tags": ["Apache","CentOS"],
        "url": "/2012/02/08/08002056/",
        "teaser": null
      },{
        "title": "MySQL - 一般ユーザにSUPER権限を付与！",
        "excerpt":"MySQL で ストアドやトリガを使用する際 root ユーザなら問題ないのですが、一般ユーザの場合、SUPER 権限が付与されていないため実行できません。 簡単なことですが、滅多に行わない作業なのでメモっておきます。 SQL 文を発行して行う方法です。 記録 まず、MySQL サーバへ root でログインしておきます。 １．SUPER 権限確認 以下の SQL 文を発行して、一般ユーザに SUPER 権限が付与されているか確認する。 mysql&gt; SELECT user, Super_priv FROM mysql.user WHERE user='hoge'; +------+------------+ | user | Super_priv | +------+------------+ | hoge | N | +------+------------+ 1 row in set (0.00 sec) SUPER 権限が付与されていなければ、Super_priv...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2012/02/10/10002040/",
        "teaser": null
      },{
        "title": "Cygwin - Windows の MySQL へ TCP 接続！",
        "excerpt":"以前、Cygwin から Windows ネイティブの MySQL へ接続することに関する話をしました。 Cygwin - MySQLクライアントインストール！ Cygwin - Ruby on Rails で MySQL ソケットエラー！ 今回も関連したメモ的な話です。 それは、Cygwin のコマンドラインから Windows ネイティブの MySQL へのログインについてです。 前述の過去記事でも紹介していますが、Windows の MySQL は Unix ソケットは使用せず、TCP 接続するようになっています。 ですから、通常 $ mysql -u hoge -p でログインできるところが、以下のようにエラーとなってしまいます。 $ mysql -u hoge -p Enter password: ERROR 2002 (HY000): Can't connect...","categories": ["サーバ構築"],
        "tags": ["Cygwin","MySQL","Windows"],
        "url": "/2012/02/11/11002034/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（単純移動平均版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 今日は、取得している株価データを利用して、買いサイン・売りサインが発生した場合のその後の株価の変動を検証してみました。 全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 単純移動平均とは、その名のとおり単純に当日を含めた過去数日間の平均（相加平均）で、SMA（Simple Moving Average）と略されます。 以下に、前提条件・検証結果を掲載します。 １．前提条件 １．定義 何を以って、買いサイン・売りサインと見なすかですが、今回は一番単純に、 その日の株価（終値）が単純移動平均値（SMA）を上回った場合を「買いサイン」 その日の株価（終値）が単純移動平均値（SMA）を下回った場合を「売りサイン」 としました。 平均値は当日を含めた過去５日分・25日分・75日分の終値で計算しています。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年2月14日現在上場している全市場の3,600銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※2012/02/17 修正（売買サイン判定基準を微調整） ※全取引件数は 7,963,439 件 ２．検証結果 １．サインが発生した件数 [SIGN ] [ 5 ] [ 25 ] [ 75 ] Long 1,033,977 450,660 247,395 Short 1,035,174 452,357 249,290 ５日で計算するよりも25日、25日で計算するよりも75日の方が絞られる。...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/02/13/13002046/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（指数移動平均版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 前回は、単純移動平均値を上回った場合・下回った場合を買いサイン・売りサインと定義して検証してみました。 株価 - 売買サインチェック（単純移動平均版）！ 今回は「指数移動平均」というものを使用して同様の検証をしてみました。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が主な目的です。 指数移動平均とは、簡単に言えば、単純移動平均よりもトレンドを追うのに適した分析方法で、EMA（Exponential Moving Average）と略されます。 計算式は以下のとおり。 その他、指数移動平均の詳細は各自調べてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件 １．定義 何を以って、買いサイン・売りサインと見なすかですが、今回は一番単純に、 その日の株価（終値）が指数移動平均値（EMA）を上回った場合を「買いサイン」 その日の株価（終値）が指数移動平均値（EMA）を下回った場合を「売りサイン」 としました。 平均値は当日を含めた過去5日分・25日分・75日分の終値で検証しています。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年2月14日現在上場している全市場の3,600銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※2012/02/18 修正（売買サイン判定基準を微調整） ※全取引件数は 7,963,439 件 ２．検証結果 １．サインが発生した件数 [SIGN ] ( 5 ) ( 25 ) ( 75 ) [Long ] 1,070,660...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/02/14/14002049/",
        "teaser": null
      },{
        "title": "Ruby on Rails - 3.1.3 から 3.2.1 へアップグレード！",
        "excerpt":"１ヶ月ほど前に、Ruby を 1.9.2 から 1.9.3 にアップデートしたのに合わせ、Rails も 3.0 系から 3.1.3 にアップグレードしました。 しかし、今では Rails も既に 3.2.1 までリリースされています。 そこで、当方の Rails も 3.2.1 にアップグレードしました。 単純に Gem でアップデートするだけでもよいのですが、既存のアプリディレクトリを退避しておいて新たに作成したアプリに移行させる、というような方法を採りました。 アップグレード自体は、単純な作業なのですが、当方の環境においてつまずいた箇所がありましたので記録しておきます。 記録 １．プラグイン 従来、vendor/plugins ディレクトリに配置していたプラグインは 3.2 系では非推奨になり、次の 4.0 系では廃止されるようです。 3.2 系では非推奨であるだけで別に動かなくなるというわけではありませんが、今回対応しておきました。 リリースノートによると、Gemパッケージに変更するか、lib ディレクトリは移動するか、だそうです。 当方に導入しているプラグインは Gem には存在しないものなので、lib ディレクトリへ移動する方法を採りました。 そして、プラグインを読み込むために config/initializers ディレクトリにプラグインを require するためだけのスクリプトを置いて対応するようですが、当方は元々 controller 内でプラグインを require していたので、パスを指定して...","categories": ["プログラミング","Webサイト"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/02/16/16002013/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（単純移動平均・ゴールデンクロス/デッドクロス版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 今回は、単純移動平均線（= SMA）のゴールデンクロス・デッドクロスを買いサイン・売りサインとした場合のその後の株価の変動を検証してみました。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 個人的な記録ですので、興味が無ければ読み飛ばしてください。 ゴールデンクロス（デッドクロス）とは短期と長期の移動平均線を計算し、短期の値が長期の値を上抜けた（下抜けた）場合のことを言います。 株式用語については、ここでは詳しく説明しません。Web等で調べてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件 １．定義 何を以って、買いサイン・売りサインと見なすかですが、今回は その日の短期SMAが長期SMAを上回った場合を「買いサイン」 その日の短期SMAが長期SMAを下回った場合を「売りサイン」 としました。 検証した短期SMAと長期SMAの日数の組み合わせは、[5, 25], [5, 75], [25, 75] です。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年2月14日現在上場している全市場の3,600銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※2012/02/19 修正（売買サイン判定基準を微調整） ※全取引件数は 7,963,439 件 ２．検証結果 １．サインが発生した件数 SIGN ( 5 ) ( 25 ) ( 75 ) [Long ] 215,427...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/02/18/18002045/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（指数移動平均・ゴールデンクロス/デッドクロス版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 前回は単純移動平均（= SMA）でゴールデンクロス・デッドクロスを検証してみましたが、今回は指数移動平均線（= EMA）のゴールデンクロス・デッドクロスを買いサイン・売りサインとした場合のその後の株価の変動を検証してみました。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 個人的な記録ですので、興味が無ければ読み飛ばしてください。 ゴールデンクロス（デッドクロス）とは短期と長期の移動平均線を計算し、短期の値が長期の値を上抜けた（下抜けた）場合のことを言います。 以下に、前提条件・検証結果を掲載します。 １．前提条件 １．定義 何を以って、買いサイン・売りサインと見なすかですが、今回は その日の短期EMAが長期EMAを上回った場合を「買いサイン」 その日の短期EMAが長期EMAを下回った場合を「売りサイン」 としました。 検証した短期EMAと長期EMAの日数の組み合わせは、[5, 25], [5, 75], [25, 75] です。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年2月14日現在上場している全市場の3,600銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※2012/02/20 修正（売買サイン判定基準を微調整） ※全取引件数は 7,963,439 件 ２．検証結果 １．サインが発生した件数 SIGN ( 5 ) ( 25 ) ( 75 ) [Long ] 224,368...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/02/19/19002009/",
        "teaser": null
      },{
        "title": "Windows - MeCab で形態素解析！",
        "excerpt":"文章を意味のある単語に区切り、辞書を利用して品詞や内容を判別することを「形態素解析」と言います。 形態素解析は、主にかな漢字変換や機械翻訳に使われている記述です。   今回はまず、近い将来目論んでいることのために、Windows のコマンドプロンプトで試してみました。     以下、導入・試行方法の記録です。   記録   ０．前提条件   インストールするのは、WindowsXP SP3 です。   １．ダウンロード   MeCab: Yet Another Part-of-Speech and Morphological Analyzer のダウンロードリンクから “mecab-0.992.exe”（当記事執筆時点の最新）をダウンロードします。 Windows版の場合はこのインストーラにIPA辞書も含まれているようです。   ２．インストール   ダウンロードした “mecab-0.992.exe” を実行します。 今回はコマンドプロンプトで使用することが目的なので、途中で聞かれる「辞書の文字コード選択」では「SHIFT-JIS」を選択します。   ３．実行   デスクトップに作成された MeCab のショートカットアイコンをダブルクリックするだけです。   ４．形態素解析の実行   開いたＤＯＳ画面に文章を入力＆エンター押下で形態素解析が実行されます。 以下のような感じになります。      出力フォーマットは左から順に以下のようになっているようです。   表層形\\t品詞,品詞細分類1,品詞細分類2,品詞細分類3,        活用形,活用型,原形,読み,発音     おもしろいですね。 近い将来、当方のサーバの MySQL に保存している全ツイート内容や全ブログ記事を Ruby を使って解析・集計してみたいとも思っています。   以上。   ","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2012/02/21/21002012/",
        "teaser": null
      },{
        "title": "Cygwin - procps パッケージ導入！",
        "excerpt":"Cygwin で top コマンドや free コマンドなどが使用できない場合があります。 インストールされていないからであり、procps というパッケージをインストールすることで解決できます。 導入メモ ０．procps について Cygwin に procps というパッケージを導入することで、以下のコマンド使用できるようになります。 prockill procps sysctl free pgrep pkill pmap pwdx skill slabtop snice tload top uptime vmstat w watch 以下を参照。 http://cygwin.com/packages/procps/ １．導入済み確認 以下のコマンドで Cygwin に既に procps が導入済みかどうかを確認します。 $ cygcheck -c | grep procps なにも表示されなければ、未インストールです。 apt-cyg を導入しているなら、以下のコマンドでも確認できます。 $...","categories": ["PC_Tips"],
        "tags": ["Cygwin","Windows"],
        "url": "/2012/02/23/23002058/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（MACDシグナル版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 これまで、単純移動平均（= SMA）や指数移動平均線（= EMA）、またそれらのゴールデンクロス・デッドクロスを利用してを買いサイン・売りサインの動向を検証してみました。 今回は、「MACDシグナル」というものを利用して同様の検証を行いました。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 まず、「MACD」とは「移動平均・収束・拡散法」（= Moving Average Convergence/Divergence の略) で、「短期EMA - 長期EMA」 の値となります。 そして、「MACDシグナル」とは MACD の単純移動平均で表されます。 移動平均で使用される日数は、以下の日数が定番のようです。 MACDの短期EMA ・・・ 12日 MACDの長期EMA ・・・ 26日 MACDシグナルのSMA ・・・ ９日 MACD の値が MACDシグナル の値を上抜けた場合・下抜けた場合を買いサイン・売りサインとする考え方です。 以下に、前提条件・検証結果を掲載します。 １．前提条件 以降に出てくる Long は買いサイン、Short は売りサインを表しています。 １．定義 何を以って、買いサイン・売りサインと見なすかですが、今回は３種類考えてみました。 DEF-1 その日のMACDがMACDシグナルを上抜けた場合を「買いサイン」とする...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/02/25/25002022/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（RSI版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 これまで、色々な指数を利用して売買サインを検証してきました。 今回は、「RSI」というものを利用して同様の検証を行いました。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 まず、RSI とは「相対力指数」（= Relative Strength Index の略) で、次のような計算式となります。 買われ過ぎ、売られ過ぎを観る指標です。 一般的には、30％以下が売られ過ぎ、70％以上は買われ過ぎの水準と言われています。 このことから、30％以下を買いサイン、70％以上を売りサイン、と捉えることが出来ます。。 （25％以下を買いサイン、75％以上を売りサイン、と捉えることもあります） また、上げ幅・下げ幅の合計を出す日数Ｎは一般に 14 を使用する事が多いようです。 以下に、前提条件・検証結果を掲載します。 １．前提条件 以降に出てくる Long は買いサイン、Short は売りサインを表しています。 １．定義 何を以って、買いサイン・売りサインと見なすかですが、日数Ｎを 14 として、 前日RSI ＞ 30%, 当日RSI ≦ 30% となった場合を売られ過ぎと観て「買いサイン」とする 前日RSI ＜ 70%, 当日RSI ≧ 70% となった場合を買われ過ぎと観て「売りサイン」とする...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/02/27/27002028/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（ストキャスティクス版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 これまで、色々な指数を利用して売買サインを検証してきました。 今回は、「ストキャスティクス」というものを利用して同様の検証を行いました。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 まず、ストキャスティクス（= Stochastics）とは、一定期間の最安値と最高値を基準に、現在の株価が買われすぎか、売られすぎかを観ることの出来る指標で、Fast%K、Fast%D、Slow%D と呼ばれる３種類で構成されます。 （Fast%K を %K、Fast%D を %D、Slow%D を SD と表現する場合もあります。） 実際には、Fast%Kライン、Fast%Dライン、Slow%Dラインの３本のラインから２つのラインを選んで使用し、「買われすぎ」や「売られすぎ」の状態を観ます。 ※定義は以降の記事参照。 以下に、前提条件・検証結果を掲載します。 １．前提条件 以降に出てくる Long は買いサイン、Short は売りサインを表しています。 １．計算式 まず、各指標の計算式です。 ２．定義 前記の計算式から、 Fast%KラインとFast%Dラインの動きの早さを比べた場合、Fast%Kの方が動きの早いライン Fast%DラインとSlow%Dラインの動きの早さを比べた場合、Fast%Dの方が動きの早いライン となります。 １の性質を利用した指標を「ファスト・ストキャスティクス」、２の性質を利用した指標を「スロー・ストキャスティクス」と呼ぶことにします。 次に、以下のように買いサイン・売りサインを定義します。 ファスト・ストキャスティクス Fast%K が A%以下の圏域で Fast%D を上抜けたら買いサイン Fast%K が B%以上の圏域で Fast%D...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/02/29/29002048/",
        "teaser": null
      },{
        "title": "2012年2月 – OS・ブラウザ別アクセス状況！",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,942 74.4266 Linux 5,074 16.4607 Mac OS 1,902 6.1703 unknown 537 1.7421 Ubuntu Linux 231 0.7494 RedHat Linux 72 0.2336 Fedora Linux 34 0.1103 PalmOS 11 0.0357 Debian GNU/Linux 8 0.0260 FreeBSD 7 0.0227 Android 4 0.0130 PlayStation 3 0.0097 合　計 30,825 100.0000...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/03/01/01002049/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（DMI/ADX版）その１！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 これまで、色々な指数を利用して売買サインを検証してきました。 今回は、「DMI」と「ADX」というものを利用して同様の検証を行いました。 検証の前に、まず「DMI」、「ADX」の概要を記録しておきます。 DMI（= Directional Movement Index）とは、トレンドの方向性を表す指標で、上昇力を表す +DI、下降力を表す -DI で構成され、 +DI &gt; -DI で上昇トレンド +DI &lt; -DI で下降トレンド であることを示します。 ADX（= Average Directional Movement Index）とは、トレンドの強さを表す指標で、方向性の強さを表す ADX、ADX の向きを表す ADXR で構成され、 ADXラインが上昇している時は、トレンドが継続中である状態 ADXラインが下降を始めた時は、トレンドが下落もしくはトレンドの無い状態 にあります。 ただし、ダマシを避けるため例えば ADX &gt; 30 となる所でトレンドの有無を判断したり、ADX &gt; ADXR でもトレンド有りと判断したりします。 また、 相場上昇時は、+DI は上昇、ADX, ADXR はその上昇の勢いと比例し、-DI は下降...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/03/03/03002038/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（DMI/ADX版）その２！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 前回は、ＤＭＩ・ＡＤＸの概要、売買サインの判定基準について説明しました。 株価 - 売買サインチェック（ＤＭＩ・ＡＤＸ版）その１！ 今回は、定義した売買サインの判定基準に基づいて、売買サイン発生後の値動きを検証してみました。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 以下に、前提条件・検証結果を掲載します。 １．前提条件 以降に出てくる Long は買いサイン、Short は売りサインを表しています。 計算式・売買サインの定義については前回の記事「株価 - 売買サインチェック（ＤＭＩ・ＡＤＸ版）その１！」を参照してください。 計算に使用した日数は、DI、ADX、ADXR ともに14日です。 また、今回の検証では調整後終値（株式分割があった場合の調整値）を考慮していません。終値で検証しています。 ２．検証銘柄と検証期間 2012年2月17日現在上場している全市場の3,599銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※全取引件数は 7,960,496 件 ２．検証結果 １．サインが発生した件数 DEF-1 から DEF-8 の検証結果は以下のとおり。 DEF-7 では、売りサインの発生回数が買いサインの約３倍となったが、DEF-7 以外は買い・売りが同じような件数となった [ DEF ] [Long ] [Short] DEF-1 377,456...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/03/04/04002027/",
        "teaser": null
      },{
        "title": "Cygwin - 形態素解析 MeCab をインストール！",
        "excerpt":"株式関連の話が続きましたが、今日は気分転換に別のお話です。 少し前には、文章を意味のある単語に区切り、辞書を利用して品詞や内容を判別する「形態素解析」の仕組みである「 MeCab 」を Windows マシンに導入しました。 今回は、Cygwin 上に「 MeCab 」インストールしてみました。 いずれ、Cygwin + Ruby で形態素解析を行うための準備です。 以下が、導入記録です。 記録 MeCab: Yet Another Part-of-Speech and Morphological Analyzer では、当記事執筆時点では MeCab 0.993 が最新でした。 しかし、0.99x 系は Cygwin では make でエラーとなるので、今回は 0.98 をインストールしました。 １．事前準備 Cygwin 上に MeCab をインストールするには、ソースを取得してビルド＆インストールします。 Cygwin に以下のパッケージが導入されていなければ、Cygwin の setup.exe 等でインストールしておく。 gcc-g++ make expat gettext gettext-devel...","categories": ["PC_Tips"],
        "tags": ["Cygwin"],
        "url": "/2012/03/06/06002013/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（RCI版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 これまで、色々な指数を利用して売買サインを検証してきました。 今回は、「RCI」というものを利用して同様の検証を行いました。 少し前に検証した「RSI」とは異なります。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 RCI（= Rank Correlation Index）とは、「順位相関指数」と呼ばれている統計学を基にしたテクニカル指標で、「上がり始め」、「下がり始め」の時期とタイミングを捉える指標です。 相場の変化の様子を見ることができますが、反応が敏感なため、ダマシに出合う場合も多いので注意が必要です。 計算式は以下のとおり。 【計算例】[ n = 9 とした場合 ] 　日　付　 　終　値　 日付・順位 終値・順位 　順位差　 順位差の２乗 ８日前 141 9 9 0 0 ７日前 160 8 2 6 36 ６日前 152 7 4.5 2.5 6.25 ５日前...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/03/08/08002048/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（RCI・ゴールデンクロス/デッドクロス版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 前回は、「RCI」というものを利用して同様の検証を行いました。 株価 - 売買サインチェック（RCI版）！ 今回は、複数の異なる日数で計算した RCI のクロスを売買サインとする方法です。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 RCI の計算方法については、「株価 - 売買サインチェック（RCI版）！」を参照してください。 以下に、前提条件・検証結果を掲載します。 １．前提条件 以降に出てくる Long は買いサイン、Short は売りサインを表しています。 １．定義 何を以って、買いサイン・売りサインと見なすかですが、 買いサイン : 短期 RCI が 長期 RCI を -80% 以下の位置で下から上抜けた時 (ゴールデンクロス発生) 売りサイン : 短期 RCI が 長期 RCI を 80% 以上の位置で上から下抜けた時...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/03/09/09002050/",
        "teaser": null
      },{
        "title": "Cygwin - Ruby で形態素解析 MeCab を使う！",
        "excerpt":"前回は、Cygwin に「形態素解析」の仕組みである「 MeCab 」を導入しました。 今回は、Cygwin 上の Ruby で MeCab を使用するために、「 mecab-ruby 」をインストールしました。 以下が、導入記録です。 記録 MeCab 本体や辞書をダウンロードした MeCab: Yet Another Part-of-Speech and Morphological Analyzer からダウンロードするのですが、本体に 0.98 を導入しているので、mecab-ruby も 0.98 を使用することにします。 １．事前準備 今回は、Ruby で MeCab を使用することが目的なので、当然 Cygwin に Ruby をインストールしておく。 ２．mecab-ruby アーカイブダウンロード＆展開 以下のようにアーカイブをダウンロードし、展開しておく。 $ cd /usr/src $ wget http://mecab.googlecode.com/files/mecab-ruby-0.98.tar.gz $ tar zxvf...","categories": ["PC_Tips","プログラミング"],
        "tags": ["Cygwin","Ruby","MeCab","形態素解析"],
        "url": "/2012/03/11/11002004/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（HLバンド版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 これまで、色々な指数を利用して売買サインを検証してきました。 今回は、「HLバンド」というものを利用して同様の検証を行いました。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 HLバンド（= ハイローバント）とは、株価チャートに 直近ｎ日（前日から遡ってｎ日）の高値（ H[igh]バンド ） 直近ｎ日（前日から遡ってｎ日）の安値（ L[ow]バンド ） 直近ｎ日（前日から遡ってｎ日）の高値と安値の中心（ M[iddle]バンド ） の３本のラインを引いて、現在のトレンドの方向・抵抗価格・支持価格を確認するテクニカル指標です。 Hバンドを抵抗線、Lバンドを支持線と考えます。 上記の 高値は、前日から遡ってｎ日間で最も高値となった時の株価（高値のMAX） 安値は、前日から遡ってｎ日間で最も安値となった時の株価（安値のMIN） です。 ※ｎは任意の日数。10, 20 が一般的。 以下に、前提条件・検証結果を掲載します。 １．前提条件 以降に出てくる Long は買いサイン、Short は売りサインを表しています。 １．定義 何を以って、買いサイン・売りサインと見なすかですが、 DEF-1 ( 順張り戦略-1 ) 買いサイン : 前日終値と比べて、高値がＨバンドを上抜けた時 売りサイン : 前日終値と比べて、安値がＬバンドを下抜けた時...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/03/13/13002019/",
        "teaser": null
      },{
        "title": "Ruby - Twitter ユーザ情報取得！",
        "excerpt":"以前、Ruby で Twitter のタイムラインとかユーザ情報とか OAuth 認証とかについて書きましたが、今回はその追加記録です。 自分がフォローしているユーザや自分をフォローしてくれてるユーザの一覧（ユーザ名とか説明とか）はずっと取得して管理しているのですが、ツイート数やフォロー・フォロワー数を管理していなかったので、機能を追加してみました。 その時のテスト用スクリプトです。 OAuth 認証も不要な部分なので、非常に簡単です。 Ruby スクリプト 以下は非常に簡単なテスト用スクリプトです。 実際は、MySQL に登録したり、登録済みユーザと実際のユーザと突合処理をしたり等しているので、もっともっと複雑です。 # -*- coding: utf-8 -*- require 'twitter' class TwitterGetUser begin client = Twitter::Client.new # テスト用ユーザID配列 # ( 数値形式のユーザID ) ary_user = [ 11111111, 22222222 ] res = client.users( ary_user ) res.each do |userinfo| puts \"id...","categories": ["SNS","プログラミング"],
        "tags": ["Ruby","Twitter"],
        "url": "/2012/03/15/15002014/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（ボリンジャーバンド版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の2000年からの全取引データを取得しています。 これまで、色々な指数を利用して売買サインを検証してきました。 今回は、「ボリンジャーバンド」というものを利用して同様の検証を行いました。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 ボリンジャーバンドとは、移動平均線を基に標準偏差を応用させた考え方のテクニカル指標です。 一定期間の単純移動平均の標準偏差(σ)を算出し、移動平均線に対してσの１～３倍を加算したものをボリンジャーバンドの +1σ ～ +3σ、減算したものをボリンジャーバンドの -1σ ～ -3σ として表示します。 そして、統計学的に、対象データの変動幅が正規分布している場合には、 ボリンジャーバンドの±１σの範囲内に収まる確率・・・約68.26％ ボリンジャーバンドの±２σの範囲内に収まる確率・・・約95.44％ ボリンジャーバンドの±３σの範囲内に収まる確率・・・約99.74％ であるという性質を利用して、売買サインを算出するのです。 標準偏差の計算式は不偏分散を用いる方法と標本分散を用いる方法がありますが、不偏分散を用いるほう方が一般的のようです。 【不偏分散】 【標本分散】 ※ｎは任意の日数で、9, 13, 20, 25 が一般的。 以下に、前提条件・検証結果を掲載します。 １．前提条件 以降に出てくる Long は買いサイン、Short は売りサインを表しています。 １．定義 何を以って、買いサイン・売りサインと見なすかですが、 DEF-1 ( 順張り戦略 ) 買いサイン : 終値がボリンジャーバンド +kσを上抜けた時...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/03/17/17002035/",
        "teaser": null
      },{
        "title": "Ruby - Twitter ブロックしているユーザの一覧を取得！",
        "excerpt":"以前、Ruby で Twitter のタイムラインとかユーザ情報とか OAuth 認証とかツイート数・フォロワー数とかについて書きました。 過去記事は検索してご覧ください。 今回は、自分がブロックしているユーザの一覧を取得する処理についてです。 OAuth 認証が必要ですが、簡単に取得可能です。 Ruby スクリプト 以下はテスト用の Ruby スクリプトです。 事前に OAuth 認証できるようキーを取得しておく必要があります。 【参照】Ruby - TwitterタイムラインをOAuth認証で取得！ # -*- coding: utf-8 -*- require 'twitter' require 'oauth' #=Twitter ブロックしているユーザ取得 class TestTwitterGetBlockedUser # Consumer key, Secretの設定 CONSUMER_KEY = \"XXXXXXXXXXXXXXXXXXXX\" CONSUMER_SECRET = \"XXXXXXXXXXXXXXXXXXXX\" # Access Token Key, Secretの設定 ACCESS_TOKEN_KEY...","categories": ["SNS","プログラミング"],
        "tags": ["Ruby","Twitter"],
        "url": "/2012/03/19/19002034/",
        "teaser": null
      },{
        "title": "株式分割情報を集計！",
        "excerpt":"【はじめに】 Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照） 以下の記事を参考にすることもお勧めしません。 こんばんは。 Yahoo!ファイナンスから Ruby + MySQL で Web スクレイピングして取得している各種データの内、株式分割情報を集計してみました。 集計に使用したデータは、2012年3月12日現在上場している3,593銘柄の1980年から2012年3月12日までのデータです。 また、複数の市場に上場している銘柄についても全ての市場について集計しています。 ※個人的な記録です。興味の無い方はスルーしてください。 集計結果 集計対象期間内に、6,795 件の株式分割情報が存在しました。 １．比率別件数 １株が何株に分割されたかを集計。 1:1.1、1:1.05、1:2、1:1.2 という比率での分割が際立って多いです。 [ RATE ] [CNT] [ RATE ] [CNT] [ RATE ] [CNT] [ RATE ] [CNT] 0.001 : 3 1.055 : 2 1.121 : 2 1.229 : 2 0.010...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/03/21/21002051/",
        "teaser": null
      },{
        "title": "Ruby - Twitter ツイートを形態素解析！",
        "excerpt":"当方、自宅サーバにて、Ruby + MySQL + Twitter API で Twitter の自分のツイートをアカウント取得（2011年7月7日）以来全て保存しております。 形態素解析の勉強もかねて Ruby で解析してみました。 以下の過去記事もご参照ください。 Cygwin - 形態素解析 MeCab をインストール！ Cygwin - Ruby で形態素解析 MeCab を使う！ 解析結果 Twitter アカウント取得時の2011年7月7日から当記事執筆時点の2012年3月14日までの全1,712件のツイートを集計。 １．品詞別出現頻度集計 品詞別に出現頻度の多い単語上位20件を表示。 [名詞]---------------------- 名詞, . : 721 名詞, / : 441 名詞, :// : 382 名詞, http : 381 名詞, t : 284...","categories": ["SNS","プログラミング"],
        "tags": ["MySQL","Ruby","Twitter"],
        "url": "/2012/03/23/23002043/",
        "teaser": null
      },{
        "title": "日経平均株価の計算方法！",
        "excerpt":"日経平均株価とは、東京証券取引所一部上場の銘柄から選定された225銘柄の株価をダウ式計算ルールに則って算出した価格平均指数です。 そうです。単純に225銘柄の株価の平均を算出している訳ではないんです。 よく考えてみれば分かります。 たとえば、今まで１株1,000円の株と2,000円の株の平均株価は、 ( 1,000 + 2,000 ) / 2 = 1,500 (円) ですが、１株2,000円の株が株式分割で２株になると、１株の価格が1,000円（２株で2,000円）になり、平均株価か ( 1,000 + 1,000 ) / 2 = 1,000 (円) となり、株式分割前と分割後で差が発生してしまいます。 また、日経平均株価に使用する225銘柄は入れ替えがあったりもします。 銘柄が入れ替わっているのですから、当然株価も異なります。 調整しなければなりません。 これらのようなことから、日経平均株価は各銘柄の実際の株価の他に各銘柄のみなし額面や除数といったものを使用して計算するようになっています。 みなし額面、除数、日経平均株価の計算方法等については以下を参照。 日経平均プロファイル という訳で、自分で日経平均株価をプログラミング言語 Ruby で計算してみました。 ちなみに、当方は日々、全銘柄の株価データを Ruby + MySQL で保存しています。 ※実際、そうでもしていないと、大量の株価デーを都度取得していては時間が足りません。 Ruby スクリプトは当方のシステムに特化したものになっているため公開しませんが、手順は以下の通りです。 日経平均株価計算手順 詳細な計算手順は 日経平均プロファイル 内の「算出要領」リンクのPDFファイルに記載されています。 取引時間中の日経平均株価の計算は個人のレベルでは難しいので、終値ベースの計算手順を記しています。 １．「除数」の取得 銘柄入替等が発生するたびに値が変動する除数は...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/03/25/25002021/",
        "teaser": null
      },{
        "title": "Cygwin - Fortran95 を使う！",
        "excerpt":"Cygwin 上で Fortran を使えるようにしてみました。 大学時代に FORTRAN77（パンチカード式）に少しだけ触れた程度でしたが、思い出す意味も含めてコンパイルできる環境を準備してみました。 Fortran は現在、オブジェクト指向プログラミングのできる Fortran2003 が最新のようですが、Cygwin で使用できる Fortran は Fortran95 が最新のようです。 以下が、環境構築記録です。 記録 １．コンパイラのダウンロード＆展開 Fortran95 のコンパイルには G95 というものを使用します。The G95 Project のサイトのダウンロードリンクからアーカーブをダウンロードします。 今回は Cygwin での使用なので、ダウンロードするアーカイブは “Cygwin x86 tarball” です。 そして、展開する際にはルートである必要があります。 $ cd / $ wget http://ftp.g95.org/g95-x86-cygwin.tgz $ tar zxvf g95-x86-cygwin.tgz 展開すると、”/usr/local/bin/” ディレクトリに “i686-pc-cygwin-g95.exe” が配置されます。 ２．コンパイラへのリンケージ コンパイラへのリンクを貼ります。 $...","categories": ["プログラミング","数学"],
        "tags": ["Cygwin","Fortran","円周率"],
        "url": "/2012/03/27/27002055/",
        "teaser": null
      },{
        "title": "株価 - JASDAQ の始値に注意！",
        "excerpt":"【はじめに】 Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照） 以下の記事を参考にすることもお勧めしません。 こんばんは。 JASDAQ とは大阪証券取引所の扱う日本発のベンチャー（新興）企業向けの市場のことです。 表題の「始値に注意！」とは、Yahoo!ファイナンス等で取得できる株価データの中でも「古い」データには「始値」が公表されていないものがある、ということなんです。 実際、テクニカル分析用にとプログラミング言語を駆使してデータを収集していて気付いたことです。 色々調べてみると、確かに始値が公表されていないケースがあるようです。 参考までに、2012年3月14日現在 JASDAQ に上場している銘柄（スタンダード：906銘柄、グロース：51銘柄、外国：1銘柄）で、始値が公表されていない銘柄、期間、件数を調べてみました。 調査結果 銘柄コード・欠落期間（開始・終了）・欠落日数（営業日数ベース）の一覧です。 全部で 147 銘柄（全てスタンダード）が該当していました。 [1376] 1987-03-02 1991-10-25 922 [1841] 1987-03-02 1991-10-25 639 [1873] 1988-08-03 1991-10-25 706 [1981] 1987-03-02 1991-09-30 541 [1984] 1987-03-02 1991-10-25 984 [1992] 1989-05-23 1991-10-25 436 [1994] 1990-07-24 1991-10-25 289 [2221] 1989-10-26 1991-10-11 276 [2268]...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/03/29/29002045/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（単純移動平均版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（単純移動平均版）！ 今回は、「単純移動平均」での計算で発生した売買サインデータを基に、取引をしていた場合にどのような結果（損益）になるのかを検証していました。 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 その日の株価（終値）が単純移動平均値（SMA）を上回った場合を「買いサイン」 その日の株価（終値）が単純移動平均値（SMA）を下回った場合を「売りサイン」 としました。 平均値は当日を含めた過去５日分・25日分・75日分の終値で計算しています。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年3月19日現在上場している全市場の3,596銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※全取引件数は 7,936,893 件 ３．注文条件 資金は 5,000,000 円に設定 無ポジション中に買いサイン発生で、買いエントリ 買いポジション中にストップロス発生で、エグジット 買いポジション中に売りサイン発生で、エグジット 無ポジション中に売りサイン発生で、売りエントリ 売りポジション中にストップロス発生で、エグジット 売りポジション中に売りサイン発生で、エグジット エントリ・エグジットは翌営業日の始値で行う 手数料は、SBI証券の手数料（スタンダードプラン）を使用する。 リスク率は 0.05 に設定 ストップロス率は 0.4 に設定 スリッページは 1...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/03/31/31002036/",
        "teaser": null
      },{
        "title": "2012年3月 – OS・ブラウザ別アクセス状況！",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 25,139 76.0015 Linux 4,843 14.6416 Mac OS 2,209 6.6784 unknown 504 1.5237 Ubuntu Linux 253 0.7649 Fedora Linux 37 0.1119 Debian GNU/Linux 36 0.1088 FreeBSD 19 0.0574 RedHat Linux 14 0.0423 PalmOS 8 0.0242 Android 6 0.0181 PlayStation 4 0.0121 SuSE Linux 3...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/04/01/01002058/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（指数移動平均版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（指数移動平均版）！ 今回は、「指数移動平均」での計算で発生した売買サインデータを基に、取引をしていた場合にどのような結果（損益）になるのかを検証していました。 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 その日の株価（終値）が指数移動平均値（EMA）を上回った場合を「買いサイン」 その日の株価（終値）が指数移動平均値（EMA）を下回った場合を「売りサイン」 としました。 平均値は当日を含めた過去５日分・25日分・75日分の終値で計算しています。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年3月22日現在上場している全市場の3,595銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※全取引件数は 7,934,411 件 ３．注文条件 資金は 5,000,000 円に設定 無ポジション中に買いサイン発生で、買いエントリ 買いポジション中にストップロス発生で、エグジット 買いポジション中に売りサイン発生で、エグジット 無ポジション中に売りサイン発生で、売りエントリ 売りポジション中にストップロス発生で、エグジット 売りポジション中に売りサイン発生で、エグジット エントリ・エグジットは翌営業日の始値で行う 手数料は、SBI証券の手数料（スタンダードプラン）を使用する。 リスク率は 0.05 に設定 ストップロス率は 0.4 に設定 スリッページは 1...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/02/02002030/",
        "teaser": null
      },{
        "title": "株価 - バックテスト(単純移動平均・ゴールデン/デッドクロス版)！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（単純移動平均・ゴールデンクロス/デッドクロス版）！ 今回は、短期と長期２本の「単純移動平均」がクロスする点を売買サインとした場合について、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 その日の短期SMAが長期SMAを上抜けた場合を「買いサイン」 その日の短期SMAが長期SMAを下抜けた場合を「売りサイン」 としました。 検証した短期SMAと長期SMAの日数の組み合わせは、[5, 25], [5, 75], [25, 75] です。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年3月31日現在上場している全市場の3,596銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※全取引件数は 7,934,411 件 ３．注文条件 資金は 5,000,000 円に設定 無ポジション中に買いサイン発生で、買いエントリ 買いポジション中にストップロス発生で、エグジット 買いポジション中に売りサイン発生で、エグジット 無ポジション中に売りサイン発生で、売りエントリ 売りポジション中にストップロス発生で、エグジット 売りポジション中に売りサイン発生で、エグジット エントリ・エグジットは翌営業日の始値で行う 手数料は、SBI証券の手数料（スタンダードプラン）を使用する。 リスク率は 0.05...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/04/04002034/",
        "teaser": null
      },{
        "title": "株価 - バックテスト(指数移動平均・ゴールデン/デッドクロス版)！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（指数移動平均・ゴールデンクロス/デッドクロス版）！ 今回は、短期と長期２本の「指数移動平均」がクロスする点を売買サインとした場合について、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 その日の短期EMAが長期EMAを上抜けた場合を「買いサイン」 その日の短期EMAが長期EMAを下抜けた場合を「売りサイン」 としました。 検証した短期EMAと長期EMAの日数の組み合わせは、[5, 25], [5, 75], [25, 75] です。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年3月31日現在上場している全市場の3,596銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※全取引件数は 7,934,411 件 ３．注文条件 資金は 5,000,000 円に設定 無ポジション中に買いサイン発生で、買いエントリ 買いポジション中にストップロス発生で、エグジット 買いポジション中に売りサイン発生で、エグジット 無ポジション中に売りサイン発生で、売りエントリ 売りポジション中にストップロス発生で、エグジット 売りポジション中に売りサイン発生で、エグジット エントリ・エグジットは翌営業日の始値で行う 手数料は、SBI証券の手数料（スタンダードプラン）を使用する。 リスク率は 0.05...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/05/05002021/",
        "teaser": null
      },{
        "title": "Cygwin - Python を使う！",
        "excerpt":"Cygwin 上で Python を使えるようにしてみました。 現在、Python は 2.x 系では 2.7.2 が最新、3.x 系では 3.2.2 が最新のようです。 ソースからインストールする場合は、これらのバージョンにするでのしょうが、今回はちょっと試すだけなので、パッケージによるインストールとしました。(この場合のバージョンは、2.6.7) 以下が、環境構築記録です。 記録 １．Python インストール Cygwin の setup.exe からインストールするか、apt-cyg 等のツールを導入済みなら以下のようにしてインストールする。 $ apt-cyg install python $ python -V Python 2.6.7 ２．対話形式でで動作確認 対話形式で Python の動きを確認してみます。 $ python Python 2.6.7 (r267:88850, Feb 2 2012, 23:50:20) [GCC 4.5.3] on cygwin Type...","categories": ["プログラミング","数学"],
        "tags": ["Cygwin","Python","円周率"],
        "url": "/2012/04/07/07002050/",
        "teaser": null
      },{
        "title": "Ruby - 処理実行時間計測！",
        "excerpt":"ご存知の方も多いと思いますが、Ruby での処理の実行時間計測方法についてです。 Ruby に限らずよくある方法に、処理前と処理後の時間差を計算する方法があります。 Ruby ではこの方法以外に、ベンチマークを取るためのクラス Benchmark を使う方法もあります。 こちらを参照。 library benchmark 実際に、処理時間を計測してみました。 検証記録 １．検証用Rubyスクリプト 階乗を計算する処理３種類で計測して比較するようにしてみました。 ※2の10乗(= 1,024)の階乗を10の3乗(= 1,000)回処理。 library benchmark によると出力書式等を細かく設定することも可能ですが、一番単純な方法でも充分です。 require 'benchmark' # 階乗を普通に計算 def fact_1( n ) f = 1 if n == 0 f else ( 1..n ).each do |i| f = f * i end end...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/04/08/08002058/",
        "teaser": null
      },{
        "title": "Ruby - faraday の ワーニング！",
        "excerpt":"Ruby で Twitter API を使ってツイートすると、以下のようなワーニングが出力される場合があります。 /usr/local/lib/ruby/gems/1.9.1/gems/faraday-0.7.5/lib/ faraday/utils.rb:128: warning: regexp match /.../n against to UTF-8 string ※実際は１行で出力される。 当方の Ruby1.9.3-p0 + Gem-1.8.15 + faraday-0.7.5 + twitter-2.0.2 の環境で発生しました。 ワーニングなので、実際の処理には今のところ影響はありませんが、気持ち悪いので調査・対応しました。 実際のところ、”faraday/utils.rb” 内の gsub で正規表現を使用している箇所で文字コード指定が影響しているようです。 そこを修正してもよいのですが、正規の方法ではないので別の方法で対処。 作業記録 対応１．Gem アップデート まず、Gem のバージョンが古いのではないかと思い、1.8.15 を最新の 1.8.21 にアップデートしてみました。 $ gem -v 1.8.15 $ gem update --system $ gem -v...","categories": ["SNS","プログラミング"],
        "tags": ["Ruby","Twitter"],
        "url": "/2012/04/09/09002009/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（RSI版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（RSI版）！ 今回は、「RSI（相対力指数）」での計算で発生した売買サインデータを基に、取引をしていた場合にどのような結果（損益）になるのかを検証していました。 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 当日RSIが 30% を下抜けた場合を売られ過ぎと観て「買いサイン」とする 当日RSIが 70% を上抜けた場合を買われ過ぎと観て「売りサイン」とする としました。 上げ幅・下げ幅の合計を出す日数Ｎは 14 としました。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年3月31日現在上場している全市場の3,592銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※全取引件数は 7,926,658 件 ３．注文条件 資金は 5,000,000 円に設定 無ポジション中に買いサイン発生で、買いエントリ 買いポジション中にストップロス発生で、エグジット 買いポジション中に売りサイン発生で、エグジット 無ポジション中に売りサイン発生で、売りエントリ 売りポジション中にストップロス発生で、エグジット 売りポジション中に売りサイン発生で、エグジット エントリ・エグジットは翌営業日の始値で行う 手数料は、SBI証券の手数料（スタンダードプラン）を使用する。 リスク率は 0.05...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/11/11002030/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（RCI版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（RCI版）！ 今回は、「RCI（順位相関指数）」での計算で発生した売買サインデータを基に、取引をしていた場合にどのような結果（損益）になるのかを検証していました。 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 DEF-1 ( RCIを使った順張り戦略 ) 買いサイン : RCI が 0% を下から上抜けた時 売りサイン : RCI が 0% を上から下抜けた時 DEF-2 ( RCIを使った逆張り戦略 ) 買いサイン : RCI -80% を上から下抜けた時 売りサイン : RCI +80% を下から上抜けた時 ※70%,...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/12/12002039/",
        "teaser": null
      },{
        "title": "Cygwin - Scala を使う！",
        "excerpt":"Cygwin 上で、オブジェクト指向の機能と関数型言語の機能を統合した汎用プログラミング言語 Scala を使えるようにしてみました。 今後本格的に使用するかどうかは別として、ちょっと触れてみたいと思った程度です。 現在、Scala は 2.9.1-1 が最新のようです。 以下が、環境構築記録です。 記録 ０．事前準備 Scala は Java の実行環境がないと動きません。Cygwin で Java が使えるようになっている必要が有ります。 当方の場合は、Windows ネイティブ側に導入済みの JDK を Cygwin で使用できるような環境となっています。 もちろん、ランタイム JRE だけでもかまいません。 １．アーカイブダウンロード Scala はビルドせず、アーカイブを展開するだけでよいので、配置したい場所にアーカーブをダウンロードします。 今回は “/usr/local/share” ディレクトリ配下としました。 $ cd /usr/local/share $ wget http://www.scala-lang.org/downloads/distrib/files/scala-2.9.1-1.tgz ２．アーカイブ展開 ダウンロードしたアーカイブファイルを展開します。 $ tar zxvf scala-2.9.1-1.tgz ３．環境変数の設定 .bashrc 等に以下のような内容で環境変数の設定を記述する。 export...","categories": ["プログラミング","数学"],
        "tags": ["Cygwin","Scala"],
        "url": "/2012/04/14/14002059/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（RCI・ゴールデン/デッドクロス版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（RCI・ゴールデンクロス/デッドクロス版）！ 今回は、短期と長期２本の「RCI（順位相関指数）」がクロスする点を売買サインとした場合について、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 短期 RCI が 長期 RCI を -80% 以下の位置で下から上抜けた時 (ゴールデンクロス発生)を「買いサイン」 短期 RCI が 長期 RCI を 80% 以上の位置で上から下抜けた時 (デッドクロス発生)を「売りサイン」 としました。 検証した短期RCIと長期RCIの日数の組み合わせは、[9, 26], [9, 52], [26, 52] です。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年3月31日現在上場している全市場の 3,592 銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/16/16002003/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（MACDシグナル版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（MACDシグナル版）！ 今回は、「MACD（移動平均・収束・拡散法）シグナル」での計算で発生した売買サインデータを基に、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 DEF-1 その日のMACDがMACDシグナルを上抜けた場合を「買いサイン」とする その日のMACDがMACDシグナルを下抜けた場合を「売りサイン」とする DEF-2 上記 DEF-1 の「買いサイン」がマイナス圏(MACD &lt; 0)で発生した場合を「買いサイン」とする 上記 DEF-1 の「売りサイン」がプラス圏(MACD &gt; 0)で発生した場合を「売りサイン」とする DEF-3 上記 DEF-2 の「買いサイン」発生後、新たに売買サインが発生せずにゼロラインを上抜けた場合を「買いサイン」とする 上記 DEF-2 の「売りサイン」発生後、新たに売買サインが発生せずにゼロラインを下抜けた場合を「売りサイン」とする としました。 実際の検証では、MACDの短期EMA・長期EMA、MACDシグナルのSMAは定番の 12日・26日・9日を使用しました また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年3月31日現在上場している全市場の 3,579 銘柄を対象に、2000年1月1日から2011年12月31日の株価データを使用して検証しました。 また、複数の市場に上場している銘柄については、優先市場のみで検証しました。 ※全取引件数は...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/17/17002041/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（ストキャスティクス版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（ストキャスティクス版）！ 今回は、「MACD（移動平均・収束・拡散法）シグナル」での計算で発生した売買サインデータを基に、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 ファスト・ストキャスティクス Fast%K が A%以下の圏域で Fast%D を上抜けたら買いサイン Fast%K が B%以上の圏域で Fast%D を下抜けたら売りサイン スロー・ストキャスティクス Fast%D が A%以下の圏域で Slow%D を上抜けたら買いサイン Fast%D が B%以上の圏域で Slow%D を下抜けたら売りサイン としました。 ※A, B の値は [ 20, 80 ] や...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/18/18002037/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（DMI/ADX版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（DMI/ADX版）その１！ 株価 - 売買サインチェック（DMI/ADX版）その２！ 今回は、「DMI」・「ADX」での計算で発生した売買サインデータを基に、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 （DMI、ADXについては上記の過去記事をご参照ください。） 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 定義１ 買いサイン : +DI が -DI を下から上抜けた時 売りサイン : +DI が -DI を上から下抜けた時 定義２ 買いサイン : ADX が ADXR を下から上抜けた時に、+DI が -DI より上にある場合 売りサイン : ADX が...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/19/19002047/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（HLバンド版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（HLバンド版）！ 今回は、「HLバンド（ハイローバンド）」での計算で発生した売買サインデータを基に、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 （HLバンドについては上記の過去記事をご参照ください。） 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 DEF-1 ( 順張り戦略-1 ) 買いサイン : 前日終値と比べて、高値がＨバンドを上抜けた時 売りサイン : 前日終値と比べて、安値がＬバンドを下抜けた時 DEF-2 ( 順張り戦略-2 ) 買いサイン : 前日終値と比べて、高値がＭバンドを上抜けた時 売りサイン : 前日終値と比べて、安値がＭバンドを下抜けた時 DEF-3 ( 逆張り戦略-1 ) 買いサイン : 前日終値と比べて、安値がＬバンドを下抜けた時 （株価がＬバンドに接触した時） 売りサイン :...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/20/20002045/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（ボリンジャーバンド版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（ボリンジャーバンド版）！ 今回は、「ボリンジャーバンド」での計算で発生した売買サインデータを基に、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 （ボリンジャーバンドについては上記の過去記事をご参照ください。） 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 DEF-1 ( 順張り戦略 ) 買いサイン : 終値がボリンジャーバンド +kσを上抜けた時 売りサイン : 終値がボリンジャーバンド -kσを下抜けた時 DEF-2 ( 逆張り戦略 ) 買いサイン : 終値がボリンジャーバンド -kσを下抜けた時 売りサイン : 終値がボリンジャーバンド +kσを上抜けた時 としました。 ※今回はσを計算する日数は 25 日とし、係数 k は...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/04/21/21002004/",
        "teaser": null
      },{
        "title": "Ruby - 円周率計算（Spigotアルゴリズム）！",
        "excerpt":"Ruby で円周率を計算してみました。 通常、コンピュータで円周率を計算するには多倍長整数の概念を使用しますが、今回は上の桁から順々に計算していく “Spigot” というアルゴリズムを利用しました。 Spigot アルゴリズムについての詳しいことは、 Spigot アルゴリズム - 円周率.jp - に記載されていますが、簡単に言うと、arctan(1) = π/4 であることを利用した計算方法です。 また、こちらのサイトにはＣ言語によるプログラムが掲載されています。 今回は、このＣ言語によるプログラムを Ruby に移植しただけです。 そして、Ｃ言語と Ruby の実行速度の違いも実感してみたかったのです。 記録 Ｃ言語によるプログラムは上記のリンク内を参照してください。 １．Ruby スクリプト作成 実行速度を測定するために benchmark を使用しています。 【PG-1】158Byte で 2400 桁計算できるＣ言語プログラムを Ruby に移植。 require 'benchmark' base = 10000 # 基底 n = 8400 # 計算項数 puts Benchmark.measure...","categories": ["プログラミング","数学"],
        "tags": ["Ruby","円周率"],
        "url": "/2012/04/23/23002014/",
        "teaser": null
      },{
        "title": "Linux - Apache 2.4.1 をソースからインストール！",
        "excerpt":"現在の Scientific Linux 6.2 や CentOS 6.2 ではリポジトリの関係上、パッケージでインストールできる Apache は 2.2.15 です。（今回は RedHat(RPM) 系 Linux での話です。） しかし、2.2.20 未満のバージョンでは脆弱性があるため DoS 攻撃を受け、Out Of Memory や それによる OOM-Killer の発動を引き起こしたりします。 今回は 2.4 系最新バージョンの Apache 2.4.1 をソースからインストールしました。 作業記録 0. 前提条件 今回は Scientific Linux 6.2 (x86_64版) で確認しましたが、i386版や CentOS 6.2 でも同様のはずです。 1. PCRE のインストール httpd のビルドに必要な PCRE(Perl...","categories": ["サーバ構築"],
        "tags": ["Apache","CentOS","ScientificLinux"],
        "url": "/2012/04/25/25002026/",
        "teaser": null
      },{
        "title": "Linux - MySQL 5.5.23 をソースからインストール！",
        "excerpt":"現在の Scientific Linux 6.2 や CentOS 6.2 ではリポジトリの関係上、パッケージでインストールできる MySQL は 5.1.52 とかです。（今回は RedHat(RPM) 系 Linux での話です。） MySQL では現在既に 5.5 系がリリースされていますので、今回は最新バージョンの 5.5.23 をソースからインストールしました。 作業記録 0. 前提条件 今回は CentOS 6.2 (x86_64版) で確認しましたが、i386版や Scientific Linux 6.2 でも同様のはずです。 1. 事前準備 今回の作業に必要な以下のパッケージが未導入ならインストールしておく。 （特に “cmake”） # yum -y install wget # yum -y install gcc* #...","categories": ["サーバ構築"],
        "tags": ["CentOS","MySQL","ScientificLinux"],
        "url": "/2012/04/26/26002002/",
        "teaser": null
      },{
        "title": "Linux - PHP 5.4.0 をソースからインストール！",
        "excerpt":"現在の Scientific Linux 6.2 や CentOS 6.2 ではリポジトリの関係上、パッケージでインストールできる PHP: Hypertext Preprocessor は 5.3.3 とかです。（今回は RedHat(RPM) 系 Linux での話です。） PHP では現在既に 5.4 系がリリースされていますので、今回は安定版の最新バージョンの 5.4.0 をソースからインストールしました。 作業記録 0. 前提条件 今回は CentOS 6.2 (x86_64版) で確認しましたが、i386版や Scientific Linux 6.2 でも同様のはずです。 1. 事前準備 当方の環境では以下のものが未導入でしたの予めインストールしておく。 # yum -y install libxml2-devel 2. インストール ソースをダウンロードし、configure, make, make install...","categories": ["サーバ構築"],
        "tags": ["CentOS","PHP","ScientificLinux"],
        "url": "/2012/04/27/27002000/",
        "teaser": null
      },{
        "title": "Linux - Apache 2.2.22 を yum でインストール！",
        "excerpt":"現在の Scientific Linux 6.2 や CentOS 6.2 ではリポジトリの関係上、yum でインストールできる Apache は 2.2.15 です。（RPMForge, EPEL, REMI リポジトリも同様） しかし、2.2.20 未満のバージョンでは脆弱性があるため DoS 攻撃を受け、Out Of Memory や それによる OOM-Killer の発動を引き起こしたりします。 今回は別のリポジトリ CentALT を導入して、Apache 2.2.22 を yum インストールしました。 （ちなみに、CentALT はロシア製みたいです。） 作業記録 0. 前提条件 今回は CentOS 6.2 (x86_64版) で確認しましたが、i386版や Scientific Linux 6.2 でも同様のはずです。 1. EPEL リポジトリの導入...","categories": ["サーバ構築"],
        "tags": ["Apache","CentOS","ScientificLinux"],
        "url": "/2012/04/29/29002017/",
        "teaser": null
      },{
        "title": "2012年4月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,844 80.8151 Mac OS 2,100 7.4292 Linux 1,941 6.8667 unknown 982 3.4740 Ubuntu Linux 274 0.9693 FreeBSD 48 0.1698 Fedora Linux 46 0.1627 PalmOS 9 0.0318 Android 8 0.0283 Solaris 5 0.0177 Debian GNU/Linux 4 0.0142 PlayStation 2 0.0071 RedHat Linux 2 0.0071...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/05/01/01002025/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（３本足の高値安値版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 最近の株価の検証ではバックテストを行っていましたが、今回はまた、少し前にも検証していた売買サインの発生チェックを行ってみました。 今回の手法は、「３本足の高値安値」という手法です。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 「３本足の高値安値」という手法は、 上昇トレンド時、 安値の３期間移動平均以下で買いを仕掛け、 高値の３期間移動で手仕舞う。 下降トレンド時、 高値の３期間移動平均以上で売りを仕掛け、 安値の３期間移動で手仕舞う。 という手法です。 上昇・下降トレンドは、以下のようにして機械的に判断します。 上昇トレンド 21期間で計算した RSI が前日時点で 50% 以上 下降トレンド 21期間で計算した RSI が前日時点で 50% 以下 RSI については、過去記事「株価 - 売買サインチェック（RSI版）！」を参照のこと。 以下に、前提条件・検証結果を掲載します。 １．前提条件 以降に出てくる Long は買いサイン、Short は売りサインを表しています。 １．定義 何を以って、買いサイン・売りサインと見なすかですが、本来の手法に準じて 上昇トレンド ( RSI &gt; RSI_HI...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/05/02/02002016/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（アンチ）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 前回は「３本足の高値安値」という手法で売買サインの発生状況を検証してみましたが、今回は「アンチ」という手法で検証してみました。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 「アンチ」という手法は、 まずストキャスティクスの Slow%D(7:4:10) が２日間連続で上昇する。 そしてさらに３日間連続でで Slow$D(7:4:10) が上昇するとともに Fast%D(7:4) が下降した場合、 前日の高値よりも上げたところで買う。 まずストキャスティクスの Slow%D(7:4:10) が２日間連続で下降する。 そしてさらに３日間連続でで Slow%D(7:4:10) が下降するとともに Fast%D(7:4) が上昇した場合、 前日の安値よりも下げたところで売る。 という手法です。 Fast%K, Fast%D, Slow%D については、過去記事「株価 - 売買サインチェック（ストキャスティクス版）！」を参照のこと。 以下に、前提条件・検証結果を掲載します。 １．前提条件 以降に出てくる Long は買いサイン、Short は売りサインを表しています。 １．定義 何を以って、買いサイン・売りサインと見なすかですが、本来の手法に準じて ６日前から２日間連続で Slow%D(7:4:10) が上昇し、 さらに４日前から３日間連続で Slow%D(7:4:10)...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/05/03/03002051/",
        "teaser": null
      },{
        "title": "株価 - 売買サインチェック（ADXギャッパー）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 前回は「アンチ」という手法で売買サインの発生状況を検証してみましたが、今回は「ADXギャッパー」という手法で検証してみました。 ※個人的な記録ですので、興味が無ければ読み飛ばしてください。 ※全体的にどんな傾向があるのかを把握するのと、Ruby の学習が目的です。 ※検証結果を取り纏めたものなので、掲載している結果自体ではあまり有効性は感じません。 ※ただ、個別に調べてみるとおもしろいものとなります。 「ADXギャッパー」という手法は、 前日の安値よりも安く寄り付き、その安値まで上げた時点で買い。 前日の高値よりも高く寄り付き、その高値まで下げた時点で売り。 という「ウップスのルール」に ADX をフィルターとして重ねる。すなわち、 前日の引け時点で、 12日で計算した ADX が 30 以上、 28日で計算した +DI が -DI よりも大きく、 前日安値よりも当日寄付きが低く、 当日高値が前日安値より大きい時、買い。 前日の引け時点で、 12日で計算した ADX が 30 以上、 28日で計算した -DI が +DI よりも大きく、 前日高値よりも当日寄付きが高く、 当日安値が前日高値より小さい時、売り。 という手法です。 DI, ADX については、過去記事「株価 - 売買サインチェック（DMI/ADX版）その１！」を参照のこと。 以下に、前提条件・検証結果を掲載します。...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/05/04/04002034/",
        "teaser": null
      },{
        "title": "Ruby - RubyGems で SSL 証明書チェック！",
        "excerpt":"Ruby が2012年4月20日に 1.9.3-p194 にアップデートされ、パッケージ管理の RubyGems も 1.8.23 にアップデートされました。 Ruby 1.9.3-p194 リリース 当方の自作自宅サーバ(当記事執筆時点、CentOS6.2)も Ruby_1.9.3-p194, RubyGems_1.8.23 にしています。（ちなみに、Rails は 3.2.3） その RubyGems ですが、今回の 1.8.23 では SSLサーバ検証の修正がされているようです。 Ruby や Rails で RubyGems パッケージをインストール（アップデート）したりする場合（ “gem install (update)” や “bundle install (update)” ）に、今までどおりではエラーが発生するようになります。 Ruby on Rails で今までどおり “bundle install” した場合↓ # bundle install Fetching gem metadata...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/05/06/06002043/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（３本足の高値安値版）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（３本足の高値安値版）！ 今回は、「３本足の高値安値」での計算で発生した売買サインデータを基に、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 （３本足の高値安値については上記の過去記事をご参照ください。） 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 上昇トレンド ( RSI &gt; RSI_HI ) 時、 安値が３期間移動平均を下抜けたら、買いサイン 下降トレンド ( RSI &lt; RSI_LO ) 時、 高値が３期間移動平均を上抜けたら、売りサイン としました。 今回は、RSI を計算する日数は 21 日、上昇トレンド・下降トレンド判断に使用する RSI_HI, RSI_LO はともに 50% としました。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年4月20日現在上場している全市場の 3,583...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/05/08/08002044/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（アンチ）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（アンチ）！ 今回は、「アンチ」での計算で発生した売買サインデータを基に、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 （アンチについては上記の過去記事をご参照ください。） 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 ６日前から２日間連続で Slow%D(7:4:10) が上昇し、 さらに４日前から３日間連続で Slow%D(7:4:10) が上昇するとともに Fast%D(7:4) が下降した場合、 前日の高値よりも上げた時、買いサイン ６日前から２日間連続で Slow%D(7:4:10) が下降し、 さらに４日前から３日間連続で Slow%D(7:4:10) が下降するとともに Fast%D(7:4) が上昇した場合、 前日の安値よりも下げた時、売りサイン としました。 Fast%K, Fast%D, Slow%D を計算する日数はアンチ手法では一般的（？）な 7, 4, 10 としています。 また、調整後終値（株式分割があった場合の調整値）を考慮していません。 ２．検証銘柄と検証期間 2012年4月20日現在上場している全市場の...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/05/09/09002029/",
        "teaser": null
      },{
        "title": "株価 - バックテスト（ADXギャッパー）！",
        "excerpt":"Ruby + MySQL で自作した株価取得のシステム。 全市場（東京・大阪・名古屋・札幌・福岡）の全銘柄の1983年からの全取引データを取得しています。 以前は、売買サイン発生後の株価の挙動を集計しました。 株価 - 売買サインチェック（ADXギャッパー）！ 今回は、「ADXギャッパー」での計算で発生した売買サインデータを基に、仮に取引をしていた場合にどのような結果（損益）になるのかを検証していました。 （ADXギャッパーについては上記の過去記事をご参照ください。） 通常、このようなテストのことをバックテストと言います。 全体的にどんな傾向があるのかを把握するのと、Ruby (+ MySQL) の学習が目的です。 ※興味が無ければスルーしてください。 以下に、前提条件・検証結果を掲載します。 １．前提条件等 １．売買サインの定義 前日の引け時点で、 12日で計算した ADX が 30 以上、 28日で計算した +DI が -DI よりも大きく、 前日安値よりも当日寄付きが低く、 当日高値が前日安値より大きい時、買い。 前日の引け時点で、 12日で計算した ADX が 30 以上、 28日で計算した -DI が +DI よりも大きく、 前日高値よりも当日寄付きが高く、 当日安値が前日高値より小さい時、売り。 としました。 DI, ADX を計算する日数はアンチ手法では一般的（？）な...","categories": ["プログラミング","株式"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/05/10/10002031/",
        "teaser": null
      },{
        "title": "MySQL - テーブル単位でダンプファイル出力！",
        "excerpt":"通常、データベース MySQL でダンプファイルを出力する場合、”mysqldump” コマンドを使ってデータベース単位に行うことが多いと思います。 当方のサーバでも普段はその方法を取り入れています。 ※実際には、ダンプ出力の他に “mysqlhotcopy” も併用していますが。。。 ただ、このダンプファイルから特定のテーブルを抜き出してインポートするのが若干面倒です。 普段のバックアップとしては問題ないのですが、サーバテスト等でテーブルをひとつひとつ確認しながらインポートしたい時などに面倒を感じます。 そこで当方は、このような時のためにシェルスクリプトを作成しています。 単純な物ですが、サーバ移行作業時にはとても重宝しています。 公開します。よろしければご参考に。 シェルスクリプト MySQL 5.1 系、5.5 系どちらでも動作を確認しています。 以下は、予め作成しておいた dump_＜テーブル名＞ というディレクトリへテーブルごとにダンプファイルを出力するシェルスクリプトです。 #!/bin/bash DB=hoge for TABLE in `mysql -uroot -pfugafuga -N -s -e \"show tables in $DB;\"`; do echo $TABLE mysqldump -u root -pfugafuga $DB $TABLE &gt; dump_$DB/$TABLE.sql done; “mysql” コマンドのオプション（”-u”,...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2012/05/12/12002031/",
        "teaser": null
      },{
        "title": "FreeBSD 8.3 - RubyGems libv8 インストール！",
        "excerpt":"今日は、ブログでは滅多にしない FreeBSD 関連についてのお話です。 FreeBSD で Ruby on Rails 3.2.x を動かそうとすると、therubyracer という RubyGems が必要になります。 この therubyracer のインストールにはさらに Google JavaScript エンジンである libv8 という RubyGems が必要です。 しかし、libv8 をインストール後 therubyracer をインストールしようとするとエラーが発生してインストールできません。 作業記録 0. 作業環境 FreeBSD 8.3 (amd64) Ruby 1.9.3-p194 Rails 3.2.3 1. 発生するエラー libv8 インストール後、therubyracer をインストールしようとして発生したエラーです。（Rails で bundel install しても同じエラーが発生します） libv8 の部分でエラーが発生しているようです。 # gem...","categories": ["サーバ構築","プログラミング"],
        "tags": ["FreeBSD","Rails","Ruby"],
        "url": "/2012/05/14/14002031/",
        "teaser": null
      },{
        "title": "FreeBSD 9.0 - RubyGems libv8 インストール！",
        "excerpt":"前回は FreeBSD 8.3 での libv8 のインストールについてお話しました。 FreeBSD 8.3 - RubyGems libv8 インストール！ 今回は FreeBSD 9.0 での libv8 インストールのお話です。 FreeBSD 8.3 での対応方法と同じ方法ではうまくいきません。 少し細工をします。 作業記録 0. 作業環境 FreeBSD 9.0 (amd64) Ruby 1.9.3-p194 Rails 3.2.3 1. 発生するエラー libv8 インストール後、therubyracer をインストールしようとして発生したエラーです。（Rails で bundel install しても同じエラーが発生します） libv8 の部分でエラーが発生しているようです。(FreeBSD 8.3 でのエラーと同じです) # gem install therubyracer Building...","categories": ["サーバ構築","プログラミング"],
        "tags": ["FreeBSD","Rails","Ruby"],
        "url": "/2012/05/16/16002016/",
        "teaser": null
      },{
        "title": "WP Social Bookmarking Light で「いいね」ボタンが表示されない件！",
        "excerpt":"当ブログ(by WordPress)では、各種ソーシャルブックマークを簡単に設置できるプラグイン “WP Social Bookmarking Light” を使用して、ツイッターの「ツイート」ボタンとFacebookの「いいね」ボタンを設置しています。 しかし、いつの頃からか「いいね」ボタンが表示されなくなっていました。 おそらく、プラグインのアップデートをした時からでしょう。 調査した結果、原因が判明したので、対策を施しました。 作業記録 ※以降に出現する “＆” 実際は半角文字です。 1. 発生した現象 プラグインの設定で、「ツイート」ボタン・「いいね」ボタンを表示するようにしているにもかかわらず、「ツイート」ボタンしか表示されなくなった。 ちなみに、「いいね」ボタンには “xfbml” バージョンと “iframe” バージョンが設定できますが、当方の場合 “iframe” バージョンを使用しています。 “xfbml” バージョンだと今回のような現象は発生しませんが、W3C で Valid になりません。Valid にしたければ別の対応が必要になります。 2. 原因 ページのソースを見てみると、特殊文字 “＆” を表示させる際に “＆amp;” とすべき箇所が “$amp;” となっていました。 ・・・ colorscheme=light&amp;font=arial$amp;locale=ja_JP&amp;height=21\" ・・・ 3. 対策 WordPress のプラグインの編集画面等で、PHPスクリプト “wp-social-bookmarking-light/modules/services.php” を編集します。 ・・・ colorscheme=light&amp;font=arial$amp;locale=ja_JP&amp;height=21\"...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/05/17/17002052/",
        "teaser": null
      },{
        "title": "玄箱HG - Fedora 導入後勝手にリブートする件！",
        "excerpt":"久方ぶりの玄箱HGについての話題です。 玄箱とは「玄人志向」さんが以前販売していた NAS で、ハードディスクを搭載して設定すればファイルサーバとして使用可能のものです。 Monta Vista Linux を標準で搭載しているのですが、Debian とか Fedora とか Vine、更には NetBSD とかを換装することも可能で、ファンの間では流行っていました。 当方も、一時期Webサーバ等構築して公開サーバとして使用した時期もありました。 結局、１台であれこれしようとすると動作が非常に重たくなるので、現在はファイルサーバとしてしか使用していませんでした。。。 ちなみに、玄箱HGの主なスペックは以下の通り。 CPU : PowerPC 266MHz RAM : 128MB LAN : 1000Base-T/100Base-T/10Base-T×1 実際、現在は Fedora を導入しています。 Fedora7 から順次アップグレードしていった Fedora11 (もちろんPowerPC版) です。 Fedora は PowerPC 版は 12 までリリースされていますが、当方の場合、現時点では 12 にアップグレードすると起動しなくなってしまうので 11 までとしています。（※また、１回で成功するとも限りません。当方も何回か失敗しています。） Fedora11 を導入できる（有志による）パッケージでも導入可能ですが、ブートプロセスの違いにより「ファン回転数」制御ができません。 なので、Fedora7 を導入できる（有志による）パッケージで導入後徐々にアップグレードしていく方法を採っています。 ちなみに、その（有志による）パッケージは現在ダウンロード可能なサイトが閉鎖されています。...","categories": ["サーバ構築","玄箱"],
        "tags": ["Fedora"],
        "url": "/2012/05/19/19002005/",
        "teaser": null
      },{
        "title": "CentOS 6 系 - ログ監視ツール SWATCH！",
        "excerpt":"Linux サーバでログ監視ツール SWATCH を利用されていいる方も結構いらっしゃると思います。 しかし、CentOS 6 系の場合は 5 系と同様の方法で設定しても SWATCH は起動しません。 （人によって手順・設定が異なるので一概には言えませんが、自分はそうでした。） 慌ててサーバ設定をしていると見逃してしまう事があります。 後になって、実は起動していなかった等となります。 ひいては、SWATCH が正常に作動していなかったことにより、DoS攻撃等を受けやすくなり Out of Memory による OOM-Killer 発動でマシン自体が正常に動作しなくなる事も考えられると思っています。 これに気付かず、本当は Apache 以外に原因があるにも関わらず、Apache の設定をむやみに変更したりしてしまう事にもなります。 もちろん、これでは根本的な解決にはなっていませんよね。 今日は、SWATCH を導入したにもかかわらず、起動時にエラーが発生してしまう場合の対処方法について記録です。 記録 0. 前提条件 OS : CentOS 6.2 (i386) epel リポジトリが利用できるようになっている SWATCH を epel リポから導入し、各種設定済み ※CentOS 5 系は RPMforgeリポジトリから導入すると思いますが、CentOS 6 系になると、RPMforgeリポジトリに SWATCH...","categories": ["サーバ構築"],
        "tags": ["CentOS","Linux"],
        "url": "/2012/05/21/21002052/",
        "teaser": null
      },{
        "title": "MySQL - バイナリログ肥大化！",
        "excerpt":"DB サーバ MySQL を使用していて、突然ディスク容量不足になって MySQL に接続できなくなる事があります。（以下は実際は１行で出力されます） ERROR 20 (HY000) at line 989: Disk is full writing './mysql-bin.000022' (Errcode: 28). Waiting for someone to free space... (Expect up to 60 secs delay for server to continue after freeing disk space) mysql-bin.999999 というバイナリログが多数出来たり肥大化しているためにこの現象が発生します。 MySQL を使用している方ならご存知の方も多いと思いますが、レプリケーション（複製）の設定が影響しています。 レプリケーションとは MySQL サーバ複数台でデータベースの負荷分散とリアルタイムなバックアップを行う為の機能です。 ちなみに、少し古い MySQL 5.1 系なら標準でレプリケーションが無効になっている（有効になっていない）ので、このような現象に遭遇する事はないと思います。個人で利用するレベルなら必要もないですし。。。...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2012/05/23/23002009/",
        "teaser": null
      },{
        "title": "MySQL - データディレクトリの移動！",
        "excerpt":"通常、MySQL を一旦インストールしたらデータディレクトリはそう変更しないと思います。 Linux の場合、インストール時に指定しなければ “/var” ディレクトリ配下にデータディレクトリが作成されます。 Webサイトやブログ等の運用で使用するくらいなら、デフォルトのデータディレクトリで全く（殆ど）問題ありません。 しかし、データを大量に使用するようなDBアプリを作ったりすると、”/var” ディレクトリが圧迫されてしまいます。（数十GBなどすぐにいっぱいになります） そんな時の為に、MySQLのデータディレクトリを移行する手順を記録しておきます。 作業記録 0. 前提条件 作業した OS は Scientific Linux 6.2 (amd64) 、MySQL のバージョンは 5.5.23 です。 Redhat 系 Linux や 別のバージョンの MySQL でも同様です。 MySQL のデータディレクトリを丸ごと “/var/mysql/data” → “/home/mysql” に変更する場合の手順です。適宜ご自分の環境に合わせて読み替えて下さい。 （MySQL 5.1 系なら “/var/lib/mysql” がデフォルトのデータディレクトリでしょう） Windows の場合も同様だと思います。 1. MySQL サーバの停止 作業するには一旦 MySQL サーバを停止します。...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2012/05/25/25002014/",
        "teaser": null
      },{
        "title": "Cygwin - バッチファイルからシェルを呼び出す！",
        "excerpt":"Windows 上で動く Unix ライクな環境 Cygwin で作成したシェルスクリプトを Windows 側のバッチファイルから呼び出す方法のメモです。 ※Cygwin 側のシェルスクリプトから Windows 側のバッチファイルを呼び出す方法ではありません。 作業記録 0. 前提条件 作業した環境は Windows XP SP3 + Cygwin 1.7.9 です。 呼び出す、Cygwin 側のシェルスクリプトは、ユーザルートに配置した “hoge.sh” とします。 今回はシェルスクリプトを呼び出していますが、呼び出すものは何でもよいです。 1. バッチファイル記述方法 以下のように、”bash.exe” の置いているフォルダへ移動して、実行したいコマンドをオプション指定すればよいです。 bash のオプション “–login” は Cygwin にログインし、”-i” はインタラクティブモード、”-c” は後ろのコマンドを実行します。 “-c” より前までは既存の “cygwin.bat” と同じ内容、”-c” 以後が追加した部分です。 C: CD C:\\cygwin\\bin bash --login...","categories": ["サーバ構築"],
        "tags": ["Cygwin","Windows","バッチ"],
        "url": "/2012/05/27/27002011/",
        "teaser": null
      },{
        "title": "Ruby on Rails - Development モードでログ出力簡素化！",
        "excerpt":"Ruby on Rails でアプリを開発する際、大抵の場合は最初は Development で開発し運用時に Production モードに切り替えると思います。 その Development モードで開発中はあれこれとログが出力され重宝するのですが、時に目触りに感じる事があります。 特に、DB 関係のアプリだと、ActiveRecord のログ(SQL文)が大量に出力され、SQL以外の必要な情報を探すのが大変になります。 すぐにログが肥大化もしますし。。。 SQL文を確認する必要が無いのなら、ログ出力をオフにしてしまっても問題はありません。 以下がその対策メモです。 作業記録 0. 前提条件 作業した環境は Windows XP SP3 + Cygwin 1.7.9 + Ruby 1.9.3-p194 + Rails 3.2.3 です。 1. development.rb 編集 RAILS_ROOT の “/config/environments/development.rb” に以下の記述を追加するだけです。 config.log_level = :info この記述がないとデフォルト（デバッグモード “:debug”）になるようです。 2. Web サーバ再起動 変更を有効化するために、Web...","categories": ["プログラミング"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/05/29/29002003/",
        "teaser": null
      },{
        "title": "Ruby on Rails - Ruby スクリプト呼び出しで require エラー！",
        "excerpt":"Ruby on Rails アプリを操作中にコンソールに `require' cannot load such file -- hoge などと出力される場合は、当然 Gemfile に require 'hoge' などと記載して対応します。 しかし、Ruby で作ったスクリプトが単独では正常に動作するのに、Ruby on Rails から呼び出すと require のエラーが出る事があります。 もちろん、必要な RubyGems は gem list で確認すると、インストールされていることになっています。 そうです、RubyGems はインストールされていても、Rails 側からすると bundle されていないのです。 現に、 bundle list で確認すると、該当の RubyGems が表示されません。 ですから、Ruby スクリプトを Rails から呼び出す時も、その Ruby スクリプトで必要な RubyGems は bundle...","categories": ["プログラミング"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/05/31/31002001/",
        "teaser": null
      },{
        "title": "2012年5月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 15,343 83.1419 Mac OS 1,583 8.5781 Linux 957 5.1859 unknown 273 1.4794 Ubuntu Linux 217 1.1759 Fedora Linux 24 0.1301 FreeBSD 13 0.0704 PalmOS 11 0.0596 Android 10 0.0542 RedHat Linux 8 0.0434 PlayStation 5 0.0271 Debian GNU/Linux 4 0.0217 Solaris 4 0.0217...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/06/01/01002053/",
        "teaser": null
      },{
        "title": "Ruby on Rails - ActiveRecord で規約外のテーブル名を使用する方法！",
        "excerpt":"Ruby on Rails の ActiveRecord でテーブルを扱う際、デフォルトでは「モデルでは単数系の名称」を「テーブルでは複数形の名称」を使用するようになっています。 “hoge” → “hoges”、”library” → “libraries”、”person” → “people” などとテーブル側は適切な複数形で扱うようになっています。 自動で複数形の名前で扱ってくれるのはよいのですが、自作のモデルで複数形を勝手に規約に当てはめて欲しくない場合があります。 たとえば、モデル側 “abc_vwx”、テーブル側 “abc_vwxs” を扱いたい場合です。 この場合、これではエラーとなります。 テーブル名が不正なのです。 モデルが “abc_vwx” ならテーブルは “abc_vwxes” でないといけないからです。 これは、”box” の複数形が “boxes” になるのと同じ変換です。 自作の「英単語」にもこの規約が当てはめられてしまいます。 しかし、このモデルに対して例外的な設定をしてやれば、規約に縛られない自由なテーブル名を使うことができます。 以下、その対処方法です。 対処方法 0. 前提条件 Rails のバージョンは 3.2.3、ActiveRecord のバージョンも 3.2.3 です。 以前のバージョンでは対処が若干異なりますの注意！ 1. 対処方法 モデルが “abc_vwx” で、テーブルを “abc_vwxs” と...","categories": ["プログラミング"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/06/02/02002028/",
        "teaser": null
      },{
        "title": "gVim をタブエディタ風にする！",
        "excerpt":"Windows で Vim テキストエディタを使用する際、KaoriYa さんの Vim(gVim) を利用すると思います。 しかし、複数のファイルを編集する時には gVim が複数起動したり、バッファで裏に隠れていたりします。 それを、秀丸エディタ等のタブエディタのようにする方法があるようです。 以下、その設定方法です。 設定方法 0. 前提条件 使用する環境は WindwosXP(SP3)(32bit)、 Vim は 7.3-Win32-20120519 です。 そして、既に gVim が起動していたら２個目からは起動中の gVim のタブに追加していくようにしますが、ファイルを直接ダブルクリック等して起動する場合の方法です。 gVim のメニューからファイルを開いた場合は、いつもどおりバッファの表になってしまいますし、ファイル名右クリック＋「送る」では別のウィンドウで開いてしまいますので、あしからず。 さらに、Vim のインストールフォルダは “C:\\Program Files\\vim73-kaoriya-win32” を想定しています。 1. タブバーの表示 エディタ上部にタブバーを表示する設定をするため、設定ファイル “gvimrc” に以下の記述を追加します。 set showtabline=2 ※”0” は常に非表示、”1” は複数の時にタブ表示、”2” は常に表示。 2. レジストリの編集 既に gVim が起動していたら２個目からは起動中の gVim...","categories": ["PC_Tips"],
        "tags": ["Windows"],
        "url": "/2012/06/04/04002036/",
        "teaser": null
      },{
        "title": "Ruby on Rails - ActiveRecord で規約外の主キーを使用する方法！",
        "excerpt":"Ruby on Rails の ActiveRecord でテーブルを扱う際、デフォルトでは “id” というカラム を使用するようになっています。 Scaffold 機能を使ってジェネレートすると、テーブルに “id” カラムが自動で作成され、更に “id” カラムが主キー（プライマリキー）に割り当てられます。 最初から Scaffold 機能を使用して Ruby on Rails アプリを開発していればよいのですが、元々 Rails 用に開発してなかったデータベースを流用したりする場合には、主キーが “id” カラムでないことの方が多いです。 通常なら、テーブルの主キーは分かりやすく「○○コード」とかを使用したりします。（もちろん “ID” を設定したりすることもありますが） また、デフォルトでは主キーを２個以上設定する事もできません。（”id” カラムを追加して対応する事になったりします） ちなみに、普段テーブルからレコードを取得するだけなら、”id” 以外を主キーに設定していても問題ありませんが、レコードを update_attributes メソッドでアップデートする際に問題になります。 ※初心者や知らない人はハマります。。。 と言うわけで、今回は “id” カラム以外を主キーに設定する方法の記録です。 対処方法 0. 前提条件 Rails のバージョンは 3.2.3、ActiveRecord のバージョンも 3.2.3 です。 1. 主キーを１つのカラムに設定する場合...","categories": ["プログラミング"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/06/06/06002022/",
        "teaser": null
      },{
        "title": "Ruby on Rails - コントローラのグループ化！",
        "excerpt":"Ruby on Rails アプリを作成していて規模が大きくなってくると “controllers” ディレクトリに “**_controller.rb” というファイルがコントローラの数だけ増えていきます。 “controllers” ディレクトリのみならず、”views” ディレクトリも同様に増えます。 単純にファイルをグループ分け（ディレクトリ分け）してアクセス部分を修正すればよい、というものではありません。 今回は、コントローラをグループ化してみました。 ちなみに、「コントローラのグループ化」は「コントローラのネスト化」とかのように別の呼び方をする場合もあります。 WEB検索する場合は、色々な検索を試してみると取得できる情報も豊富になります。 グループ化の方法 0. 前提条件 Ruby 1.9.3-p194, Rails 3.2.3 での作業を前提としています。 コントローラ・ビューのグループ化に合わせて、URL も変更します。 こつこつと改修を重ねてきたアプリなので RESTful となっていません。（generator や scaffold を使ったりして作成した物でないということ）（RESTful だと抽象度が高くて自分には扱いにくいからというのもある） アプリ名は “hoge_hoge” を、ディレクトリ構成は以下を想定しています。（ビューも同様）（メニュー画面から各画面へ遷移する形です） [ 変更前 ] hoge_hoge/app/controllers +--- application_controller.rb +--- menu_controller.rb +--- hoge_a_controller.rb +--- hoge_b_controller.rb 　↓ [ 変更後...","categories": ["プログラミング"],
        "tags": ["Rails","Ruby"],
        "url": "/2012/06/08/08002015/",
        "teaser": null
      },{
        "title": "Ruby - 設定(conf,ini etc)ファイル読み込み！",
        "excerpt":"Unix 系でも Windows 系でも設定ファイルに以下のような形式のテキストファイルを使用している事が多々あります。 confファイルとか、iniファイルとか、またはそれ以外の拡張子だったりします。 いずれにせよ、テキストファイルです。 [hoge] foo = /abc/def/ghijklmn bar = 127.0.0.1 baz = hogehoge Ruby でこのようなファイルを読み込む場合、以前の自分なら１行ずつ読み込んで、コツコツと解析しながら処理していました。 しかし、このようなファイルを読み込む為の Gem パッケージが公開されているので最近はそれを使用しています。 使用方法 検証確認した Ruby は 1.9.3-p194 です。 1. 設定ファイル作成 以下に注意して設定ファイルを作成します。 セクション名は “[” と “]” で囲む。 各プロパティは１行に「名前」+ “=” ＋「値」の形式で記述する。 ”;” や “#” はコメントである。 作成場所は “/home/hoge/work/” ディレクトリで、ファイル名は “test.conf” としています。 # Setting for...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2012/06/10/10002041/",
        "teaser": null
      },{
        "title": "Cygwin - fork エラー (rebase 問題)！",
        "excerpt":"先日、若干バージョンが古かった当方の Cygwin 環境をアップデートしました。 しかし、Cygwin 上で Ruby on Rails アプリを動かそうとすると以下のようなエラーが発生してしまうようになってしまいました。 0 [main] ruby 4392 child_info_fork::abort: unable to remap etc.so to same address as parent (00EE0000) - try running rebaseall 0 [main] ruby 2784 child_info_fork::abort: unable to remap mysql2.so to same address as parent (00F00000) - try running rebaseall ※実際は２行で出力。 出力メッセージによると、「rebaseall を試してみなさい」とのことです。...","categories": ["プログラミング"],
        "tags": ["Cygwin","Windows"],
        "url": "/2012/06/12/12002009/",
        "teaser": null
      },{
        "title": "Ruby on Rails - jQuery で Ajax 処理（遅延読み込み）！",
        "excerpt":"Ruby on Rails アプリを作成していてあれこれと機能が追加されていくと、当然ながらだんだんと動作が重くなっていきます。 そこで、ページ表示時に処理に若干時間のかかる部分を遅らせて表示する方法を取り入れました。 ちなみに、当方の Ruby on Rails 製の Webサイトでは、既に以下については jQuery による処理を導入しています。 ヘッダ部のサイトタイトル部分のボカシ処理 （CSS でも可能だが、W3C でエラーとなるため） ページ下部へスクロールした場合に表示するページの上部へ移動するボタン また、別のアプリでは１つ目のセレクトボックの値を変更したら、２つ目のセレクトボックを連動させるようにしたりして使用しています。 jQuery による遅延読み込み処理 0. 前提条件 Ruby 1.9.3-p194, Rails 3.2.3 での作業を前提としています。 （最近の Rails では jQuery はデフォルトで使用可能となっています） 今回紹介するのは、ページロード時にページの特定の位置に本来の Rails 側の処理とは別に処理した結果を表示させる方法についてです。 具体的には、以下の通り。 ページ読み込み時にビュー側からコントローラ内のメソッドをコール コントーラのメソッドで処理を行い、その結果を JSON データで返す ビュー側で JSON データを受け取り、指定の位置に表示させる 1. ビューを編集 遅延読み込みしたデータを表示させる場所を指定しやすいように、html タグに id をつけたりします。...","categories": ["プログラミング","Webサイト"],
        "tags": ["JavaScript","Rails","Ruby","jQuery","Ajax"],
        "url": "/2012/06/14/14002011/",
        "teaser": null
      },{
        "title": "MySQL - 圧縮しながらダンプ出力！",
        "excerpt":"MySQL ユーザならバックアップの際に誰でも使うであろう mysqldump コマンド。 通常、mysqldump コマンド実行後にできたダンプファイルのサイズが大きければ圧縮すると思います。 しかし、データベースの容量が大きくなると、ダンプを取ってその後圧縮する方法だと時間がかかりすぎます。 しかし、圧縮しながらダンプを取れば、相当時間短縮が望めます。 よくある方法ですが、メモしておきます。 圧縮しながらダンプ出力する方法 0. 前提条件 Unix 系 OS (Linux, BSD etc) での話です。 1. コマンド 以下のようにコマンドを打つだけです。 mysqldump と gzip をパイプするだけです。 以下は、hoge データベースを圧縮しながらダンプ出力する例です。 $ mysqldump -uroot -pfoo hoge | gzip &gt; hoge.gz データベース全てを圧縮しながらダンプ出力するなら以下のようになります。 $ mysqldump --all-databases -uroot -pfoo | gzip &gt; all_db.gz かなりの時間短縮になります。 当方の場合、16GBほどあるデータベースで「ダンプ出力12分＋圧縮22分」だったのが、「トータルで20分」になりました。 三分の二以下になりました。...","categories": ["サーバ構築"],
        "tags": ["Linux","MySQL","Unix"],
        "url": "/2012/06/16/16002013/",
        "teaser": null
      },{
        "title": "WordPress - Ruby で XML-RPC 投稿！",
        "excerpt":"XML-RPC とは、インターネット上でリモートプロシージャコールを実行するためのプロトコルです。 WordPress を例にとると、外部から投稿できたり色々な事ができます。 WordPress への XML-RPC 投稿というと、よくあるのは PHP からの投稿です。 しかし、当方は一応 Rubyist なので、今回は Ruby から WordPress への投稿を試してみました。 作業記録 0. はじめに WordPress の場合、ホーム配下の “xmlrpc.php” に対して投稿を行うと、処理が出来るようになっています。 当然、Ruby が利用可能の状態である事。 今回使用したのは Ruby 1.9.3-p194 です。 また、Ruby にはデフォルトで XML-RPC クライアントを利用できるライブラリが入っています。新たなインストールは不要です。 1. WordPress の設定 まず、WordPress で XML-RPC 投稿ができるように設定します。 設定画面の [設定] - [投稿設定] を開き、「リモート投稿」の “XML-RPC（WordPress、Movable Type、MetaWeblog および Blogger...","categories": ["ブログ","プログラミング"],
        "tags": ["Ruby","WordPress"],
        "url": "/2012/06/18/18002033/",
        "teaser": null
      },{
        "title": "Vim - よく使う空白削除コマンド！",
        "excerpt":"Vim を使ってプログラミングをしていて良く使うコマンドのメモです。 正規表現を知らない方には複雑な記号の集まりに見えるかもしれませんが、正規表現を知っている方なら常識的な使い方です。 ※Ruby とかですと、文字列を解析するのは正規表現を使った方が高速ですし。。。 Vim 空白削除コマンド 1. 空白行を削除 先頭行から最終行までにある半角空白だけで構成されている行、改行コードだけの行を削除します。※行が詰まります。 :g/^ *$/d /^ *$/ は正規表現で行頭から行末までが半角空白が０個以上 2. 空白だけの行を空白を削除 先頭行から最終行までにある半角空白だけで構成されている行の半角空白だけを削除します。※行は詰まりません。 :%s/^ *$//g /^ *$/ は正規表現で行頭から行末までが半角空白が０個以上 g の後ろに c を付けると、変換前に確認ができる 3. 行末の空白を削除 先頭行から最終行までの行末にある半角空白を削除します。 :%s/ *$//g / *$/ は正規表現で行末に半角空白が０個以上 g の後ろに c を付けると、変換前に確認ができる ちなみに、正規表現を知っている方なら が直前の文字０個以上 が直前の文字１個以上 ? が直前の文字０個か１個 と認識されていると思いますが、+ と ? は本来の正規表現の使い方とは異なり、+ と \\?...","categories": ["PC_Tips","プログラミング"],
        "tags": ["Vim","正規表現"],
        "url": "/2012/06/20/20002049/",
        "teaser": null
      },{
        "title": "Ruby - 3桁区切りの数字に変換！",
        "excerpt":"プログラミング言語 Ruby にはご存知のように数値を3桁区切り数字に変換するメソッドが用意されていません。 （Rails では number_with_delimiter メソッドを使ったりしますが）   正規表現を使うことで簡単に実現可能です。  当方が良く使う変換方法です。     3桁区切り数字に変換   方法-1   12345678.to_s.gsub(/(\\d)(?=(\\d{3})+(?!\\d))/, '\\1,')   先頭から見ていき、後ろの文字数が3の倍数（肯定先読み ?= と否定先読み ?! を使って判定）なら、数字にカンマを付与する。   方法-2   12345678.to_s.reverse.gsub(/(\\d{3})(?=\\d)/, '\\1,').reverse   まず数字を逆順に並べ替える。  先頭から見ていって3文字の数字の次に数字が存在する（肯定先読み ?= を使って判定）場合に3文字の数字の後ろにカンマを付与する。  そして最後に数字を逆順に並べ替える。   方法-3   12345678.to_s.gsub(/(?&lt;=\\d)(?=(\\d{3})+$)/,',')   肯定先読み ?= と肯定戻り読み ?&lt; を使って、1組以上の3文字の数字の前に数字があれば、その数字の後ろにカンマを挿入する。  ※古いバージョンの Ruby だと、戻り読みには正規表現ライブラリ「鬼車(onikuguruma)」が必要のようです。     細かく考えれば様々な方法が出てきますが、当方が一番よく使うの上記の「方法-1」です。   以上です。   ","categories": ["プログラミング"],
        "tags": ["Ruby","正規表現"],
        "url": "/2012/06/22/22002053/",
        "teaser": null
      },{
        "title": "Ruby - Test::Unit, Minitest::Unit でユニットテスト！",
        "excerpt":"Ruby 標準のユニットテスト（単体テスト）フレームワーク Test::Unit, Minitest::Unit についてです。 Ruby でのユニットテストには、最近流行り（？）の振舞駆動開発に特化した RSpec や、他にも色々あります。 ユニットテストとは、プログラム単体のテストのことです。 システム開発経験者ならわかると思いますが、 要件定義→概要設計→詳細(PG)設計→製造→単体テスト→結合テスト→総合テスト→運用テスト→保守（案件・開発環境等によって異なりますが） の１工程です。 Test::Unit は Ruby 1.8 系では標準でしたが、1.9 系では Minitest::Unit で再実装されています。 ですから、今回の当方の環境 Ruby 1.9.3 では Minitest::Unit を実装しています。 以下、テスト方法についての記録です。 作業記録 1. テスト対象スクリプト作成 当然ですが、テストを実行する対象になるスクリプトを作成します。 例にならって以下のように作成してしました。 【 ファイル名：foo.rb 】 class Foo def foo \"foo\" end def bar \"foo\" end end bar はテストでエラーになるように意図的に誤った定義をしています。 2....","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2012/06/24/24002005/",
        "teaser": null
      },{
        "title": "MySQL - InnoDB エンジンが起動しない場合！",
        "excerpt":"MySQL はデフォルトでは InnoDB エンジンが有効化されます。 個人で使用するには InnoDB エンジンでも不便はありませんが、より高速に処理させたい場合などに MyISAM エンジンに変更したりします。 デフォルトで MyISAM エンジンが有効になるように設定ファイル(my.cnf or my.ini)に default-storage-engine=MyISAM と記述したりしていると思います。 トランザクション処理が使えたり使えなかったり、更新処理がテーブル単位になったりレコード単位になったり、使い方によって一長一短です。 そして、MySQL インストール後に InnoDB エンジンから MyISAM エンジンに変更した場合などには、MySQL サーバ起動時に以下のようなエラーメッセージが出力される場合があります。 120617 15:11:08 [ERROR] Plugin 'InnoDB' init function returned error. 120617 15:11:08 [ERROR] Plugin 'InnoDB' registration as a STORAGE ENGINE failed. InnoDB エンジンが使えないようです。 MyISAM エンジンを使うのだから InnoDB は使えなくても良いのですが、気持ち悪いので対処します。...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2012/06/26/26002036/",
        "teaser": null
      },{
        "title": "Ruby - Hpricot で Yahoo!ファイナンス！",
        "excerpt":"【はじめに】 Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照） 以下の記事を参考にすることもお勧めしません。 こんばんは。 当方、以前から Ruby + MySQL で Yahoo!ファイナンスから株価時系列データ等を取得して管理しています。 データの取得には Hpricot という Ruby 用の HTML パーサを使用しています。 しかし、時系列データがYahoo!ファイナンスのサイトにアップされる時間がまちまちなので、チェックするスクリプトを作成してみました。 こうした HTML から情報を取得する事を「Webスクレイピング」などと言います。 記録 普段使用している株価取得スクリプトの不要な部分を取り除いただけのシンプルなものにしました。 0. 前提条件 使用した Ruby は 1.9.3-p194 です。 CentOS 6.2、Cygwin 1.7.15 上で動作確認してます。 Windows は未確認です。文字コードあたりで不具合はあるかもしれません。 また、市場・銘柄によって時系列データが確定する時刻が異なる場合もあります。 大まかな目安として利用するのが目的です。 1. Ruby スクリプト 特定の銘柄の時系列データの最新の日付を取得しています。 １銘柄のデータが更新されていれば、全て更新されているものと判断するようにしています。 取引が活発でない銘柄を設定すると、１日取引がない場合もあるので注意が必要です。 HTML を解析すると２番目の TABLE タグに時系列データが格納されているようです。 その TABLE...","categories": ["プログラミング","株式"],
        "tags": ["Ruby"],
        "url": "/2012/06/28/28002015/",
        "teaser": null
      },{
        "title": "Cygwin - Git をインストール・設定！",
        "excerpt":"当方の Cygwin 環境をちょっと整理（フォルダ移動）した際、あれこれと再インストール・設定をしました。 そこで、Git についての記録を今まで取っていなかったと思い今回記録として残しておくことにしました。 Git とは分散型バージョン（リポジトリ）管理ツールです。 今までは Subversion とか CVS、Windows なら VSS とかの集中型バージョン管理ツールが定番でした。 集中型では、開発時に常にローカルから中央リポジトリ（サーバ）へアクセスして、最新ソースを取得する必要がありました。 そのため、ネットワークが使えない環境では使えないなどのデメリットがありました。 分散型では、ローカルにもリポジトリを用意しておき、中央とはソースのやり取りではなくソースの変更を同期する、という特徴があります。 その他、バージョン管理の詳細は別途ご確認ください。 また、Windows には msysGit なる GUI ツールもありますが、アンインストールする際にレジストリ周りで手こずったり、日本が使えないなどの問題があり、現在は使用していません。 最新（４ヶ月程前にリリース）の msysGit は日本語も扱えるようになったみたいですが。。。 Git インストール・設定方法 0. 前提条件 Cygwin でのインストール・設定を想定しています。 Linux 等でも同様だと思いますが、インストール部分は yum とか aptitude とか使うようになると思います。 また、GUI ツールを使用する事は想定していません。 そして、一番重要なのは今回は ローカルリポジトリのみで運用する。 中央リポジトリは使用しない。 分散型と言いながらローカル完結型です。（個人利用なので） 1. インストール Cygwin の setup.exe...","categories": ["サーバ構築"],
        "tags": ["Cygwin","Git"],
        "url": "/2012/06/30/30002042/",
        "teaser": null
      },{
        "title": "2012年6月 - OS・ブラウザ別アクセス状況！【自動投稿】",
        "excerpt":"7月になりましたので、先月6月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 17,268 82.9793 Mac OS 2,202 10.5815 Linux 585 2.8111 unknown 377 1.8116 Ubuntu Linux 252 1.2110 Fedora Linux 37 0.1778 FreeBSD 30 0.1442 Debian GNU/Linux 17 0.0817 PalmOS 16 0.0769 RedHat Linux 12 0.0577 SuSE Linux 7 0.0336 Solaris 3 0.0144 PlayStation 2...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/07/01/01002502/",
        "teaser": null
      },{
        "title": "Cygwin - Git での微修正！",
        "excerpt":"先日、Cygwin に分散型バージョン（リポジトリ）管理ツール Git をインストール＆設定しました。      Cygwin - Git をインストール・設定！   今回は、ちょっとした修正についてです。 実際には、コミットするのに新たにコミットコメントを付けるまでも無いような軽微な修正時のことです。     Git での微修正   ソース修正後、以下のコマンドを実行するだけです。   $ git commit -C HEAD -a --amend      -C オプションでコミットコメントとしてログメッセージを使用する。   HEAD は直前のコミットのこと。   -a オプションでコミット前に add する。   -amend オプションでコミットの訂正を行う。     これだけです。   以上。   ","categories": ["サーバ構築"],
        "tags": ["Cygwin","Git"],
        "url": "/2012/07/02/02002051/",
        "teaser": null
      },{
        "title": "企業の財務状況を分析する指標！",
        "excerpt":"企業の財務状況を把握するの使用する各種指標についてのメモです。 株を買う時にも参考にします。 自分なりにまとめた物です。 各種指標 EPS (１株当たり当期純利益、１株利益) (Earnings Per Share) 計算式 当期純利益÷発行済みの株式数 説明 １株に対してどれだけの利益が出ているかを見る。 判断 EPSが高いほど１株でたくさん利益を出しているので儲かっている企業、ということになる。 PER (株価収益率) (Price Earnings Ratio) 計算式 株価÷１株当たり当期純利益(EPS) 説明 １株あたりの利益に対して、今の株価は何倍まで買われているかを見ます。 例えば、PER15倍では、投資したお金は15回企業が利益を出せば元が取れるという事になる。 判断 低いと割安、高いと割高と言える。同業他社と比べてみると良い。 BPS (１株あたり純資産) (Book-Value Per Share) 計算式 純資産÷発行済みの株式数 説明 純資産＝資産総額−負債総額 企業が解散した時に、資産を処分して債務を返済した後に残る株主の取り分である。 企業解散時の解散価値となる。 判断 高いほど良いと言える。 PBR (株価純資産倍率) (Price Book-Value Ratio) 計算式 株価÷１株あたり純資産(BPS) 説明 BPSと現在の株価を比べたもので、例えばBPS1000で株価が800ならPBRは0.8倍となり、800円投資すれば万が一その企業が解散しても1000円戻ってくることになるので株価は安いと言える。 判断...","categories": ["株式"],
        "tags": [],
        "url": "/2012/07/04/04002035/",
        "teaser": null
      },{
        "title": "Cygwin - JRuby インストール！",
        "excerpt":"Cygwin に JRuby をインストールしてみました。 JRuby とは、Java で作られた Ruby の処理系で Java と Ruby のクロスオーバーを実現する技術です。 作業手順 CRuby との共存を考えるなら RVM 等のツールを使うのがいいでしょう。 以下は、通常のインストール手順です。 0. 前提条件 作業した Cygwin は 1.7.15 です。（Linux, BSD でも同様の作業でいけると思います） Java 1.7.0 導入済みで使える状態になっている。 jRuby 1.6.7.2 は Ruby 1.8.7-p357 対応なので、Ruby 1.9.3 対応の jRuby 1.7.0.Preview1 をインストール。（当記事執筆時点） jRuby の配置先は “/usr/local” ディレクトリ配下とした。 ちなみに、Windows 環境用、Mac 環境用のアーカイブも用意されています。 1....","categories": ["サーバ構築","プログラミング"],
        "tags": ["Cygwin","Ruby"],
        "url": "/2012/07/06/06002010/",
        "teaser": null
      },{
        "title": "VMware - 仮想マシンイメージのコピーでネットワーク接続不可に！",
        "excerpt":"仮想マシン VMware Player 等の VMware 製品で、都合により仮想マシンのディスクイメージの配置先を変更した場合の処理についてです。 仮想マシンイメージの配置先変更後最初の起動時にイメージを「移動した」のか「コピーした」のか聞かれると思います。 「移動した」のならそれでよいのですが、誤って「コピーした」を選択するとゲストOSにネットワーク接続ができなくなるという現象に遭遇します。 実際、ifconfig コマンドで確認しても eth0 や eth1 は無く lo だけしか表示されません。 当方で確認したゲストOSは CentOS 6.2 です。 原因と対策 当方が確認した VMware は Player 4.0.4 です。 VMware Player の他のバージョンや VMware Server 等の他の製品でも同様だと思います。（未確認） 原因 仮想マシンイメージをコピーすると、ネットワークの MAC アドレスが変更される。 ゲストOS(今回は CentOS)側では、違うネットワークカードと認識する。 既存の eth0 が eth1 に変更になり、新規のネットワークが eth0 として作られる。 eth0 が eth1 に変更になっている上に...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["VMware"],
        "url": "/2012/07/08/08002030/",
        "teaser": null
      },{
        "title": "CentOS - Lokka インストール！",
        "excerpt":"Lokka とは、Ruby(Sinatra(軽量Rails)) 製の軽量な CMS です。 クラウド環境で利用される事も想定されている CMS です。 と言うか、クラウド環境の方が最適かもしれません。 可能なら当方の WordPress ブログを将来 Lokka に移行したいとも考えています。 今回は、Heroku（Rubyアプリケーションのクラウドプラットフォーム）へのインストールではなく、CentOS へのインストールを試みました。 作業記録 0. 前提条件 動作確認した OS は VMwarePlayer 上の CentOS 6.2 Ruby インストール済み(当方は Ruby1.9.3-p0) RubyGems パッケージ Bundler インストール済み Git インストール済み データベースは MySQL がインストール済みである(PostgreSQL, SQLite は使わない) モードは Development を使用(Production, Test は使わない) 1. リポジトリ複製 Git リポジトリの複製をローカルに作成する。 （場合により、配置したいディレクトリへ移動する。当方は...","categories": ["サーバ構築","ブログ"],
        "tags": ["Lokka","Ruby","WordPress"],
        "url": "/2012/07/10/10002011/",
        "teaser": null
      },{
        "title": "Java - Tidy で Web スクレイピング！",
        "excerpt":"【はじめに】 Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照） 以下の記事を参考にすることもお勧めしません。 こんばんは。 当方、最近は Ruby ばかりですが、ものによっては Ruby 以外も使います。 そこで、今回は Ruby + Hpricot で行っていた Web スクレイピングを Java + Tidy(JTidy) でやってみました。 テスト用ソースを公開します。 応用してください。 ※当方は実際には、MySQL を使ったりもっと複雑な処理をしています。 記録 今回テストしたのは、Yahoo!ファイナンスの業種別銘柄一覧から各銘柄の情報を取得する処理です。 全業種から全銘柄の情報を取得します。 0. 前提条件 Java のコンパイル・動作する環境が整っている。（当方は JDK 1.7.0 を使用） HTML を解析するので HTML の（ちょっとした）知識が必要。 Java の環境周りについてはここでは述べません。必要な別途お調べください。 1. Tidy 導入 こちら から “jtidy-r938.jar”(当記事執筆時点) をダウンロードし、適当な場所に配置する。 クラスパスに追加する。 2. ソース作成...","categories": ["プログラミング"],
        "tags": ["Java"],
        "url": "/2012/07/12/12002024/",
        "teaser": null
      },{
        "title": "Cygwin - 最新の GCC をソースからインストール！",
        "excerpt":"当方が普段使用している Cygwin 1.7.15 には、パッケージからインストール可能な GCC (GNU Compiler Collection) 3.4.4 が入っています。 しかし、当記事執筆時点では GCC は 4.7.1 が最新のようです。 C++ でプログラミングしたいものがあるため、GCC の最新版をソースからインストールしてみました。 作業記録 0. 前提条件 作業した環境は Cygwin 1.7.15 です。 1. 事前準備 以下のものを予め setup.exe 等でインストールしておく。 bash (Base section) gzip (Base section, 1.2.4以上) binutils (Devel section) bzip2 (Utils section, 1.0.2) gcc-core (Devel section, 他の C コンパイラでもOK)...","categories": ["プログラミング"],
        "tags": ["Cygwin","C言語"],
        "url": "/2012/07/14/14002013/",
        "teaser": null
      },{
        "title": "Ruby - RubyGmes パッケージの全削除！",
        "excerpt":"インストールされている RubyGems パッケージを全てアンインストール・削除する方法です。 パッケージのアンインストールだけでなく作成されたディレクトリも全て削除する方法についてもメモしておきます。 備忘録 CentOS 6.2 や Cygwin 等での手順です。 ディレクトリは環境に合わせて変更してください。 また、Windows 等他の OS では未確認です。 1. RubyGems パッケージを全てアンインストールする方法 以下のコマンドで一発で全ての RubyGems パッケージを削除できる。 # gem uni -axI `gem li --no-versions` “gem li –no-versions” で全てのバージョン上情報を除いたパッケージ名一覧を取得。 “uni” は “uninstall” の略。 “-a” は全てのバージョンをアンインストールするオプション。 “-x” は該当の実行ファイルも確認無しでアンインストールするオプション。 “-I” は依存性を無視するオプション。 2. パッケージ以外のディレクトリ・ファイルも削除する方法 以下のコマンドでディレクトリ・ファイルを削除する。 # rm -rf /usr/local/lib/ruby/site_ruby/1.9/rubygems* #...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2012/07/16/16002016/",
        "teaser": null
      },{
        "title": "CentOS - Java インストール！",
        "excerpt":"CentOS 6.2 にはデフォルトで GNU 版の Java が用意されていますが、Oracle 版の Java をインストールして使用可能にする設定をしました。 CentOS への Java のインストールについての情報は結構ありますが、インストールしただけでは GNU 版の Java が有効になったままで Oracle 版の Java が使えません。 作業記録 0. 前提条件 CentOS 6.2 (i386) での作業を想定。 GNU 版 Java が導入済みでなければ、Java の新規インストールだけで済む。 GNU 版 Java でよいのなら、Java の新規インストールもしなくてよい。 1. GNU 版 Java の確認 GNU 版 Java が導入済みか否かの確認をする。 # rpm...","categories": ["プログラミング"],
        "tags": ["CentOS","Java"],
        "url": "/2012/07/18/18002018/",
        "teaser": null
      },{
        "title": "Cygwin - rbenv インストール！",
        "excerpt":"Cygwin 上で複数の種類・バージョンの Ruby を管理できる RVM(Ruby Version Manager) を使用していましたが、最近流行り（？）の rbenv に変更しました。 rbenv は RVM にある gemset の概念がない等 RVM と異なる部分が多々ありますが、単純に色んなバージョンの Ruby を使いたいだけなら RVM より手軽のようです。 ※RVM と rbenv の違いについては、説明しているサイトが多数あるのでここでは説明しません。 後学のために、インストール手順だけ記録しておきます。 作業記録 0. 前提条件 作業した環境は Cygwin 1.7.15 です。 CentOS 等でも同様の作業になると思います。（もちろん Windows はダメ） また、git コマンドを使ってインストールするので、git がインストール済みであること。 1. RVM のアンインストール RVM がインストール済みだと rbenv と衝突するのでアンインストールしておく。 $ rvm...","categories": ["プログラミング"],
        "tags": ["Cygwin","Ruby"],
        "url": "/2012/07/20/20002001/",
        "teaser": null
      },{
        "title": "C++ & cURL で Web スクレイピング！",
        "excerpt":"【はじめに】 Yahoo!ファイナンス掲載情報の自動取得（スクレイピング）は禁止されています。（参照） 以下の記事を参考にすることもお勧めしません。 こんばんは。 当方、今まで Ruby + Hpricot や Java + Tidy で Yahoo!ファイナンスからデータを取得してきました。 しかし、Ruby + Hpricot での処理を Java + Tidy での処理に変更しても、高速化は実現できませんでした。 今回は、GNU C++ で同様の処理を試験すべくプログラミングしてみました。 今まで Ruby や Java で使用してきた HTML パースのライブラリを使用せず、cURL(HTTPやFTPでデータのやり取りをするライブラリ) で取得した HTML ソースを自力で解析してみました。 また、テストした内容は上場中の全銘柄の情報を取得するというものです。 （応用すれば、株価の取得等なんでもできます。） 上で言う「自力」とは「正規表現」ライブラリを使用せず、文字列をコツコツと切り貼りするような処理の事です。 C++ で使用可能な「正規表現」ライブラリは多数あるようですが。。。 作業記録 0. 前提条件 作業した環境は Cygwin 1.7.15 です。 使用したコンパイラは g++ (GCC)...","categories": ["プログラミング","株式"],
        "tags": ["Cygwin","C言語"],
        "url": "/2012/07/22/22002052/",
        "teaser": null
      },{
        "title": "C++ - 円周率計算（モンテカルロ法）！",
        "excerpt":"最近 C++ (GNU版) も弄っているので、練習がてら円周率を計算するプログラムを作成しました。 と言っても、モンテカルロ法です。 モンテカルロ法、その他円周率の計算等については各自調べてください。 記録 0. 前提条件 作業した環境は Cygwin 1.7.15 です。 使用したコンパイラは g++ (GCC) 4.7.1 です。 1. C++ ソース作成 今回作成した C++ ソースは以下の通りです。 C++ なのでオブジェクト指向な作りにしています。 また、プロット回数を増やしすぎると当然ながらオーバーフローします。 【 ファイル名： PiMontecarlo.cpp 】 #include &lt;cstdlib&gt; // for rand() #include &lt;iostream&gt; // for cout #include &lt;math.h&gt; // for pow() #include &lt;stdio.h&gt; using namespace...","categories": ["プログラミング"],
        "tags": ["Cygwin","C言語"],
        "url": "/2012/07/24/24002044/",
        "teaser": null
      },{
        "title": "Ruby - Sinatra インストール！",
        "excerpt":"今回は、Ruby 製の軽量 Web アプリケーション作成のためのツール Sinatra の導入についてです。 いわゆる DSL(Domain Specific Language) というドメイン特化言語にあたります。 当方、将来 Sinatra 製 CMS の Lokka を導入したいという事もあり、試しにインストールしてみました。 作業記録 0. 前提条件 作業を試行したのは Cygwin 1.7.15 上ですが、Linux 等でも同様です。 使用した Ruby は 1.9.3-p194 使用した RubyGems は 1.8.24 今回は HTML/XHTML を生成するためのマークアップ言語 Haml を使用します。 今回は Gemfile を使用します。 そして、ディレクトリ構成は以下のようにしました。 /var/www/test_sinatra Gemfile test_sinatra.rb views + index.haml 1....","categories": ["プログラミング"],
        "tags": ["Ruby","Sinatra"],
        "url": "/2012/07/26/26002053/",
        "teaser": null
      },{
        "title": "C++, Ruby - ユークリッドの互除法！",
        "excerpt":"C++ と Ruby で、ユークリッドの互除法を使って２つの自然数の最大公約数を求めるプログラムを作成してみました。 まず、ユークリッドの互除法について、 「自然数 a, b ( a &gt; b ) について、a を b で割った剰余を r とすると、a と b の最大公約数は b と r の GCD に等しい。」 という性質が成り立つ。 この性質を利用して、b を r で割った剰余、除数 r をその剰余で割った剰余、と逐次計算を繰り返すと、いずれ剰余が 0 になる。 そして、その時の除数が a と b との最大公約数となる。 また、自然数 a と b ( a &gt; b...","categories": ["プログラミング","数学"],
        "tags": ["C言語","Ruby"],
        "url": "/2012/07/28/28002013/",
        "teaser": null
      },{
        "title": "グランビルの法則で売買シグナル判定！",
        "excerpt":"「グランビルの法則」についてのメモです。 「グランビルの法則」とは米国の有名な株式アナリストである Joseph E. Granville が移動平均線と株価の関係より導いた法則で、移動平均線と株価の位置により４つの買いパターンと４つの売りパターンがあるというものです。 グランビルの法則 以下に買いシグナル判断の４パターン、売りシグナル判断の４パターンをまとめました。 グランビルの法則は、もともと200日移動平均線を元に考案されたものですが、近代の株式取引処理の早さからすると25日移動平均線が意識される場合が多いようです。 しかし、銘柄によって異なるので一概には言えません。銘柄別によく吟味する必要があります。 また、株価と移動平均線ではなく、短期移動平均線と中期移動平均線、中期移動平均線と長期移動平均線で考える場合もあります。 買いシグナル 移動平均線が下向きから横ばいか上向きになり、 株価が移動平均線を下から上抜いたら、 トレンドが上昇に転じたと見て買い。 （中・大勢の買い） 移動平均線が上向きの状況下で、 株価が移動平均線を少し割り込むくらいのところまで下落し反発したら買い。 （押し目買い） 移動平均線が上向きの状況下で、 株価が移動平均線付近のところまで下落し反発したら買い。 （押し目買い） 移動平均線が下向きの状況下で、 株価が移動平均線から大きく下離れしたら、 移動平均線に向かって短期的に反発する可能性があると見て買い。 （短期的・消極的自律反発） 売りシグナル 移動平均線の向きが上向きから横ばいか下向きになり、 株価が移動平均線を上から下抜いたら、 トレンドが下落に転じたと見て売り。（中・大勢の買い） 移動平均線が下向きの状況下で、 株価が移動平均線を少し割り込むくらいのところまで上昇し反落したら売り。 （戻り売り） 移動平均線が下向きの状況下で、 株価が移動平均線付近のところまで上昇し反落したら売り。 （戻り売り） 移動平均線が上向きの状況下で、 株価が移動平均線から大幅に上離れしたら、 移動平均線に向かって短期的に反落する可能性があると見て売り。 （短期的・消極的修正） 補足 株価と移動平均線との差を「移動平均乖（カイ）離率」と言ったり、２つの移動平均線の差を「PMAO」と言ったりします。 さらに、グランビルの法則についてい色々調べてみると以下のような事も言えるようです。 「買い１」・「売り１」は、トレンド転換のかなり強いサインと言える。 「買い２・３」・「売り２・３」は、わかりやすくので初心者向き。 「買い２・３」・「売り２・３」は、しっかり反発（反落）することを確認する。 「買い４」・「売り４」は、タイミングを計るのが難しいので初心者には不向き。 テクニカル指標の中でも単純な部類の移動平均線でここまで売買のサインを判断できるのは興味深いです。 もちろん、例外的な反応を見せる事もあるので要注意ですが。。。 以上。...","categories": ["株式"],
        "tags": [],
        "url": "/2012/07/30/30002003/",
        "teaser": null
      },{
        "title": "2012年7月 - OS・ブラウザ別アクセス状況！【自動投稿】",
        "excerpt":"8月になりましたので、先月7月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 13,721 83.3192 Mac OS 1,722 10.4566 Linux 452 2.7447 unknown 299 1.8156 Ubuntu Linux 194 1.1780 Fedora Linux 28 0.1700 FreeBSD 16 0.0972 PalmOS 15 0.0911 Debian GNU/Linux 9 0.0547 Android 6 0.0364 PlayStation 3 0.0182 Solaris 2 0.0121 Slackware Linux 1 0.0061...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/08/01/01002006/",
        "teaser": null
      },{
        "title": "C++ - 素数判定！",
        "excerpt":"今日は、任意の自然数が素数か否かを判定する C++ によるアルゴリズムについてです。 まず、 自然数 p ( &gt; 1 ) が 1 と p の他に正の約数を持たない場合、p を素数という。 単純に考えると、 与えられた自然数 p が素数であるか否かを判定するには、2 から p まで順に割ってみて割り切れる自然数が存在しないか否かを判断すればよい。 となります。 しかし、それではあまりに効率が悪い事はすぐに分かると思います。 たとえば、自然数 49 が与えられた場合、8 以上の数は確認する必要はありません。2 から割ってみて 7 (= \\(\\sqrt{49}\\)) で結果が分かります。 別の例として、33 (= \\(3 \\times 11\\)) を考えてみると、33 を 2 から 32 まで調べなくても、\\(\\sqrt{33} (= 5.744\\cdots)\\) までの自然数で確認すればよいのです。 \\(\\sqrt{33}\\) までの自然数に小さいほうの...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/08/02/02002047/",
        "teaser": null
      },{
        "title": "Ruby - 素数判定！",
        "excerpt":"昨日は、任意の自然数が素数か否かを判定する C++ によるアルゴリズムを紹介しました。 C++ で素数判定！ 今日は、同じアルゴリズムを Ruby で実現してみました。 素数やアルゴリズムについては、昨日の記事を参照してください。 ただ、Ruby には Prime クラスというものが用意されているので、実際には自分で判定する必要もありません。 今回は自分で判定した結果が正しいかを確認する意味も含めて、Prime クラスで判定した結果も確認できるようにしました。 ※Prime クラスは Ruby 1.8 までは mathn で定義されていました。現在はライブラリ prime に移動しています。 【2017-11-19 追記】 素数判定について再考しました。 「こちら」の方をご参照ください。 【追記ここまで】 以下、Ruby によるサンプルスクリプトです。 記録 0. 前提条件 Cygwin 1.7.15 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下の通りです。 【 ファイル名： prime_number.rb 】 # -*-...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/08/03/03002001/",
        "teaser": null
      },{
        "title": "C++ - エラトステネスのふるい！",
        "excerpt":"今日は、2 以上 n 以下の自然数の中から素数を抽出（素数以外を排除）する C++ によるアルゴリズムについてです。 まず、 「自然数 p ( &gt; 1 ) が 1 と p の他に正の約数を持たない場合、p を素数という。」 です。 そして、簡単に言うと、自然数の配列をふるいに見立てて素数以外を排除していくという方法が「エラトステネスのふるい」の考え方です。 アルゴリズムとしてまとめると、 2 から n のすべての自然数を「ふるい」にいれる。 「ふるい」の中で最小数を素数とする。 上記 (2) で求めた素数の倍数をすべて「ふるい」から除外する。 上記 (2), (3) を n まで繰り返し、「ふるい」に残った自然数が素数となる。 上記の 「「ふるい」に入れる」とは、 「2 から n を添え字とする配列にフラグを立てること(値を 1 に設定すること)」 「「ふるい」から除外する」とは、 「配列のフラグを削除すること(値を 0 に設定すること)」 で実現させています。 以下、C++...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/08/05/05002018/",
        "teaser": null
      },{
        "title": "Ruby - エラトステネスのふるい！",
        "excerpt":"昨日は、エラトステネスのふるいの C++ によるアルゴリズムを紹介しました。 C++ - エラトステネスのふるい！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズム等については、昨日の記事等を参照してください。 以下、Ruby によるサンプルスクリプトです。 記録 0. 前提条件 Cygwin 1.7.15 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下の通りです。 【 ファイル名： eratosthenes.rb 】 # -*- coding: utf-8 -*- #======================================= # エラトステネスのふるい #======================================= class Eratosthenes # 最大数 NUM_MAX = 1000 # 計算クラス class Calc #...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/08/06/06002013/",
        "teaser": null
      },{
        "title": "C++ - 素因数分解！",
        "excerpt":"今日は、任意の自然数を素因数分解する C++ によるアルゴリズムについてです。 まず、 自然数 p (&gt; 1) が 1 と p の他に正の約数を持たない場合、p を素数という。 です。そして、 任意の自然数を素数の積で表すことを、素因数分解という。但し、1 の素因数分解は 1 と定義する。 です。 自然数 n を素因数分解するアルゴリズムは以下のようになる。 n を 2 で割り切れなくなるまで、繰り返し割っていく。 そして、割り切れるたびに 2 を表示し、n をその 2 で割った数にする。 割る数を 3 として同じことを繰り返し、以降 4, 5, 6 … と続けていく。 割る数を a とした時、 \\(\\sqrt{n} \\geq a ( n \\geq...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/08/08/08002014/",
        "teaser": null
      },{
        "title": "Ruby - 素因数分解！",
        "excerpt":"昨日は、任意の自然数を素因数分解する C++ によるアルゴリズムを紹介しました。 C++ - 素因数分解！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、昨日の記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Cygwin 1.7.15 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下の通りです。 File: prime_factorization.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/08/09/09002015/",
        "teaser": null
      },{
        "title": "Ruby - undefined method `connect' for Mysql:Class！",
        "excerpt":"Ruby に Gem パッケージ mysql をインストール済みなのに、connect 時に以下のようなエラーが発生します。 undefined method `connect' for Mysql:Class 環境によって、発生したり発生しなかったりします。 以下、対策方法メモです。 備忘録 0. 前提条件 当方の場合、以下のような環境でこのようなエラーが発生しました。 Scientific Linux 6.2 (x86_64) ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-linux] （ソースからコンパイルしてインストールした） Gem パッケージ mysql 2.8.1 ちなみに、以下のような環境では問題なかった。 CentOS 6.3 (i386) ruby 1.9.3p194 (2012-04-20 revision 35410) [i686-linux] （ソースからコンパイルしてインストールした） Gem パッケージ mysql 2.8.1 1. connect...","categories": ["プログラミング"],
        "tags": ["MySQL","Ruby"],
        "url": "/2012/08/11/11002038/",
        "teaser": null
      },{
        "title": "C++ - 一様乱数（線形合同法）！",
        "excerpt":"今日は、線形合同法を使用して一様乱数を生成する C++ によるアルゴリズムについてです。 まず、 「一様乱数とは、ある有限の区間内で全ての実数が一様に（同じ濃度で）現れるような擬似乱数のことである。」 です。 そして、 線形合同法（Linear Congruential Generators : LCGs）とは、擬似乱数を生成するアルゴリズムの一つで、以下の漸化式によって与えられます。（数式を見やすくするために LaTeX 使用） 線形合同法には、 生成は極めて高速である アルゴリズムが簡易である という利点がある一方、 周期が短い 分布が線形である 予測可能である（暗号には使えない） といった欠点もあります。 この式を利用して計算機で計算させる場合、使用する定数・環境によって「良い乱数」・「悪い乱数」にバラツキが出ます。 “JIS X 9031:2012” で紹介されている定数の例や、各種サイト等で紹介されている定数を使用すると良いでしょう。 JIS Z 9031:2012 乱数生成及びランダム化の手順 Linear congruential generator - Wikipedia, the free encyclopedia 今回は GCC(glibc) で利用すると良いとされている以下の値を使用します。 ※32ビット版OSの環境なのでこれでオーバーフローしないと思います。 a = 1103515245, c = 12345, m...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/08/13/13002033/",
        "teaser": null
      },{
        "title": "Ruby - 一様乱数（線形合同法）！",
        "excerpt":"昨日は、線形合同法を使用して一様乱数を生成する C++ によるアルゴリズムを紹介しました。 C++ - 一様乱数（線形合同法）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 （アルゴリズムについては、昨日の記事を参照してください） 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Cygwin 1.7.15 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下の通りです。 File: rndnum_lcgs.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/08/14/14002016/",
        "teaser": null
      },{
        "title": "VirtualBox - CentOS 6.3 で GuestAdditions インストール時に OpenGL でエラー！",
        "excerpt":"仮想マシン Oracle VirtualBox(Ver.4.1.18) にゲストOSとして CentOS 6.3(x86_64) のデスクトップ環境を導入後、Geust Additions をインストールしようとすると OpenGL の部分で以下のようなエラーが発生します。 # su - # cd /media/VBOX* # ./VBoxLinuxAdditions.run Verifying archive integrity... All good. Uncompressing VirtualBox 4.1.18 Guest Additions for Linux......... VirtualBox Guest Additions installer Removing installed version 4.1.18 of VirtualBox Guest Additions... Removing existing VirtualBox DKMS kernel modules [...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["CentOS","VirtualBox"],
        "url": "/2012/08/16/16002002/",
        "teaser": null
      },{
        "title": "C++ - 一様乱数の一様性検定（カイ２乗検定）！",
        "excerpt":"少し前に、線形合同法を使用して一様乱数を生成する C++ によるアルゴリズムについて紹介しました。 C++ - 一様乱数（線形合同法）！ 今回は、それらの生成した一様乱数が本当に一様かどうかを「カイ２乗検定」で検証してみました。 「カイ２乗検定」とは、今回のケースに合わせて簡単に言うと、 この値を検証してみるということになります。 「カイ２乗検定」の詳しい事は、別途サイトや統計関係の書籍をお調べください。 以下、C++ によるサンプルソースです。 0. 前提条件 Cygwin 1.7.15 g++ (GCC) 4.7.1 1. C++ ソース作成 今回作成した C++ ソースは以下の通りです。 （C++ なのでオブジェクト指向な作りにしている） File: chi_2_rndnum.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/08/18/18002013/",
        "teaser": null
      },{
        "title": "Ruby - 一様乱数の一様性検定（カイ２乗検定）！",
        "excerpt":"昨日は、一様乱数の一様性を「カイ２乗検定」で検定する C++ によるアルゴリズムを紹介しました。 C++ - 一様乱数の一様性検定（カイ２乗検定）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 カイ２乗検定の詳細については、昨日の記事等を参照してください。 実際、アルゴリズム的にはほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Cygwin 1.7.15 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下のとおりです。 File: chi_2_rndnum.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/08/19/19002044/",
        "teaser": null
      },{
        "title": "Linux - 電源ボタンでシャットダウン！",
        "excerpt":"RedHad 系 Linux(CentOS, Scientific Linux) でマシンの電源ボタンを押したら、（正規のシャットダウンプロセスを踏んで）シャットダウンできるようにしてみました。 ディスプレイやキーボードを接続していないマシンで、普段リモートターミナル経由で操作している場合などでは特に有効です。 作業記録 0. 前提条件 CentOS 6.3, Scientific Linux 6.3 での作業を想定。 （他のディストリビューション、BSD 等は未確認） 電源ボタンを「長押し」ではなく「短押し」。 1. acpid 導入 電源管理パッケージ acpid がインストールされていなければインストールして、サービスを起動し、さらに、マシン起動時に自動起動するように設定する。 ※CentOS 6.3, Scientific Linux 6.3 では、acpid は最初からインストールされていて自動起動している。 # yum install acpid # service acpid start # chkconfig acpid on 2. 設定ファイル編集 設定ファイル “/etc/acpi/events/power.conf” を開き、編集する。 “action”...","categories": ["サーバ構築"],
        "tags": ["CentOS","ScientificLinux"],
        "url": "/2012/08/21/21002019/",
        "teaser": null
      },{
        "title": "Linux - ディレクトリからファイル名取得！",
        "excerpt":"Linux(Unix 含む) であるディレクトリ内にあるファイルの中から、ファイル名を取得するコマンドについてのメモです。 bash 等のシェルスクリプト内で結構使うので記録しておきます。 作業メモ 0. 前提条件 Cygwin 1.7.15 での作業を想定していますが、Linux, BSD でも同様です。 1. ファイル名昇順で先頭・末尾のファイル名を取得 たとえば、あるフォルダに以下のようなファイル名に日付を使用しているファイルがあり、 file_20120101.txt file_20120102.txt file_20120103.txt file_20120104.txt file_20120105.txt 昇順で一番先頭になるファイル又は一番末尾になるファイルのファイル名を取得するには、以下のようなコマンドを使用する。 【ファイル名が昇順で先頭になるファイル】 $ ls -l file_*.txt | head -n 1 | gawk '{print $9}' $ file_20120101.txt 【ファイル名が昇順で末尾になるファイル】 $ ls -l file_*.txt | tail -n 1 | gawk '{print $9}'...","categories": ["サーバ構築"],
        "tags": ["Linux","Unix","シェル","bash"],
        "url": "/2012/08/22/22002012/",
        "teaser": null
      },{
        "title": "Linux - bash でテキストファイルから行抽出！",
        "excerpt":"Linux(Unix 含む) であるテキストファイルの中から、条件に合致する行だけを出力する bash スクリプトについてです。 結構使うので記録しておきます。 作業メモ 0. 前提条件 Cygwin 1.7.15 での作業を想定していますが、Linux, BSD でも同様です。 使用するシェルは bash です。 1. テキストファイルの準備 今回のテストでは以下のようなテキストファイルを使用する。 （固定長のテキストファイルです） 【ファイル名： test.txt】 1002 (株)あいうえお MO 100 459 [13] ( 1 ) 1004 (株)かきくけこ MO 1 96,600 [13] ( 1 ) 1034 (株)さしすせそ JS 100 486 [13] ( 1 )...","categories": ["サーバ構築"],
        "tags": ["Linux","Unix","シェル","正規表現","bash"],
        "url": "/2012/08/23/23002056/",
        "teaser": null
      },{
        "title": "Ruby - 例外発生時 retry 回数指定！",
        "excerpt":"Ruby で例外発生時には処理を中止(exit)したり、リトライ(retry)したりすると思います。 特に、たまたま処理に失敗するような場合は、再度同じ処理を流す為に rescue 節に retry を記述します。 しかし、これは１度しか retry されません。 １度 retry してもまた失敗するかもしれないことだって考えられます。 （もちろん、明らかに失敗する処理は何回 retry しても無意味なので、exit にしますが） 以下、retry 回数を指定する方法についてのメモです。 記録 0. 前提条件 Cygwin 1.7.15 Ruby 1.9.3-p194 1. サンプルスクリプト・１ begin より前にカウンタを定義・初期化し、例外が発生する度にカウンタをインクリメントし、制限回数未満なら retry する、という例です。 def test_retry # リトライ回数 cnt_retry = 0 begin # # 何らかの処理 # rescue # カウンタインクリメント cnt_retry += 1...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2012/08/25/25002047/",
        "teaser": null
      },{
        "title": "Linux - シェルスクリプトでバックグランド並行処理！",
        "excerpt":"Linux(Unix 含む) 等のシェルスクリプトで複数の処理を並行で処理する方法についてのメモです。 シェルスクリプト内で複数の処理を流す場合、１つずつ流しても良いのですが、同時に並行して流した方が効率がよい場合があります。 特に、昨今のCPUはマルチコアプロセッサなので、そういう並行処理は得意のはずです。 以下、サンプルです。 記録 0. 前提条件 Cygwin 1.7.15 での作業を想定していますが、Linux, BSD でも同様です。 使用するシェルは bash です。 1. サンプルスクリプト 以下、シェルスクリプトのサンプルです。 ４つのプログラムをバックグラウンドで流し、４つ全てが終了したら次のプログラムをフォアグランドで流す例です。 #!/bin/sh # 複数の並行で流したい処理をバックグランドで流す program_1 &amp; program_2 &amp; program_3 &amp; program_4 &amp; # 全てのバックグラウンド処理が終了するまで待機 wait # 次の処理(フォアグランドで流す) program_a 並行で流したいプログラムを &amp; を付けて実行するだけです。 バックグラウンド処理が全て終了するまで待機したい場合は wait コマンドを使用する。 ちなみに、wait $! とした場合は、$! に「最後に実行したバックグラウンドコマンドのPID」がセットされているので、最後にバックグラウンド実行したプログラムが終了するまで待機することになる。 確かに、１つずつ順に直列処理した場合に比べて、若干高速で全体的な処理時間が短くなります。 当然、CPU使用率（負荷）は高くなりますが。。。...","categories": ["サーバ構築"],
        "tags": ["Linux","Unix","シェル","bash"],
        "url": "/2012/08/27/27002009/",
        "teaser": null
      },{
        "title": "Ruby - スレッドで並列処理！",
        "excerpt":"Ruby でスレッドを使用して処理を並列化＆高速化する方法についての記録です。 単純に複数の処理を複数のスレッドにして処理する方法もありますが、今回はより実用的な方法を試行してみました。 実際には、スレッドとのデータのやりとりのためにキューを使用しています。 「キュー」とは、先入れ先出し(FIFL:First In First Out) 構造の概念です。 同様に、後入れ先出し (LIFO: Last In First Out; FILO: First In Last Out) 構造の「スタック」という概念もあります。 以下、サンプルスクリプトです。 作業記録 0. 前提条件 Cygwin 1.7.15 Ruby 1.9.3-p194 1. サンプルスクリプト作成 ループ処理で作成されたデータをスレッドで使用するためにキューに格納。 スレッドを同時に大量に実行すると処理が重くなる可能性があるため、同時に実行するスレッドの最大数を設定。 各スレッド側では、ループ処理でキューに格納された値を取得して処理。 各スレッドはランダム時間スリープして画面出力しているだけ。 以下の例では、スレッドは同時に10個処理されるようにしています。 【 ファイル名： test_thread.rb 】 require 'thread' class TestThread max_cnt = 10 # 同時に処理するスレッドの最大数 obj_queue...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2012/08/29/29002025/",
        "teaser": null
      },{
        "title": "C++ - 正規乱数（ボックス＝ミューラー法）！",
        "excerpt":"少し前に、線形合同法を使用して一様乱数を生成する C++ によるアルゴリズムについて紹介しました。 C++ - 一様乱数（線形合同法）！ C++ - 一様乱数の一様性検定（カイ２乗検定）！ 今回は、正規乱数を発生させて実際に正規分布になっているかを検証してみました。 まず、「正規乱数」とは「正規分布」を持つ「乱数」のことです。 「正規分布」は以下のようなグラフになり、 以下のような式で定義されます。 この「正規乱数」の生成方法として、今回は「ボックス＝ミューラー法(Box-Muller transform」を使用します。 「ボックス＝ミューラー法」は、0 より大きく 1 以下、すなわち (0,1] の一様乱数を正規乱数（正規分布を持つ乱数）に変換する方法で、計算式は以下のようになります。 (0, 1] の２個１組の一様乱数で２個の正規乱数を生成できます。 ※正規分布・正規乱数についての詳細は、別途お調べください。 以下、C++ によるサンプルソースです。 0. 前提条件 Cygwin 1.7.15 g++ (GCC) 4.7.1 1. C++ ソース作成 今回作成した C++ ソースは以下の通りです。（C++ なのでオブジェクト指向な作りにしている） また、元となる一様乱数の生成は関数を使用しています。 以下の例では、平均を 10, 標準偏差を 2.5 とし、0 から 20 までの整数乱数に変換して検証しています。...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/08/31/31002021/",
        "teaser": null
      },{
        "title": "2012年8月 - OS・ブラウザ別アクセス状況！【自動投稿】",
        "excerpt":"9月になりましたので、先月8月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 11,409 83.3443 Mac OS 1,087 7.9407 unknown 718 5.2451 Linux 288 2.1039 Ubuntu Linux 138 1.0081 Fedora Linux 19 0.1388 PalmOS 11 0.0804 FreeBSD 8 0.0584 Debian GNU/Linux 6 0.0438 Android 2 0.0146 RedHat Linux 2 0.0146 PlayStation 1 0.0073 合　計 13,689 100.0000...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/09/01/01002007/",
        "teaser": null
      },{
        "title": "Ruby - 正規乱数（ボックス＝ミューラー法）！",
        "excerpt":"先日は、正規乱数をボックス=ミューラー法で生成して正規分布を検証する C++ によるアルゴリズムを紹介しました。 C++ - 正規乱数（ボックス＝ミューラー法）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Cygwin 1.7.15 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下の通り。 File: rndnum_box_muller.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/09/02/02002000/",
        "teaser": null
      },{
        "title": "CentOS - 起動時プログレスバー非表示設定！",
        "excerpt":"CentOS や Scientific Linux の Redhat クローンの Linux では、起動時に画面下部にプログレスバーが表示されます。 プログレスバー表示中に ESC キー等キーボードを押下するとブートメッセージが表示されますが、デフォルトでブートメッセージを表示させることも可能のようなので、その設定について記録しておくことにします。 作業記録 0. 前提条件 Scientific Linux 6.3 での作業を想定していますが、古いバージョンや CentOS でも同様です。 1. 設定変更前の起動画面 設定変更前は起動時に以下のようにプログレスバーが表示される。 2. 設定変更 /boot/grub/grub.conf を編集する。 該当のバージョンのカーネル（大抵は一番上にあるカーネル）の kernel 行の rhgb、quiet を削除する。 【変更前】 kernel /vmlinuz-2.6.32-279.5.1.el6.x86_64 ro root=/dev/mapper/vg_vbox-lv_root rd_NO_LUKS KEYBOARDTYPE=pc KEYTABLE=jp106 rd_NO_MD crashkernel=auto rd_LVM_LV=vg_vbox/lv_swap rd_LVM_LV=vg_vbox/lv_root LANG=ja_JP.UTF-8 rd_NO_DM rhgb quiet 　↓...","categories": ["サーバ構築"],
        "tags": ["CentOS","ScientificLinux"],
        "url": "/2012/09/04/04002017/",
        "teaser": null
      },{
        "title": "Linux - bash でテキストファイルから行抽出（配列操作）！",
        "excerpt":"Linux(Unix 含む) のシェル(bash) での配列操作についてです。 そんなに使用する頻度はありませんが、どうしても使用したくなる局面があるので記録として残しておきます。 作業メモ 0. 前提条件 Cygwin 1.7.15 での作業を想定していますが、Linux, BSD でも同様です。 使用するシェルは bash です。 以下の例は、固定長テキストファイルから指定位置の文字列を配列に格納する処理です。 1. テキストファイルの準備 今回のテストでは以下のようなテキストファイルを使用する。 （固定長のテキストファイルです） 【ファイル名： test.txt】 [0001] A-1002 100 459 [13] ( 1 ) [0001] B-1004 1 96,600 [13] ( 1 ) [0001] A-1034 100 486 [13] ( 1 ) [0001] B-1054 1...","categories": ["サーバ構築"],
        "tags": ["Linux","Unix","シェル","bash"],
        "url": "/2012/09/06/06002030/",
        "teaser": null
      },{
        "title": "FreeBSD - ブートメニューのロゴ＆表示時間変更！",
        "excerpt":"今回は、滅多に話題にしない FreeBSD についてです。   当方、FreeBSD をインストールした際はいつも、起動時のブートメニューのロゴと表示時間を変更します。   FreeBSD 9.0 なら、起動時のブートメニューの右側に表示されるロゴはモノクロのデーモンボール（？）で、ブートメニューの表示時間は10秒になっています。        これらは、設定ファイルに記述することで変更可能です。     作業メモ   1. 起動ロゴの変更   起動ロゴに指定できるのは “/boot/defaults/loader.conf” で確認可能です。。 loader_logo の項を確認すると、fbsdbw, beastiebw, beastie, none が指定可能で、指定しなかった場合のデフォルトは fbsdbw のようです。 “/boot/loader.conf” に loader_logo=\"beastie\" のように追記すればよい。 再起動すると以下のようにロゴが変わっているはずです。      loader_logo=\"beastiebw\" とすると、以下のようになります。      loader_logo=\"none\" とすると以下のようになります。      2. 表示時間の変更   “/boot/loader.conf” に autoboot_delay=\"5\" のように秒数を指定すればよい。 追記後、再起動すると待ち時間が変更になっているはずです。     そんなに、真剣にならなくてもよいようなことですが、後学のために記録しておいた次第です。 ちなみに、将来はブートメニューがグラフィカルになるような話もあるようです。   以上。   ","categories": ["サーバ構築"],
        "tags": ["FreeBSD"],
        "url": "/2012/09/08/08002028/",
        "teaser": null
      },{
        "title": "C++ - 数値積分（台形則による定積分）！",
        "excerpt":"関数 \\(f(x)\\) の定積分を微小区間に分割して近似値として求める方法を数値積分と言います。 今回は、数値積分の中でも「台形則による定積分」を C++ で挑戦してみました。 まず、\\(\\displaystyle y=\\int_{a} ^ {b}f(x)dx\\) を定積分ということは、関数 \\(y=f(x)\\) の 曲線と x 軸で挟まれた領域の区間 [a, b] の面積を求めるということになります。 そして実際には、以下のように区間 [a, b] を m 個に分割して台形の面積の合計を求めるのです。 もちろん、分割数を大きくすれば、より正確な値を計算できます。 そして、台形の面積の合計の計算式は以下のようになります。 さらに詳しいことは、高校の教科書等で確認してください。 以下、C++ によるサンプルソースです。 0. 前提条件 Cygwin 1.7.15 g++ (GCC) 4.7.1 1. C++ ソース作成 今回作成した C++ ソースは以下のとおり。（C++ なのでオブジェクト指向な作りにしている） 被積分関数は \\(\\sqrt{4-x ^ {2}}\\) としている。 区間を...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/09/10/10002057/",
        "teaser": null
      },{
        "title": "Ruby - 数値積分（台形則による定積分）！",
        "excerpt":"先日は、数値積分（台形則による定積分）の C++ によるアルゴリズムを紹介しました。 C++ - 数値積分（台形則による定積分）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Cygwin 1.7.15 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下のとおり。 a も b も 0 だったら何もせず終了するようにしている。 関数 f(x) はメソッドにした。 被積分関数は \\(\\sqrt{4-x ^ {2}}\\) とした。 File: definite_integral_trapzoid.rb 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/09/11/11002028/",
        "teaser": null
      },{
        "title": "bash - 複数のバックグラウンド処理の終了判定！",
        "excerpt":"通常、Linux(Unix 含む) のシェル(bash) で１つのプログラムを流して、正常に終了したか否かはプログラムからのリターンコードで判定します。 しかし、複数のプログラムを同時にバックグラウンドで流した場合は、１つずつ判定することは出来ません。 バックグラウンドで流したプログラムが全て正常終了した時だけ次の処理に進みたい場合に、困ってしまいます。 少し細工が必要です。 当方、意外と使用する局面があるので記録として残しておきます。 作業メモ 0. 前提条件 Cygwin 1.7.15 での作業を想定していますが、Linux, BSD でも同様です。 使用するシェルは bash です。 bash スクリプト内で実行するプログラムは試験的に Ruby スクリプトにしていますが、何でもかまいません。 1. 実行プログラムの準備 今回のテストでは以下のような Ruby スクリプトを使用する。 0 - 9 の整数乱数を発生させ、その秒数スリープさせる処理を５回繰り返すが、発生した乱数が 0 だったら リターンコード -1(255) を返して終了する。 【ファイル名： test.rb】 class Test 5.times do |i| r = rand( 10 ) puts...","categories": ["サーバ構築"],
        "tags": ["Linux","Unix","シェル","bash"],
        "url": "/2012/09/13/13002045/",
        "teaser": null
      },{
        "title": "CentOS - TeX Live 2012 インストール！",
        "excerpt":"サーバマシン(CentOS 6.3)に \\(\\TeX\\) のディストリビューションの一つである \\(TEX Live\\ 2012\\) をインストールした際の記録です。 ちなみに、\\(\\TeX\\) とは組版システムで、論文や数式書いたりするソフトです。 当方、ブログ(WordPress)で数式をアップロードする際に、別途作成した画像ファイルをアップしていました。 WordPress には \\(\\TeX\\) プラグインがあって、それを使用すれば \\(\\TeX\\) 画像が作れますが、デフォルトでは WordPress サイトにアクセスに行ってしまいます。 プラグインの設定で自サーバの \\(\\TeX\\) を利用するようにもできるようです。 折角、自宅でサーバを運用しているのですから、サーバで \\(\\TeX\\) を利用してみようと考えてみた次第です。 そこで、今回はサーバ(CentOS)に \\(\\TeX\\) 環境を整備してみました。 以下、作業記録です。 作業メモ 0. 前提条件 CentOS 6.3 (i386) での作業を想定していますが、他のディストリビューションでもほぼ同じだと思います。 CUI モードでのインストール・利用を想定しています。 作業は全て root ユーザで行いました。 \\(\\TeX\\) の詳細（文法等）については、ここでは説明しません。 1. アーカイブダウンロード TeX Live - TeX Users...","categories": ["サーバ構築"],
        "tags": ["CentOS","TeX"],
        "url": "/2012/09/15/15002016/",
        "teaser": null
      },{
        "title": "WordPress - TeX プラグイン WP LaTeX 導入！",
        "excerpt":"昨日は、当方の自宅 CentOS サーバ に \\(\\TeX\\) ソフト \\(TEX Live 2012\\) をインストールしました。 CentOS - TeX Live 2012 インストール！ 今日は、WordPress に \\(\\TeX\\) プラグイン “WP LaTeX” をインストールして、自宅サーバ側の \\(TEX Live 2012\\) で \\(\\TeX\\) 画像を作成するように設定しました。 ※デフォルトでは WordPress LaTeX サーバにアクセスして、戻ってきた画像を表示するようになっています。 以下、作業手順です。 作業メモ 0. 前提条件 サーバに \\(\\TeX\\)/\\(\\LaTeX\\) 環境が整備済みであること。 （当方は、\\(TEX Live 2012\\) がサーバの “/home” ディレクトリにインストール済み） 1. WP LaTeX プラグインのインストール...","categories": ["サーバ構築","ブログ"],
        "tags": ["TeX","WordPress"],
        "url": "/2012/09/16/16002059/",
        "teaser": null
      },{
        "title": "Cygwin - 公開鍵認証 SSH クライアントとして使用！",
        "excerpt":"Cygwin から「秘密鍵・公開鍵」を使用して Linux サーバに SSH 接続する方法についての記録です。 当方、普段は Windows 上では端末エミュレータとして Poderosa を使用していますが、何かあった時のために Cygwin でも SSH 接続できるように記録しておいた次第です。 また、この方法は Cygwin のみならず、Linux や BSD 等の端末エミュレータでも使用できる方法ですので、後学のためになるかと。 作業記録 0. 前提条件 SSH クライアントとして Cygwin 1.7.15 を想定。 サーバは CentOS 6.3 (32bit) で、既に OpenSSH サーバが導入済みであると想定。 1. OpenSSH パッケージのインストール OpenSSH がインストールされていなければ、Cygwin の setup.exe 等でインストールする。 （当方は apt-cyg 導入済みなので apt-cyg コマンドでインストールした） $...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["CentOS","Cygwin","Linux","Unix"],
        "url": "/2012/09/18/18002034/",
        "teaser": null
      },{
        "title": "Scientific Linux - NVIDIA ドライバのインストール！",
        "excerpt":"当方がメインで使用していたマシンに Scientific Linux 6.3 (GNOME) をインストールしたので、NVIDIA ビデオカード対応のドライバもインストールしました。 作業が単純ではないので、記録として残しておきます。 作業記録 0. 前提条件 作業するマシンには Scientific Linux 6.3 (64bit版) Gnome がインストールされている。 (CentOS や Gnome 以外でも同じでしょう) マシンに搭載されているビデオカードは、EN9600GT/HTDI/512M/R3 1. ドライバの準備 nvidia ドライバダウンロードページ から、マシンに搭載されているビデオカードに合ったドライバをダウンロードする。 当方は、 ビデオカード：EN9600GT/HTDI/512M/R3 OS:Scientific Linux 6.3 (64bit版) なので、”NVIDIA-Linux-x86_64-304.43.run” をダウンロードした。 ダウンロードしたドライバを分かりやすいように /root に配置。 2. システムアップデート 念のため、システムのアップデートをしておく。 # yum -y update 3. 必要なパッケージのインストール ドライバインストールに必要なパッケージをインストールしておく。 #...","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","ScientificLinux"],
        "url": "/2012/09/20/20002008/",
        "teaser": null
      },{
        "title": "Scientific Linux - Google Chrome を yum インストール！",
        "excerpt":"Scientific Linux や CentOS のデスクトップ環境に Web ブラウザ Google Chrome をインストールする方法についてです。 別途リポジトリを用意する必要があったため、記録として残しておきます。 作業記録 0. 前提条件 作業環境は Scientific Linux 6.3(64) Gnome を想定。 (CentOS + Gnome 環境でも同じ。おそらく KDE 等も同じでしょう。) 1. リポジトリの準備 以下のように、リポジトリ設定ファイルを用意する. 【 64ビットの場合 】 # vi /etc/yum.repos.d/google.repo [google-chrome] name=google-chrome - 64-bit baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64 enabled=0 gpgcheck=1 gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub ※32bit 版 OS の場合は、x86_64 の部分を i386 にすればよい。...","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","ScientificLinux"],
        "url": "/2012/09/22/22002052/",
        "teaser": null
      },{
        "title": "Scientific Linux - Firefox 最新版インストール！",
        "excerpt":"Scientific Linux や CentOS のデスクトップ環境にデフォルトで入っている Web ブラウザ Firefox を最新版にする方法についてです。 単純な作業ではなかったため、記録として残しておきます。 作業記録 0. 前提条件 作業環境は Scientific Linux 6.3(64) Gnome を想定。 (CentOS + Gnome 環境でも同じ。おそらく KDE 等も同じでしょう。) デフォルトでインストールされている Firefox は 10.0.7-1.el6_3 (64bit版) 新しくインストールする Firefox は 15.0.1 (32bit版) （32bit 版しか用意されていませんが、64bit 環境でも動作するようです） 1. デフォルトの Firefox アンインストール デフォルトでインストールされている Firefox は不要なので、アンインストールしておく。 # yum remove firefox 2....","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","ScientificLinux"],
        "url": "/2012/09/23/23002025/",
        "teaser": null
      },{
        "title": "Scientific Linux - Flash Player インストール！",
        "excerpt":"Scientific Linux や CentOS のデスクトップ環境ではデフォルトでは Flash Player がインストールされていないので、ブラウザで動画が視聴できません。 （実際は OS に Flash Player をインストールするのではなく、ブラウザにインストールするものですが） そこで、Flash Player をインストールしてみました。 記録として残しておきます。 作業記録 0. 前提条件 作業環境は Scientific Linux 6.3(64) Gnome を想定。 (CentOS + Gnome 環境でも同じ。おそらく KDE 等も同じでしょう。) 1. Adobe YUM リポジトリ RPM パッケージのインストール 以下のようにして Adobe YUM リポジトリ RPM パッケージをインストールする。 # rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm #...","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","ScientificLinux"],
        "url": "/2012/09/24/24002030/",
        "teaser": null
      },{
        "title": "Scientific Linux - Flash Player で画面が青みがかる場合！",
        "excerpt":"Scientific Linux のデスクトップ環境 GNOME で、ブラウザで Flash コンテンツを視聴すると、画面が青みがかる現象が発生しました。 どうやら、NVIDIA のビデオカードを使用していると発生するようで、RGB の青と赤が逆になるバグのようです。 （使用するドライバによっては発生しない？） 以下、解決策です。 作業記録 0. 前提条件 作業環境は Scientific Linux 6.3(64) Gnome を想定。 (CentOS + Gnome 環境でも同じ。おそらく KDE 等も同じでしょう。) マシンに搭載されているビデオカードは、EN9600GT/HTDI/512M/R3 Flash Player は こちら の手順でインストールした。 1. mms.cfg ファイルの作成 /etc/adobe/mms.cfg というファイルを作成すればよいようです。 # mkdir /etc/adobe # echo -e \"EnableLinuxHWVideoDecode=1\\nOverrideGPUValidation=true\" | tee /etc/adobe/mms.cfg &gt; /dev/null...","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","ScientificLinux"],
        "url": "/2012/09/25/25002042/",
        "teaser": null
      },{
        "title": "Scientific Linux - ホームディレクトリの日本語ディレクトリ名の英語化！",
        "excerpt":"Scientific Linux のデスクトップ環境では、デフォルトではホームディレクトリ配下のディレクトリ名が「デスクトップ」、「ダウンロード」等のように日本語になっています。   端末エミュレータ等をよく使用する場合には、都度ディレクトリ名に日本語入力するのは面倒です。   以下、”Desktop”, “Downloads” のようにディレクトリ名を英語化する方法についてです。     作業記録   0. 前提条件      作業環境は Scientific Linux 6.3 (64bit) を想定してますが、CentOS 環境でも同じです。   1. 日本語化設定コマンド実行   端末から以下のコマンドを実行する。 （実行するユーザは使用するユーザ）   $ LANG=C xdg-user-dirs-gtk-update   2. 日本語化設定   開いたウィンドウで、”Don’t ask me this agein” にチェックを入れて [ Update Names ] をクリック、そしてログインし直す。      3. 確認   ログインし直したら、ファイルブラウザ、端末エミュレータ等でディレクトリ名が英語に変わっていることを確認する。   その他      日本語名のディレクトリのそれぞれが空でないと上記の作業を行ってもそのディレクトリは残ってしまいます。 後で整理しても構いませんが、作業前に空にした方がよいでしょう。   ディレクトリ名を日本語に戻す場合は、   xdg-user-dirs-update --force     これで、端末エミュレータ等での作業が少しだけですが、楽になりました。   以上。   ","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","ScientificLinux"],
        "url": "/2012/09/26/26002045/",
        "teaser": null
      },{
        "title": "Scientific Linux - VMware Player のアンインストール！",
        "excerpt":"Scientific Linux のデスクトップ環境 GNOME にインストールした仮想マシン環境 VMware Player のアンインストール方法についてです。 インストール自体は VMware サイトからダウンロードした rpm ファイルを rpm -Uvh でインストールするだけですが、アンインストールは普段と勝手が違うようなので記録しておきます。 作業記録 0. 前提条件 作業環境は Scientific Linux 6.3(64) Gnome を想定。 (CentOS + Gnome 環境でも同じ。おそらく KDE 等も同じでしょう。) VMware Player がインストール済み。 1. アンインスール 以下のコマンドを実行する。 表示された画面で “Yes” をチェックして “Next” ボタンをクリックするだけ。 # vmware-installer -u vmware-player ※ちなみに、vmware-uninstaller というコマンドも存在するがこれではエラーになるらしい。（未確認） Windows 環境を使用していたときは、仮想マシン環境に...","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","ScientificLinux","VMware"],
        "url": "/2012/09/27/27002031/",
        "teaser": null
      },{
        "title": "Scientific Linux - VirtualBox インストール！",
        "excerpt":"Scientific Linux のデスクトップ環境 GNOME に仮想マシン環境 VirtualBox をインストールする方法についてです。 簡単な作業ですが、後学のために記録しておく。 作業記録 0. 前提条件 作業環境は Scientific Linux 6.3(64) Gnome を想定。 (CentOS + Gnome 環境でも同じ。おそらく KDE 等も同じでしょう。) 1. rpm パッケージダウンロード VirtualBox のサイトから [ Oracle Linux 6 (“OL6”) / Red Hat Enterprise Linux 6 (“RHEL6”) / CentOS 6 ] の AMD64 版をダウンロードする。 # wget -O...","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","ScientificLinux","VirtualBox"],
        "url": "/2012/09/28/28002043/",
        "teaser": null
      },{
        "title": "Scientific Linux - MySQL Workbench インストール！",
        "excerpt":"Scientific Linux のデスクトップ環境 GNOME に MySQL GUI ツールの MySQL Workbench をインストールする方法についてです。 簡単な作業ですが、後学のために記録しておく。 作業記録 0. 前提条件 作業環境は Scientific Linux 6.3(64) Gnome を想定。 (CentOS + Gnome 環境でも同じ。おそらく KDE 等も同じでしょう。) 1. rpm パッケージダウンロード MySQL :: Download MySQL Workbench ページ内の [ Select Platform: ] で [ Oracle &amp; Red Hat Linux 6 ] を選択する。...","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","MySQL","ScientificLinux"],
        "url": "/2012/09/30/30002013/",
        "teaser": null
      },{
        "title": "2012年9月 - OS・ブラウザ別アクセス状況！【自動投稿】",
        "excerpt":"10月になりましたので、先月9月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 12,332 84.2638 Mac OS 1,454 9.9351 Linux 366 2.5009 unknown 254 1.7356 Ubuntu Linux 170 1.1616 Fedora Linux 18 0.1230 PalmOS 16 0.1093 Android 6 0.0410 PlayStation 5 0.0342 Debian GNU/Linux 5 0.0342 RedHat Linux 4 0.0273 Solaris 2 0.0137 SuSE Linux 2...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/10/01/01002017/",
        "teaser": null
      },{
        "title": "Scientific Linux - Java SE Development Kit インストール！",
        "excerpt":"Scientific Linux 6.3 (64bit) に Java SE Development Kit (= JDK) をインストール方法についてです。 以前、CentOS 6.2 (i386) に JDK をインストールしました。 CentOS - Java インストール！ 今回もインストール方法はほとんど同じですが、若干異なる部分もあるので記録しておきます。 作業記録 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定。 Scientific Linux にはデフォルトで Open JDK という Java 開発キットが導入されているはず。 Open JDK でよいのなら、Java の新規インストールもしなくてよい。 1. インストール済みの JDK 確認 既にインストール済みの JDK を確認してみる。...","categories": ["PC_Tips"],
        "tags": ["Java","ScientificLinux"],
        "url": "/2012/10/02/02002059/",
        "teaser": null
      },{
        "title": "Scientific Linux - ivtv モジュールでカーネルパニック！",
        "excerpt":"Scientific Linux 6.3 (64bit) のデスクトップ環境(GNOME)を構築した当初発生した不具合についてです。 以下に、現象と対策を記録します。 作業記録 0. 前提条件 Scientific Linux 6.3 (64bit) + GNOME 環境を想定。 I-O Data の GV-MVP/RX という TV チューナーカードを搭載している。 1. 発生現象 マシンを起動する際にカーネルパニックが発生する。 実際には、ivtv モジュールを読み込む際にエラーとなっているようなメッセージを出力する。 ivtv とは TV キャプチャカードを使用する際に使用するモジュールです。 マシンに TV チューナーカードを搭載していることや、Web で調べた結果、ivtv が影響していると判断した。 その TV チューナーカードとは、このマシンに Windows XP をインストールしていた際に使用していた TV チューナーカードです。 ちなみに、今は搭載したままで使用していません。 2. ivtv モジュール読み込みの確認 ivtv...","categories": ["PC_Tips"],
        "tags": ["ScientificLinux"],
        "url": "/2012/10/04/04002012/",
        "teaser": null
      },{
        "title": "Scientific Linux - TeXworks インストール！",
        "excerpt":"Scientific Linux のデスクトップ環境に \\(\\TeX\\) を扱う GUI ツール TeXworks をインストールしてみました。 当然、\\(\\TeX\\) 環境は導入済みです。 以下、作業記録です。 作業メモ 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定していますが、他のディストリビューションでもほぼ同じだと思います。 Tex Live 2012 が導入済み。 導入方法は CentOS - TeX Live 2012 インストール！ を参照。 TeX の詳細（文法等）については、ここでは説明しません。 1. 必要なパッケージのインストール TeXworks のインストール必要なパッケージをあらかじめインストールしておく。 # yum -y install subversion # yum -y install poppler-devel # yum...","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","ScientificLinux","TeX"],
        "url": "/2012/10/06/06002059/",
        "teaser": null
      },{
        "title": "C++ - 数値積分（シンプソン則による定積分）！",
        "excerpt":"関数 \\(f(x)\\) の定積分を微小区間に分割して近似値として求める方法を数値積分と言います。 そして、以前「台形則による定積分」についてお話ししました。 C++ - 数値積分（台形則による定積分）！ Ruby - 数値積分（台形則による定積分）！ 今回は、「シンプソン則による定積分」を C++ で実現する方法方法についてです。 まず、台形則では極小区間を直線で近似していたのに対し、シンプソン則では二次曲線で近似します。 ※以下、数式が多いので \\(\\TeX\\) で記載 さらに詳しいことは、高校の教科書等で確認してください。 以下、C++ によるサンプルソースです。 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定。 g++ (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4) 1. C++ ソース作成 今回作成した C++ ソースは以下のとおり。（C++ なのでオブジェクト指向な作りにしている） 被積分関数は \\(\\sqrt{4-x ^ {2}}\\) としている。 区間を [0, 2] とすれば、半径...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/10/08/08002058/",
        "teaser": null
      },{
        "title": "Ruby - 数値積分（シンプソン則による定積分）！",
        "excerpt":"先日は、数値積分（シンプソン則による定積分）の C++ によるアルゴリズムを紹介しました。 C++ - 数値積分（シンプソン則による定積分）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定。 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下の通りです。 a も b も 0 だったら何もせず終了するようにしています。 関数 f(x) はメソッドにしました。 File: definite_integral_simpson.rb 1 2 3 4 5 6 7 8 9 10 11...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/10/09/09002025/",
        "teaser": null
      },{
        "title": "Scientific Linux - Terminator インストール！",
        "excerpt":"Scientific Linux のデスクトップ環境に端末エミュレータ Terminator をインストールしてみました。 端末エミュレータは他にも色々あるようですが、よく検索でヒットする Terminator を試してみようと考えた次第です。 画面が分割できるのが一番の魅力だと思います。 以下、作業記録です。 作業メモ 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定していますが、CentOS でも同じです。 Terminator は Scientific Linux 標準のリポジトリには存在しません。 RPM Forge リポジトリに存在します。 RPM Forge リポジトリが使用可能であることを前提とします。 ここでは RPM Forge リポジトリの導入方法説明しません。不明な方は別途お調べ下さい。 1. インストール RPM Forge リポジトリを利用して yum インストールする。 当方 RPM Forge リポジトリは導入済みですが、enabled=0 としているので、yum インストール時に --enablerepo=rpmforge オプションを指定している。 #...","categories": ["PC_Tips"],
        "tags": ["CentOS","Linux","ScientificLinux"],
        "url": "/2012/10/11/11002027/",
        "teaser": null
      },{
        "title": "Scientific Linux - R 言語環境構築！",
        "excerpt":"Scientific Lixun のデスクトップ環境に統計解析向けプログラミング言語 R の環境を構築してみました。 時々、緻密なグラフを作りたい状況があるからです。 以下、作業記録です。 作業メモ 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定していますが、CentOS でも同じです。 R は Scientific Linux 標準のリポジトリには存在しません。 EPEL リポジトリに存在します。 EPEL リポジトリが使用可能であることを前提とします。 ここでは EPEL リポジトリの導入方法説明しません。不明な方は別途お調べ下さい。 R 自体の詳細な使用方法はここでは触れ（でき）ません。各自お調べ下さい。 1. インストール 以前は、専用のリポジトリを使用したり、ソースからビルドしたりしてインストールする必要がありましたが、今は EPEL リポジトリから yum インストール可能。 EPEL リポジトリを利用して yum インストールする。 当方 EPEL リポジトリは導入済みですが、enabled=0 としているので、yum インストール時に --enablerepo=epel オプションを指定している。 # yum...","categories": ["PC_Tips","プログラミング","数学"],
        "tags": ["CentOS","Linux","ScientificLinux","R"],
        "url": "/2012/10/12/12002003/",
        "teaser": null
      },{
        "title": "Scientific Linux - RStudio インストール！",
        "excerpt":"昨日は、Scientific Linux のデスクトップ環境に統計解析向けプログラミング言語 R をインストールしました。 Scientific Linux - R 言語環境構築！ 今日は R の IDE ツールをインストールしてみました。 デスクトップ版とサーバ版がありますが、今回は個人使用なのでデスクトップ版をインストールしました。 以下、作業記録です。 作業メモ 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定していますが、CentOS でも同じです。 R version 2.15.1 がインストール済み。 (2.11.1 以上がインストールされている必要がある) rpm でインストールする。 R 自体の詳細な使用方法はここでは触れ（でき）ません。各自お調べ下さい。 1. ファイルダウンロード RStudio のダウンロードリンクから、環境にあった rpm ファイルをダウンロードする。 今回は Scientific Linux 6.3 (64bit) なので、”Fedora 13+/openSUSE 11.4+”...","categories": ["PC_Tips","プログラミング","数学"],
        "tags": ["CentOS","Linux","ScientificLinux"],
        "url": "/2012/10/13/13002056/",
        "teaser": null
      },{
        "title": "Scientific Linux - 仮想プリンタ Cups-PDF インストール！",
        "excerpt":"Scientific Linux のデスクトップ環境に仮想プリンタ Cups-PDF をインストールしてみました。 ドキュメントを PDF 化して保存したい場合に大変便利です。 ちなみに、”Cups” とは Unix系OS ユーザにはお馴染みですが、”Common Unix Printing System” の略です。 以下、作業記録です。 作業メモ 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定していますが、CentOS でも同じです。 Cups-PDF は Scientific Linux 標準のリポジトリには存在しません。 EPEL リポジトリに存在します。 EPEL リポジトリが使用可能であることを前提とします。 ここでは EPEL リポジトリの導入方法説明しません。不明な方は別途お調べ下さい。 1. インストール EPEL リポジトリを利用して yum インストールする。 当方 EPEL リポジトリは導入済みですが、enabled=0 としているので、yum インストール時に --enablerepo=epel...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["CentOS","Linux","ScientificLinux"],
        "url": "/2012/10/15/15002031/",
        "teaser": null
      },{
        "title": "R - ローソク足チャート描画！",
        "excerpt":"以前、Scientific Linux のデスクトップ環境に統計解析向けプログラミング言語 R の環境、GUI ツール RStudio を構築しました。 Scientific Linux - R 言語環境構築！ Scientific Linux - RStudio インストール！ 今日は、RStudio で株価の CSV データを読み込んでローソク足チャートを描画してみました。 以下、作業記録です。 作業メモ 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定していますが、他の ディストリビューション・OS でも同様のはずです。 R がインストール済みで使用可能となっている。 GUI ツール RStudio がインストール済みで使用可能となっている。 R 自体の詳細な使用方法はここでは触れ（でき）ません。各自お調べ下さい。 1. quantmod パッケージのインストール まず、RStudio でローソク足チャート等を描画するためのライブラリ quantmod を以下のようにインストールする。 途中、「個人用ライブラリを使用するか？」、「個人用ライブラリを作成するか？」等と問われたら、”y” で応答する。（適宜対応）...","categories": ["PC_Tips","プログラミング","株式"],
        "tags": ["R","ScientificLinux"],
        "url": "/2012/10/17/17002031/",
        "teaser": null
      },{
        "title": "C++ - テイラー展開 [ exp(x) ]！",
        "excerpt":"今回は \\(e ^ {x}\\)をテイラー展開を用いて計算する C++ アルゴリズム についてです。 ※以下、一部 \\(\\TeX\\) で記載 まず、 そして、 今回は C++ で実現することが目的なので、テイラー展開の詳細についてはここでは説明しません。 解析学の教科書等でご確認下さい。 以下、C++ によるサンプルソースです。 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定。 g++ (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4) 1. C++ ソース作成 今回作成した C++ ソースは以下のとおり。 C++ なのでオブジェクト指向な作りにしている。 収束しない場合は最大200項計算するようにしている。 今回計算した値と比較するため、C++ 標準の関数の値も出力している。 \\(x=-50,\\cdots,50\\)を10刻みで計算している。 x &lt; 0 の場合は、\\(e ^ {-x}=1/e...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/10/19/19002055/",
        "teaser": null
      },{
        "title": "Ruby - テイラー展開 [ exp(x) ]！",
        "excerpt":"先日は、\\(e ^ x\\) をテイラー展開で計算する C++ によるアルゴリズムを紹介しました。 C++ - テイラー展開 [ exp(x) ]！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定。 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下のとおり。 収束しない場合は最大200項計算するようにしている。 今回計算した値と比較するため、Ruby 標準の関数の値も出力している。 \\(x=-50,\\cdots,50\\)を10刻みで計算している。 x &lt; 0 の場合は、\\(e ^ {-x}=1/e ^ x\\)として計算。 File: taylor_expansion.rb 1 2...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/10/20/20002000/",
        "teaser": null
      },{
        "title": "C++ - テイラー展開 [ cos(x) ]！",
        "excerpt":"先日、\\(e ^ {x}\\)をテイラー展開を用いて計算する C++ アルゴリズム について紹介しました。 C++ - テイラー展開 [ exp(x) ]！ 今日は、\\(\\cos x\\)をテイラー展開を用いて計算してみました。 ※以下、一部 \\(\\TeX\\) で記載 今回は C++ で実現することが目的なので、テイラー展開の詳細についてはここでは説明しません。 解析学の教科書等でご確認下さい。 以下、C++ によるサンプルソースです。 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定。 g++ (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4) 1. C++ ソース作成 今回作成した C++ ソースは以下のとおり。 C++ なのでオブジェクト指向な作りにしている。 収束しない場合は最大200項計算するようにしている。 今回計算した値と比較するため、C++ 標準の関数の値も出力している。 \\(x=0,\\cdots,180\\)を10刻みで計算している。 File:...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/10/21/21002010/",
        "teaser": null
      },{
        "title": "Ruby - テイラー展開 [ cos(x) ]！",
        "excerpt":"先日は、\\(\\cos x\\) をテイラー展開で計算する C++ によるアルゴリズムを紹介しました。 C++ - テイラー展開 [ cos(x) ]！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定。 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下のとおり。 収束しない場合は最大200項計算するようにしている。 今回計算した値と比較するため、Ruby 標準の関数の値も出力している。 \\(x=0,\\cdots,180\\)を10刻みで計算している。 File: taylor_expansion_cos.rb 1 2 3 4 5 6 7 8 9 10 11...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/10/22/22002053/",
        "teaser": null
      },{
        "title": "Linux - gettext で翻訳(po)ファイル編集！",
        "excerpt":"Linux で翻訳ファイル(poファイル)を編集する方法についてのメモです。 po ファイルとは ”Portable Object” の略でテキストベースの翻訳設定ファイルです。 この po ファイルを mo ファイル(“Machine Object”)に変換することによって実際の翻訳が行われます。 身近なところでは、ブログツールの WordPress で使用されていて、当方も WordPress の翻訳ファイルはカスタマイズして使用しています。 その翻訳ファイルの作成・編集には、通常 Poedit というツールを使用します。 当方も Windows 環境ではよく使用していました。 Poedit には Linux 版もありますが、Linux では “gettext” というメッセージ文字列を国際化・地域化するためのツールが使用可能です。 当方、翻訳ファイルをカスタマイズするのは WordPress だけなので、Poedit をインストールするまでもなく gettext を使用することと判断しました。 以下、作業メモです。 作業メモ 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定していますが、CentOS でも同じです。 gettext がインストール済みである。 未インストールなら...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2012/10/24/24002046/",
        "teaser": null
      },{
        "title": "Ruby - RSRuby でグラフ描画！",
        "excerpt":"少し前に、統計解析向けプログラミング言語 R について記事にしました。 Scientific Linux - R 言語環境構築！ Scientific Linux - RStudio インストール！ R - ローソク足チャート描画！ 今日は、Ruby で R のグラフを描画できる Gem パッケージ RSRuby を導入してみました。 以下、作業記録です。 作業記録 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定してますが、他のディストリビューションでも同じか同様です。 Ruby 1.9.3-p194 R がインストール済みである。 ・R のインストールディレクトリ : /usr/lib64/R ・R のインクルードディレクトリ : /usr/include/R 1. 環境変数設定 “.bash_profile” ファイルに以下を追加して、有効化。 (全ユーザ共通なら...","categories": ["プログラミング","数学"],
        "tags": ["R","Ruby"],
        "url": "/2012/10/26/26002014/",
        "teaser": null
      },{
        "title": "WordPress(MySQL) - 'TYPE=MyISAM' エラー！",
        "excerpt":"久々に、WordPress のプラグインを調整していたら、有効化した際にブラウザに以下のようなエラーメッセージが表示されるようになりました。 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'TYPE=MyISAM' at line 9 on line: 1471 ※実際は１行で表示されています。 大体、原因は想像できました。 少し前に、Apache や PHP をアップデートした際に MySQL も 5.1 系から 5.5 系にアップグレードしていたので。 以下、原因と対策です。 記録 0. 前提条件...","categories": ["サーバ構築","ブログ"],
        "tags": ["MySQL","WordPress"],
        "url": "/2012/10/28/28002051/",
        "teaser": null
      },{
        "title": "Scientific Linux - Google 日本語入力システム Mozc インストール！",
        "excerpt":"Scientific Linux の Gnome 環境に Google 日本語入力システム Mozc をインストールしてみました。 デフォルトの日本語入力システム Anthy に少し不満があったからです。 以下、作業記録です。 作業メモ 0. 前提条件 Scientific Linux 6.3 (64bit) での作業を想定していますが、CentOS でも同じです。 以下の作業は root で行なっています。 1. リポジトリ設定 Scientific Linux 標準のリポジトリではインストールできません。 IKOINOBA リポジトリを使用します。 repo ファイルをダウンロードし、デフォルトで有効にならないよう編集する。 ( yum update 等で Mozc 以外のパッケージがこのリポジトリのパッケージに置き換わらないようにするため ) # cd /etc/yum.repos.d/ # wget http://download.opensuse.org/repositories/home:/sawaa/ScientificLinux_6/home:sawaa.repo # vi home:sawaa.repo...","categories": ["PC_Tips"],
        "tags": ["CentOS","ScientificLinux"],
        "url": "/2012/10/30/30002054/",
        "teaser": null
      },{
        "title": "2012年10月 - OS・ブラウザ別アクセス状況！【自動投稿】",
        "excerpt":"11月になりましたので、先月10月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 17,008 82.4231 Mac OS 1,909 9.2513 Linux 952 4.6135 unknown 344 1.6671 Ubuntu Linux 299 1.4490 Fedora Linux 32 0.1551 FreeBSD 29 0.1405 Android 22 0.1066 RedHat Linux 17 0.0824 SuSE Linux 9 0.0436 Debian GNU/Linux 5 0.0242 PalmOS 3 0.0145 Solaris 3...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/11/01/01002008/",
        "teaser": null
      },{
        "title": "Ruby on Rails - Ruby+RSRuby のスクリプトを動かす！",
        "excerpt":"Ruby + RSRuby で正常に動作していたスクリプトを Ruby on Rails アプリからコールすると動作しません。 Fatal Error: R home directory is not defined などとなります。 R のホームディレクトリが定義されていないと言っています。 ちなみに、RSRuby とは Ruby で統計解析向けプログラミング言語 R を使用する際に使用する Gem パッケージです。 作業記録 0. 前提条件 以下の環境で作業、確認しました。 Scientific Linux 6.3 Ruby は 1.9.3-p286 Rails は 3.2.8 1. 現象 元々、Ruby + RSRuby では正常動作しているスクリプトなので、環境変数 R_HOME も設定してある。 当方は、全ユーザで有効になるよう “/etc/profile”...","categories": ["プログラミング","数学"],
        "tags": ["R","Rails","Ruby"],
        "url": "/2012/11/02/02002041/",
        "teaser": null
      },{
        "title": "Linux Mint - Google Chrome をインストール！",
        "excerpt":"少し前に WindowsXP(32bit) から Scientific Linux 6.3(64bit) の GNOME へデスクトップ環境を変更しましたが、次は Linux Mint 13 Maya(64bit) の Mate に変更してみました。 少しずつ使用してみて、どれが自分に合ったデスクトップ環境かを選定するためでもあります。 パッケージ管理が異なる(rpm 系 or deb 系)だけで、違和感はそれほどありませんし。 Linux Mint 自体のインストール・初期設定（日本語化等）については、各種 Web サイトに掲載されているので難しくはありません。簡単です。 今回は、少しだけ引っかかった Google Chrome のインストールについて、後学のために記録しておきます。 作業記録 0. 前提条件 Linux Mint 13 Maya (64bit) のデスクトップ環境 Mate での作業を想定 1. パッケージのダウンロード Chrome ブラウザ から「64 bit .deb （Debian/Ubuntu...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2012/11/04/04002054/",
        "teaser": null
      },{
        "title": "Linux Mint - Ruby をソースからインストール！",
        "excerpt":"Linux Mint 13 Maya(64bit) へソースから Ruby をインストールする方法についてのメモです。 当方は、いつもパッケージからのインストールではなくソースをビルドしてインストールしています。(RedHat 系も Debian 系も) よくある方法ですが、念の為記録しておきます。 作業記録 0. 前提条件 Linux Mint 13 Maya (64bit) のデスクトップ環境 Mate での作業を想定。 Debian, Ubuntu 等の Debian 系は同じ。 他のディストリビューションでも同様だが、必要なパッケージは適宜対応。 root ユーザでの作業ではなく、一般ユーザでの作業。 (root 権限が必要な場合は sudo で) 1. LibYAML のインストール 最近の Ruby インストールではおなじみの LibYAML をインストールする。 $ cd /usr/local/src $ sudo wget http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz...","categories": ["PC_Tips","プログラミング"],
        "tags": ["LinuxMint","Ruby"],
        "url": "/2012/11/05/05002058/",
        "teaser": null
      },{
        "title": "Linux Mint - Apache2 で mod_rewrite を有効化！",
        "excerpt":"Linux Mint 13 Maya(64bit) へインストールした Apache2 で URL のリダイレクトや置換えなど行えるモジュール mod_rewrite を有効化する方法についてのメモです。 RedHat 系では Apache の設定ファイルでコメント化されている “mod_rewrite.so” をコメント解除すればよいですが、Debian 系は異なるようです。 WordPress でパーマリンクを変更して使用している場合など、このモジュールを有効化にしないといけません。 以下、作業記録です。 作業記録 0. 前提条件 Linux Mint 13 Maya (64bit) のデスクトップ環境 Mate での作業を想定。 Apache2(2.2.22) がインストール済み。 Debian, Ubuntu 等の Debian 系は同じ。 root ユーザでの作業ではなく、一般ユーザでの作業。 (root 権限が必要な場合は sudo で) 1. mod_rewrite の有効化 以下のコマンドで mod_rewrite...","categories": ["サーバ構築"],
        "tags": ["Apache","Linux","LinuxMint"],
        "url": "/2012/11/06/06002017/",
        "teaser": null
      },{
        "title": "Linux Mint - 起動時メッセージ表示！",
        "excerpt":"Linux Mint 13 Maya は、デフォルトではログイン画面になるまでの間、画面が真っ黒です。 これだと、殺風景だしマシンが動いているのかもわかりません。 そこで、起動時にブートメッセージを表示させる方法についてのメモです。 作業メモ 0. 前提条件 Linux Mint 13 Maya (64bit) のデスクトップ環境 Mate での作業を想定。 古いバージョンでも同じではないでしょうか。（未確認） Ubuntu や Debian 等でも同じではないでしょうか。（未確認） 1. /etc/default/grub の編集 “/etc/default/grub” 内の GRUB_CMDLINE_LINUX_DEFAULT の値を変更(削除)する。 #GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\" # ↓ 変更 ↓ GRUB_CMDLINE_LINUX_DEFAULT=\"\" ちなみに、GRUB_CMDLINE_LINUX_DEFAULT の値を “text” にすると、CUI モードでのログインになるようです。（未確認） 2. Grub 変更の有効化 以下のコマンドで Grub の変更を有効する。 $ sudo...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2012/11/07/07002023/",
        "teaser": null
      },{
        "title": "Linux Mint - Oracle Java Development Kit インストール！",
        "excerpt":"Linux Mint 13 Maya(64bit) には、デフォルトで OpenJDK という Java がインストールされていますが、これでは具合が悪いことがあるため Oracle の Java Development Kit (JDK) をインストールしました。 以前、CentOS や Scientific Linux へ Oracle の JDK をインストールする方法は紹介しました。 CentOS - Java インストール！ Scientific Linux - Java SE Development Kit インストール！ Debian 系はまた少しだけ異なるので、記録として残しておきます。 また、PPA というリポジトリを使用してインストールする方法もあるようですが、ライセンス的にグレーのようなので、ソースをダウンロードする方法を採っています。 作業記録 0. 前提条件 Linux Mint 13 Maya (64bit) のデスクトップ環境...","categories": ["PC_Tips","プログラミング"],
        "tags": ["Java","Linux","LinuxMint"],
        "url": "/2012/11/08/08002058/",
        "teaser": null
      },{
        "title": "Linux Mint - Upstart 系サービスの自動起動制御！",
        "excerpt":"Linux Mint 13 Maya で SysV の initd で起動するサービスは [システム管理] - [サービスの管理] で管理できますが、Upstart で管理するようなサービスは同様な管理ができません。 MySQL がその例です。 インストール後、自動起動するように設定されているのですが、Upstart で管理されているので、[サービスの管理] では管理できません。 サーバ用途で常に MySQL を使用するのなら問題ありませんが、普段使用しない環境では無駄に起動してしまいます。 ちなみに、Upstart とは、イベント駆動型の init デーモンの代わりとなるものです。 作業記録 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 Ubuntu や Debian でも同様だと思われる。（未確認） MySQL サービスで動作確認した。 1. 設定方法 Upstart のサービスは “/etc/init” ディレクトリ配下に設定ファイルが置かれているので、該当の conf ファイルを編集する。 今回の...","categories": ["サーバ構築"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2012/11/09/09002001/",
        "teaser": null
      },{
        "title": "C++ - 非線形方程式の解法（２分法）！",
        "excerpt":"方程式 \\(f(x)=0\\) の解を２分法により求める C++ アルゴリズム についてです。 まず、１次方程式（つまりグラフ上で直線）以外の方程式を非線形方程式と呼びます。 そして、このような方程式の根を求める方法に「２分法」というものがあります。 アルゴリズムとしては以下のようになります。 根の左右にある２点 a, b を low, high の初期値とする。 low と high の中点 x を x = (high + low) / 2 で求める。 f(x) &gt; 0 なら根は x より左にあるから、high = x とし、上限を半分に狭める。 f(x) &lt; 0 なら根は x より右にあるから、low = x とし、下限を半分に狭める。 f(x) =...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/11/11/11002058/",
        "teaser": null
      },{
        "title": "Ruby - 非線形方程式の解法（２分法）！",
        "excerpt":"先日は、\\(f(x)=0\\) の解を２分法により求める C++ によるアルゴリズムを紹介しました。 C++ - 非線型方程式の解法（２分法）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下のとおり。 収束しない場合は最大50回ループするようにしている。 f(a) &lt; 0, f(b) &gt; 0 となる方程式を想定。 f(a) &gt; 0, f(b) &lt; 0 となる方程式の場合は判定部分を修正する必要がある。 File: nonlinear_equation.rb 1 2 3...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/11/12/12002031/",
        "teaser": null
      },{
        "title": "玄箱HG - Debian 5.0(lenny) 化！",
        "excerpt":"過去にも、何度か記事にしたことのある「玄箱/HG」についてです。 Debian 3.0(woody) 化、Debian 3.1(sarge) 化、Debian 4.0(etch) 化、Fedora 7 化 〜 Fedora 12 化したりしてきました。 今回は、今さらながら Debian 5.0(lenny) 化してみました。 以前も、Debian 5.0(lenny) 化したことがありましたが、今回の方法が正しい方法です。 作業記録 0. 前提条件 「玄箱/HG」への Debian 5.0(lenny) の構築を想定。 「玄箱」への構築も同様だが、一部使用するファイルが異なる。 シリアルコンソールは使用しない（ハンダ付けしていない）。 U-Boot 導入済み。 作業を行うマシンは Linux Mint 13 Maya Telnet 接続ができて、ZIP 展開ができて、FTP コマンドが使えれば、OS はなんでもよい。 ファームウェアに Windows 用インストーラがあるからといって、Windows である必要もない。 1. 事前準備 以下の計８個のファイルを作業用マシンにダウンロードしておく。 ※「玄箱/HG」ではなく「玄箱」に構築する場合は、使用するファイルが異なる場合があります。各サイトでご確認ください。...","categories": ["サーバ構築","玄箱"],
        "tags": ["Debian"],
        "url": "/2012/11/14/14002031/",
        "teaser": null
      },{
        "title": "玄箱HG - Debian 6.0(squeeze) 化！",
        "excerpt":"前回は、「玄箱/HG」を Debian 5.0(lenny) 化しました。 Debian lenny はセキュリティアップデートの提供が終了していることもあり、今回 Debian 6.0(squeeze) 化しました。 作業記録 0. 前提条件 「玄箱/HG」へ次の手順で Debian 5.0(lenny) が構築されている。 ( 玄箱HG - Debian 5.0(lenny) 化！ ) 「玄箱/HG」への Debian 6.0(squeeze) の構築を想定。 シリアルコンソールは使用しない。 U-Boot 導入済みである。 作業を行うマシンは Linux Mint 13 Maya Telnet 接続ができれば、OS はなんでもよい。 ファームウェアに Windows 用インストーラがあるからといって、Windows である必要もない。 構築された squeeze のカーネルが古くてもカーネルのリコンパイルはしない。 1. 起動スクリプトの編集 Debian は...","categories": ["サーバ構築","玄箱"],
        "tags": ["Debian"],
        "url": "/2012/11/15/15002004/",
        "teaser": null
      },{
        "title": "玄箱HG - 電源ボタンで正規シャットダウン！",
        "excerpt":"Debian 6.0(squeeze) 化した「玄箱/HG」のシャットダウンを電源ボタン長押しで行う方法についてのメモです。 Telnet や SSH 接続しなくても、電源ボタンの長押しで正規の shutdown コマンドでシャットダウンしたのと同じことする、ということです。 単純に電源ボタンを長押ししただけでは「強制電源オフ」となってしまうからです。 当方、玄箱/HG でサーバ構築した際にいつもやっていることですが、記録として残していなかったので記事にした次第です。 ちなみに、玄箱/HG の Debian 化については、以下の過去記事等を参照ください。 玄箱HG - Debian 5.0(lenny) 化！ 玄箱HG - Debian 6.0(squeeze) 化！ 作業メモ 0. 前提条件 「玄箱/HG」へ Debian 6.0(squeeze) が構築されている。 別のバージョンでも同様だと思われる。 別のディストリビューションは不明。 1. シェルスクリプトの編集 “/etc/kuroevtd/powerpress” というシェルスクリプトを編集する。 既存の halt は効かないので削除（もしくはコメントアウト）して、以下のように追記する。 ttyS1 の部分はカーネルのバージョンによって異なるかも知れません。 #! /bin/sh # halt # &lt;-...","categories": ["サーバ構築","玄箱"],
        "tags": ["Debian"],
        "url": "/2012/11/16/16002013/",
        "teaser": null
      },{
        "title": "CentOS - NFS サーバ起動時の IPv6 関連エラー！",
        "excerpt":"CentOS サーバでファイル共有システム NFS サーバを起動する際に発生するエラーについてのメモです。 エラーは出力されても NFS サーバ自体は起動に成功しているので問題は無いように思える。 しかし、気持ち悪いので対策しておいた。 作業メモ 0. 前提条件 CentOS 6.0(32bit) サーバでの作業を想定。 RedHat 系ディストリビューションなら同様だろう。 NFS サーバがインストール済み。 IPv6 は無効化している。 1. 発生現象 NFS サーバ起動時に発生するエラーは以下通り。 IPv6 関連のエラーのようだ。 # /etc/rc.d/init.d/nfs start NFS サービスを起動中: [ OK ] NFS クォータを起動中: [ OK ] NFS mountd を起動中: rpc.mountd: svc_tli_create: could not open connection for udp6...","categories": ["サーバ構築"],
        "tags": ["CentOS","Linux"],
        "url": "/2012/11/17/17002029/",
        "teaser": null
      },{
        "title": "CentOS - Linux Mint へ Rsync で同期(xinetd 使用)！",
        "excerpt":"CentOS サーバのあるディレクトリを、別のマシン（今回は Linux Mint マシン）へ同期する方法についての記録です。 cron で定期的に実行するようにしておくと便利です。 作業メモ 0. 前提条件 サーバマシン（コピー元）は CentOS 6.3 (32bit) を想定。 クライアントマシン（コピー先）は Linux Mint 13 Maya (64bit) を想定。 例として、サーバマシンの /home/backup ディレクトリを、 クライアントマシンの /home/backup/server ディレクトリへ同期する。 例として、サーバマシンの IP アドレスは 192.168.11.1、 クライアントマシンの IP アドレスは 192.168.11.101 とする。 以下の作業はわかりやすくするために、全て root で行なっている。 サーバ・クライアントの組み合わせがどうであれ（RedHat 系、Debian 系等）、方法は似たような形になると思う。 1. 【コピー先(Linux Mint)】Rsync インストール コピー先のクライアントマシン（今回は Linux Mint）へ...","categories": ["サーバ構築"],
        "tags": ["CentOS","Linux","LinuxMint"],
        "url": "/2012/11/19/19002043/",
        "teaser": null
      },{
        "title": "C++ - 非線形方程式の解法（ニュートン法）！",
        "excerpt":"少し前には、\\(f(x)=0\\) の解を２分法により求める C++ アルゴリズムについて紹介しました。 C++ - 非線形方程式の解法（２分法）！ 今日は、方程式 \\(f(x)=0\\) の解をニュートン法により求める C++ アルゴリズム についてです。 ニュートン法の概念・アルゴリズムは以下の通り。 以下、数式が多いので \\(\\TeX\\) で記載。 以下、C++ によるサンプルソースです。 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3 1. C++ ソース作成 今回、検証に使用した方程式は、 \\(x^{3}-x+1=0\\) で、グラフは以下のようになる。 そして、 C++ なのでオブジェクト指向な作りにしている。 収束しない場合は最大50回ループするようにしている。 File: nonlinear_equation_newton.cpp 1 2 3 4 5 6 7...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2012/11/21/21002047/",
        "teaser": null
      },{
        "title": "Ruby - 非線形方程式の解法（ニュートン法）！",
        "excerpt":"先日は、\\(f(x)=0\\) の解をニュートン法により求める C++ によるアルゴリズムを紹介しました。 C++ - 非線型方程式の解法（ニュートン法）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 Ruby 1.9.3-p194 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下の通りです。 収束しない場合は最大50回ループするようにしている。 File: nonlinear_equation_newtown.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2012/11/22/22002009/",
        "teaser": null
      },{
        "title": "FreeBSD - アップグレード手順！",
        "excerpt":"FreeBSD 9.1-Release がまもなく正式リリースされそうな今日この頃、今回はアップグレード方法についての記録を残しておくことにします。 以下の記録は、9.0-Release を 9.1-RC3 にアップグレードした時のものですが、9.1-Release が正式リリースされた際や他のバージョンでも同様だと思います。 元のバージョンがもっと古い場合は、手順等が異なる場合もあるも知れませんが。 作業記録 0. 前提条件 FreeBSD 9.0-RELEASE-p3 を FreeBSD 9.1-RC3 へアップグレードすることを想定。 カーネルはカスタムカーネルではなくGENERICカーネル(カーネルのカスタマイズは行なっていないこと)を想定。 1. 現バージョン確認 まず、現状のバージョンを確認してみる。 # uname -v FreeBSD 9.0-RELEASE-p3 #0: Tue Jun 12 02:52:29 UTC 2012 root@amd64-builder.daemonology.net:/usr/obj/usr/src/sys/GENERIC 2. セキュリティアップデート 現行のシステムに最新のセキュリティパッチを当てる。 # freebsd-update fetch # freebsd-update install 3. マシン再起動 カーネルにセキュリティパッチを当てた場合には、システムを再起動する必要がある。 (特にアップデートが無かった場合は、再起動は不要) # shutdown...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["FreeBSD"],
        "url": "/2012/11/24/24002015/",
        "teaser": null
      },{
        "title": "Ruby - PDF からテキスト抽出！",
        "excerpt":"Ruby を使って PDF ファイルからテキストを抽出する方法についての記録です。 ちなみに、直接 PDF からテキストを抽出するのなら、Xpdf や Poppler 等の pdftotext というコマンドを使用して以下のようにすれば可能のようです。(未確認) $ pdftotext test.pdf test.txt 記録 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 Ruby は 1.9.3-p327 を使用。 1. PDF::Reader ライブラリのインストール PDF::Reader の RubyGems ライブラリが未インストールならインストールする。 $ sudo gem install pdf-reader 2. テスト用スクリプトの作成 テスト用の Ruby スクリプトを作成する。 (読み込む PDF ファイル “test_pdfreader.pdf”...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2012/11/26/26002026/",
        "teaser": null
      },{
        "title": "Linux - md5sum チェック！",
        "excerpt":"ISO ファイル等をダウンロード後、破損していないかチェックするのに、 sha1sum や sha256sum の他に md5sum も使用します。 md5sum コマンドについてのメモです。 作業メモ 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 CentOS 6.3 (32bit) でも動作確認済み。 BSD 系その他は未確認。 以下の例では NetBSD-6.0-i386.iso ファイルを検証。 MD5 ファイルは MD5_6-0.txt として保存。 1. MD5 チェック・その１ 以下のように、チェックしたいファイルを指定して、MD5 ハッシュ値を表示させる。 $ md5sum NetBSD-6.0-i386.iso 9b7aca4464fdd5dbeea6d6d85c5ba64f NetBSD-6.0-i386.iso そして、提供されている MD5 ハッシュ値(今回は “MD5_6-0.txt” 内の i386 の部分)と比べて、一致していれば該当のファイルは破損していないことになる。 2....","categories": ["PC_Tips","サーバ構築"],
        "tags": ["CentOS","Linux","LinuxMint"],
        "url": "/2012/11/28/28002001/",
        "teaser": null
      },{
        "title": "Linux Mint - Ext4 ファイルシステムをデフラグ！",
        "excerpt":"一般的に Linux ではシステムの性質上デフラグの作業は必要ないと思われています。 フラグメンテーションが発生しにくいからそう思われているだけで、実際は長い期間使用していればフラグメンテーションは発生します。 そこで、今回は Ext4 ファイルシステム向けのデフラグ用コマンド e4defrag についてのメモを残しておきます。 作業メモ 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 Ubuntu 等でも同様。 デフラグ対象のファイルシステムが Ext4 であること。 1. 使い方 e4defrag コマンドだけを実行すれば、使用方法が表示される。 $ e4defrag Usage : e4defrag [-v] file...| directory...| device... : e4defrag -c file...| directory...| device... ファイル、ディレクトリ、デバイスを指定できる。 LVM は非対応ではないでしょうか？(未確認) 2. チェック 以下のようにして、デフラグの必要性の有無をチェックする。 (以下は、”/usr” ディレクトリをチェック)...","categories": ["サーバ構築"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2012/11/30/30002006/",
        "teaser": null
      },{
        "title": "2012年11月 - OS・ブラウザ別アクセス状況！【自動投稿】",
        "excerpt":"12月になりましたので、先月11月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 15,413 81.2793 Mac OS 1,877 9.8982 Linux 873 4.6037 Ubuntu Linux 431 2.2728 unknown 264 1.3922 Android 22 0.1160 Fedora Linux 17 0.0896 PalmOS 17 0.0896 RedHat Linux 17 0.0896 FreeBSD 14 0.0738 Solaris 9 0.0475 Debian GNU/Linux 4 0.0211 SuSE Linux 3...","categories": ["ブログ"],
        "tags": ["WordPress"],
        "url": "/2012/12/01/01002031/",
        "teaser": null
      },{
        "title": "GNU C/C++ - autoconf, automake で make！",
        "excerpt":"GNU C/C++ で autoconf, automake を使って make する方法についての記録です。 個人で簡単な GNU C/C++ ソースをコンパイルするなら、gcc, g++ コマンドを使用すればいいのですが、ソースが大掛かりになるとファイルも増えて、コンパイルが面倒になってきます。 また、そんなファイル類を自分以外に提供した際にコンパイル作業で手間や迷惑をかけてしまいます。 そこで、よくある ./configure, make, make install で make できるようにします。 細かなところは、ここでは詳しく説明できないので、各自で調べてください。 ある意味、呪文のような使い方です。 記録 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3 m4 (GNU M4) 1.4.16 autoconf (GNU Autoconf) 2.68 automake (GNU automake) 1.11.3...","categories": ["プログラミング"],
        "tags": ["C言語"],
        "url": "/2012/12/03/03002034/",
        "teaser": null
      },{
        "title": "Linux Mint - 13 Maya から 14 Nadia へアップグレード！",
        "excerpt":"先日、Linux Mint 14 が正式リリースされました。 以前のバージョンでは、アップグレードに失敗する旨の投稿をよく見かけましたが、今回の 13 から 14 のアップグレードは成功するようです。 以下、作業記録です。 【2013.06.02 追記】 下記の方法は非推奨の方法です。 推奨されるアップグレード方法については「How to upgrade to a newer release - Linux Mint Community」（データバックアップ＋OS再インストール＋データリストアする方法）をご参照ください。 作業記録 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 他のバージョン間での作業は成功するか否か不明。 物理マシンではなく、仮想マシンで検証。 （当方は、後に物理マシンでもアップグレードを実施する予定） 1. 現在のバージョン確認 アップグレード前のバージョンを確認しておく。 2. “sources.list” の変更 GNU 系 Linux ではお決まりの “/etc/apt/sources.list” を手動で以下のように編集する。 maya --[変更]--&gt;...","categories": ["PC_Tips"],
        "tags": ["LinuxMint"],
        "url": "/2012/12/05/05002021/",
        "teaser": null
      },{
        "title": "CentOS - Git サーバ構築！",
        "excerpt":"分散型バージョン管理 Git (リーナス・トーバルズによって開発) のサーバ(リモートリポジトリ管理用)を CentOS に構築してみました。 個人利用なので、今まではローカルリポジトリだけでソースを管理していましたが、せっかく Git を使うならリモートリポジトリの扱い方も理解しておかなければと思った次第です。 以下、作業記録です。 前提条件 サーバマシンは CentOS 6.3 (32bit) クライアントマシンは Linux Mint (64bit) サーバホスト名は “vbox.mk-mode.com” サーバマシンに OpenSSH サーバ構築済みで、鍵ペアによる SSH 接続が可能。 サーバマシンに xinetd 導入済み。 サーバ側作業は root で、クライアント側作業はユーザで行った。 OpenSSH サーバの構築、xinetd の導入についてはここでは触れません。必要なら、別途お調べください。 1. サーバマシンに git サーバ構築 1-1. インストール git, git-daemon, git-all を yum でインストールする。 # yum -y...","categories": ["サーバ構築","プログラミング"],
        "tags": ["CentOS","Git","LinuxMint"],
        "url": "/2012/12/07/centos-construct-git-server/",
        "teaser": null
      },{
        "title": "ブログを WordPress から Octopress に移行！",
        "excerpt":"2009年01月05日から４年近く WordPress で運用してきた当方のブログを、このほど Octopress に移行しました。 よくある GitHub Pages を使った運用ではなく、自宅サーバでの運用です。 移行した理由は、以下の通り。 Ruby 製なので、Rubyist には扱いやすい。(必要なら、プラグインを作成する。自分には php より手を付けやすい) 静的 CMS なので、動作が軽い。 記事が Markdown 記法で記述できる。 DB を使用せず、１記事に付き１ファイル(Markdownファイル)で管理する。 git, rake, jekyll, yaml 等の技術・知識も身に付く。 github pages が利用できる。(当方は github でなく、自宅サーバで運用しているが) 今のところ、以下のような不自由さを若干感じていますが、そう感じているだけで、別の視点・手法を見出す機会にもなると感じています。 静的 CMS なので、WordPress のプラグイン等で実現できていた機能が Octopress で容易に実現できない。 静的 CMS なので、コメント機能がない。(外部サービスで対応) HTML5, CSS3 のデザインなので、まだ不慣れである。 そして、今まで WordPress に投稿してきた記事ですが、全記事・全画像を Octopress...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","WordPress"],
        "url": "/2012/12/09/migration-from-wordpress-to-octopress/",
        "teaser": null
      },{
        "title": "Octopress - 環境構築！",
        "excerpt":"少し前には、Ruby 製の日記ツール tDiary や、CMS の nanoc, Lokka が気になっていました。 しかし最近は、それらよりも Octopress の方が非常に気になる存在になっていました。 そこで、ついに当方のサーバに Octopress の環境を構築しました。(昨日も言いましたが) WordPress(PHP + MySQL) は、プラグインが豊富で、設定次第ではとても快適に使用できます。 しかし、当方は一応 Rubyist なので、Ruby や Rails 製の方が使いやすいのでは？と最近は感じていた次第です。 今日は、環境構築についての記録です。 (基本的には Octopress の説明通り) 0. 前提条件 クライアント側は Linux Mint 13 (64bit) を想定。 クライアント側の Ruby は rbenv でインストールする。 クライアント側に Git がインストール済みである。 (Octpress のインストール、ソースのバージョン管理で使用する) Github Pages や Heroku...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","WordPress","tDiary","nanoc","Lokka"],
        "url": "/2012/12/10/octopress-construction-of-environment/",
        "teaser": null
      },{
        "title": "Octopress - Twitter の Tweet ボタン追加！",
        "excerpt":"Octopress は、デフォルトで Twitter の “Tweet”「ツイート」ボタンを表示させることが可能です。 以下、記録です。 1. _config.yml の編集 ローカルの Octopress インストールディレクトリ配下にある _config.yml を編集する。 twitter_user に指定するだけで Twitter 機能が有効になる。 File: _config.yml 1 2 3 4 5 6 7 8 # Twitter twitter_user: hoge twitter_tweet_count: 5 # &lt;- 表示するツイート数 twitter_show_replies: false # &lt;- リプライを表示するかどうか twitter_follow_button: true # &lt;- フォローボタンを表示するかどうか twitter_show_follower_count: false #...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","Twitter"],
        "url": "/2012/12/11/octopress-add-tweetbutton/",
        "teaser": null
      },{
        "title": "Octopress - Facebook \"Like\" ボタン追加！",
        "excerpt":"Octopress は、デフォルトで Facebook の “Like”「いいね」ボタンを表示させることが可能です。 以下、記録です。 1. _config.yml の編集 ローカルの Octopress インストールディレクトリ配下にある _config.yml を編集する。 facebook_like の値を変更するだけで Facebook の「いいね」ボタンが機能が有効になる。 File: _config.yml 1 2 3 # Facebook Like facebook_like: true # &lt;- false を true に変更 2. 日本語化 “Like” ではなく “いいね” にするなら、 source/_includes/facebook_like.html を編集する。 File: source/_includes/facebook_like.html 1 2 js.src = \"//connect.facebook.net/ja_JP/all.js#appId=212934732101925&amp;xfbml=1\"; #...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","Facebook"],
        "url": "/2012/12/12/octopress-add-facebook-likebutton/",
        "teaser": null
      },{
        "title": "Octopress - Google ＋１ ボタン追加！",
        "excerpt":"Octopress は、デフォルトで Google の “+1” ボタンを表示させることが可能です。 以下、記録です。 1. _config.yml の編集 ローカルの Octopress インストールディレクトリ配下にある _config.yml を編集する。 File: _config.yml 1 2 3 # Google +1 google_plus_one: true # &lt;- false を true に変更 2. デプロイ 後は、 generate 後 preview で確認し deploy するだけ。 $ rake generate $ rake preview $ rake deploy これで、Google...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","Google"],
        "url": "/2012/12/13/octopress-add-google-plus-1-button/",
        "teaser": null
      },{
        "title": "Octopress - Disqus コメント欄追加！",
        "excerpt":"Octopress は、デフォルトで Disqus の コメント欄を表示させることが可能です。 以下、記録です。 1. _config.yml の編集 ローカルの Octopress インストールディレクトリ配下にある _config.yml を編集する。 File: _config.yml 1 2 3 4 # Disqus Comments disqus_short_name: hoge # &lt;- 自分のアカウントのショートネーム disqus_show_comment_count: false # &lt;- コメント数を表示するかしないか 2. デプロイ 後は、 generate 後 preview で確認し deploy するだけ。 $ rake generate $ rake preview $ rake...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","Disqus"],
        "url": "/2012/12/14/octopress-add-disqus/",
        "teaser": null
      },{
        "title": "Octopress - Google Analytics 設定！",
        "excerpt":"Octopress は、デフォルトで Google Analytics の設定をすることが可能です。 以下、記録です。 1. _config.yml の編集 ローカルの Octopress インストールディレクトリ配下にある _config.yml を編集する。 File: _config.yml 1 2 3 # Google Analytics google_analytics_tracking_id: UA-99999999-9 # &lt;- Google Analytics の ID を指定 2. デプロイ 後は、 generate 後 preview で確認し deploy するだけ。 $ rake generate $ rake preview $ rake deploy これで、ブログにアクセスされるたびに...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","Google"],
        "url": "/2012/12/15/octopress-set-google-analytics/",
        "teaser": null
      },{
        "title": "Octopress - more タグ変更！",
        "excerpt":"Octopress では、 &lt;!--more--&gt; タグを挿入すると、デフォルトでは Read on &gt;&gt; と表示されます。 これを変更する方法についての記録です。 以下、記録です。 1. _config.yml の編集 ローカルの Octopress インストールディレクトリ配下にある _config.yml を編集する。 File: _config.yml 1 2 3 4 5 6 # ----------------------- # # Jekyll &amp; Plugins # # ----------------------- # excerpt_link: \"続きを読む &amp;raquo;\" # \"Continue reading\" link text at the bottom of excerpted...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","HTML"],
        "url": "/2012/12/16/octopress-change-more-tag/",
        "teaser": null
      },{
        "title": "Octopress - プロフィール表示を追加！",
        "excerpt":"Octopress では、プロフィールを表示させることが可能です。 以下、記録です。 1. HTML の確認・編集 プロフィールを表示する HTML source/_includes/custom/asides/about.html は以下のようになっている。 必要なら編集する。 File: source/_includes/custom/asides/about.html 1 2 3 4 5 &lt;section&gt; &lt;h1&gt;About Me&lt;/h1&gt; &lt;p&gt;ここに、プロフィールを記載。&lt;/p&gt; &lt;/section&gt; 通常の HTML なので、画像を貼ったりしてもよい。 2. サイドバー表示設定 サイドバーにプロフィールを表示させる為、_config.yml を編集する。 custom/asides/about.html を表示させたい位置に挿入する。 File: _config.yml 1 2 3 4 # list each of the sidebar modules you want to include, in...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby"],
        "url": "/2012/12/17/octopress-add-profile/",
        "teaser": null
      },{
        "title": "Octopress - カテゴリリストの追加！",
        "excerpt":"Octopress にプラグインをインストールすることで、サイドバーにカテゴリリストを表示させることが可能です。 以下、作業記録です。 1. プラグインのダウンロード 先人によって便利なプラグインが用意されている。 Git で clone することでダウンロードできる。 $ git clone git://github.com/tokkonopapa/octopress-tagcloud.git Cloning into 'octopress-tagcloud'... remote: Counting objects: 44, done. remote: Compressing objects: 100% (28/28), done. remote: Total 44 (delta 9), reused 40 (delta 5) Receiving objects: 100% (44/44), 6.05 KiB, done. Resolving deltas: 100% (9/9), done. 2....","categories": ["ブログ"],
        "tags": ["Octopress","Ruby"],
        "url": "/2012/12/18/octopress-add-category-list/",
        "teaser": null
      },{
        "title": "Octopress - タグクラウドの追加",
        "excerpt":"前回、Octopress に導入したカテゴリリストのプラグインを改修して、サイドバーにタグクラウドを表示させてみます。 以下、作業記録です。 0. 前提条件 plugins ディレクトリに tag_cloud.rb が配置済み。 source/_includes/custom/asides ディレクトリに tag_cloud.html が配置済み。 1. _config.yml の編集 _config.yml にカテゴリ用ディレクトリの設定同様、タグ用ディレクトリの設定を追加する。 File: _config.yml 1 2 3 category_dir: blog/categories tag_dir: blog/tags # &lt;- 追加 2. tag_cloud.rb の編集 tag_cloud.rb の TagCloud クラス内を以下のように編集する。 参考にしたサイト同様 tag_cloud は tag_dir とした。 File: tag_cloud.rb 1 2 3 4 5 6...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","タグクラウド"],
        "url": "/2012/12/19/octopress-add-tag-cloud/",
        "teaser": null
      },{
        "title": "Octopress - WordPress から投稿データを移行！",
        "excerpt":"当方のブログを WordPress から Octopress に移行して間もないですが、WordPress に投稿してきた記事・画像を Octopress に移行した際の記録を残しておきます。 0. 前提条件 WordPress は 3.4.1 を使用。(特にバージョンの違いは問題にならないと思われる) Octopress は 2.0.0 を使用。(特にバージョンの違いは問題にならないと思われる) 書式変換には Ruby 1.9.3-p327 を使用。 画像データも移行する。 コメントは移行しない。(Disqus への移行が煩雑？) 1. WordPress から投稿データエクスポート WordPress 管理画面の「ツール」-「エクスポート」で、全ての「投稿」データのみを XML エクスポートする。 ファイル名は wordpress.xml とした。 2. 画像データコピー WordPress の wp-content/uploads/ ディレクトリ配下にあるデータを丸ごと Octopress の source/images/ 配下へコピーする。 3. 書式変換スクリプト作成 jekyll スタイル、Markdown 記法に変換する...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","WordPress","jekyll","Markdown"],
        "url": "/2012/12/20/octopress-migration-from-wordpress/",
        "teaser": null
      },{
        "title": "Octopress - GitHub リポジトリの表示！",
        "excerpt":"Octopress は、デフォルトで GitHub の公開リポジトリの一覧を表示させることが可能です。 以下、記録です。 1. _config.yml の編集 ローカルの Octopress インストールディレクトリ配下にある _config.yml を編集する。 File: _config.yml 1 2 3 4 5 6 # Github repositories github_user: komasaru # &lt;- ユーザ名 github_repo_count: 5 # &lt;- 表示するリポジトリの数 github_show_profile_link: true # &lt;- GitHub プロフィールへのリンク表示有無 github_skip_forks: true # &lt;- 不明？ 必要なら default_asides で GitHub の表示位置を変更する。...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","Git","GitHub"],
        "url": "/2012/12/22/octopress-add-github-repo/",
        "teaser": null
      },{
        "title": "Ruby - XML-RPC でサイト更新 Ping 送信！",
        "excerpt":"Ruby で XML-RPC を使用して、ブログの更新状況を Ping サーバに送信する方法についてです。 WordPress のような動的サイトなら、記事投稿時にプラグインで指定の Ping サーバに更新情報を Ping 送信してくれますが、 Octopress のような静的サイトでは通常そのようなことができません。 という訳で、Ruby で作成してみました。 取り敢えず手動ですが、サーバで cron 起動するなりすれば、自動になります。 0. 前提条件 Ruby 1.9.3-p327 で作成・動作確認。 1. Ruby スクリプト作成 作成した Ruby スクリプトは以下の通り。 実際使用する際は、「Ping サーバ一覧」に URL を記入する。 File: send_update_ping.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["プログラミング"],
        "tags": ["Ruby","XML"],
        "url": "/2012/12/24/ruby-xml-rpc-send-update-ping/",
        "teaser": null
      },{
        "title": "Octopress - 関連記事の表示！",
        "excerpt":"Octopress の各記事にその記事に関連する記事の一覧を表示させる方法についての記録です。 以下、作業記録です。 1. プラグインの導入 大変ありがたいことに、 LawrenceWoodman/related_posts-jekyll_plugin · GitHub にプラグインがある。 適当な場所に clone して、必要な Ruby スクリプトを plugins ディレクトリに配置する。 $ cd ~/tmp $ git clone https://github.com/LawrenceWoodman/related_posts-jekyll_plugin.git $ cp related_posts-jekyll_plugin/_plugins/related_posts.rb ~/octopress/plugins/ 2. 表示用 HTML の作成 表示させるための HTML ソース octopress/source/includes/post/related_posts.html を以下のような内容で作成する。 表示件数を指定しないと、全ての関連記事が表示されるようだ。 File: octopress/source/includes/post/related_posts.html 1 2 3 4 5 6 7 8 9 &lt;div...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby"],
        "url": "/2012/12/26/octopress-add-related-post/",
        "teaser": null
      },{
        "title": "Octopress - Liquid テンプレート内での Liquid タグをエスケープ！",
        "excerpt":"Octopress は、jekyll を使って静的なブログを簡単に構築できるようにしたフレームワークです。 そして、jekyll は Liquid という Ruby のテンプレートエンジンを採用しています。 たとえば、Octopress の記事内でソースコードを表示させたい場合、{% codeblock %} と {% endcodeblock %} の Liquid タグで囲んで記述します。 しかし、ソースコード内に Liquid タグが含まれる場合は、generate するとそのタグも展開されてしまします。 以下、Liquid テンプレート内の Liquid タグをエスケープする方法についての記録です。 1. 対応方法 ソースコード内の {% this %} をエスケープする場合、 {{ \"%{ this \" }}%} とする。 ソースコード内の {{ this }} をエスケープする場合、 {{ \"{{ this \"...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","jekyll"],
        "url": "/2012/12/27/octopress-jekyll-liquid-escape/",
        "teaser": null
      },{
        "title": "Octopress - Preview 時の Web サーバを thin に変更！",
        "excerpt":"Octopress の preview 時に起動する Web サーバ WEBrick をより速度が速いと言われている(?) thin に変更する方法についての記録です。 0. 前提条件 作業する環境(OS)は、Linux Mint 13 Maya (64bit) Ruby 1.9.3-p194 Octopress 2.0 1. Gemfile 編集 Gemfile の group :development do 内に以下を追加する。 File: Gemfile 1 2 gem \"thin\", \"~&gt; 1.5.0\" 2. thin パッケージインストール RubyGems パッケージの thin をインストールする。 $ bundle install 3. Rakefile...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","thin"],
        "url": "/2012/12/28/ocropress-preview-by-thin/",
        "teaser": null
      },{
        "title": "Octopress - URL に日本語を使う設定！",
        "excerpt":"Octopress でカテゴリやタグに日本語を使用すると、URL に日本語が含まれることになり、404 エラーでうまく表示できません。(ローカル環境(WEBrick or thin)で rake preview した時のこと。サーバ(Apache)では正常に表示できます) しかし、設定を編集することで、問題は解決できます。 以下、作業記録です。 0. 前提条件 作業 OS は Linux Mint 13 Maya (64bit) Ruby 1.9.3-p194 Octopress 2.0 1. config.ru の編集 config.rb を以下のように編集する。(URI.unescape させるだけということ) File: config.ru 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2012/12/29/octopress-japanese-url/",
        "teaser": null
      },{
        "title": "Octopress - CSS を Minify しない！",
        "excerpt":"Octopress で rake generate すると、複数の SCSS ファイルから screen.css ファイルが作成されます。 しかし、デフォルトでは、この screen.css ファイルの内容は高速化のために Minify され、テキストエディタで閲覧すると１行になっていて見にくいです。 普段は、これでもよいのですが、テーマのデザインを編集する際には確認しづらいため不便に感じることがあります。 そこで、 Minify させないための設定についての記録です。 0. 前提条件 作業 OS は Linux Mint 13 Maya (64bit) Ruby 1.9.3-p194 Octopress 2.0 1. config.rb の編集 config.rb を以下のように編集する。 output_style の値を compressed から expanded に変更するだけ。 File: config.rb 1 2 3 4 5...","categories": ["ブログ"],
        "tags": ["Octopress","CSS"],
        "url": "/2012/12/30/octopress-css-non-minify/",
        "teaser": null
      },{
        "title": "Octopress - Facebook OGP 設定！",
        "excerpt":"ブログに Facebook の「いいね」ボタンを設置しただけでは、SEO 的にあまり効果がありません。 SEO 的には、OGP(OpenGraphProtocol) の設定をする必要があります。 OGP とは、簡単に言うと、「いいね」した人の Facebook ページ上でその記事がどのような記事なのかを知らせるための機能で、HTML 内に埋め込む meta タグのことです。 OGP を設定しておくことで、Facebook 側での展開が期待できるのです。 （今は、OGP の設定をしなくても「ある程度」の情報は、Facebook 側で既存の meta タグから取得してくれるようですが） 0. 前提条件 Linux Mint 13 Maya (64bit) Ruby 1.9.3-p194 Octopress 2.0 Facebook に登録済みで、かつ AppID を取得済みである。 使用する環境は特に問わないはず。 1. _config.yml 編集 使用する値を設定しておく。 og:image (Facebook 投稿時の画像へのパス) のデフォルトパス、AppID、ロケールを設定する。 File: _config.yml 1 2...","categories": ["ブログ"],
        "tags": ["Octopress","Facebook","OGP"],
        "url": "/2012/12/31/octopress-facebook-ogp/",
        "teaser": null
      },{
        "title": "2012年12月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"明けまして、おめでとうございます。 旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 「み」んなを見守るか「ど」松に、「し」ずかに願う今年の平穏。（2013年元旦） 話は変わりまして、1月になりましたので、先月12月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 12,006 78.2048 Mac OS 1,528 9.9531 Ubuntu Linux 867 5.6475 Linux 729 4.7486 unknown 111 0.7230 Android 41 0.2671 FreeBSD 22 0.1433 Fedora Linux 17 0.1107 RedHat Linux 17 0.1107 PalmOS 7 0.0456 PlayStation 3 0.0195 Debian GNU/Linux 2...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/01/01/blog-access/",
        "teaser": null
      },{
        "title": "2012年 - ツイート集計！",
        "excerpt":"2012年の Twitter でのツイートを Ruby で集計してみました。 当方は、ツイートは全て自宅サーバ(CentOS)上のデータベース(MySQL)に保存しています。 （実際には１時間に１回 Ruby + Twitter API で本家からデータを取得して保存） ほとんど SQL で集計可能でした。 品詞・単語別集計は形態素解析エンジン MeCab を使用しました。 集計内容は以下のとおり。 月別ツイート数 曜日別ツイート数 時間別ツイート数 文字数別ツイート数 １日当たりツイート数別集計 品詞別出現回数 単語別出現回数 1. 月別ツイート数 [ 年 月 ] [件数] [ 比 率 ] 2012年01月 177 ( 5.24%) 2012年02月 179 ( 5.30%) 2012年03月 239 ( 7.08%) 2012年04月...","categories": ["SNS"],
        "tags": ["Twitter","Ruby","MySQL"],
        "url": "/2013/01/02/summary-tweet-2012/",
        "teaser": null
      },{
        "title": "Octopress - TeX で数式表示！",
        "excerpt":"WordPress でブログを運営していた時は、\\(\\TeX\\) によるちょっとした数式表示をプラグインで実現していました。 (多少手の混んだ数式は別途、\\(\\TeX\\) ソフトで作成して画像を表示させていました) 少し調べてみたところ、Octopress 用のプラグインがありました。 そのプラグインを使用せず、_config.yml の markdown: rdiscount を markdown: kramdown や markdown: maruku に変更後、\\(\\TeX\\) 書式を ‘$’ や ‘$$’ で囲った上で JavaScript を使用する方法もあるようですが、当方はプラグインを利用する方法を採用することにしました。 0. 前提条件 Linux Mint 13 Maya (64bit) Ruby 1.9.3-p194 Octopress 2.0 使用する環境は特に問わないはず。 1. プラグインのインストール こちら から MathJax.rb をダウンロードし、plugins ディレクトリに配置する。 2. head.html の編集 MAthJax.js を読み込めるように _includes/custom/head.html...","categories": ["ブログ"],
        "tags": ["Octopress","TeX"],
        "url": "/2013/01/03/octopress-display-tex-formula/",
        "teaser": null
      },{
        "title": "Octopress - HTML5 ソースを W3C で Valid に！",
        "excerpt":"Octopress でデフォルトで使用できるテーマをそのままか自分でカスタマイズして使用していると、The W3C Markup Validation Service でエラーや警告が多数発生します。 普通にブラウザで見ている限りはほとんど不具合は感じませんが、ブラウザによってはデザインが崩れたりする可能性があります。 ブラウザによって、対応できているタグや属性が異なるからです。 時々見かける崩れたデザインのサイトも、標準化対応していない(作成者が自分の環境だけで満足している)からです。 そういう不具合を解消させるために標準化されているのです。 そういうことを気にしていない方が多すぎるのも気になりますが。。。 (他のサイトをチェックしてみると、いかにサイト管理者が HTML に関して知識が薄いかがよくわかります) 今のところ、HTML5 は未だ「勧告」の扱いにはなっていません(実験的段階になっている)が、チェックは可能です。 当ブログサイトもチェックし、エラーにならないよう(Valid になるよう)調整しました。 0. 前提条件 Linux Mint 13 Maya (64bit) で確認しているが、OS・ディストリビューションは関係ない。 Ruby 1.9.3-p194 Octopress 2.0 デフォルトのテーマ(Classic)をそのままかカスタマイズして使用している。 1. 対応内容 以下のような対応をしました。 基本的に、自分の HTML5 に対する疎さや最初から不正な値が使用されていたりしたことから、不正になっていました、 1. セクションタグ関連 【現象】HTML5 について不勉強だったため、自分で命名したセクションタグを配置してはいけないタグ内に配置していた。(自分のミス) 【対応】削除したり、別タグに変更し class 指定した。 2. &lt;time&gt; タグ内の pubdate 属性...","categories": ["ブログ"],
        "tags": ["Octopress","HTML","W3C"],
        "url": "/2013/01/04/octopress-html5-w3c-valid/",
        "teaser": null
      },{
        "title": "Octopress - Atom フィードを W3C で Valid に！",
        "excerpt":"当ブログの HTML5 については、The W3C Markup Validation Service でエラーにならないよう調整済みです。 Octopress - HTML5 ソースを W3C で Valid に！ 今回は、同様に当ブログの Atom フィードを W3C Feed Validation Service, for Atom and RSS でチェックしてみました。 実は HTML5 が W3C Valid になるように調整済みだったので、エラーはありませんでした。 いくつかの警告がありましたので、可能な部分についてのみ対応しました。 0. 前提条件 Linux Mint 13 Maya (64bit) Ruby 1.9.3-p194 Octopress 2.0 デフォルトのテーマ(Classic)をそのままかカスタマイズして使用している。 1. 対応内容 以下のような対応をしました。...","categories": ["ブログ"],
        "tags": ["Octopress","Atom","W3C"],
        "url": "/2013/01/05/octopress-atom-w3c-valid/",
        "teaser": null
      },{
        "title": "Ruby - Twitter API でリスト取得！",
        "excerpt":"Ruby で Twitter API を使用して、自分が作成したリストを取得する方法についてです。 当方は、以前から Ruby + Twitter API + MySQL でツイートやフォロー・フォロワー等を管理していますが、自分が作成したリストとフォローユーザとの連権はしていませんでした。 しかし、この度、どのユーザをリストに追加したのかを把握するために、自分の作成したリストの一覧やリストに登録したユーザの一覧を管理するようにしました。 今回は、自分の作成したリストの一覧を取得する方法についてです。 0. 前提条件 Ruby 1.9.3-p327 で作成・動作確認。 RubyGems twitter を導入済み。 OAuth 認証のための Customer Key, Customer Secret, Access Token, Access Token Secret を取得済み。 OAuth 認証については、今回は説明しません。当ブログ過去記事やネット等でお調べください。 1. Ruby スクリプト作成 作成した Ruby スクリプトは以下の通り。 このスクリプトでは、screen_name を指定して、そのユーザが作成したリストID・リスト名・モード(公開か非公開か)・作成日・登録ユーザ数を取得している。 引数や取得できる項目等については Twitter API のサイト等で確認できます。 File:...","categories": ["プログラミング"],
        "tags": ["Ruby","Twitter"],
        "url": "/2013/01/06/ruby-twitter-api-lists/",
        "teaser": null
      },{
        "title": "Ruby - Twitter API でリスト登録済みユーザ取得！",
        "excerpt":"昨日は、Ruby で Twitter API を使用して自分が作成したリストの取得する方法について紹介しました。 Ruby - Twitter API でリスト取得！ 今日は、Ruby + Twitter API で指定のリストに登録されているユーザの一覧を取得する方法についてです。 0. 前提条件 Ruby 1.9.3-p327 で作成・動作確認。 RubyGems twitter を導入済み。 OAuth 認証のための Customer Key, Customer Secret, Access Token, Access Token Secret を取得済み。 OAuth 認証については、今回は説明しません。当ブログ過去記事やネット等でお調べください。 1. Ruby スクリプト作成 作成した Ruby スクリプトは以下の通り。 このスクリプトでは、list_id を指定して、そのリストに登録済みのユーザのユーザIDを取得している。 引数や取得できる項目等については Twitter API のサイト等で確認できます。 File:...","categories": ["プログラミング"],
        "tags": ["Ruby","Twitter"],
        "url": "/2013/01/07/ruby-twitter-api-list-members/",
        "teaser": null
      },{
        "title": "Linux Mint - Ruby で形態素解析 MeCab を使う！",
        "excerpt":"以前、Cygwin 上で Ruby を使って形態素解析 MeCab をする方法を紹介しました。 * Cygwin - Ruby で形態素解析 MeCab を使う！ 今回は、Linux Mint にソースをビルドしてインストールした Ruby で形態素解析 MeCab を使用する方法についてです。 以前の Cygwin での方法と若干異なるので記録しておきます。 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。（Ubuntu, Debian でも同様） Ruby はソースをビルドしてインストールした 1.9.3-p362 を想定。 1. MeCab と辞書のインストール MeCab と辞書(UTF-8)を Synaptic パッケージマネージャか apt-get 等でインストールする。 apt-get でインストールするなら以下のようにする。 $ sudo...","categories": ["プログラミング"],
        "tags": ["LinuxMint","Ruby","形態素解析","MeCab"],
        "url": "/2013/01/08/linux-mint-ruby-mecab/",
        "teaser": null
      },{
        "title": "nanoc - 環境構築！",
        "excerpt":"Ruby 製の静的 CMS である nanoc: a Ruby site compiler that generates static HTML の環境を構築する方法についての記録です。 nanoc: a Ruby site compiler that generates static HTML については、以下で分かりやすく説明されています。（ちなみに、当方と同じ Ruby City MATSUE にある会社の方の資料です） 軽い! 速い! サーバを選ばない! Ruby製CMS “nanoc” 0. 前提条件 ローカル作業環境は Linux Mint 13 Maya (64bit) ローカル環境に Ruby 1.9.3-p327 がインストール済み。（Ruby は 1.8.6(1.9系含む) 以上である必要がある） RubyGems 1.8.24...","categories": ["ブログ"],
        "tags": ["nanoc","Ruby"],
        "url": "/2013/01/09/nanoc-construction-of-environment/",
        "teaser": null
      },{
        "title": "Octopress - 容易に table タグ！",
        "excerpt":"Octopress のブログ記事中で &lt;table&gt; タグを使用する際に、HTML ではなく容易に記述できる方法があるようです。 0. 前提条件 Linux Mint 13 Maya (64bit) Ruby 1.9.3-p194 Octopress 2.0 使用する環境は特に問わないはず。 1. CSS ファイル作成 後述の参考サイトを参考に以下のような CSS ファイルを作成した。（各自、自由に調整すべし） ファイル名は source/stylesheets/table.css とした。 File: source/stylesheets/table.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["ブログ"],
        "tags": ["Octopress","HTML","CSS"],
        "url": "/2013/01/10/octopress-table-tag/",
        "teaser": null
      },{
        "title": "Ruby on Rails - Atom 1.0 Feed 生成！",
        "excerpt":"ブログでは通常 RSS や Atom の Feed(フィード) の機能を使用します。 ホームページでも Feed 機能を使用することで SEO 的にも効果を発揮します。 という訳で、今回は Ruby on Rails 製のサイトの Atom 1.0 Feed を生成する方法についての記録です。 0. 前提条件 Ruby 1.9.3-p327 + Rails 3.2.9 (Linux Mint 13 64bit)で作成・動作確認。 Ruby 1.9.3-p194 + Rails 3.2.6 (CentOS 6.3 32bit)で動作確認。 別途 Feed 用のコントローラ feed を作成した。 1. テンプレート作成 Atom 1.0 Feed...","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","Atom","Feed"],
        "url": "/2013/01/11/rails-atom-feed/",
        "teaser": null
      },{
        "title": "Debian 系 Linux - サービス自動起動設定！",
        "excerpt":"CentOS や Scientific Linux 等の Redhat 系 Linux では、CUI モードでのサービス自動起動設定は chkconfig コマンドを使用します。 一方、Ubuntu や Linux Mint 等の Debian 系 Linux では、update-rc.d コマンドを使用します。 以下、update-rc.d コマンドについての記録です。 0. 前提条件 作業・確認した環境は Linux Mint 14 Nadia (64Bit) だが、Debian 系 Linux なら同じはずである。 1. ランレベル まず、サービス自動起動で重要なランレベルは、Debian 系 Linux では、以下のような割り当てとなっている。 ランレベル説明 0システム停止 1シングルユーザモード 2マルチユーザモード 32 に同じ 42 に同じ...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/01/12/debian-service-autostart/",
        "teaser": null
      },{
        "title": "Nginx - Linux Mint にインストール（パッケージ使用）！",
        "excerpt":"Linux Mint に軽量 Web サーバ Nginx をインストールする手順についてです。 （Debian, Ubuntu 等 GNU 系ディストリビューションは同様だと思う） GNU 系 Linux ディストリビューションに Nginx をインストールするには、 apt (apt-get, aptitude) でインストールする。（Synaptic パッケージマネージャも同じ） deb パッケージでインストールする。 ソースをビルドしてインストールする。 方法がありますが、今回は単純に apt でのインストールをしてみました。 ちなみに、当記事執筆時点では以下のような状況。 apt では 1.1.19 が最新。 安定版ソースは 1.2.6 が最新。 開発版ソースは 1.3.9 が最新。 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 1. Nginx...","categories": ["サーバ構築"],
        "tags": ["LinuxMint","Nginx"],
        "url": "/2013/01/13/nginx-linux-mint-install-by-apt/",
        "teaser": null
      },{
        "title": "Nginx - Linux Mint にインストール（ソースビルド）！",
        "excerpt":"昨日は、Linux Mint に軽量 Web サーバ Nginx をパーケージインストールする手順について記録しました。 Linux Mint - Nginx インストール（パッケージ使用）！ 今日は、Nginx をソースをビルドしてインストールする方法についてです。 当記事執筆時点では、 apt では 1.1.19 が最新。 安定版ソースは 1.2.6 が最新。 開発版ソースは 1.3.9 が最新。 となっているので、より新しいバージョンを使用したい場合はソースからインストールする方法を採用します。 今回は安定版ソースを使用します。 0 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。（前回まで Linux Mint 13 Maya でした） インストール先は /usr/local とした。 1. 必要パッケージインストール Nginx のビルドに以下のパッケージが必要なので、未インストールならインストールしておく。 $ sudo apt-get...","categories": ["サーバ構築"],
        "tags": ["LinuxMint","Nginx"],
        "url": "/2013/01/14/nginx-linux-mint-install-by-src/",
        "teaser": null
      },{
        "title": "Nginx - 基本的な設定！",
        "excerpt":"Linux Mint にソースをビルドしてインストールした軽量 Web サーバ Nginx の基本的な設定についてです。 （Debian, Ubuntu 等 GNU 系ディストリビューションは同様だと思う） ソースをビルドしてインストールする方法については過去記事を参照。 Linux Mint - Nginx インストール（ソースビルド）！ 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 Nginx 1.2.6 がソースビルドによりインストール済み。 パッケージを利用してインストールした Nginx とはディレクトリ構成等が若干異なる。 （別途作成したヴァーチャルホストの設定ファイルを取り込む形式になっていたり・・・） 1. 基本設定 基本的（グローバル）な設定は /usr/local/nginx/conf/nginx.conf で行う。 取り急ぎ以下のようにした。（コメント部分は省略） File: /usr/local/nginx/conf/nginx.conf 1 2 3 4 5 6 7 8 9...","categories": ["サーバ構築"],
        "tags": ["LinuxMint","Nginx"],
        "url": "/2013/01/15/nginx-setting/",
        "teaser": null
      },{
        "title": "Nginx - ログフォーマット、アクセスログについて！",
        "excerpt":"軽量 Web サーバ Nginx の設定の中のアクセスログについてです。 （Debian, Ubuntu 等 GNU 系ディストリビューションは同様だと思う） 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Nginx 1.2.6 がソースビルドによりインストール済み。 パッケージを利用してインストールした Nginx とはディレクトリ構成等が若干異なるが、アクセスログの設定については同じ。 1. ログフォーマットについて まず、ログフォーマット（log_format）とは、アクセスログにログを出力する際に使用するフォーマットのことで、設定ファイル（今回の場合 /usr/local/nginx/conf/nginx.conf） に記述して設定する。 log_format を設定しない場合は、以下のようなフォーマットを設定したことになる。（フォーマット名は combined） log_format combined '$remote_addr - $remote_user [$time_local] ' '\"$request\" $status $body_bytes_sent ' '\"$http_referer\" \"$http_user_agent\"'; # $remote_addr : クライアントのIPアドレス #...","categories": ["サーバ構築"],
        "tags": ["LinuxMint","Nginx"],
        "url": "/2013/01/16/nginx-access-log/",
        "teaser": null
      },{
        "title": "Nginx - エラーログについて！",
        "excerpt":"軽量 Web サーバ Nginx の設定の中のエラーログについてです。 （Debian, Ubuntu 等 GNU 系ディストリビューションは同様だと思う） 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 Nginx 1.2.6 がソースビルドによりインストール済み。 パッケージを利用してインストールした Nginx とはディレクトリ構成等が若干異なるが、エラーログについては同じ。 1. エラーログの設定 エラーログの設定は、設定ファイルに以下のように記述する。 （デフォルトのエラーログやソースビルド時にオプション指定したエラーログとは別に設定する場合） File: /usr/local/nginx/conf/nginx.conf 1 error_log file | stderr [ debug | info | notice | warn | error | crit | alert |...","categories": ["サーバ構築"],
        "tags": ["LinuxMint","Nginx"],
        "url": "/2013/01/17/nginx-error-log/",
        "teaser": null
      },{
        "title": "Nginx - Gzip 圧縮！",
        "excerpt":"軽量 Web サーバ Nginx での Gzip 圧縮の設定についてです。 （Debian, Ubuntu 等 GNU 系ディストリビューションは同様だと思う） Web サーバでの Gzip 圧縮とは、要求した側にデータを返却する際にサーバ側で Gzip 圧縮して容量を小さくし高速化することです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Nginx 1.2.6 がソースビルドによりインストール済み。 パッケージを利用してインストールした Nginx とはディレクトリ構成等が若干異なるが、Gzip 圧縮の設定については同じ。 1. 設定 取り急ぎ、設定ファイル（当方は /usr/local/nginx/conf/nginx.conf）の http ディレクティブ内に以下のような記述を追加してみた。 File: /usr/local/nginx/conf/nginx.conf 1 2 3 4 5 6 7 8 9...","categories": ["サーバ構築"],
        "tags": ["LinuxMint","Nginx"],
        "url": "/2013/01/18/nginx-gzip-compress/",
        "teaser": null
      },{
        "title": "Nginx - バージョン情報隠蔽！",
        "excerpt":"Web サーバのバージョン情報を公開するのはセキュリティ上よろしくないので、Nginx のバージョン情報を隠蔽する。 ソースをビルドしてインストールする方法・基本設定については過去記事を参照。 Nginx - Linux Mint にインストール（ソースビルド）！ Nginx - 基本的な設定！ 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Nginx 1.2.6 がソースビルドによりインストール済み。 パッケージを利用してインストールした Nginx とはディレクトリ構成等が若干異なる。 （別途作成したヴァーチャルホストの設定ファイルを取り込む形式になっていたり・・・） 1. HTTP レスポンスヘッダ確認 現状の HTTP レスポンスヘッダを curl で確認してみる。 Server: nginx/1.1.19 とバージョン情報が取得できてしまう。 $ curl -I http://localhost HTTP/1.1 200 OK Server: nginx/1.2.6 Date: Sat, 29...","categories": ["サーバ構築"],
        "tags": ["LinuxMint","Nginx"],
        "url": "/2013/01/19/nginx-hide-version/",
        "teaser": null
      },{
        "title": "Nginx - PHP との連携！",
        "excerpt":"Nginx で PHP を使用するには、PHP の FastCGI 実装が必要です。 今回は PHP の FastCGI 実装の１つである PHP5-FPM(PHP FastCGI Process Manager) を使用します。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Nginx 1.2.6 がソースビルドによりインストール済み。 パッケージを利用してインストールした Nginx とはディレクトリ構成等が若干異なる。 （別途作成したヴァーチャルホストの設定ファイルを取り込む形式になっていたり・・・） PHP 5.4.6 がインストール済み。（古いバージョンだと作業が異なるかも知れない） 1. PHP5-FPM インストール PHP5-FPM(PHP FastCGI Process Manager) が未インストールなら、Synaptic パッケージマネージャか apt 等でインストールしておく。 （環境によっては、他にも必要なパッケージがあるかも知れません。適宜対応してください） apt-get でインストールするなら、以下のようにする。 $...","categories": ["サーバ構築"],
        "tags": ["LinuxMint","Nginx","PHP"],
        "url": "/2013/01/20/nginx-php/",
        "teaser": null
      },{
        "title": "Nginx - phpMyAdmin を使用する！",
        "excerpt":"軽量 Web サーバ Nginx で phpMyAdmin（MySQLサーバーをウェブブラウザで管理するためのデータベース接続クライアントツール）を使用する方法についてです。 既にインストールされている phpMyAdmin を Nginx で利用する方法についてです。PHP, phpMyAdmin, MySQL 等のインストールについてはここでは説明しません。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Nginx 1.2.6 がソースビルドによりインストール済み。 パッケージを利用してインストールした Nginx とはディレクトリ構成等が若干異なる。 （別途作成したヴァーチャルホストの設定ファイルを取り込む形式になっていたり・・・） PHP 5.4.6 がインストール済み。（古いバージョンだと作業が異なるかも知れない） MySQL サーバがインストール済み。（当方は 5.5.28） PHP5-FPM がインストール済み。（当方は 5.4.6） phpMyAdmin がインストール済み。（当方は 3.4.11） phpMyAdmin はサブディレクトリ運用とする。（http://localhost/phpmyadmin/ という URL での運用） 1. Nginx 設定ファイル編集 Nginx...","categories": ["サーバ構築"],
        "tags": ["LinuxMint","Nginx","PHP","MySQL"],
        "url": "/2013/01/21/nginx-phpmyadmin/",
        "teaser": null
      },{
        "title": "Ruby on Rails - Nginx & Unicorn で動かす！",
        "excerpt":"現在 Rails サイト・アプリは、サーバ環境・ローカル環境ともに Apache2 + Passenger で動かしていますが、Nginx + Unicorn で動かすにはどうすべきか試行してみたので、記録しておきます。 （ちなみに、当初この記事を執筆していた時（数週間前）は試行段階でしたが、現在は実際に運用しています） Unicorn とは、CPU やメモリをあまり消費せず高速で軽快に動く次世代 Rails サーバです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Nginx 1.2.6 がソースビルドによりインストール済み。 （パッケージを利用してインストールした Nginx とはディレクトリ構成等が若干異なる） Rails アプリは既に作成済み。（場所：/var/www/rails/rails_app） Rails アプリをサブディレクトリ運用（http://foo.bar/rails_app/ のように）する場合を想定。 Proxy は TCP ポートではなく、Unix ソケットを使用。 Ruby 1.9.3-p362, Rails 3.2.10 で動作確認。 1. Nginx の設定 Nginx の設定（当方環境の場合...","categories": ["サーバ構築"],
        "tags": ["Ruby","Rails","Nginx","Unicorn"],
        "url": "/2013/01/22/ruby-on-rails-nginx-unicorn/",
        "teaser": null
      },{
        "title": "Unicorn - 起動スクリプト作成！",
        "excerpt":"前回は、Nginx + Unicorn で Rails アプリを動かす設定を行いました。 Ruby on Rails - Nginx ＆ Unicorn で動かす！ しかし、Unicorn の起動コマンドを入力するのが面倒すぎるくらいに感じるので、起動スクリプトを作成してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 1.9.3-p362, Rails 3.2.10 で動作確認。 Unicorn 4.5.0 で動作確認。 起動スクリプトは Rails アプリ毎に作成することを想定。 Rails アプリはサブディレクトリ運用をする。 1. 起動スクリプト作成 起動スクリプト /etc/init.d/unicorn_rails_app を以下の内容で作成する。 （自分の環境に合わせて適宜編集する） File: /etc/init.d/unicorn_rails_app 1 2 3 4 5...","categories": ["サーバ構築"],
        "tags": ["Ruby","Rails","Nginx","Unicorn"],
        "url": "/2013/01/23/unicorn-start-script/",
        "teaser": null
      },{
        "title": "Nginx + Unicorn でベンチマークテスト！",
        "excerpt":"先日、Nginx + Unicorn で Rails アプリを動かす設定を行いました。 Ruby on Rails - Nginx ＆ Unicorn で動かす！ Nginx + Unicorn の Rails サイト・アプリが Apache + Passenger と比較してどのくらい性能がアップしたのかを ab(Apache Benchmark) で調べてみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 1.9.3-p362, Rails 3.2.10 でローカル環境に作成した Rails アプリで確認。 Apache 2.2.22 Nginx 1.2.6 Passenger 3.0.18 Unicorn 4.5.0...","categories": ["サーバ構築"],
        "tags": ["Ruby","Rails","Nginx","Unicorn"],
        "url": "/2013/01/24/apache-nginx-benchmark/",
        "teaser": null
      },{
        "title": "Nginx - CentOS にインストール（ソースビルド）！",
        "excerpt":"以前、軽量 Web サーバ Nginx をLinux Mint にソースをビルドしてインストールする手順について記録しました。 Nginx - Linux Mint にインストール（ソースビルド）！ 今日は、Nginx を CentOS(Redhat 系ディストリビューション) にソースをビルドしてインストールする方法についてです。 GNU(Debian) 系ディストリビューションとは若干異なる部分があるため、別途記録しておいた次第です。 0 前提条件 CentOS 6.3 (32bit) での作業を想定。 インストール先は /usr/local とした。 1. 必要パッケージインストール Nginx のビルドに以下のパッケージが必要なので、未インストールならインストールしておく。 $ sudo yum install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel 2. アーカイブダウンロード インストールに使用するアーカイブファイルをダインロードし、解凍する。 ダウンロード先はユーザルートとした。 $ wget http://nginx.org/download/nginx-1.2.6.tar.gz...","categories": ["サーバ構築"],
        "tags": ["CentOS","Nginx"],
        "url": "/2013/01/25/nginx-centos-install-by-src/",
        "teaser": null
      },{
        "title": "プロキシ経由時のリモートアドレスについて！",
        "excerpt":"少し前から当方の Ruby on Rails 製のホームページを Apache + Passenger から Nginx + Unicorn に変更して運用しています。 しかし当初、プロキシの関係で、アクセス解析処理の部分でリモートアドレスが正常に取得できなくなっていました。 以下、対応記録です。 1. 現象 Nginx でバックエンド（プロキシサーバ）へ HTTP ヘッダ情報を送信しているにも関わらず、Rails 側で環境変数 REMOTE_ADDR を取得すると全て “127.0.0.1” になってしまう。 Nginx のログでは正常にリモートIPアドレスが取得できるのを確認できる。 Nginx の設定内容は以下の通り。 File: nginx.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["サーバ構築"],
        "tags": ["Rails","Nginx","Unicorn","Proxy"],
        "url": "/2013/01/26/proxy-remote-addr/",
        "teaser": null
      },{
        "title": "nanoc - ブログ用ヘルパーを使用！",
        "excerpt":"nanoc に標準で準備されているヘルパーを使用することで、 nanoc で容易にブログサイトを構築することができます。 当方と同じ Ruby City MATSUE の方の次の資料が大変参考になりました。 松江Ruby会議02のライトニングトークでnanocの発表を行いました - maeda.log 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 環境は多少異なっても以下の作業にさほど影響しないと思う。（Windows なら文字コード関連で調整が必要になるかも？） 1. 使用するヘルパー nanoc サイトをブログサイトにするには以下のヘルパーを使用する。 Blogging Helper ブログサイトを構築するのに役立つ機能。 Rendering Helper レイアウトを部分テンプレートとして描画する機能。 LinkTo Helper リンク生成の機能。 2. ヘルパーのインクルード設定 前述の３つのヘルパーを使用するために、lib/default.rb にインクルードする設定を記述する。 File: lib/default.rb 1 2 3...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc"],
        "url": "/2013/01/27/nanoc-blog-helper/",
        "teaser": null
      },{
        "title": "nanoc - Markdown 記法を使用！",
        "excerpt":"nanoc でページ・記事を作成する際にいちいち HTML を記述しては効率が悪いです。 当方は Markdown 記法が好きなので、nanoc で使えるようにしてみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 1. RubyGems パッケージインストール Markdown 記法をパースするのに必要な kramdown という RubyGems パッケージをインストールする。 ちなみに、Ruby で使える Markdown パーサには Kramdown 以外に BlueCloth, RDiscount, Redcarpet, Maruku 等もあるようだ。 $ sudo gem install kramdown 2. Rules 編集...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc","Markdown"],
        "url": "/2013/01/28/nanoc-markdown/",
        "teaser": null
      },{
        "title": "nanoc - 記事作成時にメタデータを自動作成！",
        "excerpt":"nanoc でブログ記事を作成する際、その都度ブログ用のタグ kind、 created_at を記述するのはほんの少しだけ面倒です。 今回は、記事を新規作成する際に自動で kind、 created_at をセットする方法についてです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 記事作成先は ./content/articles 記事のファイル名は yyyy-mm-dd-hogehoge.md （タイトルに日本語を指定しても大丈夫） 1. 必要パッケージインストール 以下の作業で必要になる stringex という日本語タイトルをローマ字に変換するための RubyGems パッケージをインストールする。 $ sudo gem install stringex 実際は、ローマ字変換がうまく行かない（中国語読み？に変換される）ので、日本語タイトルは使用しない方がよいかもしれない。 よって、日本語タイトルを使用しないのならこのパッケージもインストールする必要もない。 2. Rakefile 作成 nanoc ルートに以下のような内容で Rakefile を作成する。（[参考サイト](http://www.yet.org/2012/11/nanoc/ “nanoc...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc"],
        "url": "/2013/01/29/nanoc-make-meta/",
        "teaser": null
      },{
        "title": "nanoc - コンパイル時のルーティング設定！",
        "excerpt":"nanoc でブログ運用する場合、コンパイルした記事を月別や日別にディレクトリ分けしたいケースがある思います。 コンパイル時のルーティング設定で実現可能のようです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 記事ファイルは nanoc ルート配下の content/content/articles/ ディレクトリに置いている。 記事ファイルの名称は yyyy-mm-dd-test-post.md のような「年月日＋記事タイトル＋拡張子」としている。 出力する際のディレクトリ構成は output/yyyy/mm/dd/test-post/index.html ような形とする。 1. Rules ファイル編集 nanoc ルートにある Rules ファイルに以下のようなルーティング設定を追加する。 （route '*' do の行より先に記述する） File: Rules 1 2 3 4 5 6 route '/articles/*/' do...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc"],
        "url": "/2013/01/30/nanoc-routing-when-compile/",
        "teaser": null
      },{
        "title": "nanoc - 最近の記事一覧を表示！",
        "excerpt":"nanoc でブログ運用する場合に、ちょっとした設定を行うことでサイドバー等に最近の記事の一覧を表示させることが可能です。 以下は、当方の作業の記録です。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo）のインクルード設定済み。 テンプレート機能は ERB を使用。 1. 部分テンプレート作成 サイドバー表示用の部分テンプレートを作成する。 File: layouts/_article_list.html 1 2 3 4 5 6 7 8 &lt;ul&gt; &lt;% sorted_articles[0, 10].each do |article| %&gt; &lt;li&gt; &lt;%= link_to(article[:title], article.path) %&gt;&lt;br /&gt;...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc"],
        "url": "/2013/01/31/nanoc-recent-post/",
        "teaser": null
      },{
        "title": "2013年1月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 11,799 76.8965 Mac OS 1,646 10.7273 Ubuntu Linux 1,017 6.6280 Linux 730 4.7576 Android 53 0.3454 unknown 50 0.3259 FreeBSD 13 0.0847 RedHat Linux 10 0.0652 Debian GNU/Linux 8 0.0521 Fedora Linux 4 0.0261 PalmOS 4 0.0261 PlayStation 3 0.0196 SuSE Linux 3...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/02/01/blog-access/",
        "teaser": null
      },{
        "title": "nanoc - more タグ埋め込み！",
        "excerpt":"nanoc でのブログ運用で、内容の長い記事を「続きを読む」等でコンパクトにしたい時があります。（トップページ等で） ヘルパーに専用のメソッドを用意することで実現可能です。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo）のインクルード設定済み。 テンプレート機能は ERB を使用。 1. more タグ埋め込み 記事内の適当な箇所に more タグを埋め込む。 File: articles/2013-01-16-test-more-tag.md 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc"],
        "url": "/2013/02/02/nanoc-more-tag/",
        "teaser": null
      },{
        "title": "nanoc - 記事でタグを使用！",
        "excerpt":"nanoc でのブログ運用でタグを利用するにはタグ用のヘルパーを使用するようです。 今回は、タグ用のヘルパーを使用して記事にタグ付けし、サイドバータグの一覧を表示させ、さらに、タグ別の一覧ページを作成します。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo）のインクルード設定済み。 テンプレート機能は ERB を使用。 タグ別ページの URL は tags/hoge のようにする。 1. タグ管理用ヘルパーのインクルード コンパイル時にタグ管理用のヘルパー Tagging Helper をインクルードするよう、 lib/default.rb に次の１行を追加する。 File: lib/default.rb 1 include Nanoc3::Helpers::Tagging 2. 個別ページ編集 各記事にタグを表示するようにする。 以下は当方の例の抜粋で、記事作成日時の後ろに表示させるようにしている。 File: layouts/article.html 1 2...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc"],
        "url": "/2013/02/03/nanoc-tag-list/",
        "teaser": null
      },{
        "title": "nanoc - 月別の記事一覧！",
        "excerpt":"nanoc で月別の記事一覧を表示させる方法についてです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo, Tagging）のインクルード設定済み。 テンプレート機能は ERB を使用。 1. 月一覧取得メソッド作成 月の一覧を取得するメソッドを作成する。 当方は、lib/helpers.rb に以下を追加した。 File: lib/helpers.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc"],
        "url": "/2013/02/04/nanoc-monthly-list/",
        "teaser": null
      },{
        "title": "nanoc - Markdown でコード表示！",
        "excerpt":"nanoc の Markdown 記法によるページでソースコードをハイライト表示（シンタックスハイライト）させる方法についてです。 nanoc の ColorizeSyntax というフィルターを使用します。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo, Tagging）のインクルード設定済み。 Markdown パーサに Kramdown を使用している。 ハイライトに使用する手法は CodeRay とした。（Pygmentize, Pygmentrb 等も選択可能） スタイルは HTML タグで style 属性を使用するのではなく、 class 属性と CSS ファイルを使用する。 1. CodeRay インストール 今回はスタイルシートを使用するので、スタイルシートの雛形を作成してくれるコマンドを使用できるように CodeRay...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc","Markdown"],
        "url": "/2013/02/05/nanoc-display-code-by-markdown/",
        "teaser": null
      },{
        "title": "nanoc - Markdown 記法 + Lightbox2 で画像を美麗表示！",
        "excerpt":"Lightbox2 は言わずと知れた Web 上で画像をクリックした際に綺麗に表示してくれるものです。 当方 Ruby on Rails や WordPress で使用してきましたが、この Lightbox2 を nanoc の Markdown 記法で実現させるための方法について記録しておきます。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo, Tagging）のインクルード設定済み。 Markdown パーサに Kramdown を使用している。 nanoc 自体が汎用性・拡張性が高い CMS であるので、今回紹介する方法もファイル名やディレクトリ構成等も当方独自にカスタマイズを施している。適宜読み替えること。 1. 事前準備 LightBox による画像表示の前に、 Markdown 記法で画像を表示させる方法（記述方法）について説明する。...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc","Markdown"],
        "url": "/2013/02/06/nanoc-md-lightbox2/",
        "teaser": null
      },{
        "title": "nanoc - 関連記事一覧作成！",
        "excerpt":"nanoc ブログで、それぞれの記事に関連する記事の一覧を表示させる方法についてです。 関連記事を抽出方法には色々な考え方がありますが、今回は単純に記事に付けられているタグを元に関連記事を作成します。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo, Tagging）のインクルード設定済みで、nanoc をブログとして利用できるように各種設定も済んでいる。 テンプレート機能は ERB を使用。 関連記事は各記事に付けられている tags の情報を元に作成する。 各記事の created_at の書式を %Y/%m/%d %H:%M:%S としている。（日時判定に使用するので） 1. ヘルパー作成 関連記事一覧を作成するヘルパーを作成する。 lib ディレクトリ配下のファイルに以下のメソッドを追加する。 （lib/default.rb でもよいし、別のファイルでもよい。当方は lib/helpers.rb を作成している） File: lib/helpers.rb 1 2 3 4...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc"],
        "url": "/2013/02/07/nanoc-related-posts/",
        "teaser": null
      },{
        "title": "nanoc - Atom フィード配信！",
        "excerpt":"nanoc ブログで、Atom フィードを配信する方法についてです。 RSS 1.0, 2.0 等のフィードもありますが、当方は最近は Atom フィード１本に統一しています。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p362 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo, Tagging）のインクルード設定済みで、nanoc をブログとして利用できるように各種設定も済んでいる。 1. Builder インストール XML を作成するための RubyGems パッケージ Builder が未インストールならインストールする。 $ sudo gem install builder 2. config.yaml 編集 Atom フィードの生成に使われる属性を config.yaml に設定する。...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc","Feed","atom"],
        "url": "/2013/02/08/nanoc-atom-feed/",
        "teaser": null
      },{
        "title": "nanoc - 記事の公開・下書き管理！",
        "excerpt":"nanoc でブログ記事を作成する際、その記事が公開してもよい状態かまだ編集中なのかを指定したい場合があります。 他のブログシステムではよくある機能です。 nanoc には標準でそのような機能はありませんが、メタデータ部分に適当なキーワードを設定することで可能になります。 （メタデータに設定しただけで機能しているものと勘違いしている方もおられるように感じるので） 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p385 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo, Tagging）のインクルード設定済みで、nanoc をブログとして利用できるように各種設定も済んでいる。 1. Rules 編集 Rules ファイルの preprocess の先頭に以下のような記述を追加する。 メタデータの published というキーワードに false が設定されている記事（アイテム）はコンパイルしない（アイテムのリストから削除する）という設定。 published は他のブログシステム（Octopress）に合わせているだけあり、 published でなくても publish でも他の単語でもよい。 File: Rules 1 2 3 4...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc"],
        "url": "/2013/02/09/nanoc-article-published/",
        "teaser": null
      },{
        "title": "nanoc - CSS, JavaScript を Minify！",
        "excerpt":"nanoc は、デフォルトではコンパイルしても CSS や JavaScript ファイルは Minify されません（改行・余分な半角スペースが残ったまま）。 HTTP リクエス回数を減らしアクセススピードを上げるためには、Minify した方がよいです。 それほど大きなサイトでなければ、Minify したからと言っても高速化は体感できないかも知れません。 しかし、それでも HTTP リクエスト回数のことを考えれば、 Minify しておいた方がよいように思います。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p385 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo, Tagging）のインクルード設定済みで、nanoc をブログとして利用できるように各種設定も済んでいる。 JavaScript ファイルは assets/javascripts/ というディレクトリに配置している。 CSS ファイルは assets/stylesheets/ というディレクトリに配置している。 JDK(Java Development Kit) 導入済み。...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc","CSS","JavaScript"],
        "url": "/2013/02/10/nanoc-minify-css-js/",
        "teaser": null
      },{
        "title": "nanoc - ブログ個別記事に Next/Previous リンク！",
        "excerpt":"nanoc ブログをページネーション（記事を指定件数別にページ化）するには、公式サイトのドキュメント（nanoc - Paginating articles）に記載さている通りの方法でできるようです。 しかし、説明に「ページにオブジェクトを追加するたびに、あふれたオブジェクトを後ろのページにシフトさせる作業が発生するので推奨していない」というような記述があります。（他に方法があるのかも知れませんが未確認） ですので、一覧ページのページネーションはとりあえず保留にし、個別の記事ページに「前ページ(Older)」・「次ページ(Newer)」のリンクを付けるようにしてみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 nanoc 3.4.3 を使用。 Ruby 1.9.3-p385 を使用。 nanoc 用ブログヘルパー（Blogging, Rendering, LinkTo, Tagging）のインクルード設定済みで、nanoc をブログとして利用できるように各種設定も済んでいる。 テンプレート機能は ERB を使用。 前ページを１つ古い記事、次ページを１つ新しい記事とする。（逆の概念もあるかもしれないが） 1. ヘルパー作成 リンクを作成するヘルパーを作成する。 lib ディレクトリ配下のファイルに作成する。（当方は lib/helpers.rb ファイルを作成しそこに記述した） File: lib/helpers.rb 1 2 3 4 5 6 7 8 9 10...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc"],
        "url": "/2013/02/11/nanoc-prev-next-link/",
        "teaser": null
      },{
        "title": "正規表現 - 文字列内から HTML タグを正確に判別！",
        "excerpt":"使っているプログラミング言語に関わらず、文字列内から HTML タグの部分を抽出したり削除したりするケースがあると思います。 その際、正規表現を使用すると思いますが、場合によっては確実に HTML タグを判別できない場合があります。 結局、広く知れ渡っている正規表現パターンが正確に判別できますが、他のパターンも含めて数種類のパターンを Ruby で検証してみました。（正規表現の説明付きで） 0. 準備 今回のテストでは、以下のような文字列を考えてみることにする。 文字列をダブルクォーテーション \" で囲んだり、シングルクォーテーション ' で囲んだり、タグの属性値内にさらにタグを埋め込んだりしている。 この画像&lt;img src=\"../images/example.png\" alt='example.png' title='&lt;img&gt;タグ例' /&gt;は&lt;span&gt;テスト画像&lt;/span&gt;です。 そして、テストはこの文字列から HTML タグを判別して除去することにする。 以下のような文字になれば成功ということ。 この画像はテスト画像です。 1. テストパターン１（不正確なパターン） &lt;.*?&gt; . は、改行を除く任意の１文字。 * は、直前の表現の０回以上の繰り返しだが、 *? とすることでさらに最短一致。 よって、 &lt; と最初の &gt; で囲まれた任意の０文字以上の文字列のこと。 2. テストパターン２（不正確なパターン） &lt;\\/?[^&gt;]*&gt; \\/ は、 / 文字そのもの。 / だけだと別の意味なるのでエスケープしている。...","categories": ["プログラミング"],
        "tags": ["正規表現","Ruby"],
        "url": "/2013/02/13/regexp-html-tag/",
        "teaser": null
      },{
        "title": "Octopress - 月別アーカイブ！",
        "excerpt":"Octopress のブログには、デフォルトでは全記事のアーカイブはあっても月別アーカイブの機能がありません。 記事数が増えてくると、月別アーカイブの機能があった方が便利なので、プラグインを作成してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) Ruby 1.9.3-p194 Octopress 2.0 月別ページの URL は /yyyy/mm/[index.html] とする。 サイドバーに年月一覧を設置する。 使用する環境は特に問わないはず。 1. プラグイン（月別ページ生成用）作成 月別ページを生成するプラグインを作成する。 当方が過去に作成していたカテゴリ別ページやタグ別ページ生成プラグインを流用した。 File: plugins/archive_generator.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["ブログ"],
        "tags": ["Octopress","jekyll","Ruby"],
        "url": "/2013/02/15/octopress-monthly-archives/",
        "teaser": null
      },{
        "title": "Nginx - ログローテーション設定！",
        "excerpt":"以前、軽量 Web サーバ Nginx を CentOS にインストールしました。 Nginx - CentOS にインストール（ソースビルド）！ しかし、ログローテーションの設定をしていなかったため、知らないうちにログが肥大化していました。（幸い、サーバにはまだ影響が出ていませんでしたが） 以下、Nginx のログをログローテーションする設定についてです。 0. 前提条件 OS は CentOS 6.3(32bit) を想定。（ディストリビューションが異なってもそれほど違いはないかと思う） cron による処理ではなく logrotate による処理を行う。 CentOS に logrotate がインストール済みで、 /etc/cron.daily で毎日作動するような設定になっている。 1. 事前情報 まず、 CentOS のlogrotate について、以下のことを理解しておく。 設定ファイル /etc/logrotate.conf が /etc/logrotate.d ディレクトリ内の各種設定ファイルをインクルードする設定になっている。 全てに共通する設定は /etc/logrotate.conf に記述しておけばよい。 以下は当方の /etc/logrotate.conf。（設定項目の説明は後述） File: /etc/logrotate.conf 1...","categories": ["サーバ構築"],
        "tags": ["CentOS","Nginx"],
        "url": "/2013/02/17/nginx-logrotation/",
        "teaser": null
      },{
        "title": "Ruby - Bundler で gem パッケージ作成！",
        "excerpt":"Ruby で gem パッケージを作成するには、 NewGem や Jeweler を使用する方法もあるようですが、今回は Bundler を使用する方法について記録してみました。 0. 前提条件 OS は Linux Mint 14 Nadia(64bit) を想定 Ruby 1.9.3-p385 を使用。 Git がインストール済みである。 試験的に作成する gem パッケージ名は test_gem とする。 今回は、テストについては考えない。（gem パッケージを作成することが今回の目的なので） 1. gem パッケージ Bundler インストール gem パッケージ Bundler が未インストールならインストールする。（大抵はインストール済みのはず） $ sudo gem install bundler 2. gem プロジェクト作成 次のようにして、適当なディレクトリで gem...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2013/02/19/ruby-gem-by-bundler/",
        "teaser": null
      },{
        "title": "Ruby - RSpec でテスト！",
        "excerpt":"Ruby でのテストについてですが、今回は RSpec でのテスト環境についてです。 RSpec は gem パッケージ作成時のテスト環境として使用するつもりです。 ちなみに、以前 Test, Minitest について簡単に記録しています。 Ruby - Test::Unit, Minitest::Unit でユニットテスト！ 0. 前提条件 OS は Linux Mint 14 Nadia(64bit) を想定。（OS やディストリビューションはこだわらないはず） Ruby 1.9.3-p385 を使用。 RSpec の導入から簡単なテスト実行までを説明する。 RSpec については現在勉強中なので、詳細はここでは説明しない。（後述の参考サイトを参照） 1. RSpec インストール gem パッケージ RSpec が未インストールならインストールする。 $ sudo gem install rspec $ rspec -v 2.12.2...","categories": ["プログラミング"],
        "tags": ["Ruby","テスト","RSpec"],
        "url": "/2013/02/21/ruby-test-by-rspec/",
        "teaser": null
      },{
        "title": "Tizen SDK - Linux Mint にインストール！",
        "excerpt":"Linux 系のモバイル用オープンソース OS である Tizen の SDK（開発ツール） を Linux Mint マシンにインストールし、エミュレータを動かしてみた際の記録です。 0. 前提条件 Linux Mint 14 Nadia(64bit) での作業を想定。 1. ファイルダウンロード Tizen SDK - Tizen Developers から該当のファイルを適当な場所にダウンロードする。 今回の環境(Linux Mint 64bit)では、Ubuntu 64bit 版 tizen-sdk-2.0-ubuntu64.bin を使用できる。 ちなみに、Tizen SDK をインストールするには、以下の最低スペックが必要のようだ。 CPU: Dual-Core 2 GHz 以上 RAM: 2 GB 以上 HDD 空き容量: 3 GB 以上...","categories": ["プログラミング"],
        "tags": ["LinuxMint","エミュレータ"],
        "url": "/2013/02/23/tizen-sdk-linuxmint/",
        "teaser": null
      },{
        "title": "MariaDB - Linux Mint にインストール（apt 使用）！",
        "excerpt":"MySQL から派生したオープンソースな RDBMS（リレーショナルDB管理システム）の MariaDB を Linux Mint にインストールしてみました。 元々オープンソースだった MySQL も Sun や Oracle に次々と買収され、そう遠くない将来にはオープンではなくなりそう（クローズドになりそう）なので。 MySQL のオリジナルコードの作者らによる開発なので、今までの MySQL とほとんど変わらない操作ができるのも一つの魅力です。 インストール方法は色々ありますが、今回は apt(deb パッケージ) を使用する方法でインストールしてみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。（Ubuntu は全く同じ） 但し、Linux Mint (Ubuntu) のバージョンが異なると、コードネーム（以下の quantal の部分）が異なるので注意。 また、Debian も同様の設定になる。（ubuntu -&gt; debian, quantal -&gt; wheezy のようにして） インストールする MariaDB は開発版（10.0 系）ではなく安定版（5.5...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","LinuxMint"],
        "url": "/2013/02/25/mariadb-linuxmint-by-apt/",
        "teaser": null
      },{
        "title": "MariaDB - CentOS にインストール（yum 使用）！",
        "excerpt":"MySQL から派生したオープンソースな RDBMS（リレーショナルDB管理システム）の MariaDB を CentOS にインストールしてみました。 インストール方法は色々ありますが、今回は yum を使用する方法でインストールしてみました。 0. 前提条件 CentOS 6.3 (32bit) での作業を想定。（Redhat 系は同じ） インストールする MariaDB は開発版（10.0 系）ではなく安定版（5.5 系）とする。 MySQL はインストールされていない（綺麗にアンインストール済みである）。（MariaDB と衝突するので） 作業は root ユーザで行った。 1. リポジトリ追加設定 リポジトリ追加設定を行う。 リポジトリ設定ファイル（ファイル名は /etc/yum.repos.d/MariaDB.repo とした）を以下の内容で作成する。 （内容は自分の環境に合わせる - こちら を参考に） 以下の enabled=0 は、普段はリポジトリを無効にする設定。（インストール時にリポジトリを指定するために） File: /etc/yum.repos.d/MariaDB.repo 1 2 3 4 5 6 [mariadb]...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","CentOS"],
        "url": "/2013/02/27/mariadb-centos-by-yum/",
        "teaser": null
      },{
        "title": "2013年2月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 11,976 77.5698 Mac OS 1,777 11.5098 Ubuntu Linux 799 5.1752 Linux 705 4.5664 unknown 82 0.5311 Android 54 0.3498 RedHat Linux 15 0.0972 FreeBSD 14 0.0907 Fedora Linux 5 0.0324 PalmOS 4 0.0259 Linux Mint 3 0.0194 Solaris 2 0.0130 SuSE Linux 2...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/03/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby 2.0.0-p0 ソースインストール！",
        "excerpt":"普段、当方はメインで使用する環境の Ruby はソースをビルドしてインストールしています。 （サブで使用するバージョンは rbenv を使用しています） 過去にも同様の記事は公開してますが、 Ruby が 2.0.0 とメジャーバージョンアップ（グレードアップ？）したので、初心に戻って Ruby をソースをビルドしてインストール手順を記録しておきます。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Linux ディストリビューションやバージョンは、特に問わないはず。Windows は未確認。 Ruby 1.9.3-p392 が既にソースビルドによりインストール済み。 （インストール済みのバージョンは問わない） 当然、 Ruby 未インストールならそれでもよいが、必要なパッケージ(yaml 等)があらかじめインストールされていないと、インストールには成功しても機能しないものがあるかも知れない。 ビルド・インストール作業は一般ユーザで行う。（スーパーユーザになって作業してもよい） 1. Ruby 旧バージョンのアンインストール ソースをビルドしてインストールしている古いバージョンの Ruby （今回の場合 1.9.3-p392）をアンインストールする。 （当方の場合、ソースは /usr/local/src に展開している。） $ cd /usr/local/src/ruby-1.9.3-p392 $ cat .installed.list |...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2013/03/02/ruby-2-0-0-install-by-src/",
        "teaser": null
      },{
        "title": "Ruby - 太陽黄経計算！",
        "excerpt":"グレゴリオ暦（Y年m月d日 H時M分S秒）から太陽の黄経を計算する Ruby スクリプトの紹介です。 太陽黄経とは、二十四節気の計算や旧暦の計算に使用する天球上の太陽の経度のことです。 当然、地球の公転軌道が真円でないため、単純な計算にはなりません。 天文学における摂動という概念も出てきます。（力学における摂動は異なります） 今回紹介するのは、当方サイトの旧暦計算等で使用しているスクリプトから太陽黄経計算部分のみ抜粋した形となっています。 【2016-06-09 追記】 RubyGems ライブラリ mk_calendar - RubyGems.org（or komasaru/mk_calendar - GitHub） を作成しました。 多少の改修を施したということもあり、 komasaru/Calendar · GitHub で公開していた Ruby スクリプトは削除しました。 【追記ここまで】 0. 前提条件 Linux Mint 14 Nadia (64bit), Ruby 1.9.3-p392 で作成、 1.9.3-p392, 2.0.0-p0 で動作確認。 1. 概要 太陽黄経を計算する大まかな流れは以下のとおり。 グレゴリオ暦からユリウス通日を計算。 ユリウス通日については、過去記事もご参考に。-&gt; * 日数計算の方法！ - mk-mode BLOG...","categories": ["プログラミング"],
        "tags": ["Ruby","カレンダー"],
        "url": "/2013/03/04/ruby-longitude-sun/",
        "teaser": null
      },{
        "title": "Ruby - 月黄経計算！",
        "excerpt":"前回は、グレゴリオ暦（Y年m月d日 H時M分S秒）から太陽の黄経を計算する Ruby スクリプトの紹介しました。 Ruby - 太陽黄経計算！ 今回は、同様にグレゴリオ暦（Y年m月d日 H時M分S秒）から月の黄経を計算する Ruby スクリプトの紹介です。 月黄経とは、旧暦の計算等に使用する天球上の月の経度のことです。 当然、地球・月の公転軌道が真円でないため、単純な計算にはなりません。 天文学における摂動という概念も出てきます。（力学における摂動は異なります） 今回紹介するのは、当方サイトの旧暦計算等で使用しているスクリプトから月黄経計算部分のみ抜粋した形となっています。 【2016-06-09 追記】 RubyGems ライブラリ mk_calendar - RubyGems.org（or komasaru/mk_calendar - GitHub） を作成しました。 多少の改修を施したということもあり、 komasaru/Calendar · GitHub で公開していた Ruby スクリプトは削除しました。 【追記ここまで】 0. 前提条件 Linux Mint 14 Nadia (64bit), Ruby 1.9.3-p392 で作成、 1.9.3-p392, 2.0.0-p0 で動作確認。 1. 概要 月黄経を計算する大まかな流れは以下のとおり。...","categories": ["プログラミング"],
        "tags": ["Ruby","カレンダー"],
        "url": "/2013/03/06/ruby-longitude-moon/",
        "teaser": null
      },{
        "title": "Ruby - 月齢計算！",
        "excerpt":"前回、前々回と、グレゴリオ暦（Y年m月d日 H時M分S秒）から太陽・月の黄経を計算する Ruby スクリプトの紹介しました。 Ruby - 太陽黄経計算！ Ruby - 月黄経計算！ 今回は、グレゴリオ暦（Y年m月d日 H時M分S秒）から月齢を計算する Ruby スクリプトの紹介です。 月齢とは、朔（新月）からの経過日数のことです。 当然、地球・月の公転軌道が真円でないため、単純な計算にはなりません。 天文学における摂動という概念も出てきます。（力学における摂動は異なります） 今回紹介するのは、当方サイトの旧暦計算等で使用しているスクリプトから月齢計算部分のみ抜粋した形となっています。 【2016-06-10 追記】 RubyGems ライブラリ mk_calendar - RubyGems.org（or komasaru/mk_calendar - GitHub） を作成しました。 多少の改修を施したということもあり、 komasaru/Calendar · GitHub で公開していた Ruby スクリプトは削除しました。 【追記ここまで】 0. 前提条件 Linux Mint 14 Nadia (64bit), Ruby 1.9.3-p392 で作成、 1.9.3-p392, 2.0.0-p0 で動作確認。...","categories": ["プログラミング"],
        "tags": ["Ruby","カレンダー"],
        "url": "/2013/03/08/ruby-moonage/",
        "teaser": null
      },{
        "title": "C++ - ラグランジュ補間！",
        "excerpt":"何組かの x, y データが与えられ、これらの点全てを通る補間多項式を求める方法に「ラグランジュ補間」というものがあります。 以下、一部 \\(\\TeX\\) で記載。 以下、C++ によるサンプルソースです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 ラグランジュ補間そのものについての詳細は割愛。 1. C++ ソース作成 File: interpolate_lagrange.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/03/10/cpp-interpolate-lagrange/",
        "teaser": null
      },{
        "title": "Ruby - ラグランジュ補間！",
        "excerpt":"前回は、C++ による「ラグランジュ補間」のアルゴリズムを紹介しました。 C++ - ラグランジュ補間！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 1.9.3-p385 を使用。 ラグランジュ補間そのものについての詳細は割愛。 1. Ruby スクリプト作成 File: interpolate_lagrange.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/03/11/ruby-interpolate-lagrange/",
        "teaser": null
      },{
        "title": "C++ - ニュートン補間！",
        "excerpt":"何組かの x, y データが与えられ、これらの点全てを通る補間多項式を求める方法に「ニュートン補間」というものがあります。 先日は「ラグランジュ補間」について紹介しました。 C++ - ラグランジュ補間！ 以下、一部 \\(\\TeX\\) で記載。 アルゴリズムとしては、係数（差分商）を求め、求まった多項式から補間点を算出していく形になる。 以下、C++ によるサンプルソースです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 ニュートン補間そのものについての詳細は割愛。 1. C++ ソース作成 File: interpolate_newton.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/03/13/cpp-interpolate-newton/",
        "teaser": null
      },{
        "title": "Ruby - ニュートン補間！",
        "excerpt":"前回は、C++ による「ニュートン補間」のアルゴリズムを紹介しました。 C++ - ニュートン補間！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 ニュートン補間そのものについての詳細は割愛。 1. Ruby スクリプト作成 File: interpolate_newton.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/03/14/ruby-interpolate-newton/",
        "teaser": null
      },{
        "title": "Ruby - 月相計算！",
        "excerpt":"少し前に、グレゴリオ暦（Y年m月d日 H時M分S秒）から太陽・月の黄経、月齢を計算する Ruby スクリプトの紹介しました。 Ruby - 太陽黄経計算！ Ruby - 月黄経計算！ Ruby - 月齢計算！ 今回は、グレゴリオ暦（Y年m月d日 H時M分S秒）から月相（月の満ち欠け）を計算する Ruby スクリプトの紹介です。 月相は月齢と連動はしますが、正確には一致しません。 月の公転軌道が真円でないからです。 より正確に月相を計算するには太陽と月の黄経の差から計算します。 今回紹介するのは、当方サイトの旧暦計算等で使用しているスクリプトから月相計算部分のみ抜粋した形となっています。 ですが、実際には太陽黄経と月黄経が求まれば簡単に計算できるものであります。 0. 前提条件 Linux Mint 14 Nadia (64bit), Ruby 2.0.0-p0 で作成・動作確認。 1. 概要 まず月相は、月の黄経から太陽の黄経を引いた値(0 以上 360 未満の値)を 0 から 27 の整数値に換算したものである。 黄経差月相呼び名 0 °0新月（朔） 90 °7上弦 180 °14満月（望） 270...","categories": ["プログラミング"],
        "tags": ["Ruby","カレンダー"],
        "url": "/2013/03/16/ruby-moonphase/",
        "teaser": null
      },{
        "title": "C++ - 多桁計算！",
        "excerpt":"通常、Ｃ言語等では整数型で扱える数値を超える値の加減乗除はそのままでは計算不可能です。 今回は、データ型を超える整数の加減乗除の方法についてです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 また、当方の環境で扱える int 型、 long 型の範囲は以下のとおり。 int : -2,147,483,648 〜 2,147,483,647 long : -9,223,372,036,854,775,808 〜 9,223,372,036,854,775,807 1. 多桁計算について 加算・減算・乗算・除算ともに数値を指定の桁数で区切って配列として扱って計算する。 配列のサイズは使用環境に合わせて設定するが、当方の環境の場合、 int 型は -2147483648 〜 2147483647 が扱える範囲なので、配列要素１つで８桁扱うようにする。 あとは、筆算をするように計算していけばよい。 イメージは以下の図のとおり。 また、配列１つで扱える数字を「ショート」、配列２つ以上で扱う数字を「ロング」ということにしている。 加算・・・下位の配列から加算していき、指定の桁数をあふれたらその分を除去し１つ上位に加算していく。 減算・・・下位の配列から減算していき、結果が負になったら上位から１借りて加算する。 乗算・・・加算同様、下位の配列から乗算していき、指定の桁数をあふれたらその分を除去し１つ上位に加算していく。 除算・・・上位の配列から除算していき、余りが発生したらその分を１つ下位へ加算していく。 ちなみに、乗算が何万桁以上になる場合は、この方法ではなく「Karatsuba法」や「Toom-Cook法」や「FFT（高速フーリエ変換）」を使うのが一般的なようだ。 2. C++ ソース作成...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/03/18/cpp-calc-big-digits/",
        "teaser": null
      },{
        "title": "Ruby - 多桁計算！",
        "excerpt":"前回は、C++ による「多桁計算」のアルゴリズムを紹介しました。 C++ - 多桁計算！ 今日は、同じアルゴリズムを Ruby で実現してみました。 Ruby では桁数（整数型の範囲）をあまり気にしなくても、メモリの許される限り計算できますが、それでも都合が悪いこともあるでしょうし・・・・ アルゴリズムについては、上記リンクの記事を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下の通りです。 File: calc_big_digits.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/03/19/ruby-calc-big-digits/",
        "teaser": null
      },{
        "title": "C++ - 円周率計算（マチンの公式）！",
        "excerpt":"先日は、コンピュータで大きな桁数を計算する概念・アルゴリズムを紹介しました。 C++ - 多桁計算！ 今回は、その概念を応用して円周率 \\(\\pi\\) を計算してみました。 使用した公式は、マチン(Machin)の公式です。 当然、プログラミン言語そのものが保有している三角関数は使用しません。級数展開して計算します。（多桁の円周率計算では、全く無意味ですから） 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 多桁計算で使用する1つの配列のサイズは8桁としている。 （当方の環境で扱える int 型の範囲は -2,147,483,648 〜 2,147,483,647 であることから） 1. マチン(Machin)の公式について 数式が多いので \\(\\TeX\\) で記載。 ちなみに、\\(\\tan ^{-1} = \\arctan\\) と置き換えてもよい。 なお、ここではマチンの公式の証明はしない。（証明方法は何種類かあります） また、上記の方法で算出した計算項数では、収束の速い方は無駄に多く計算していることになる。 それを防ぎたかったら、各 Arctan 毎に必要な項数分だけ計算して、最後に合算する方法を取ると良いだろう。 2. C++ ソース作成 例として、以下のようにソースを作成した。 計算する桁数は、小数点以下 1,000...","categories": ["プログラミング","数学"],
        "tags": ["C言語","円周率"],
        "url": "/2013/03/21/cpp-calc-pi-with-machin/",
        "teaser": null
      },{
        "title": "Ruby - 円周率計算（マチンの公式）！",
        "excerpt":"前回は、C++ による「マチンの公式による円周率計算」のアルゴリズムを紹介しました。 C++ - 円周率計算（マチンの公式）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズム等については、上記リンクの記事を参照してください。 実際、大体同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 File: calc_pi_machin.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["プログラミング","数学"],
        "tags": ["Ruby","円周率"],
        "url": "/2013/03/22/ruby-calc-pi-with-machin/",
        "teaser": null
      },{
        "title": "C++ - ネイピア数（自然対数の底）e 計算！",
        "excerpt":"以前、コンピュータで大きな桁数を計算する概念・アルゴリズムを紹介しました。 C++ - 多桁計算！ 今回は、ネイピア数（自然対数の底） \\(e\\) を多桁計算するアルゴリズムについてです。 当然、プログラミン言語そのものが保有している関数は使用しません。級数展開して計算します。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 また、当方の環境で扱える int 型の範囲は -2,147,483,648 〜 2,147,483,647 であることから、 多桁計算で使用する1つの配列のサイズは8桁としている。 1. 計算概要 ネイピア数 \\(e\\) をマクローリン展開（テイラー展開において \\(x=1\\) としたもの）すると、 \\(\\displaystyle e = 1 + \\frac{1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\cdots + \\frac{1}{n!} +...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/03/24/cpp-calc-napier/",
        "teaser": null
      },{
        "title": "Ruby - ネイピア数（自然対数の底）e 計算！",
        "excerpt":"前回は、C++ による「ネイピア数（自然対数の底） \\(e\\) 計算」のアルゴリズムを紹介しました。 C++ - ネイピア数（自然対数の底）e 計算！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、大体同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下のとおり。 File: calc_napier.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/03/25/ruby-calc-napier/",
        "teaser": null
      },{
        "title": "C++ - 階乗の多桁計算！",
        "excerpt":"以前、コンピュータで大きな桁数を計算する概念・アルゴリズムを紹介しました。 C++ - 多桁計算！ 今回は、階乗(n!)を多桁計算するアルゴリズムについてです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 また、当方の環境で扱える int 型の範囲は -2,147,483,648 〜 2,147,483,647 であることから、 多桁計算で使用する1つの配列のサイズは8桁としている。 1. 計算概要 1! から 49! までをそれぞれ 64 桁まで計算する。 ループ処理を行うが、実際には順次１つ前の計算結果に乗算していく形となる。 ちなみに、50! は 65 桁になってしまうので、今回は 49! までとしているが、桁数を増やせば対応可能。 2. C++ ソース作成 例として、以下のようにソースを作成した。 ソース内の計算個数 N を変更し、計算桁数 L を格納可能な桁数に変更すれば、任意の個数・桁数を計算可能。 仮に、N...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/03/27/cpp-calc-factorial/",
        "teaser": null
      },{
        "title": "Ruby - 階乗の多桁計算！",
        "excerpt":"前回は、C++ による「階乗(n!)の多桁計算」のアルゴリズムを紹介しました。 C++ - 階乗の多桁計算！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズムについては、上記リンクの記事を参照してください。 実際、大体同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 File: calc_factorial.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/03/28/ruby-calc-factorial/",
        "teaser": null
      },{
        "title": "Ruby - Twitter API で画像添付ツイート！",
        "excerpt":"Ruby で Twitter API を使用して、画像を添付したツイートを行う方法についてです。 普段使用している Ruby スクリプトから抜粋した形です。 0. 前提条件 Ruby 2.0.0-p0 で作成・動作確認。 RubyGems twitter, oauth を導入済み。 OAuth 認証のための Customer Key, Customer Secret, Access Token, Access Token Secret を取得済み。 OAuth 認証については、今回は説明しません。当ブログ過去記事やネット等でお調べください。 1. Ruby スクリプト作成 作成した Ruby スクリプトは以下の通り。 OAuth 認証の設定をして画像ファイルを指定してツイートするだけ。 当然、ツイート文＋画像ファイルのURLを合わせた文字数が140字を超えると例外が発生する。 require 'twitter' require 'oauth' # Consumer key, Secretの設定 CONSUMER_KEY =...","categories": ["SNS","プログラミング"],
        "tags": ["Ruby","Twitter"],
        "url": "/2013/03/30/ruby-twitter-api-tweet-with-image/",
        "teaser": null
      },{
        "title": "2013年3月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 11,313 74.9007 Mac OS 1,927 12.7582 Ubuntu Linux 942 6.2368 Linux 724 4.7934 unknown 113 0.7481 Android 47 0.3112 FreeBSD 15 0.0993 Fedora Linux 9 0.0596 Solaris 7 0.0463 SuSE Linux 2 0.0132 Debian GNU/Linux 1 0.0066 Linux Mint 1 0.0066 PalmOS 1...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/04/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - 円周率計算（Klingenstierna の公式）！",
        "excerpt":"以前、円周率をマチンの公式で多桁計算する概念、C++ アルゴリズムを紹介しました。 C++ - 円周率計算（マチンの公式）！ 今回は、マチンの公式同様 \\(\\arctan\\)系の公式である「Klingenstierna の公式」を使用して、円周率 \\(\\pi\\) を計算してみました。 当然、プログラミン言語そのものが保有している三角関数は使用しません。級数展開して計算します。（多桁の円周率計算では、全く無意味ですから。但し、常用対数は影響がないので関数を使用） 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 多桁計算で使用する1つの配列のサイズは8桁としている。 （当方の環境で扱える int 型の範囲は -2,147,483,648 〜 2,147,483,647 であることから） 指定する桁数は int 型の範囲としているが、あまり大きいと計算に膨大な時間を要するので注意！ 1. Klingenstierna の公式について マチンの公式同様 Arctan 系の公式であり、考え方は同じ。 数式が多いので \\(\\TeX\\) で記載。 ちなみに、\\(\\tan ^{-1} = \\arctan\\) と置き換えてもよい。 なお、ここでは Klingenstierna...","categories": ["プログラミング","数学"],
        "tags": ["C言語","円周率"],
        "url": "/2013/04/02/cpp-calc-pi-with-klingenstierna/",
        "teaser": null
      },{
        "title": "Ruby - 円周率計算（Klingenstierna の公式）！",
        "excerpt":"前回は、C++ による「Klingenstierna の公式による円周率計算」のアルゴリズムを紹介しました。 C++ - 円周率計算（Klingenstierna の公式）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズム等については、上記リンクの記事を参照してください。 実際、大体同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 File: calc_pi_klingenstierna.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20...","categories": ["プログラミング","数学"],
        "tags": ["Ruby","円周率"],
        "url": "/2013/04/03/ruby-calc-pi-with-klingenstierna/",
        "teaser": null
      },{
        "title": "C++ - 円周率計算（オイラーの公式）！",
        "excerpt":"今まで、円周率をマチンの公式や Klingensitierna の公式で多桁計算する概念、C++ アルゴリズムを紹介しました。 C++ - 円周率計算（マチンの公式）！ C++ - 円周率計算（Klingenstierna の公式）！ 今回も、同様に \\(\\arctan\\)系の公式である「オイラーの公式」を使用して、円周率 \\(\\pi\\) を計算してみました。 当然、プログラミン言語そのものが保有している三角関数は使用しません。級数展開して計算します。（多桁の円周率計算では、全く無意味ですから。但し、常用対数は影響がないので関数を使用） 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 多桁計算で使用する1つの配列のサイズは8桁としている。 （当方の環境で扱える int 型の範囲は -2,147,483,648 〜 2,147,483,647 であることから） 指定する桁数は int 型の範囲としているが、あまり大きいと計算に膨大な時間を要するので注意！ 1. オイラー(Euler)の公式について Arctan 系の公式なので、マチンの公式等と考え方は同じ。 数式が多いので \\(\\TeX\\) で記載。 ちなみに、\\(\\tan ^{-1} = \\arctan\\)...","categories": ["プログラミング","数学"],
        "tags": ["C言語","円周率"],
        "url": "/2013/04/05/cpp-calc-pi-with-euler/",
        "teaser": null
      },{
        "title": "Ruby - 円周率計算（オイラーの公式）！",
        "excerpt":"前回は、C++ による「オイラーの公式による円周率計算」のアルゴリズムを紹介しました。 C++ - 円周率計算（オイラーの公式）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズム等については、上記リンクの記事を参照してください。 実際、大体同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 File: calc_pi_euler.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["プログラミング","数学"],
        "tags": ["Ruby","円周率"],
        "url": "/2013/04/06/ruby-calc-pi-with-euler/",
        "teaser": null
      },{
        "title": "C++ - 円周率計算（オイラーの公式(2)）！",
        "excerpt":"今まで、円周率をマチンの公式や Klingensitierna の公式で多桁計算する概念、C++ アルゴリズムを紹介しました。 C++ - 円周率計算（マチンの公式）！ C++ - 円周率計算（Klingenstierna の公式）！ C++ - 円周率計算（オイラーの公式）！ 今回も、同様に Arctan 系の公式である「オイラーの公式(2)」を使用して、円周率 \\(\\pi\\) を計算してみました。 ちなみに、正確には「オイラーの公式(2)」という名前の公式ではありません。数ある「オイラーの公式」のうち、今回当方が紹介するのが２つ目という意味の (2) です。 当然、プログラミン言語そのものが保有している三角関数は使用しません。級数展開して計算します。（多桁の円周率計算では、全く無意味ですから。但し、常用対数は影響がないので関数を使用） また、Arctan 系公式は項数や係数が異るだけなので、１つのプログラムで組むこととしました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 多桁計算で使用する1つの配列のサイズは8桁としている。 （当方の環境で扱える int 型の範囲は -2,147,483,648 〜 2,147,483,647 であることから） 指定する桁数は int 型の範囲としているが、あまり大きいと計算に膨大な時間を要するので注意！ 1. オイラー(Euler)の公式(2)について...","categories": ["プログラミング","数学"],
        "tags": ["C言語","円周率"],
        "url": "/2013/04/08/cpp-calc-pi-with-euler-2/",
        "teaser": null
      },{
        "title": "Ruby - 円周率計算（オイラーの公式(2)）！",
        "excerpt":"前回は、C++ による「オイラーの公式(2)による円周率計算」のアルゴリズムを紹介しました。 C++ - 円周率計算（オイラーの公式(2)）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 アルゴリズム等については、上記リンクの記事を参照してください。 Arctan 系公式による計算は項数・係数が異るだけなので、今回は汎用化した形にしました。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 File: calc_pi_arctan_old.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21...","categories": ["プログラミング","数学"],
        "tags": ["Ruby","円周率"],
        "url": "/2013/04/09/ruby-calc-pi-with-euler-2/",
        "teaser": null
      },{
        "title": "C++ - 円周率計算（Arctan 系公式）！",
        "excerpt":"今まで、円周率をマチンの公式や Klingensitierna の公式、オイラーの公式で多桁計算する概念、C++ アルゴリズムを紹介しました。 C++ - 円周率計算（マチンの公式）！ C++ - 円周率計算（Klingenstierna の公式）！ C++ - 円周率計算（オイラーの公式）！ C++ - 円周率計算（オイラーの公式(2)）！ Arctan 系の公式はこれら以外に多数（理論上無数に）ありますが、今回は４つまとめて紹介します。 「Gauß の公式」、「Störmer の公式」２つ、「高野喜久雄の公式」です。 当然、プログラミン言語そのものが保有している三角関数は使用しません。級数展開して計算します。（多桁の円周率計算では、全く無意味ですから。但し、常用対数は影響がないので関数を使用） また、Arctan 系公式は項数や係数が異るだけなので、１つのプログラムで公式を選択できるようにしています。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 多桁計算で使用する1つの配列のサイズは8桁としている。 （当方の環境で扱える int 型の範囲は -2,147,483,648 〜 2,147,483,647 であることから） 指定する桁数は int 型の範囲としているが、あまり大きいと計算に膨大な時間を要するので注意！ 1. 公式について...","categories": ["プログラミング","数学"],
        "tags": ["C言語","円周率"],
        "url": "/2013/04/11/cpp-calc-pi-with-arctan/",
        "teaser": null
      },{
        "title": "Ruby - 円周率計算（Arctan 系公式）！",
        "excerpt":"前回は、C++ による「Arctan 系公式による円周率計算」の「汎用化」したアルゴリズムを紹介しました。 C++ - 円周率計算（Arctan 系公式）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 と言っても、「Ruby - 円周率計算（オイラーの公式(2)）！」のアルゴリズムに追加しただけの形になっていますが。。。 アルゴリズム等については、上記リンクの記事を参照してください。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 File: calc_pi_arctan.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["プログラミング","数学"],
        "tags": ["Ruby","円周率"],
        "url": "/2013/04/12/ruby-calc-pi-with-arctan/",
        "teaser": null
      },{
        "title": "C++ - 円周率計算（Arctan 系公式（その２））",
        "excerpt":"今まで、円周率を Arctan 系の公式で多桁計算する概念、C++ アルゴリズムを紹介してきました。 C++ - 円周率計算（マチンの公式）！ C++ - 円周率計算（Klingenstierna の公式）！ C++ - 円周率計算（オイラーの公式）！ C++ - 円周率計算（オイラーの公式(2)）！ C++ - 円周率計算（Arctan 系公式）！ ただ、上記の過去の記事で紹介した方法は、一度級数展開したものをまとめ直した形の式にしていたため、収束の速い項も収束の遅い項と同じ計算量となっていました。 要は、計算しなくてもよい（計算しても意味のない）部分ままで計算していたことになります。 そこで、級数展開後にまとめずに公式の Arctan 毎に必要な分だけ計算する方法に変更してみました。 当然、プログラミン言語そのものが保有している三角関数は使用しません。級数展開して計算します。（多桁の円周率計算では、全く無意味ですから。但し、常用対数は影響がないので関数を使用） 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 多桁計算で使用する1つの配列のサイズは8桁としている。 （当方の環境で扱える int 型の範囲は -2,147,483,648 〜 2,147,483,647 であることから） 指定する桁数は int 型の範囲としているが、あまり大きいと計算に膨大な時間を要するので注意！...","categories": ["プログラミング","数学"],
        "tags": ["C言語","円周率"],
        "url": "/2013/04/14/cpp-calc-pi-with-arctan-2/",
        "teaser": null
      },{
        "title": "Ruby - 円周率計算（Arctan 系公式（その２））",
        "excerpt":"前回、円周率を Arctan 系の公式で多桁計算する C++ アルゴリズムで、各項の収束速度の速い項を無駄に計算していたのを改良したアルゴリズムを紹介しました。 C++ - 円周率計算（Arctan 系公式（その２））！ 今回は、Ruby で同じアルゴリズムを実現してみました。 アルゴリズム等については、上記リンクの記事を参照してください。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 File: calc_pi_arctan_2.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["プログラミング","数学"],
        "tags": ["Ruby","円周率"],
        "url": "/2013/04/15/ruby-calc-pi-with-arctan-2/",
        "teaser": null
      },{
        "title": "Fortran - 円周率計算（Arctan 系公式）",
        "excerpt":"これまで、円周率を Arctan 系の公式で多桁計算する C++, Ruby アルゴリズムを紹介しました。 C++ - 円周率計算（Arctan 系公式（その２））！ Ruby - 円周率計算（Arctan 系公式（その２））！ （上記のリンクの記事より以前にも同様な記事を紹介していますが、改良前のもので若干計算効率が悪いです） 今回は、科学技術計算用プログラミング言語 Fortran95 で同じアルゴリズムを実装してみました。 Arctan 系公式による計算アルゴリズム等については、上記リンクの過去記事を参照してください。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 GNU Fortran (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 を使用。 1. Fortran ソース作成 File: calc_pi_arctan.f95 1 2 3 4 5 6 7 8 9 10 11...","categories": ["プログラミング","数学"],
        "tags": ["Fortran","円周率"],
        "url": "/2013/04/17/fortran-calc-pi-with-arctan/",
        "teaser": null
      },{
        "title": "C++ - 多桁計算（その２）！",
        "excerpt":"以前、多桁（データ型を超える整数）の加減乗除アルゴリズムを C++ に実装してみました。 C++ - 多桁計算！ 今回は、少し改良してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 また、当方の環境で扱える int 型、 long 型の範囲は以下のとおり。 int : -2,147,483,648 〜 2,147,483,647 long : -9,223,372,036,854,775,808 〜 9,223,372,036,854,775,807 1. 多桁計算について 今回も「筆算方式」での計算アルゴリズムである。 基本的な考え方は過去記事に記載のとおりだが、今回は、 配列のインデックスを下位から取るようにしている。 汎用性を考えて、関数呼び出し時の引数には配列のポインタの他に配列のサイズを渡すようにしている。 また、乗算・除算時の乗数・除数は1つ（1個の配列）にしている。 ちなみに、乗算・除算が何万桁以上になる場合は、今回のような筆算形式ではなく別の高速に処理できるアルゴリズムを使用するようですが、今回は実装しない。 2. C++ ソース作成 例として、以下のようにソースを作成した。 なお、符号や除算時の小数点以下は考慮していない。 また、テストなので計算に使用する数値は乱数により生成している。 File: calc_big_digits_2.cpp...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/04/19/cpp-calc-big-digits-2/",
        "teaser": null
      },{
        "title": "Ruby - 多桁計算（その２）！",
        "excerpt":"前回は、C++ による「多桁計算」のアルゴリズム（筆算式）の改良版を紹介しました。 C++ - 多桁計算（その２）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 Ruby では桁数（整数型の範囲）をあまり気にしなくても、メモリの許される限り計算できますが、それでも都合が悪いこともあるでしょうし… アルゴリズムについては、上記リンクの過去記事等を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 File: calc_big_digits_2.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/04/20/ruby-calc-big-digits-2/",
        "teaser": null
      },{
        "title": "C++ - 多桁乗算（標準（筆算）法）！",
        "excerpt":"以前、多桁（データ型を超える整数）の加減乗除アルゴリズムを C++ に実装してみました。 C++ - 多桁計算！ C++ - 多桁計算（その２）！ ただ、乗算は一方が多桁でもう一方が小さい桁数と限定していました。 今回は、「標準（筆算）方式」による多桁同士の乗算アルゴリズムを C++ で実装してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 また、当方の環境で扱える int 型の範囲は以下のとおり。 int : -2,147,483,648 〜 2,147,483,647 1. 多桁計算について 「筆算方式」の考え方は、小学校で習ったとおりであるが、今回は配列は下位から取るようにしている。 2. C++ ソース作成 例として、以下のようにソースを作成した。概要は以下のとおり。 上記の説明では1個の配列で4桁を扱うようにしているが、以下のソースでは1個の配列で1桁を扱うようにしている。 計算可能な桁数は2のべき乗桁としている。 （後に筆算方式以外のアルゴリズムを利用することを考えて） 繰り上がり処理は、最後にまとめて行う（但し、非常に大きい乗算桁数（数千万桁以上）では桁あふれを起こすので注意） 計算に使用する被乗数・乗数は、手入力は困難なため、乱数を使用している。 冒頭の // #define TEST は、乗算回数をカウントしたり、処理時間を計測するテストを行うため。...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/04/22/cpp-big-multiply-normal/",
        "teaser": null
      },{
        "title": "Ruby - 多桁乗算（標準（筆算）法）！",
        "excerpt":"前回は、C++ による「多桁同士の乗算（筆算法）」のアルゴリズムを紹介しました。 C++ - 多桁乗算（標準（筆算）法）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 Ruby では桁数（整数型の範囲）をあまり気にしなくても、メモリの許される限り計算できますが、それでも多桁同士の乗算では不都合でしょう。 アルゴリズムについては、上記リンクの過去記事等を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 スクリプト中の随所にあるテスト用コメントを解除すると、1ループあたりの乗算回数をカウントしたり、100 ループした場合の処理時間を計測するようになっている。 また、近い将来考えていることの準備として、計算可能な最大桁数の設定を2のべき乗桁にしている。 File: multiply_normal.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/04/23/ruby-big-multiply-normal/",
        "teaser": null
      },{
        "title": "C++ - 多桁乗算（Karatsuba 法）！",
        "excerpt":"先日、「標準（筆算）法」による多桁同士の乗算アルゴリズムを C++ に実装してみました。 C++ - 多桁乗算（標準（筆算）法）！ 今回は、「標準（筆算）法」より高速に乗算が可能な「Karatsuba 法」アルゴリズムを C++ で実装してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 また、当方の環境で扱える int 型の範囲は以下のとおり。 int : -2,147,483,648 〜 2,147,483,647 1. Karatsuba 法について 「Karatsuba 法」とは、ロシア人が考案した乗算アルゴリズムで、”Karatsuba” は日本語のように思えるが考案者の名前を英語化したものである。 そして、「Karatsuba 法」の概要は以下のとおり。（数式が多いので\\(\\TeX\\)で記載） 2. C++ ソース作成 例として、以下のようにソースを作成した。概要は以下のとおり。 １個の配列で１桁を扱う。 計算可能な桁数は 2 のべき乗桁としている。 （2 のべき乗以外の桁数にすると、ロジックが複雑になるため） 繰り上がり処理は、最後にまとめて行う（但し、非常に大きい乗算桁数では桁あふれを起こすので注意） 配列数が４個（桁数が４桁）になったら、標準（筆算）法による乗算を行う。...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/04/25/cpp-big-multiply-karatsuba/",
        "teaser": null
      },{
        "title": "Ruby - 多桁乗算（Karatsuba 法）！",
        "excerpt":"前回は、C++ による「多桁乗算（Karatsuba 法）」のアルゴリズムを紹介しました。 C++ - 多桁乗算（Karatsuba 法）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 Ruby では桁数（整数型の範囲）をあまり気にしなくても、メモリの許される限り計算できますが、それでも多桁同士の乗算では不都合になることもあるでしょう。 アルゴリズムについては、上記リンクの過去記事等を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 今回作成した Ruby ソースは以下の通り。 スクリプト中の随所にあるテスト用コメントを解除すると、1ループあたりの乗算回数をカウントしたり、100 ループした場合の処理時間を計測するようになっている。 また、近い将来考えていることの準備として、計算可能な最大桁数の設定を 2 のべき乗桁にしている。 File: multiply_karatsuba.rb 1 2 3 4 5 6 7 8 9 10...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/04/26/ruby-big-multiply-karatsuba/",
        "teaser": null
      },{
        "title": "C++ - 多桁乗算（Toom-Cook 法 (3-way)）！",
        "excerpt":"これまで、「標準（筆算）法」や「Karatsuba 法」による多桁同士の乗算アルゴリズムの C++ への実装を紹介しました。 C++ - 多桁乗算（標準（筆算）法）！ C++ - 多桁乗算（Karatsuba 法）！ 今回は、「Karatsuba 法」の上位にある「Toom-Cook 法」アルゴリズムを C++ で実装してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 1. Karatsuba 法について （数式が多いので \\(\\TeX\\) で記載） ちなみに、同程度の桁数同士で、３分割して考える方法を「Toom-Cook 法(3-way)」と言う。（３分割×２分割や４分割×４分割等の考え方もある） 2. C++ ソース作成 例として、以下のようにソースを作成した。概要は以下のとおり。 1個の配列で1桁を扱う。 計算可能な桁数は 3 のべき乗桁としている。 （3 のべき乗以外の桁数にすると、ロジックが複雑になるため） 繰り上がり処理は、最後にまとめて行う（但し、非常に大きい乗算桁数では桁あふれを起こすので注意） 配列数が9個（桁数が9桁）になったら、標準（筆算）法による乗算を行う。 （9個でなくてもよい。桁あふれしない程度で設定する） 計算に使用する被乗数・乗数は、手入力は困難なため、乱数を使用している。...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/04/29/cpp-big-multiply-toom-cook-3/",
        "teaser": null
      },{
        "title": "Ruby - 多桁乗算（Toom-Cook 法 (3-way)）！",
        "excerpt":"前回は、C++ による「多桁乗算（Toom-Cook 法 (3-way)）」のアルゴリズムを紹介しました。 C++ - 多桁乗算（Toom-Cook 法 (3-way)）！ 今日は、同じアルゴリズムを Ruby で実現してみました。 Ruby では桁数（整数型の範囲）をあまり気にしなくても、メモリの許される限り計算できますが、それでも多桁同士の乗算では不都合になることもあるでしょう。 アルゴリズムについては、上記リンクの過去記事等を参照してください。 実際、ほとんど同じです。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 スクリプト中の随所にあるテスト用コメントを解除すると、１ループあたりの乗算回数をカウントしたり、100 ループした場合の処理時間を計測するようになっている。 また、計算可能な最大桁数の設定を 3 のべき乗桁にしている。 File: multiply_toom_cook_3.rb 1 2 3 4 5 6 7 8 9 10 11...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/04/30/ruby-big-multiply-toom-cook-3/",
        "teaser": null
      },{
        "title": "2013年4月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 10,564 73.0921 Mac OS 1,826 12.6341 Linux 1,097 7.5901 Ubuntu Linux 799 5.5283 unknown 71 0.4912 Android 53 0.3667 Solaris 11 0.0761 FreeBSD 9 0.0623 RedHat Linux 9 0.0623 Debian GNU/Linux 6 0.0415 Linux Mint 2 0.0138 OpenBSD 2 0.0138 Wii 2 0.0138...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/05/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - 多倍長整数の大小比較！",
        "excerpt":"多桁（多倍長）整数同士の大小の比較についてです。 もちろん、プログラミング言語の整数型に収まるような大きさの整数ではなく、整数型で扱えないような大きな整数での話です。 多桁（多倍長）演算する場合、大抵は配列を使用します。今回も配列を使用した（よくある）方法を試してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 1. 考え方 整数の1桁を1個の配列をみなして考える。 今回は、符号は考慮しない。 通常、2つの整数のうち桁数が大きい方が大きな整数ではあるが、配列を使用しているため最上位の桁にゼロが格納されることもある。よって、それも考慮する。 つまり、9桁の 234567890 と10桁の 0123456789 の場合は、234567890 &gt; 0123456789 と判定できるようにするということ。 2. C++ ソース作成 File: compare_big_digits.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/05/02/cpp-compare-big-digits/",
        "teaser": null
      },{
        "title": "Ruby - 多倍長整数の大小比較！",
        "excerpt":"前回は、C++ による多桁（多倍長）整数同士の大小の比較について紹介しました。 C++ - 多倍長整数の大小比較！ 今回は、同じことを Ruby で試してみました。 Ruby では多倍長数はメモリの許す限り使用可能ですが、配列を使った考え方も必要になる局面もあると思います。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. 考え方 整数の1桁を1個の配列をみなして考える。 今回は、符号は考慮しない。 通常、2つの整数のうち桁数が大きい方が大きな整数ではあるが、配列を使用しているため最上位の桁にゼロが格納されることもある。よって、それも考慮する。 つまり、9桁の 234567890 と10桁の 0123456789 の場合は、234567890 &gt; 0123456789 と判定できるようにするということ。 2. Ruby スクリプト作成 File: compare_big_digits.rb 1 2 3 4 5 6 7 8 9 10 11...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/05/03/ruby-compare-big-digits/",
        "teaser": null
      },{
        "title": "C++ - 多倍長浮動小数点数の加減算！",
        "excerpt":"これまで多倍長整数の演算については話をしていましたが、今回は多倍長の浮動小数点同士の加減算について考えてみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 1. 考え方 整数部を 0 とする A = 0.123456789E5, B = 0.123456789E3 という浮動小数点を以下のように考える。（１桁を１個の配列で扱う場合） （べき指数部分を別の変数に持たせる考え方もある。その場合は、整数部を使用する考え方もできる） そして、計算結果格納用配列を Z[0], Z[1], …, Z[9] とする。 加算の場合、べき指数の大きい方に合わせる。 減算の場合は、被減数の方が大きいこと。（計算結果が負にならないこと） また、べき指数の小さい方の端数は処理しない。すなわち、切り捨てとする。（もう一方の数字が有効数字範囲外で不明のため、計算結果がどうなるか判別不能だから） 以下は、加算の場合。（減算も同様） べき指数の大きい方を結果配列に格納。 ２数のべき指数の差の部分を結果配列に格納。（直接加算処理を行わない部分） ２数の加算すべき桁の加算結果を配列に格納。 正規化（繰り上がり処理）を行う。 正規化（浮動小数点位置調整）を行う。 （ 0.099999999E5 となった場合 0.999999990E4 とするということ。今回の例ではこの処理を行なっても変化は無い。 また、小数点以下第１位は「4. 正規化（繰り上がり処理）」で繰り上がり処理を行なっていないので、この部分もここで処理。） 2. C++...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/05/05/cpp-add-big-float/",
        "teaser": null
      },{
        "title": "Ruby - 多倍長浮動小数点数の加減算！",
        "excerpt":"前回は、C++ による多倍長浮動小数点数同士の加減算について紹介しました。 C++ - 多倍長浮動小数点数の加減算！ 今回は、同じことを Ruby で試してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. 考え方 考え方は C++ 版と同じなので、「C++ - 多倍長浮動小数点数の加減算！」を参照のこと。 2. Ruby スクリプト作成 今回、 A - C &lt; 0 (A &lt; C) になることは想定していない。 File: add_big_float.rb 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/05/06/ruby-add-big-float/",
        "teaser": null
      },{
        "title": "Linux - cron で時報を鳴らす！",
        "excerpt":"Linux で cron を使用して時報（音）を鳴らす方法についてのメモです。 難しい内容でもありませんが、後学のために。。。 0. 前提条件 Linux Mint 14 Nadia (64bit) で動作確認。（Unix 系 OS なら同じはず） 音を鳴らすソフトは mpg321 を使用し、使用する音源は mp3 形式。 1. mpg321 インストール apt-get で mpg321 パッケージをインストールする。 （Synaptic パッケージマネージャでインストールしてもよい） $ sudo apt-get install mpg321 $ mpg321 --version mpg321 version 0.3.2. Copyright (C) 2001, 2002 Joe Drew, now maintained by...","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2013/05/09/linux-cron-play-chime/",
        "teaser": null
      },{
        "title": "Linux Mint - R インストール！",
        "excerpt":"Redhat 系ディストリビューションでの R（統計解析向けプログラミング言語）のインストール方法は、以前記録していました。 * Scientific Linux - R 言語環境構築！ - mk-mode BLOG GNU 系ディストリビューションでの R のインストール方法について記録を残していなかったので、記録しておきます。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定しているが、GNU 系ディストリビューション（Debian, Ubuntu 等）も同様だと思われる。 1. sources.list 編集 デフォルトでは apt でインストールできない。パッケージのダウンロード元を追加する設定が必要。 当記事執筆時点、日本国内に３つのミラーサイトがあるので、好みのサイトを sources.list で指定する。 （以下の３つのうちどれか１つ） File: /etc/apt/sources.list 1 2 3 deb http://essrc.hyogo-u.ac.jp/cran/bin/linux/ubuntu quantal/ deb http://cran.md.tsukuba.ac.jp/bin/linux/ubuntu quantal/ deb http://cran.ism.ac.jp/bin/linux/ubuntu...","categories": ["PC_Tips"],
        "tags": ["LinuxMint","R"],
        "url": "/2013/05/11/linuxmint-install-r/",
        "teaser": null
      },{
        "title": "Linux Mint - RStudio インストール！",
        "excerpt":"Redhat 系ディストリビューションでの R（統計解析向けプログラミング言語）の GUI ツール RStudio のインストール方法は、以前記録していました。 * Scientific Linux - RStudio インストール！ 今回は、GNU 系ディストリビューションでの RStudio のインストール方法についての記録です。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 R version 2.15.3 がインストール済み。 RStudio にはデスクトップ版とサーバ版があるが、デスクトップ版をインストールする。 1. ファイルダウンロード 「RStudio - Download」から環境にあったパッケージをダウンロードする。 今回は Linux Mint 14(64bit) なので “RStudio 0.97.449 - Debian 6+/Ubuntu 10.04+ (64-bit)” をダウンロードし、適当な場所に配置する。 （ダウンロードは以下のようにしてもよい。）...","categories": ["PC_Tips"],
        "tags": ["LinuxMint","R"],
        "url": "/2013/05/12/linuxmint-install-rstudio/",
        "teaser": null
      },{
        "title": "Octopress - Yaml で Psych エラー！",
        "excerpt":"Ruby 製静的ブログシステム Octopress でジェネレート（ rake generate ）時、Psych 関連のエラーが発生することがあります。 （ただし、一口に Psych エラーと言っても、エラーの原因は環境により異なるので、エラーメッセージをよく確認すること） 以下、原因と対策についてのメモです。 0. 前提条件 Linux Mint 14 Nadia(64bit) を使用。 Octopress 2.0.0 を使用。 Octopress で使用する Ruby(rbenv インストール) は 1.9.3-p194 である。 1. 現象 Octopress をジェネレートする際に発生するエラーは以下のとおり。 今回問題になるのは7行目以降。 $ rake generate ## Generating Site with Jekyll unchanged sass/screen.scss Configuration from /home/foo/octopress/_config.yml /home/foo/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/blankslate-3.1.2/lib/blankslate.rb:51: warning: undefining...","categories": ["ブログ"],
        "tags": ["Octopress","Ruby","Markdown"],
        "url": "/2013/05/14/octopress-yaml-psych-error/",
        "teaser": null
      },{
        "title": "C++ - フーリエ級数展開！",
        "excerpt":"今回は、「フーリエ級数展開」を C++ で実装してみました。 ちなみに、テイラー展開は以前紹介しています。 C++ - テイラー展開 ( exp(x) )！ C++ - テイラー展開 ( cos(x) )！ 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 1. フーリエ級数展開について（簡単に） （数式が多いので、一部 \\(\\TeX\\) で記載） フーリエ級数展開の基本概念は、19 世紀前半にフランスの数学者フーリエ（Fourier,1764-1830）が熱伝導問題の解析の過程で考え出したものであり、「任意の周期関数は三角関数の和で表される」というものである。 さらに、与えられた関数がフーリエ級数の部分和で近似されるとき、項数をいくら増やしていっても、不連続点の近傍で誤差が生じる。これを「ギップス現象」という。 以下は１つの簡単な例。 2. C++ ソース作成 t の範囲は \\(- \\pi \\sim \\pi\\) に限定している。 計算項数は N の値を変更して対応する。...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/05/16/cpp-expand-fourier-series/",
        "teaser": null
      },{
        "title": "Ruby - フーリエ級数展開！",
        "excerpt":"前回は、「フーリエ級数展開」を C++ で実装してみました。 C++ - フーリエ級数展開！ 今回は、同じことを Ruby で実装してみました。実際、ほとんど同じです。「フーリエ級数展開」についての詳細は上記の前回記事を参照ください。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p0 を使用。 1. Ruby スクリプト作成 File: fourier_series_expansion.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/05/17/ruby-expand-fourier-series/",
        "teaser": null
      },{
        "title": "複素フーリエ級数展開！",
        "excerpt":"先日、実形式の「フーリエ級数展開」の C++, Ruby 実装を紹介しました。      C++ - フーリエ級数展開！   Ruby - フーリエ級数展開！   今回は、複素形式の「フーリエ級数展開」についてです。  複素数を使用してより簡素な計算式にしようというものであって、展開結果が複素数になるというものではありません。     また、今回は C++ や Ruby への実装はしません。実装しようと思ったら結局「実形式のフーリエ級数展開」になるからです。   以下、「複素フーリエ級数展開」についてです。（数式が多いので、\\(\\TeX\\)で別途作成した文書を切り貼りしている）   1. 概要   今までの「フーリエ級数展開」は「実形式（実フーリエ級数展開）」と呼ばれものであったが、三角関数を使用せず「複素数の指数関数」を使用する形式を「複素形式」の「フーリエ級数展開」または「複素フーリエ級数展開」という。   2. 複素フーリエ級数展開の導出   以下に、「実フーリエ級数展開」の定義から「複素フーリエ級数展開」を導出する手順について記述する。          上記の (1.1), (1.2), (1.3) が「（実）フーリエ級数展開」の定義、(1.4), (1.5) が「複素フーリエ級数展開」の定義である。   3. 例題   例題として、実際に周期関数を複素フーリエ級数展開してみる。      t の範囲は -\\(\\pi \\sim \\pi\\) に限定している。       前回の実フーリエ級数展開とは異なる（三角関数を使用せず、複素数の指数関数を使用した）結果となった。   4. 実形式と複素形式のフーリエ級数展開の整合性確認         「（実）フーリエ級数展開」、「複素フーリエ級数展開」とも、電気工学、音響学、振動、光学等でよく使用する重要な概念です。応用範囲は広いので他にも利用できるかと思います。   以上。   ","categories": ["数学"],
        "tags": [],
        "url": "/2013/05/19/expand-fourier-series-complex/",
        "teaser": null
      },{
        "title": "MySQL - テーブル定義/データのみダンプ出力！",
        "excerpt":"MySQL のダンプ出力に関しては、以前以下のような内容を記事にしました。 * MySQL - テーブル単位でダンプファイル出力！ * MySQL - 圧縮しながらダンプ出力！ 今回は、ダンプ出力時にテーブル定義のみを出力したり、テーブルデータのみを出力したりする方法についての記録です。 0. 前提条件 MySQL 5.5.31 での作業を想定。 （バージョンは特に問わない。また、MariaDB でも同じはず） 1. テーブル定義のみダンプ出力 テーブル定義のみを出力する、つまりテーブル行情報を出力しない場合は、 --no-data または -d オプションを指定する。 （テーブル名を指定しない場合はデータベース単位でダンプされる） $ mysqldump -uroot -phogehoge -d DB名 [テーブル名] 2. データのみダンプ出力 テーブルデータ（insert 文）のみを出力する、つまりテーブル定義を出力しない場合は、 --no-create-info または -tオプションを指定する。 （テーブル名を指定しない場合はデータベース単位でダンプされる） $ mysqldump -uroot -phogehoge -t DB名 [テーブル名] 3. 参考サイト...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2013/05/25/mysql-output-dump/",
        "teaser": null
      },{
        "title": "MySQL - InnoDB チューニング！",
        "excerpt":"当方、今まで MySQL での膨大なデータ量のデータベース管理では、高速化重視でストレージエンジンを MyISAM に設定して運用していました。 しかし、更新処理が多いデータベースでしたので、考え方を安全・整合性重視の InnoDB に戻しました。 当然ながら、InnoDB は安全性重視のためデフォルトの設定では更新箇所が多くなる等の理由で MyISAM に比べて速度が遅いです。 InnoDB の場合、チューニングして使用するのが半ば常識でもありますし。。。 0. 前提条件 MySQL 5.5.31 での作業を想定。 （5.1 系や 5.6 系、MariaDB でもだいたい同じであるが、若干異なる部分もある） ストレージエンジン InnoDB の仕組みについてある程度理解できている。 使用するマシンの搭載メモリは 4GB. 1. 設定サンプル 当方の設定例を掲載する。 以下は、ダンプファイルインポート時に高速化するための設定（InnoDB 関連部分のみ抜粋）。通常使用時は、コメントを参考に変更する。 File: /etc/mysql/my.cnf 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2013/05/27/mysql-innodb-chuning/",
        "teaser": null
      },{
        "title": "MySQL - InnoDB データファイルをテーブル単位に変更！",
        "excerpt":"MySQL でストレージエンジンに InnoDB を指定していると、データファイル・ログファイルが作成されます。 デフォルトでは、データファイル（ibdata1）はデータベースが複数あっても１つのファイルとして作成されます。 これだと、データベースが複数あったりサイズが膨大になったりすると、パフォーマンスが悪くなるだけでなく管理も煩雑になってしまいます。 設定ファイルに innodb_file_per_table を設定することで、このデータファイルをテーブル単位で管理できるようになります。 ただ、既にデータベースを InnoDB で運用している場合は、今後作成するテーブルに対してのみ適用され、既存のテーブルについては適用されません。 そこで、既存のテーブルに対しても適用させる方法を以下に記録しておきます。 0. 前提条件 Linux Mint 14 Nadia(64bit) での作業を想定。 MySQL 5.5.31 での作業を想定。 （5.1 系や 5.6 系、MariaDB でもだいたい同じであるが、若干異なる部分もある） ストレージエンジン InnoDB の仕組みについてある程度理解できている。 MySQL のデータディレクトリは /var/lib/mysql/ を想定。 膨大データのインポート高速化については、前回の記事を参照ください。 ( MySQL - InnoDB チューニング！ ) 1. データベースバックアップ 既存の InnoDB のデータベース全てを mysqldump でエクスポートする。 $...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2013/05/28/mysql-innodb-tablespace-for-a-table/",
        "teaser": null
      },{
        "title": "MySQL - 5.6.11 ソースビルドでインストール(on Linux Mint)！",
        "excerpt":"以前、MySQL 5.5 系を CentOS(Redhat 系ディストリビューション) にソールビルドでインストールはしていました。 * Linux - MySQL 5.5.23 をソースからインストール！ 今回は、MySQL の最新安定版 5.6.11 （当記事執筆時点）を Linux Mint 14 でソースをビルドしてインストールしてみました。 （同じく cmake を使用する MariaDB でも同様です） 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 マシン搭載メモリは 4GB. MySQL インストール先は “/usr/local/mysql” データディレクトリは “/var/mysql/data” 1. 事前準備 最近の MySQL(5.5系以降) はビルド時に configure ではなく cmake を使用するので、未インストールならインストールしておく。 また、bison, g++,...","categories": ["サーバ構築"],
        "tags": ["MySQL","MariaDB","LinuxMint"],
        "url": "/2013/05/30/mysql-5-6-install-by-src-build-to-mint/",
        "teaser": null
      },{
        "title": "MySQL - 5.6 系で TIMESTAMP 型デフォルト値警告！",
        "excerpt":"MySQL サーバ 5.6 系でサービス起動時等に以下のような警告メッセージがログに出力されます。 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details). timestamp 型の暗黙的なデフォルト値は非推奨とのことで、5.6.6 からの警告のようです。 MySQL :: MySQL 5.6 Reference Manual :: 5.1.4 Server System Variables 以下、現象確認と対策についての記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定しているが、OS・ディストリビューションは問わないはず。 MySQL 5.6.11 での作業を想定。 1. 設定確認 MySQL...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2013/05/31/mysql-5-6-timestamp-default-warning/",
        "teaser": null
      },{
        "title": "2013年5月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 8,186 71.3315 Mac OS 1,486 12.9488 Ubuntu Linux 983 8.5657 Linux 670 5.8383 unknown 80 0.6971 Android 36 0.3137 Fedora Linux 12 0.1046 FreeBSD 11 0.0959 RedHat Linux 4 0.0349 Wii 3 0.0261 Solaris 2 0.0174 Linux Mint 1 0.0087 PalmOS 1 0.0087...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/06/01/blog-access/",
        "teaser": null
      },{
        "title": "MySQL - 5.6 系で mysqldump すると SET OPTION エラー！",
        "excerpt":"MySQL 5.6 系サーバに対して mysqldump コマンドを使用すると、場合によっては（以下の前提条件の場合）エラーになります。 以下、現象、原因、対策についての記録です。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 MySQL 5.6.11 サーバ・クライアントをソースをビルドしてインストールしている。 MySQL 5.5.31 クライアントも別途インストールしている。（別のパッケージとの依存性の関係で必要なため） ローカルマシンでのテスト用なので、サーバもクライアントも同一マシンにインストールしている。 1. 現象 mysqldump コマンドでダンプ出力しようとすると以下のようなエラーとなる。 mysqldump: Couldn't execute 'SET OPTION SQL_QUOTE_SHOW_CREATE=1': You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for...","categories": ["サーバ構築"],
        "tags": ["MySQL","LinuxMint"],
        "url": "/2013/06/02/mysql-5-6-mysqldump-set-option-error/",
        "teaser": null
      },{
        "title": "MySQL - 設定ファイル my.cnf 読み込み順序！",
        "excerpt":"MySQL の設定ファイル “my.cnf” を配置できる場所は複数あり、あらかじめ決められた順序に従って読み込まれます。 以下、備忘録です。 0. 前提条件 OS は Unix 系(Linux, BSD, MacOS)を想定。（Slackware, Suse 系 Linux や Windows 等は不明） 1. “my.cnf” の配置場所と読み込み順序 “/etc/my.cnf” “/etc/mysql/my.cnf” “SYSCONFIGDIR(コンパイル時指定)/etc/my.cnf” “$MYSQL_HOME(環境変数)/my.cnf” --defaults-extra-file オプションで指定したファイル ”~/.my.cnf” 2. 注意 配置場所は自由に決めて構わないが、複数の場所に “my.cnf” を配置すると後から読み込まれたファイルの内容が優先される。 １台のマシンに複数の MySQL をインストールする場合は、”/etc/my.cnf” や “/etc/mysql/my.cnf” を使用すると全ての MySQL が同じ設定ファイルを参照することになる。 3. 読み込み順序確認 前述の順序で読み込まれるようになっているが、自身の環境で実際にどの順序で “my.cnf” が読み込まれるようになっているか確認できる。 mysql --help で表示される中にそれが分かる部分がある。...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2013/06/03/mysql-config-file-read-order/",
        "teaser": null
      },{
        "title": "Linux Mint - tmux インストール！",
        "excerpt":"当方、Linux Mint では今まで標準の「GNOME端末」ではなく、”Terminator” という画面分割等の可能な端末ソフトを使用していました。 今回、何かと便利そうな仮想端末管理ソフト tmux(Terminal MUltipleXer) を導入してみました。 同様のソフトで、”GNU Screen” というものもあります（使用したことありません）が、色々調べてみると “tmux” の方が良さそうに感じました。（”GNU Screen” から “tmux” へ移行している方々が多かったので。） 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。（Unix 系なら同じだと思う） パッケージインストールする。 インストールする tmux のバージョンは 1.6 1. インストール apt-get でインストールする。（”Synaptic パッケージマージャ” でもよい） $ sudo apt-get install tmux 2. インストール確認 インストールされているかバージョンを表示して確認してみる。 $ tmux -V tmux 1.6 3....","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint","端末","tmux"],
        "url": "/2013/06/05/linux-mint-install-tmux/",
        "teaser": null
      },{
        "title": "Linux Mint - tmux 起動時に自動でアタッチ！",
        "excerpt":"前回は、仮想端末管理ソフト tmux を Linux Mint へインストールしました。 Linux Mint - tmux インストール！ 今回は、tmux 起動時にセッションが存在すれば（デタッチしたものあれば）、自動でアタッチする方法についての記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。（Unix 系なら同じだと思う） インストールする tmux のバージョンは 1.6 シェルは bash. 1. シェルスクリプト作成 以下の内容でシェルスクリプトを作成する。 File: ~/tmux.sh 1 2 3 4 5 6 7 if [ -z $TMUX ]; then if $(tmux has-session 2&gt; /dev/null);...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint","端末","tmux"],
        "url": "/2013/06/06/linux-mint-tmux-auto-attach/",
        "teaser": null
      },{
        "title": "MySQL - CSV データインポート！",
        "excerpt":"過去には、テーブルデータを CSV 出力する方法を記事にしていました。 * MySQL - SELECT結果をCSV出力！ 今回は、MySQL データベースのテーブルへ CSV ファイルからデータをインポートする方法についてです。 普段頻繁に利用しない方法なので、備忘録として残しておきます。 0. 前提条件 OS や MySQL のバージョンは特に問わないはず。（MariaDB も同じ） インポート先 DB に該当のテーブルが作成済みである。 読み込む CSV ファイルの項目数・属性がインポート先テーブルのカラム数と一致している。 読み込む CSV ファイルにはヘッダ行は存在しない。（１行目からデータとなっている） CSV ファイルもテーブルも同じ文字コード（当方は “UTF-8”）になっている。 （CSV ファイルとテーブルとで文字コードが異なると文字化けするかもしれない（未確認）） 1. インポート方法 MySQL サーバに root でログインし、以下のようにに実行する。 以下は、”hoge.csv” という CSV ファイルを “hoge” というデータベースの “hogehoge” テーブルにインポートする例。 &gt; use hoge;...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2013/06/08/mysql-import-from-csv/",
        "teaser": null
      },{
        "title": "C++ - （離散）フーリエ変換！",
        "excerpt":"以前、「フーリエ級数展開」を C++ で実装したり、「複素フーリエ級数展開」についての記事を紹介しました。 C++ - フーリエ級数展開 複素フーリエ級数展開！ 今回は、「フーリエ変換・離散フーリエ変換」、特に C++ での離散フーリエ変換の実装についてです。 それほど、深くは掘り下げていません。当方が将来目論んでいることの準備として、軽くまとめているだけです。 深く知りたい方は、別途お調べください。情報は多数あります。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 数式が多いので、一部 \\(\\TeX\\) で記載。 また、自然対数の底 \\(e\\) は \\(\\exp\\) で表示するようにするようにしている（指数部分の可視性を重視して） 1. フーリエ変換について フーリエ変換(Fourier Transform = FT)とは、複素関数 (または実関数) から別の複素関数への変換のことで、時間領域から周波数領域への変換である。また、逆の変換をフーリエ逆変換(Inverse Fourier Transform = IFT)という。 2. フーリエ変換の導出 3. 離散フーリエ変換とは 今まで連続の値について考えてきたが、当然コンピュータでは連続の値は扱えない。そのため、プログラムで実装するには、離散の概念を用いた離散フーリエ変換(Discrete Fourier...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/06/10/cpp-discrete-fourier-transform/",
        "teaser": null
      },{
        "title": "Ruby - （離散）フーリエ変換！",
        "excerpt":"前回、「離散フーリエ変換」の C++ での実装に関する記事を紹介しました。 C++ - （離散）フーリエ変換 今回は、同じアルゴリズムを Ruby で実装してみました。 実際、ほとんど同じです。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p195 1. （離散）フーリエ変換について 前回の記事を参照ください。 C++ - （離散）フーリエ変換 2. Ruby スクリプト作成 変換元の周期関数は、 \\(f(t) = 2 * \\sin(4t) + 3 \\times \\cos(2t)\\) とした。 t の範囲は \\(0 \\sim 2\\pi\\) に限定している。 分割数は N の値を変更して対応する。（以下の例では N=100...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/06/11/ruby-discrete-fourier-transform/",
        "teaser": null
      },{
        "title": "CentOS - munin で Nginx 監視！",
        "excerpt":"過去、サーバ監視ツール munin については何回か記録してきました。 （過去記事にはタグがうまく付いていないので、適時検索してくだい。） 今回は、munin で Web サーバ Nginx も監視できるように設定を追加してみました。 0. 前提条件 以下の条件を想定しています。環境により適宜読み替えてください。 CentOS 6.4 での作業を想定。 Web サーバは Nginx 1.4.1 を使用している。 ソースをコンパイルしてインストールする場合は、--with-http_stub_status_module オプションを指定してコンパイルすること。 munin がインストール済みである。 1. Nginx 設定ファイル編集 設定ファイルの server ディレクティブに nginx_status に関する記述を追加する。 File: /usr/local/nginx/conf/nginx.conf 1 2 3 4 5 6 7 8 9 10 11 server { listen 80;...","categories": ["サーバ構築"],
        "tags": ["CentOS","munin"],
        "url": "/2013/06/13/centos-munin-nginx/",
        "teaser": null
      },{
        "title": "CentOS - Clam AntiVirus でパーミッションエラー！",
        "excerpt":"当方、以前から CentOS サーバで運用しています。 ウイルス対策として “Clam AntiVirus” を導入しているのですが、いつの頃からかエラーメールが届くようになっていました。 以下、現象と原因と対策についての記録です。 0. 前提条件 CentOS 6.4 サーバでの作業を想定。 アンチウイルスソフト Clam AntiVirus がインストール済み。 1. 現象 実際に発生した現象は、サーバの cron.daily でウイルス定義ファイル更新 freshclam が起動した際に以下のようなエラーが発生し、root 宛にメールが届く。 /etc/cron.daily/freshclam: ERROR: Can't create temporary directory /var/lib/clamav/clamav-9441201be3d642a23bcf27bf0a2f4fde また、/var/log/clamav/freshclam.log に以下のようなエラーメッセージが出力される。 File: /var/log/clamav/freshclam.log 1 2 ERROR: Can't create temporary directory /var/lib/clamav/clamav-9441201be3d642a23bcf27bf0a2f4fde Hint: The database directory must be...","categories": ["サーバ構築"],
        "tags": ["CentOS","ウイルス対策"],
        "url": "/2013/06/14/centos-clam-antivirus-permission-error/",
        "teaser": null
      },{
        "title": "SMTP サーバ - saslauthd: do_auth : auth failure について！",
        "excerpt":"先日、当方の CentOS サーバのログを確認していたところ、メールサーバに関して少し気になるメッセージが出力されていました。 調べてみました。以下、現象・原因・対策についての記録です。 0. 前提条件 サーバ OS は CentOS 6.4 SMTP（メール送信）サーバは Postfix 2.6.6 SMTP-Auth 機能が有効になっていて（saslauthd が起動していて）、適切に設定されている。 1. 現象 “/var/log/messages” に出力されていたメッセージの内容。 File: /var/log/messages 1 2 3 4 5 6 7 8 9 10 May 29 02:58:51 hoge saslauthd[2212]: do_request : NULL password received May 29 02:58:58 hoge saslauthd[2213]: do_auth :...","categories": ["サーバ構築"],
        "tags": ["CentOS","Mail","SMTP"],
        "url": "/2013/06/16/smtp-saslauthd-auth-failure/",
        "teaser": null
      },{
        "title": "SMTP サーバ - 不正中継拒否のログ！",
        "excerpt":"当方の CentOS サーバの SMTP サーバのログについての記録です。 問題無いログなのですが、どういう意味のログなのかについて記録しておく。 0. 前提条件 サーバ OS は CentOS 6.4 SMTP（メール送信）サーバは Postfix 2.6.6 SMTP-Auth 機能が有効になっていて（saslauthd が起動していて）、適切に設定されている。 1. 現象 “/var/log/maillog” に出力されていたメッセージの内容。 File: /var/log/maillog 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 May 30 00:16:31...","categories": ["サーバ構築"],
        "tags": ["CentOS","Mail","SMTP"],
        "url": "/2013/06/17/smtp-rejct-unauth-relay/",
        "teaser": null
      },{
        "title": "Google ストリートビュー - 表札「ぼかし処理」依頼！",
        "excerpt":"先日、2013年6月13日に我が街も Google ストリートビューで閲覧できるようになりました。 Google Japan Blog: Google マップのストリートビューでご覧いただける地域が広がりました 人物の顔や車のナンバープレートは自動でぼかし処理がかかっているようですが、表札は丸写りです。 当方の自宅の門柱に掲げている表札が丸写りでしたの、以下の案内の通り「ぼかし処理」の依頼を出しました。 Google Japan Blog: ストリートビューをご利用のみなさまへ 以下、参考までに一連の記録です。 0. 前提条件 自宅の表札が写っていて、セキュリティ上問題を感じている。 1. 状況確認 Google ストリートビューで対象物を確認してみる。 問題がなければよいが、問題がある場合は次項以降の対応を施す。 2. 問題の報告 表示画像に問題がある場合は、画像右下の「問題の報告」をクリックする。 3. 報告内容入力 開いたページで、各種情報を入力する。 「このストリートビューを報告する理由を選択してください。」で 「プライバシーに関する問題」-「自宅」-「自宅の表札が写っている画像の不鮮明処理を依頼」を選択する。 「ご報告いただいた問題を解決するために、問題の詳細をお知らせください」に依頼理由を入力する。 参考までに、当方は「門柱に備え付けている表札が読み取れてしまい、安全性に問題を感じるため。」と入力した。 「メールアドレス」に連絡用メールアドレスを入力する。 「画像のプレビュー」で、対象物が赤黒の枠の中に入るように移動し適宜ズームアップする。 「文字の確認」で、認証用文字列を入力する。 内容を再確認し、問題なければ「送信」ボタンをクリックする。 （この画像内のぼかし処理は個人的に施したもの） 4. 受付完了 受付完了ページが表示される。 何か確認事項があれば連絡があるようだ。 そして同時に、指定したメールアドレスに受付完了のメールが送付されるので確認する。 5. 処理完了 さらに、しばらくして（当方の場合は11時間後に）、処理完了のメールが送付される。 24時間以内に反映されるようだ。 6. 状況再確認 Google...","categories": ["PC_Tips"],
        "tags": ["Google"],
        "url": "/2013/06/19/google-streetview-problem/",
        "teaser": null
      },{
        "title": "Linux Mint - xsel でクリップボード使用！",
        "excerpt":"デフォルトのコマンドライン端末でのコピペ操作は、便利ではないもののそれほど大きな不便も感じていませんでした。 しかし、まれに不便を感じることもあります。当方の場合、特に仮想端末ソフト tmux を使用する時です。 その不便を解消するための事前準備として、X でのクリップボード利用を便利にするコマンド xsel についてまとめておきました。 0. 前提条件 Linux Mint 14 での作業を想定。 （ただし、操作方法そのものに関しては他の Unix 系 OS でも同じ。インストール方法は異なれど） 1. 事前情報 X のセレクションバッファ（選択部分の格納領域）について理解しておく必要がある。 X のセレクションバッファには以下の３種類のバッファがある。 PRIMARY SECONDARY CLIPBOARD 1 はマウスで選択して反転表示になった部分が格納されるバッファで、3 はマウスで選択して反転表示になった部分を右クリックでコピーすることで格納されるバッファ。2 は一般的なアプリでは使用しないようだ。 2. xsel インストール xsel はLinux標準のコマンドではないので、別途インストールする必要がある。 以下のようにインストールする。 （Synaptic パッケージマネージャでインストールしてもよい。また、ソースをビルドしてインストール方法も。 ちなみに、CentOS(Redhat 系)の yum の場合、デフォルトリポジトリに xsel は存在しなかった） $ sudo apt-get install...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint","端末"],
        "url": "/2013/06/21/linux-mint-install-xsel/",
        "teaser": null
      },{
        "title": "Linux Mint - tmux でクリップボード共有！",
        "excerpt":"仮想端末管理ソフト tmux は、デフォルトでは文字列を選択してコピーした内容がクリップボードに格納されません。（プライマリセレクションというバッファには格納されてはいますが） tmux 外で起動させているテキストエディタ等に貼り付けたい場合などに不便です。 以下、コピー内容をクリップボードに格納する方法についての記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。（Unix 系なら同じだと思う） 仮想端末管理ソフト tmux がインストール済み。（バージョンは 1.6） コマンドラインでクリップボード操作が可能な xsel がインストール済み。 （xsel コマンドについては「Linux Mint - xsel でクリップボード使用！」を参照） 1. tmux 設定ファイル編集 tmux 設定ファイルに以下の記述を追加する。 プリフィックス＋ &gt; で選択文字列（.tmux-buffer）をクリップボードに格納し、&lt; でクリップボードの文字列を貼り付けるようにしている。 File: ~/.tmux.conf 1 2 3 # ==== Shared clipboard bind-key &gt; save-buffer ~/.tmux-buffer \\;...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint","端末","tmux"],
        "url": "/2013/06/22/linux-mint-tmux-clipboard-share/",
        "teaser": null
      },{
        "title": "Linux Mint - zsh インストール！",
        "excerpt":"今まで、Linux ではシェルはデフォルトの bash を使っていました。 しかし、究極で便利と噂（？）の zsh を使ってみたくなり、ついにというかやっとというか今更というか、ローカルマシンにインストール・設定してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定しているが、他の Unix シェルの使用可能な OS や Linux ディストリビューションでも同様。 Git 導入済み。（既存の zsh 設定ファイル（”oh-my-zsh.sh”）導入に使用するため） zsh のインストールには apt パッケージを使用する。（ソースをビルドしてインストールする方法もあるが） 1. zsh インストール Synaptic パッケージマネージャでインストールするか、以下のようにしてインストールする。 $ sudo apt-get install zsh zsh がインストールできているか（使用出来るシェルの一覧にあるか）確認する。 $ cat /etc/shells # /etc/shells: valid login shells /bin/sh...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint","端末","シェル","zsh"],
        "url": "/2013/06/23/linux-mint-install-zsh/",
        "teaser": null
      },{
        "title": "MySQL - データベースサイズ確認！",
        "excerpt":"MySQL でデータベースのサイズを確認したいことが時々あります。 MySQL では SHOW TABLE STATUS; でテーブルの各種状態を確認できますが、このコマンドではカラムを選択したり、SUM を取ったりすることができない。 以下、SQL でデータベースのサイズ確認する方法についての記録です。 0. 前提条件 OS や MySQL のバージョンは特に問わないはず。（MariaDB も同じ） 以下の記事内の SQL 文ではキーワードを英大文字で記載しているが、趣味の問題であり、英小文字でもよい。 1. 全データベースの容量確認 MySQL サーバに root でログインして、以下のように SQL を作成して実行する。 IDE ツールで入力して実行してもよい。 （以下は当方のローカル環境の例） mysql&gt; SELECT table_schema, -&gt; SUM(data_length+index_length) / 1024 / 1024 AS MB -&gt; FROM information_schema.tables -&gt; GROUP BY table_schema...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2013/06/25/mysql-check-db-size/",
        "teaser": null
      },{
        "title": "Git - 日本語ファイル名表示！",
        "excerpt":"例えば、「git日本語テスト」というファイル名を作成後に git status すると、日本語部分がエンコードされて表示されます。 これだと、ステージング（git add）ができません。 以下、対策方法についての備忘録です。 0. 前提条件 Linux Mint 14 Nadia(64bit) で動作確認済み。 Git が使用出来る環境である。 Git 管理下に「git日本語テスト」という名称のファイルが作成済み。 1. 対策前の状況確認 対策前は、 git status で以下のように日本語部分がエンコードされて表示される。 $ git status # On branch master # Untracked files: # (use \"git add &lt;file&gt;...\" to include in what will be committed) # # \"git\\346\\227\\245\\346\\234\\254\\350\\252\\236\\343\\203\\206\\343\\202\\271\\343\\203\\210\" nothing...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2013/06/27/git-display-japanese-filename/",
        "teaser": null
      },{
        "title": "Linux - xdg-open で既定のブラウザが起動しない場合！",
        "excerpt":"Linux でコマンド実行で Web ブラウザを起動させようと、xdg-open コマンド（実際はシェルスクリプト）に URL を引数として実行しても、既定のブラウザで起動しないことがあります。 ブラウザの設定や OS の「お気に入りのアプリ」設定等でも、既定のブラウザは希望のものに設定されていても。 以下、原因と対策についての記録です。 0. 前提条件 Linux Mint 14 (64bit)での作業を想定。 （他の GNU 系や Redhat 系ディストリビューションも同様。GNU 系 Redhat 系以外は不明） ブラウザに関することなので、当然デスクトップ環境が利用できること。 ブラウザが複数インストールされている。 （今回は、”Firefox” と “Google Chrome” がインストール済みで、”Firefox” を既定のブラウザに設定済み） 1. 現象 まず、”Firefox” が「既定のブラウザ」に設定されていて、 「お気に入りのアプリ」の設定でも “Firefox” がデフォルトに設定されている。 それにも関わらず、 xdg-open コマンドで以下のように実行すると、 $ xdg-open http://www.mk-mode.com/ 「既定のブラウザ」に設定していない “Google Chrome” で開いてしまう。...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2013/06/29/linux-xdg-open-default-browser/",
        "teaser": null
      },{
        "title": "2013年6月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"7月になりましたので、先月6月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 6,037 68.8134 Mac OS 1,206 13.7467 Ubuntu Linux 782 8.9137 Linux 608 6.9304 unknown 98 1.1171 Android 16 0.1824 FreeBSD 13 0.1482 Solaris 7 0.0798 Fedora Linux 2 0.0228 RedHat Linux 2 0.0228 3DS 1 0.0114 SuSE Linux 1 0.0114 合　計 8,773 100.0000...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/07/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - Google Geocoding API で住所から緯度・経度、緯度・経度から住所を取得！",
        "excerpt":"“Google Geocoding API” を使用して、住所から緯度・経度を取得したり、緯度・経度から住所を取得する方法についてです。 よくある “Google Maps JavaScript API v3” についてではありません。 ちなみに、住所から緯度・経度を取得することを「ジオコーディング(“Geocoding”)」 と呼び、緯度・経度から住所を取得することを 「逆ジオコーディング(“Inverse Geocoding”)」と呼ぶようです。 この「ジオコーディングによる緯度・経度取得処理」と「逆ジオコーディングによる住所取得処理」を、１本の Ruby で実装してみました。 （Google Geocoding API の仕組みを理解すれば、Ruby である必要がないことも分かるかと思います） 0. 前提条件 Ruby 2.0.0-p195 での作業を想定。 コマンドライン引数で住所または緯度・経度を指定し、引数が住所なら緯度・経度を取得、引数が緯度と経度なら住所を取得するようにする。 コマンドライン引数の緯度・経度は「度」で指定する。 「度・分・秒」は、「度」＋「分」÷60＋「秒」÷60÷60で「度」に変換して指定する。 データは JSON 形式か XML 形式で取得できるが、今回は JSON 形式で取得する。 取得できるデータは複数あるが、先頭データ（最優先データ）のみを表示する。 既定のブラウザを起動して Google マップで該当の場所を表示する。（後述「3. 注意」参照） 1. Ruby スクリプト作成 以下のように Ruby スクリプトを作成してみた。 File:...","categories": ["プログラミング"],
        "tags": ["Ruby","Google"],
        "url": "/2013/07/02/ruby-google-geocoding-api/",
        "teaser": null
      },{
        "title": "Ruby - GitHub API ラッパー Octokit 使用！",
        "excerpt":"GitHub API の Ruby / Objective-C ラッパーである “Octokit” というものがあります。 この “Octokit” を使用すれば、比較的に容易に GitHub API の機能が実装できます。 （ちなみに、Ruby 製静的ブログシステムの Octopress とは関係無いようです） 今回は、この Octokit を Ruby で実装してみました。 以下、作業記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Ruby 2.0.0-p195 での作業を想定。 当然、GitHub のアカウントを所有していること。 今回は OAuth 認証は使用しない。 Ruby 2.0 系をしているので、パラメータの指定はキーワード引数の記法を使用。（従来のハッシュの記法に変更しても良い） 1. RubyGems パッケージインストール GitHub API の Ruby...","categories": ["プログラミング"],
        "tags": ["Ruby","GitHub"],
        "url": "/2013/07/04/ruby-github-api-octokit/",
        "teaser": null
      },{
        "title": "Rails 4.0.0 - Rails 3.2 系から移行！",
        "excerpt":"Rails 4.0.0 がリリースされたので、当方の Rails 3.2.13 製Webサイトも Rails 4.0.0 に移行してみました。 実際には、アップグレードではなく「作り直し」です。 作り直しと言っても、新規に空の Rails アプリを作成して、そこへ既存のコードを目視で移動する作業です。 当方は、その方が Rails 4.0.0 のことをよく理解できるのではないかと思っただけであり、rake rails:update でのアップグレードがよければそれで構いません。 以下、当方の作業記録です。 0. 前提条件 Linux Mint 14, CentOS 6.4 での作業を想定。（どちらでも同じ） Ruby は 2.0.0-p247 移行前の Rails は 3.2.13 使用する DB は MySQL Web サーバに Nginx を使用。 Rails サーバに Unicorn を使用。 環境が異なる場合、以下と同様な作業にならない可能性も充分ある。 環境が異なる場合は、適宜置き換えて考えるか、別途お調べください。 1....","categories": ["サーバ構築"],
        "tags": ["Rails","Ruby"],
        "url": "/2013/07/06/rails-migrate-to-4-0-0/",
        "teaser": null
      },{
        "title": "特殊相対性理論における時間の遅れ！",
        "excerpt":"特殊相対性理論とは、「広辞苑 第五版」より引用すると、      1905年、アインシュタインが絶対静止の座標系を否定して、互いに等速運動をしている座標系に関してはすべての自然法則は同一の形式を保つということを主張した理論。質量とエネルギーの等価性が導かれた。    ある限定的な「特殊な」場合にだけに当てはめた理論です。  汎用性を高めたより高度な理論が「一般相対性理論」です。     「特殊相対性理論」は、研究者でなくても理解しやすいように書かれた入門書が数多く出版されていますので、難しい計算などしなくても概要は容易に理解できます。   今回は、「特殊相対性理論」における時間の遅れに関する計算式についてのメモです。  そう、「光速に近い乗り物に乗って１年宇宙旅行して地上に戻ってくると、地球に残っていた人々は自分より年をとっている」というよく聞く話のことです。（ちなみに、光速は約30万km/秒で、１秒に地球を約７周半する速度）   専門ではないので、概要程度です。   0. 前提条件      特殊相対性理論のごくごく基本的な知識があれば理解できる。   1. 時間の遅れ計算式の導出   数式があるので、 \\(\\LaTeX\\) で記載。        2. 計算例   例として、光速の 90% の速度の乗り物に乗って宇宙旅行に出かけ、１年後に地球に戻ってきたらどのくらい時間が遅れているかを計算してみる。      １年の 43.59%、約159日しか時間が経過していないことになる。     光速に近い速度の乗り物ができるのかどうか、出来たとしても光速で宇宙旅行すれば大量の放射線で人体に影響があったり、等々現時点では実現不可能な話ばかりです。  あくまでも理論上の話ではありますが、大変興味深い話（理論）です。   以上。   ","categories": ["数学"],
        "tags": ["物理"],
        "url": "/2013/07/08/time-dilation-on-special-relativity/",
        "teaser": null
      },{
        "title": "Google Maps JavaScript API V3 - APIキー取得！",
        "excerpt":"ホームページ上で “Google Maps API V3” を使ったアプリを動かしてみたくなりました。 “Google Maps API V3” を利用するには API キーが必要です。 （時期によっては、API キーが無くても利用できたりしていたようですが、当記事執筆時点では API キーは必要です） 以下、簡単ですが取得手順についての記録です。 0. 前提条件 Google アカウントを所有していること。 1. Googe APIs Console アクセス Googe APIs Console[ https://code.google.com/apis/console ]にアクセスする。 （Google アカウントでログインしていなければ、ログイン画面になるのでログインする） 2. プロジェクト名変更 [Create project…] ボタンをクリックすると、Googe APIs Console 画面が表示される。 プロジェクト名がデフォルトでは “API Project” となっているが、変更したければプロジェクト名をクリック後 “Rename” で変更できる。 当方は、デフォルトのまま使用することにした。 3....","categories": ["PC_Tips"],
        "tags": ["Google"],
        "url": "/2013/07/10/google-get-api-key/",
        "teaser": null
      },{
        "title": "Google Maps JavaScript API V3 ＋ ２点間距離計算！",
        "excerpt":"ホームページ上で “Google Maps API V3” を使って動くアプリを作成してみました。 任意の２点の緯度・経度から距離を計算するアプリです。 ２点の緯度・経度は直接入力する他、Google マップ上に配置したマーカーからも取得できるようにしました。 （緯度・経度を直接入力した場合は、地図上のマーカーも追随するようにしています） 以下、作業記録です。 0. 前提条件 Google Maps API の API キーを取得済みであること。 （過去記事参照 -&gt; 「Google Maps JavaScript API V3 - APIキー取得！」） 多少の HTML, JavaScript の知識があること。 作成する JavaScript は別ファイル（ファイル名：”google_maps.js”）にする。 フレームワークは考慮しない（単純な HTML）。 JavaScript の紹介を主に紹介する。 1. HTML ファイル編集 作成したいページの HTML ファイルの &lt;head&gt; タグ内等（別にどこでも大丈夫）に以下のようなコードを追加する。 &lt;script type=\"text/javascript\" src=\"http://maps.googleapis.com/maps/api/js?key=＜APIキー＞&amp;sensor=false\"&gt;...","categories": ["プログラミング"],
        "tags": ["Google","JavaScript"],
        "url": "/2013/07/12/google-maps-api-calc-distance/",
        "teaser": null
      },{
        "title": "Vim - TwitVim における BitLy アカウント設定！",
        "excerpt":"普段、当方デスクトップマシンでは Vim エディタの “TwitVim” プラグインを使ってツイートしています。 しかし、TwitVim の BitLy コマンドでは、デフォルトのユーザ名・APIキーで URL が短縮されてしまい、自分のアカウントで統計がとれません。 通常（それでも構わなければ）、それで良いのですが、自分で BitLy による URL 短縮を管理したいので、自分のユーザ名・APIキーを設定することにしました。 以下、作業記録です。 0. 前提条件 OS は問わないはず。 Vim（CUI 版）、GVim（GUI 版）どちらも同じ。 Vim 7.3.547 で動作確認。 Twitter 関連プラグイン “TwitVim” 導入済み。 URL 短縮サービス “BitLy” のアカウント取得済み（API キーも作成済み）である。 1. 事前調査 TwitVim プラグインのスクリプト “twitvim.vim” を眺めてみたところ、以下のようなコードがありました。 File: twitvim.vim 1 2 3 4 5 6...","categories": ["PC_Tips"],
        "tags": ["Vim"],
        "url": "/2013/07/14/vim-twitvim-bitly-account/",
        "teaser": null
      },{
        "title": "bitly - OAuth 認証アクセストークン取得！",
        "excerpt":"URL 短縮サービス “bitly” を利用している場合、用意されている API を使用して様々な処理が可能です。 bitly API V3 を使用するには、OAuth 認証が必要です。（一部のリクエストでは API キー認証も使用可） 今回は、OAuth 認証に必要なアクセストークンの取得方法について簡単に記録しておきます。 全く難しい作業ではありませんが、自分の目でメニュー等を探しても設定箇所が見つからなかったので。 0. 前提条件 URL 短縮サービス “bitly” のアカウントを取得している。 1. bitly サイトでのアクセストークン取得 1-1. 登録ページにアクセス [ Manage Oauth Apps - bitly - your bitmarks ] にアクセスする。 未ログインならログイン画面になるのでログインする。 ちなみに、bitly にアカウントを取得していてもメールアドレスの照合が未完了の場合は、”Generic Access Token” の部分が非活性（薄い表示）になっていて操作できないようになっている。その場合は、”setting page” でメールアドレスの照合を行う。 1-2. アクセストークン生成 パスワード入力後、[Generate Token]...","categories": ["PC_Tips"],
        "tags": ["bitly","OAuth"],
        "url": "/2013/07/16/bitly-get-access-token/",
        "teaser": null
      },{
        "title": "Ruby - bitly API v3 で URL 短縮！",
        "excerpt":"こんばんは。 当方、普段 Twitter でのツイート時等に使用する URL は、URL 短縮サービス “bitly” を利用して短縮しています。 今回は、bitly API V3 を使用して URL を短縮する作業を Ruby で実装してみました。 以下、作業記録です。 0. 前提条件 Ruby 2.0.0-p247 での作業を想定。 bitly サービスのアカウント取得済み（APIキーも取得済み）である。 API キー認証も OAuth 認証もできるようにする。（今回使用する shorten がどちらの認証方法も使用可なので） API キー認証を使用するには、ユーザ名・API キーが必要。 OAuth 認証を使用するには、アクセストークンが必要。（「bitly - OAuth 認証アクセストークン取得！」参照） bitly API のバージョンは V3 を想定。 1. 事前調査 bitly API V3 について、事前に調査して主に判明したこと。...","categories": ["プログラミング"],
        "tags": ["Ruby","bitly","OAuth"],
        "url": "/2013/07/18/ruby-url-shorten-by-bitly-api/",
        "teaser": null
      },{
        "title": "W3C - Facebook OGP 関連 meta タグが Invalid！",
        "excerpt":"少し前から、当方のブログサイトの HTML に埋め込んでいる Facebook 連携用（OGP:Open Graph Protocol） meta タグ部分で、 W3C Validation が “Invalid” になるようになりました。 ちなみに、当記事執筆当初の7月8日は Invalid 判定でしたが、当記事公開時（7月20日）現在は Valid 判定が出るようになりました。 以下、Invalid になっていた時の、その原因と現象確認についての記録です。 0. 前提条件 当然、HMTL のバージョンは “HTML5” である。（”HTML4.01” や “XHTML1.0” 等ではない） HTML に Facebook 連携用（OGP） meta タグを埋め込んでいる。 今まで W3C Validation チェックで正当（Valid）な HTML として判定されていたのに、6月24日くらいから不正（Invalid）な HTML と判定されるようになった。 1. 現象 ブログサイトの HTML5 に対して W3C...","categories": ["ブログ"],
        "tags": ["HTML","Facebook","W3C"],
        "url": "/2013/07/20/w3c-facebook-ogp-meta-invalid/",
        "teaser": null
      },{
        "title": "Ruby - rbenv のアップデート！",
        "excerpt":"当方、普段は Ruby はソースをビルドしてインストールして使用していますが、一部では Ruby のバージョン管理システム rbenv を使用しています。 時々、rbenv で新しいバージョンの Ruby をインストールしようとして、インストール可能な一覧に該当の Ruby が存在しないことがあります。 rbenv のバージョンが古いからです。 普段から rbenv を使っていれば、いちいち記録しておくことでもないでしょうが、当方にとっては時々の作業なので、後学のために記録しておきます。 0. 前提条件 ruby-build を “https://github.com/sstephenson/ruby-build” から git clone でインストールしている。 ruby-build のインストール先は “~/ruby-build” にしている。 1. 一覧確認 以下のコマンドで新しいバージョンの Ruby が表示されるか確認する。 $ rbenv install -l # or $ ruby-build --definitions インストール可能な Ruby の一覧に表示されてなければ、インストールしても以下のようになる。 $ rbenv...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2013/07/22/ruby-update-rbenv/",
        "teaser": null
      },{
        "title": "Octopress - rake clean 不具合！",
        "excerpt":"当方、ブログは Ruby 製静的ブログ構築フレームワーク Octopress を使用しています。 しかし最近、キャッシュを削除するコマンド rake clean を実行してもキャッシュが削除されません。 以下、記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Octopress 2.0 は 2013/07/10 現在の GitHub ソースを使用。 Ruby は 2.0.0-p247 を使用。 1. 現象 キャッシュを削除すべく以下のコマンドを実行しても、キャッシュが削除されない。 $ rake clean 2. 原因 “Rakefile” の clean 部分を確認してみると以下のようになっている。 File: Rakefile 1 2 3 task :clean do rm_rf [\".pygments-cache/**\",...","categories": ["プログラミング","ブログ"],
        "tags": ["Ruby","Octopress"],
        "url": "/2013/07/24/octopress-problem-rake-clean/",
        "teaser": null
      },{
        "title": "Twitter - 全ツイート履歴データとの相違！",
        "excerpt":"現在では、ツイッターで自アカウントの「全ツイート履歴」が取得可能になっています。（データは JSON 形式。CSV データも有り） 当方は、「全ツイート履歴」が取得可能になる前から、Ruby + Twitter API で１時間単位、サーバ cron 起動で全ツイートを取得・データベース保存して管理しています。 今回は、自分が日々管理しているそれらのツイートデータが正当性を検証してみました。 検証は Ruby で簡単なスクリプトを作成して行いましたが、詳細な紹介はしません。（簡単なスクリプトの紹介のみ） 以下、検証した結果がどうだったのかを紹介します。 0. 前提条件 検証した期間は、１回目のツイートから「全ツイート履歴」データをツイッター公式から取得した時まで。 ここでの「ツイート」とは、通常のツイートのほか、公式・非公式リツイート、リプライも含む。 1. ツイート件数検証 日々 Ruby + Twitter API で管理しているツイートの件数 ・・・ 6,601 件 「全ツイート履歴」データのツイート件数 ・・・ 6,594 件 「全ツイート履歴」のデータが７件少ない。 2. 「全ツイート履歴」データに存在しないツイート 日々 Ruby + Twitter API で管理しているツイート一覧には存在して、取得した「全ツイート履歴」データに存在しないツイートは、７件あった。 以下の３種類に分類できる。 ツイートして Ruby + Twitter API...","categories": ["SNS"],
        "tags": ["Ruby","Twitter"],
        "url": "/2013/07/26/different-from-all-tweet-history/",
        "teaser": null
      },{
        "title": "Rails - jpmobile で携帯・スマホ対応！",
        "excerpt":"現在、当方の Ruby on Rails 製ホームページは PC 用となっています。 携帯電話やスマートフォン等の携帯端末では、画面表示が崩れてしまいます。 そこで、当方のホームページを携帯・スマホにも対応すべく、 “jpmoblie” という RubyGem をインストールしてみました。 “jpmobile” とは、アクセスが携帯からなのか、スマホからなのかを判別して、レイアウトビューを振り分ける機能もある RubyGem パッケージです。 （他にも、携帯端末用の様々な機能があります） 以下、導入記録です。 0. 前提条件 使用する Rails は 4.0.0 を想定。 作業する OS は Linux Mint 14 を、ユーザは一般ユーザを想定。 jbmobile は gem でインストーする。（プラグインとしての導入はしない） 1. Gemfile 編集 RAILS_ROOT にある Gemfile に以下のように記述を追加する。 File: Gemfile 1 2 # Rails...","categories": ["プログラミング"],
        "tags": ["Ruby","Rails"],
        "url": "/2013/07/28/rails-install-jpmobile/",
        "teaser": null
      },{
        "title": "Rails - jpmobile でリダイレクト！",
        "excerpt":"当方の Ruby on Rails 製ホームページは、先日 jpmobile でスマートフォン対応しました。 携帯電話からのアクセスは需要が少ないと見込んで非対応としております。 しかし、携帯電話からのアクセスの際に無条件に PC 用ページが表示されてしまっては不親切ですので、携帯電話からアクセスされた場合は別途メッセージを表示させるようにしました。 Rails のコントローラ側で redirect_to を使用するのですが、それについて記録しておきます。 0. 前提条件 使用する Rails は 4.0.0 を想定。 jbmobile インストー済み。 （「Rails - jpmobile で携帯・スマホ対応！」を参照） 1. コントローラ編集 各コントローラ内でフィルタ設定を行う。 【リダイレクト先にコントローラを指定する場合】 File: top_controller.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class TopController...","categories": ["プログラミング"],
        "tags": ["Ruby","Rails"],
        "url": "/2013/07/29/rails-jpmobile-redirect/",
        "teaser": null
      },{
        "title": "Web サイトの sitemap.xml と robots.txt について！",
        "excerpt":"Web サイトやブログサイト等を運営していると、アクセスが気になります。 検索エンジンで検索に引っかかるようにするには色々と手段はありますが、検索エンジンのクローラ（ロボット）により収集されたデータで検索エンジン側でインデックスされる必要もあります。 黙っていれば勝手にクローラによりクロールされますが、ある程度指定しておいた方がよいでしょう。 “sitemap.xml” と “robots.txt” がキーになります。 以下に概要を記録しておくことにしました。 1. sitemap.xml について “sitemap.xml” は、検索エンジンのクローラがより正確にサイトの情報を取得できるようにするためのファイルです。 “sitemap.xml” が無くても検索エンジンのクローラはある頻度でサイトをクロールしますが、クローラの都合で勝手にクロールされたり、なかなかクロールされないページがあったりするので、SEO 対策として “sitemap.xml” ファイルを作成するのです。 1-1. sitemap.xml の記述方法 “sitemap.xml” の記述方法は「sitemaps.org - Protocol」に記載されいる。 例として、以下のような書式になる。（※配置場所はサイトのドキュメントルート） &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt; &lt;url&gt; &lt;loc&gt;http://www.mk-mode.com/&lt;/loc&gt; &lt;lastmod&gt;2013-07-10T13:57:16+09:00&lt;/lastmod&gt; &lt;changefreq&gt;monthly&lt;/changefreq&gt; &lt;priority&gt;0.8&lt;/priority&gt; &lt;/url&gt; : : &lt;/urlset&gt; &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; は決まり文句。（必須） urlset （必須） このタグ内に全てのページについての記載をする。 &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt;...","categories": ["Webサイト","ブログ"],
        "tags": ["HTML"],
        "url": "/2013/07/31/web-sitemap-robots/",
        "teaser": null
      },{
        "title": "2013年7月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"8月になりましたので、先月7月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 5,082 63.8683 Ubuntu Linux 1,236 15.5335 Mac OS 1,100 13.8243 Linux 396 4.9768 unknown 89 1.1185 Android 25 0.3142 Fedora Linux 10 0.1257 RedHat Linux 7 0.0880 Solaris 5 0.0628 PalmOS 2 0.0251 Wii 2 0.0251 FreeBSD 1 0.0126 SuSE Linux 1 0.0126...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/08/01/blog-access/",
        "teaser": null
      },{
        "title": "MySQL - InnoDB データファイル ibdata1 の最適化！",
        "excerpt":"MySQL のストレージエンジン InnoDB は、デフォルトでは ibdata1 というファイルにデータを保存・蓄積しています。 そして、この ibdata1 ファイルは、データ領域が不足すると自動で拡張されるようになっています。（設定により初期サイズと拡張サイズは異なる） ibdata1 ファイルのサイズは、データを削除しても縮小されることはないので、ファイルサイズはメンテナンスしないと日々拡大していきます。 以下、最適化についての記録です。 0. 前提条件 対象の MySQL サーバのバージョンは 5.6.11 （インストールは「こちら」の方法で行なっている） 対象のデータベースがストレージエンジンに InnoDB を使用している。 データファイルをテーブル単位で作成するように設定している。 この場合は、ibdata1 ファイル１個と、データベース用ディレクトリ配下にテーブル単位で ibd ファイル、frm ファイルが作成される。 デフォルトの設定の場合は、データベース１個に対し ibdata1 ファイル１個だけだがその場合も同様。 1. テーブルスペースファイルサイズの確認 テーブルスペースファイルのサイズを確認する。 # ls -l ib* -rw-rw---- 1 mysql mysql 268435456 7月 22 09:32 ib_logfile0 -rw-rw---- 1 mysql...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2013/08/03/mysql-innodb-optimization/",
        "teaser": null
      },{
        "title": "Octopress - sitemap.xml に更新頻度・優先度追加！",
        "excerpt":"Ruby 製静的ブログシステム Octopress では、ジェネレート時に sitemap.xml を生成してくれるプラグインがデフォルトで用意されています。 sitemap.xml は、検索エンジンのクローラに読ませるサイトのリンク情報・更新情報等が記載された XML 形式のファイルです。（「Web サイトの sitemap.xml と robots.txt について！」も参照） 適切なフォーマットで生成されるので、全く問題ありませんが、必須でないタグのうち changefreq タグ（更新頻度）と priority タグ（優先度）は組み込まれません。 以下、ジェネレート時に changefreq タグと priority タグも組み込むようにする設定についての記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Octopre 2.0.0 を使用。 ジェネレートに使用する Ruby は 2.0.0-p247 を想定。 調査した結果判明したことを記録しているだけであり、当方は実際には運用で実行はしていない。 1. sitemap.xml 確認（対応前） Octopress でジェネレートした際に生成される sitemap.xml は、デフォルトでは以下のようになります。 File: sitemap.xml...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/08/04/octopress-sitemap-option/",
        "teaser": null
      },{
        "title": "Linux - sudo パスワード持続時間の調節！",
        "excerpt":"Linux で一般ユーザ作業中に root 権限が必要になった際に sudo コマンドを使用すると思います。 その際に、パスワード入力をするのですが、次に sudo コマンドを使用する際に前回から時間が経過していた場合は、再度パスワード入力が要求されます。 root 権限が必要になる作業が多くなる場合は、若干うっとうしくなります。（root で作業してもよいのですが、サーバマシンでない限り root のまま作業し続けるのは、若干恐怖を感じるので） 以下、持続時間の調節についての備忘録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。（他の Linux ディストリビューションでも同様） sudo コマンドが利用できる環境になっている。 1. 設定ファイル編集 visudo コマンドで、以下のように “/etc/sudoers” 内で timestamp_timeout を設定する。（設定値は「分」単位） “/etc/sudoers” は vi で編集できないようになっているので visudo コマンドを使用する $ sudo visudo Defaults timestamp_timeout = 10 ちなみに、0 と設定した場合は毎回パスワード要求されるようなり、マイナス値を設定した場合はパスワード要求はされなくなる。 また、日本語化した...","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2013/08/06/linux-sudo-adjust-password-timeout/",
        "teaser": null
      },{
        "title": "Rails - sitemap generator で sitemap.xml 生成！",
        "excerpt":"Web サイトにはサイトマップというものを設置して、そのサイトにどのようなページ（リンク）があるのかを知らせる方法があります。 人が目で見て確認するサイトマップページ（HTML 形式）はよく見かけると思いますが、検索エンジンのクローラ（ボット）に検索してもらうためには、HTML 形式のサイトマップではなく、XML 形式のものが必要となります。（通称、sitemap.xml（robots.txt と併用）） サイトの規模が大きくなると、自分でサイトマップを作成するのは手がかかりすぎて大変です。 sitemap.xml を生成してくる Web サービスも存在しますが、サイトを更新する頻度が高い場合には、その都度そのサービスを利用するのも面倒です。 Rails 製サイトの場合、sitemap generator という RubyGem ライブラリを利用すれば sitemap.xml ファイルを容易に生成できるようになるようなので、試してみました。 以下、作業記録です。 0. 前提条件 Ruby 2.0.0-p247, Rails 4.0.0 で作業、動作確認した。 1. Gemfile 編集 Gemfile に sitemap generator をインストールするための記述を追加する。 File: Gemfile 1 gem 'sitemap_generator' 2. インストール いつものようにインストールする。 $ bundle install $ bundle list...","categories": ["Webサイト"],
        "tags": ["HTML","Ruby","Rails"],
        "url": "/2013/08/08/rails-sitemap-generator/",
        "teaser": null
      },{
        "title": "Vim - Vundle インストール！",
        "excerpt":"高機能テキストエディタ Vim には、多数のプラグインが存在しますが、インストール方法がいくつかあリ混在すると管理が煩雑になってしまいます。 今回は、Vim プラグインを管理するプラグインについてです。 Vim プラグインを管理するプラグインには Vundle, NeoBundle, pathogen 等色々存在しますが、今回は Vundle をインストールしてみました。 以下、作業記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 作業を行う Vim は 7.3.547 git が使用できるよう環境である。 1. Vundle インストール 以下のように、git clone でインストールする。 $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle 2. 設定ファイル編集 Vim 設定ファイル .vimrc を以下のように編集する。 以下の例では、”tpope/vim-fugitive” という Git を管理する GitHub 上に置いてあるリポジトリをインストールするように設定している。...","categories": ["PC_Tips"],
        "tags": ["Linux","Vim"],
        "url": "/2013/08/10/vim-install-vundle/",
        "teaser": null
      },{
        "title": "Vim - Git 用プラグイン vim-fugitive のインストール！",
        "excerpt":"Vim エディタで作業しながら Git でも作業を行う場合、エディタとターミナルと行き来するのが意外と苦になるようになりました。 そこで、Vim で Git の操作ができるプラグイン “vim-fugitive” をインストールしてみました。 以下、作業記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Vim が使える状態である。 Git が使える状態である。 1. vim-fugitive インストール 「tpope/vim-fugitive」の README の説明通り、以下のようにする。 $ cd ~/.vim/bundle $ git clone git://github.com/tpope/vim-fugitive.git ちなみに、Vundle（Vim プラグイン管理用プラグイン）を導入済みなら、”.vimrc” に以下の記述を追加して :BundleInstall する。（「過去記事」参照） Bundle 'tpope/vim-fugitive' 2. 使用方法 ヘルプは :help fugitive で確認できるが、よく使用するであろう主なコマンドについての簡単な説明を残しておく。 :Git [args]...","categories": ["PC_Tips"],
        "tags": ["Linux","Vim","Git"],
        "url": "/2013/08/11/vim-install-fugitive/",
        "teaser": null
      },{
        "title": "Vim - Git 用プラグイン gitv のインストール！",
        "excerpt":"多機能エディタ Vim で Git の GUI ツールと同等のこと行えるプラグインに gitv というものがあります。 リビジョンの一覧が表示され、リビジョン選択でファイルの変更が表示されるといった機能があります。 当方も、この gitv をインストールしてみました。 以下、作業記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Vim が使える状態である。 Git が使える状態である。 Vim に vim-fugitive がインストール済みである。（gitv は fugitive に依存しているため） （fugitive のインストール方法等については「Vim - Git 用プラグイン vim-fugitive のインストール！」を参照） 1. gitv インストール 以下のようにしてインストールする。 $ cd ~/.vim/bundle $ git clone git://github.com/gregsexton/gitv.git...","categories": ["PC_Tips"],
        "tags": ["Linux","Vim","Git"],
        "url": "/2013/08/12/vim-install-gitv/",
        "teaser": null
      },{
        "title": "Vim - プラグイン sudo.vim のインストール！",
        "excerpt":"Vim を使用していて、root 権限のないファイルを sudo vim （vim を vi に alias している場合は sudo vi）で開く際に以下のようなメッセージが出力されることがあります。（補完プラグイン neocomplcache をインストールしている場合） $ sudo vi /etc/my.cnf neocomplcache disabled: \"sudo vim\" is detected and $HOME is set to your user's home. You may want to use the sudo.vim plugin, the \"-H\" option with \"sudo\" or set always_set_home in...","categories": ["PC_Tips"],
        "tags": ["Linux","Vim"],
        "url": "/2013/08/13/vim-install-sudo/",
        "teaser": null
      },{
        "title": "Ruby - 日本語部分のみ URL エンコード！",
        "excerpt":"Ruby + OpenURI で URL を読み込む際に、URL に日本語が含まれているとそのままでは読み込めないため、URL エンコードして読み込みます。 しかし、URL 全体をまとめて URL エンコードすると、日本語以外でエンコードされてしまう部分もあります。（/ や # 等） 以下、各種エンコード方法の比較と対策についての記録です。 0. 前提条件 Ruby 2.0.0-p247 での作業を想定。 エンコード前の URL とエンコード後の期待する結果は以下のとおり。 [ エンコード前 ] URL_1 = \"http://www.mk-mode.com/テスト\" URL_2 = \"http://www.mk-mode.com/#test\" [ エンコード後の期待する結果 ] URL_1 = \"http://www.mk-mode.com/%E3%83%86%E3%82%B9%E3%83%88\" URL_2 = \"http://www.mk-mode.com/#test\" 1. 検証用 Ruby スクリプト作成 以下のような簡単な各種エンコード検証用の Ruby スクリプトを作成する。また、期待する結果になるようなメソッドも作成している。 require...","categories": ["プログラミング"],
        "tags": ["Ruby","正規表現"],
        "url": "/2013/08/15/ruby-url-encode-only-japanese/",
        "teaser": null
      },{
        "title": "Ruby - フリーゲルの公式で日数計算！",
        "excerpt":"２年ぐらい前に、「フリーゲルの公式」を使って異なる２つの日付の「修正ユリウス日」を算出し２つの日付の日数差を求める方法について紹介しました。 * 日数計算の方法！ 今日は、その公式を使用して異なる２つの日付の日数差（第２日付の第１日付からの経過日数）を求める Ruby スクリプトを紹介します。（実際、単純に公式を当てはめて計算しているだけです） 0. 前提条件 Ruby 2.0.0-p247 で作業・動作確認済。 ユリウス日については「* 日数計算の方法！」でも説明している。 ユリウス日 … 紀元前4713年01月01日正午からの経過日数 修正ユリウス日 … 西暦1858年11月17日午前0時からの経過日数（= ユリウス日 - 2400000.5 日した日数） 計算対象の日付は西暦の日付に限定する。 時・分・秒は考慮しない。 1. Ruby スクリプト 以下のように Ruby スクリプトを作成した。 File: calc_num_of_days.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["プログラミング"],
        "tags": ["Ruby","カレンダー"],
        "url": "/2013/08/17/ruby-calc-number-of-days/",
        "teaser": null
      },{
        "title": "Ruby - 定数一覧取得！",
        "excerpt":"Ruby でプログラミング中に、どのような定数がどのような値で定義されているのか確認したいことがあります。 以下、備忘録です。 0. 前提条件 Ruby 2.0.0-p247 での作業・動作確認を想定。 1. クラス内定義の定数をクラス内で確認 クラス（またはモジュール）内で定義した定数の一覧をそのクラス内で確認するには以下のようにする。 class Hoge HOGE = \"TEST_HOGE\" constants.each do |c| puts \"#{c} = #{const_get(c)}\" end end File: 実行結果 1 HOGE = TEST_HOGE 2. クラス内定義の定数をクラス外から確認 クラス（またはモジュール）内で定義した定数の一覧をそのクラスの外から確認するには以下のようにする。 class Hoge HOGE = \"TEST_HOGE\" end Hoge.constants.each do |c| puts \"#{c} = #{Hoge.const_get(c)}\" end File: 実行結果...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2013/08/18/ruby-get-constants-list/",
        "teaser": null
      },{
        "title": "Ruby - RbConfig でインストール時の情報取得！",
        "excerpt":"Ruby をインストール（インタープリタ作成）する際に設定した情報を確認する方法についての備忘録です。 0. 前提条件 Ruby 2.0.0-p247 での作業・動作確認を想定。 1. 設定値の確認 以下のようにすれば、設定値（キー、値）を確認できる。 RbConfig::CONFIG.sort.each { |c| p c } File: 実行結果 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 [\"ALLOCA\", \"\"] [\"AR\", \"ar\"] [\"ARCHFILE\", \"\"] [\"ARCH_FLAG\", \"\"] [\"AS\",...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2013/08/19/ruby-check-rbconfig/",
        "teaser": null
      },{
        "title": "Ruby - Anemone でサイト内リンク一覧取得！",
        "excerpt":"通常、サイト内のリンクを検索するには HTML パーサ等を使用するかと思います。（Ruby だと Nokogiri, Hpricot 等） しかし、自分で HTML パーサを使用しなくても簡単にリンクの一覧を取得できるライブラリがあります。 Anemone という RubyGems ライブラリです。 以下、インストール方法と使用例の紹介です。 0. 前提条件 Ruby 2.0.0-p247 での作業・動作確認を想定。 1. anemone インストール RubyGems ライブラリなので、いつものようにインストールできる。 $ gem install anemone 2. Ruby スクリプト作成例 以下のように、簡単な例を作成してみた。 File: test_anemone.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 require 'anemone'...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2013/08/20/ruby-get-link-list-by-anemone/",
        "teaser": null
      },{
        "title": "Ruby - サイト内リンク切れチェック！",
        "excerpt":"ある特定の Web サイト内に存在するリンク（a タグの href 属性）が切れているか否かのチェックする Ruby スクリプトを作成してみました。 ある有名なブログソフトのプラグインや RubyGems ライブラリに存在するような複雑なものではありませんが、それらのソースコードも若干参考にしています。 以下、参考までに Ruby スクリプトのご紹介。 0. 前提条件 Ruby 2.0.0-p247 での作業を想定。 Proxy 経由の接続は考慮する。 日本語を含む URL にも対応。 再帰的にはチェックしない。 1. Ruby スクリプト HTTP 関連については色々な記述方法があるが、今回は以下のように Ruby スクリプトを作成した。（概要はスクリプトの後に記している） （必要な RubyGems ライブラリ等はあらかじめインストールしておく） File: check_link.rb 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2013/08/21/ruby-check-link/",
        "teaser": null
      },{
        "title": "シェルスクリプト - サービス起動確認！",
        "excerpt":"Linux 上シェルスクリプト内でサービス（プロセス）が起動しているかどうかを確認する方法についての備忘録です。 プロセス確認でよく使用するのは ps aux や top コマンドですが、ps コマンドに grep コマンド等をパイプして起動中のプロセス数を取得し、その数で起動しているか停止しているかを判定します。（当方は、シェルスクリプト内でよく使用します） 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 ps（procps-ng）のバージョンは 3.3.3 を想定。 ps コマンドは BSD 系 Unix の ps コマンドと似ているが若干異なる。 BSD 系 Unix 由来のオプションには - を付与しないことに注意。 1. 方法・その１ 1-1. コマンド $ ps -ef | grep mysqld | grep -v grep |...","categories": ["サーバ構築"],
        "tags": ["Linux","シェル","bash"],
        "url": "/2013/08/22/shellscript-check-ps/",
        "teaser": null
      },{
        "title": "Ruby - RMagick で画像情報取得！",
        "excerpt":"今回は、RMagick で画像の各種情報を取得する方法についてです。 RMagick とは、ImageMagick 画像処理ライブラリ等を Ruby から呼び出せるようにできるインターフェースの機能を持った RubyGems ライブラリです。 RMagick 以外にも画像の情報を取得できるライブラリ等はあるようですが、他の機能も含めトータルで考えて RMagick を使用することとしました。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Ruby 2.0.0-p247 で作業・動作確認。 画像編集ソフト ImageMagick(当方は 6.7.7-10) インストール済み。 1. RMagick インストール 画像を扱える RubyGems ライブラリ RMagick をインストールする。 $ sudo gem install rmagick $ gem list | grep rmagick rmagick (2.13.2) “Magic-config” が無いというエラーになる場合は、”libmagickcore-dev”...","categories": ["プログラミング"],
        "tags": ["Ruby","画像","ImageMagick","RMagick"],
        "url": "/2013/08/23/ruby-get-image-info-by-rmagick/",
        "teaser": null
      },{
        "title": "Ruby - ディレクトリ配下の全 Markdown ファイルからリンク一覧を取得！",
        "excerpt":"あるディレクトリ配下に存在する全てのファイル（Markdown ファイル）から、リンク（リンクテキスト、リンクアドレス、リンクタイトル）を全て抽出し一覧にすることについてです。 Markdown 記法とは、簡単に言えば、容易に HTML (HyperText Markup Language) に変換できる記法（Markup の反対という意味で Markdown）のことですが、ブログシステム等で採用しているものも多数有ります。 また、普段からのプレーンテキスト入力時にも Markdown 記法を使用することでフォーマットが統一化され、可読性も良くなることから、当方はいつも Markdown を意識して入力するようにしています。 ちなみに、Markdown 記法でのリンクは以下のようなフォーマットにすることとなっています。 [リンクテキスト](リンクアドレス \"リンクタイトル\") そして、この記述は HTML に変換されると以下のようになるはずです。 &lt;a href=\"リンクアドレス\" title=\"リンクタイトル\"&gt;リンクテキスト&lt;/a&gt; 以下、指定のディレクトリ配下の全ファイルから全てのリンクを取得する Ruby スクリプトの紹介です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Ruby 2.0.0-p247 で作業・動作確認。 Markdown ファイルとは言っているものの、実体はプレーンテキストファイルである、ということを認識しておく。 したがって、ファイルの拡張子等で Markdown か否かの判定は行わない。 Markdown パーサや HTML パーサは使用せず、純粋にテキストファイルを読み込んで正規表現で該当箇所を抽出する。 指定するディレクトリ配下にサブディレクトリがあってもよい。（再帰的にファイル一覧を取得するので） 指定するディレクトリ配下にプレーンテキストファイルではないファイル（バイナリ）があってもよい。...","categories": ["プログラミング"],
        "tags": ["Ruby","Markdown"],
        "url": "/2013/08/24/ruby-get-link-list-from-md-file/",
        "teaser": null
      },{
        "title": "Vim - プラグイン管理を Vundle から NeoBundle へ移行！",
        "excerpt":"以前、高機能テキストエディタ Vim のプラグイン管理のプラグイン Vundle について紹介しました。 Vim - Vundle インストール！ - mk-mode BLOG しかし、Vundle より新しく機能強化されている NeoBundle というプラグインもあります。（作者は Vundle と同じ方　Vundle と似たようなプラグインですが、作者は異なるようです。（2013/08/26 修正）） 当方も今回、 Vundle から NeoBundle に移行しましたので、その際の記録を残しておきます。 （当然、Vundle だけでなく他のプラグイン管理プラグインからの移行や、新たにプラグイン管理プラグインを導入しようという方にも参考になるかと思います） 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 作業を行う Vim は 7.3.547 git が使用できるよう環境である。 Vundle がインストール済みである。 プラグイン管理プラグインについては不勉強なので、詳細は説明しない（できない）。 インストール方法と最低限の設定方法についてのみ記載する。 1. Vundle 関連削除 まず、Vundle でインストールしたプラグインの格納されているディレクトリ “~/.vim/bundle”...","categories": ["PC_Tips"],
        "tags": ["Linux","Vim"],
        "url": "/2013/08/25/vim-install-neobundle/",
        "teaser": null
      },{
        "title": "Ruby - RMagick 利用可能フォント一覧画像作成！",
        "excerpt":"RMagick（Ruby で 画像処理ライブラリ ImageMagick を扱える RubyGems ライブラリ） でどのようなフォントが利用可能かは容易に一覧にできます。 しかし、それだけでは実際にどのようなフォント（見た目）なのかがわかりません。 そこで今回は、RMagick で利用が可能なフォントの一覧を Ruby + RMagick で画像にしてみました。 以下、作成した Ruby スクリプト等の紹介です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Ruby 2.0.0-p247 で作業・動作確認。 画像編集ソフト ImageMagick (当方は 6.7.7-10) インストール済み。 RubyGems ライブラリ RMagick インストール済み。 1. Ruby スクリプト作成 以下のような Ruby スクリプトを作成してみた。 概要はスクリプト内にコメントで記述している。 File: rmagick_available_fonts.rb 1 2 3 4...","categories": ["プログラミング"],
        "tags": ["Ruby","画像","ImageMagick","RMagick"],
        "url": "/2013/08/26/ruby-available-fonts-of-rmagick/",
        "teaser": null
      },{
        "title": "Ruby - RMagick で画像内に文字を描画！",
        "excerpt":"今回は、RMagick（Ruby で画像処理ライブラリ ImageMagick を扱える RubyGems ライブラリ）で画像内に文字を描画してみました。 実際は、前回の RMagick で利用可能なフォントの一覧画像を作成する処理の応用です。 Ruby - RMagick 利用可能フォント一覧画像作成！ 以下、作成した Ruby スクリプト等の紹介です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Ruby 2.0.0-p247 で作業・動作確認。 画像編集ソフト ImageMagick(当方は 6.7.7-10) インストール済み。 RubyGems ライブラリ RMagick インストール済み。 1. Ruby スクリプト作成 以下のような画像内にコピーライトを描画する Ruby スクリプトを作成してみた。 概要はスクリプト内にコメントで記述している。（ちなみに、文字描画前の画像をリネームして退避させたり、背景の色合いによって可読性があまり悪くならないように文字に影を付けたりしている） File: write_copyright.rb 1 2 3 4 5 6 7...","categories": ["プログラミング"],
        "tags": ["Ruby","画像","ImageMagick","RMagick"],
        "url": "/2013/08/28/ruby-write-character-by-rmagick/",
        "teaser": null
      },{
        "title": "Facebook API - アクセストークン！",
        "excerpt":"Facebook の各種情報をより多く取得する際等に、ユーザIDやシークレットコード以外に「アクセストークン」というものを使用します。 アクセストークンを使用しなくても取得できる情報はありますが、その量は少ないです。 以下、アクセストークンについての概要と取得方法についての簡単な記録です。 0. 前提条件 当然 Facebook アカウントを取得済みである。 今回はアクセストークンのうち、”User Access Token”, “App Access Token” の取得方法のみ紹介する。 App Access Token 取得用に Facebook アプリを作成済みである。 Facebook API は非常に頻繁に仕様変更があるため、当記事の内容が通用しなくなる可能性は非常に大きい。 1. Facebook アクセストークンの種類 当記事執筆時点では、以下の４種類のアクセストークンがある。 User Access Token … Facebook ユーザ用のアクセストークン。有効期限は１時間か２時間、もしくは60日間。 App Access Token … Facebook アプリ用のアクセストークン。有効期限は無期限。 Page Access Token … Facebook ページ用のアクセストークン。 Client Token …...","categories": ["SNS"],
        "tags": ["Facebook"],
        "url": "/2013/08/29/facebook-api-access-token/",
        "teaser": null
      },{
        "title": "Facebook API - テストユーザ作成！",
        "excerpt":"Facebook API を利用して Facebook アプリを作成したり Facebook から情報を取得する際に、既存の自分のアカウントで何度もテストを行なっていると、アクセス制限に引っかかりアカウントが一時凍結される可能性があります。 （ちなみに、「アクセス制限は、１組のアクセストークン＆IPアドレス当たり600秒（10分）に600回」という情報がありますが、真実は不明です。また、API 呼び出しが１日に１億回を超えるような場合は別の規定が適用されるようです。さらに、テストユーザーのアクセス制限についても不明です。） かと言って、実在しない人物のアカウントを作成することは認められていないため、開発用であっても Twitter のように何個もアカウント作成することもできません。 そこで、Facebook にはテストユーザーという Facebook アプリに紐付いたテスト専用のアカウントを作成することが可能になっています。 以下、テストユーザー作成方法についての記録です。 0. 前提条件 当然 Facebook アカウント取得済み。 当然 Facebook アプリ作成済み。 テストユーザーには以下のような機能があることを認識しておく。 紐付いている Facebook アプリにアクセスできる。 テストユーザー同士で友人になることができる。 テストユーザーは複数作成できる（１つの Facebook アプリにつき 2,000 まで） テストユーザーには以下のような制限事項があることを認識しておく。 一般ユーザーと友人になることができない。 Facebook ページを作ることができない。 後で一般アカウントに切り換えることができない。 Facebook 仕様についての記述は、当記事執筆時点の情報。 Facebook API は非常に頻繁に仕様変更があるため、当記事の内容が通用しなくなる可能性は非常に大きい。 1. 画面でのテストユーザー作成 「facebook developers」の画面でテストユーザーを作成する方法について至極簡単に説明する。 【１】アプリ管理画面でテストユーザーを作成したいアプリのページを表示する。...","categories": ["SNS"],
        "tags": ["Facebook"],
        "url": "/2013/08/30/facebook-api-create-testusers/",
        "teaser": null
      },{
        "title": "Ruby - Facebook API でアカウント情報取得！",
        "excerpt":"Ruby + Facebook API で自分のアカウントの情報を取得する方法についてです。 ただし、Facebook API 用の RubyGems ライブラリは使用しません。 忠実に、HTTP リクエストを投げて、戻ってきた JSON 形式のデータを取得する方法です。 0. 前提条件 Ruby 2.0.0-p247 で作成・動作確認。 当然 Facebook アカウント取得済み。 当然 Facebook アプリ作成済み。 アクセストークンには複数種類があることを認識している。（「Facebook API - アクセストークン！」も参照） Facebook API は非常に頻繁に仕様変更があるため、当記事の内容が通用しなくなる可能性は非常に大きい。 1. Ruby スクリプト作成 以下のような Ruby スクリプトを作成する。 実際に使用する場合は、定数に値を設定する。 また、以下は取得したデータを一括で出力しているが、JSON 形式データなので当然個別に指定して取得することも可能。 もちろん、URL を指定する時点で取得する項目を指定することも可能。（クエリストリングに fields=id,name 等を付与することで） （ちなみに、App Access Token では自アカウントに “me”...","categories": ["SNS"],
        "tags": ["Facebook","Ruby"],
        "url": "/2013/08/31/facebook-api-get-personal-info/",
        "teaser": null
      },{
        "title": "2013年8月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"9月になりましたので、先月8月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 5,124 66.1076 Mac OS 1,244 16.0495 Ubuntu Linux 853 11.0050 Linux 372 4.7994 unknown 56 0.7225 Android 48 0.6193 FreeBSD 26 0.3354 RedHat Linux 11 0.1419 Fedora Linux 10 0.1290 Solaris 3 0.0387 NetBSD 1 0.0129 PalmOS 1 0.0129 SuSE Linux 1 0.0129...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/09/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - Facebook API で「いいね」一覧取得！",
        "excerpt":"Ruby + Facebook API で自分のアカウントの「いいね」している一覧を取得する方法についてです。 ただし、Facebook API 用の RubyGems ライブラリは使用しません。 忠実に、HTTP リクエストを投げて戻ってきた JSON 形式のデータを取得する方法です。 0. 前提条件 Ruby 2.0.0-p247 で作成・動作確認。 当然 Facebook アカウント取得済み。 当然 Facebook アプリ作成済み。 アクセストークンには複数種類があることを認識している。（「Facebook API - アクセストークン！」も参照） Facebook アプリの詳細設定で、2013/10/02 からデフォルト設定になる “October 2013 Breaking Changes” を今から適用したいので、この設定を「有効」にする。（後述の参考サイトを参照） （現在は、”USER_ID/likes” がデフォルトでは全件取得するが、2013/10/02 以降はデフォルトで25件取得しページング機能も有効になる。この機能を今から利用するということ） Facebook API は非常に頻繁に仕様変更があるため、当記事の内容が通用しなくなる可能性は非常に大きい。 1. Ruby スクリプト作成 以下のような Ruby スクリプトを作成する。 実際に使用する場合は、定数に値を設定する。...","categories": ["SNS"],
        "tags": ["Facebook","Ruby"],
        "url": "/2013/09/02/facebook-api-get-likes-list/",
        "teaser": null
      },{
        "title": "ImageMagick - ２枚の画像を比較！",
        "excerpt":"２枚の画像が全く同じものかどうかを確認したいことがごく稀にあるかと思います。 画像処理ソフト ImageMagick のコマンドを使用して比較する方法についての記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業・動作確認を想定。 画像処理処理ソフト ImageMagick がインストール済みである。 今回の作業で使用した画像は以下の３つ。（全てサイズが同じであること） 元のJPEG画像 元のJPEG画像の70%品質のJPEG画像 元のJPEG画像に文字を描画したJPEG画像 1. 元のJPEG画像と元の70%品質のJPEG画像とノイズ量を比較 ImageMagick の compare コマンドを使用して２枚の画像（元のJPEG画像と70%品質のJPEG画像）を比較する。 compare コマンドは、２つ目の画像が１つ目の画像よりどれだけ劣化しているかを確認するためのコマンドであり、 -metric オプションでどのアルゴリズムで劣化具合を数値化するかを指定できる。今回は PSNR （= ピーク信号対雑音比）を使用した。（PSNR についての詳細は別途お調べください） PSNR の計算式の特性から、全く同じ（全く劣化のない）画像なら分母がゼロになって除算できず、inf が返ってくる。 数値が返ってくれば、少なからず２つの画像の間に一致しない（劣化している）部分があると判断できる。 $ compare -metric PSNR TEST_1.jpg TEST_2.jpg diff_1.jpg 42.7951 -verbose オプションで詳細情報も出力される。 $ compare -verbose -metric...","categories": ["PC_Tips"],
        "tags": ["画像","ImageMagick"],
        "url": "/2013/09/04/imagemagick-compare-two-images/",
        "teaser": null
      },{
        "title": "Ruby - RMagick で画像内使用色を集計！",
        "excerpt":"少し前に、Ruby + RMagick で画像から各種情報を取得したり、画像内に文字を描画したりしました。 今回は、ある画像内で使用されている色（どの色がどのくらいの割合で使用されているか）を集計してみました。 以下、その記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Ruby 2.0.0-p247 で作業・動作確認。 画像編集ソフト ImageMagick(当方は 6.7.7-10) インストール済み。 RubyGems ライブラリ RMagick(当方は 2.13.2) がインストール済み。 1. Ruby スクリプト作成 例として、以下のように Ruby スクリプトを作成してみた。 色は16進数で取得するので、ある程度大きい画像だと色の数が膨大になる。そのため、ある％未満の色は非表示にするようにしている。 また、スクリプトを見ると分かるが、inject メソッドを使ったり、ソートで宇宙船演算子を使用したりしている。Ruby の勉強にもなるでしょう。 さらに、RMagick の color_histogram メソッドを使用して一括で色のヒストグラムを取得しているが、全ピクセルの色情報をループ処理で取得（pixel_color(x, y) で取得）して集計することもできるでしょう。 File: rmagick_compile_color.rb 1 2 3 4 5 6 7...","categories": ["プログラミング"],
        "tags": ["Ruby","画像","ImageMagick","RMagick"],
        "url": "/2013/09/05/ruby-compile-colors-by-rmagick/",
        "teaser": null
      },{
        "title": "MySQL - ストアドプロシージャで FizzBuzz！",
        "excerpt":"MySQL のストアドプロシージャを使用して FizzBuzz を出力することを試行してみました。 ふと思い付いて試してみた次第です。 以下、２種類のストアドプロシージャを紹介します。 0. 前提条件 MySQL サーバは 5.6.13 を想定。 MySQL クライアントは 5.5.31 を想定しているが、サーバと同じバージョンであれば問題ない。 （通常はサーバとクライアントのバージョンは同じはずであるが、当方は意図的に異なるバージョンにしている） テーブルに INSERT する意味はないので、テーブルは作成しないが、DB は用意しておく。 （既存の DB があればそれでよい。当方は test という DB を使用している） 1. ストアドプロシージャ・その１ FizzBuzz の基本的なアルゴリズムに則って、単純にループして処理を行なうロジックとしている。 File: fizzbuzz_1.sql 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["サーバ構築"],
        "tags": ["MySQL"],
        "url": "/2013/09/07/mysql-fizzbuzz-by-stored-procedure/",
        "teaser": null
      },{
        "title": "bash - シェルスクリプトで FizzBuzz！",
        "excerpt":"シェルスクリプト bash で FizzBuzz を出力することを試行してみました。 ふと思い付いて試してみた次第です。 以下、備忘録です。 0. 前提条件 Linux Mint 14 (64bit) での作業・動作確認を想定。 bash 4.2.37 での作業・動作確認を想定。 1. シェルスクリプト作成 FizzBuzz の基本的なアルゴリズムに則って単純にループして処理を行なうロジックは言わずもがななので、再帰的な処理を行うロジックとしてみた。 File: fizzbuzz_1.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/bin/bash function fizzbuzz() { if [ $1 -gt...","categories": ["サーバ構築"],
        "tags": ["Linux","シェル","bash"],
        "url": "/2013/09/08/bash-fizzbuzz/",
        "teaser": null
      },{
        "title": "Linux - Tesseract OCR で 文字認識！",
        "excerpt":"画像内の文字を認識したいことがあると思います。 今回は Linux で OCR を行なってみました。 OCR とは Optical Character Recognition の略で光学文字認識のことです。 ちなみに、 OMR は Optical Mark Recognition(Reading) の略で光学式マーク認識（読取）のことです。 OCR ソフトには、有償のもの、無償のもの、GUI ベースのもの、CUI ベースのもの等多数存在しますが、今回は Google が C++ で開発している Apache 2.0 ライセンスのあらゆるプラットフォームで動作可能な Tesseract OCR を使用してみました。 以下、作業記録です。 0. 前提条件 Linux Mint 14 (64bit) での作業・動作確認を想定。 Tessarct OCR はパッケージを使用してインストールを行う。 （ソースをビルドしていインストールを行う方法もあります。） 1. Tessarct OCR インストール 以下のようにして...","categories": ["PC_Tips"],
        "tags": ["Linux","画像"],
        "url": "/2013/09/10/linux-tesseract-ocr/",
        "teaser": null
      },{
        "title": "Linux - tail コマンドで行を抽出！",
        "excerpt":"Linux で、動的にテキストが追加されていくテキストファイルの内容をリアルタイムで確認するのに、tail コマンドをよく使用すると思います。 無条件にコンソール出力するのなら何ら問題はありませんが、行を抽出したい（不要な行を出力させたくない）ことがあります。 以下、そんな場合の対策方法についての備忘録です。 0. 前提条件 Linux Mint 14 (64bit) での作業・動作確認を想定。 1. tail コマンドで行を抽出する方法 次のコマンドは、コンソール出力対象のテキストファイル名を “test.txt” とし、”hoge” という文字列を含む行のみを抽出したい場合の例である。 grep コマンドをパイプして実行するが、リアルタイムでコンソール出力させるには --line-buffered というオプションが必要である。 --line-buffered オプションが指定しないと、grep コマンドが結果をバッファに格納してしまい、ある程度たまってからでないと出力されない。 $ tail -f test.txt | grep --line-buffered hoge 逆に、”fuga” という文字列を含まない行のみを抽出したい場合は以下のようにする。 $ tail -f test.txt | grep --line-buffered -v fuga --line-buffered オプションについては、man grep には説明がありませんが、grep --help...","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2013/09/12/linux-pickup-lines-by-tail-command/",
        "teaser": null
      },{
        "title": "Linux - tail コマンド応用！",
        "excerpt":"Linux を含む Unix 系 OS でサーバ管理している方なら tail コマンドでログを監視するのは日常業務の１つだと思います。 特に、tail -f hoge.log のようにしてリアルタイムで監視しているでしょう。 以下、tail コマンドを応用した当方が日常的に使用している方法についての備忘録です。 0. 前提条件 CentOS 6.4, Linux Mint 14 で動作確認済み。（Unix 系 OS ならどれも同じでしょう） 1. 複数ファイルを同時に監視 単純に、監視したいファイルをスペースを空けて指定すれば良い。 $ tail -f hoge.log fuga.log ==&gt; hoge.log &lt;== AAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAA : ===&lt; 途中省略 &gt;=== : AAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAA ==&gt; fuga.log &lt;== BBBBBBBBBBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBBBBBBBBB...","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2013/09/13/linux-apply-tail-command/",
        "teaser": null
      },{
        "title": "Ruby - CSV ファイルを HTML table タグに変換！",
        "excerpt":"２年くらい前には、CSV データを HTML の table タグに変換する GUI アプリを Microsoft Visual Basic で作成したことを記事にしました。 * VisualBasic - CSVをTABLEタグに変換！ 最近はプライベートで Windows 系 OS に触れることがないので、同様のツール（ただし、CUI ベース）を Ruby で作成しました。 単純に CSV ファイルを読み込んで、 HTML に変換しているだけですが、以下で作成した Ruby スクリプトを紹介します。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Ruby 2.0.0-p247 で作業・動作確認。 CSV ファイルのヘッダ行と明細行の区別はしない。 1. CSV ファイル作成 変換に使用する CSV ファイルを用意しておく。 今回は以下のような...","categories": ["プログラミング"],
        "tags": ["Ruby","HTML"],
        "url": "/2013/09/14/ruby-convert-csv-to-html-table/",
        "teaser": null
      },{
        "title": "ImageMagick - コマンドラインで図形描画！",
        "excerpt":"画像処理ソフト ImageMagick でコマンドラインから画像に図形を描画する方法についての備忘録です。 個人的に画像内での位置（X座標、Y座標）を確認するために使用したコマンドの例です。 0. 前提条件 Linux Mint 14 (64bit) での作業・動作確認を想定。 画像処理処理ソフト ImageMagick がインストール済みである。 今回使用する画像のサイズは、横：640px, 縦：480px 今回描画するのは、直線と円のみ。（ついでに文字も） 1. 図形描画コマンド 以下のようにコマンドを実行する。 画像の中心を通る垂直な直線と水平な直線、画像の中心を円の中心とた半径10pxの円、中心の右上に文字列を描画している。 書式は convert test.jpg ＜オプション＞ test_after.jpg $ convert test.jpg -strokewidth 2 \\ -stroke white -draw \"line 320,0 320,479\" \\ -draw \"line 0,240 639,239\" \\ -stroke cyan -fill none -draw \"circle...","categories": ["PC_Tips"],
        "tags": ["画像","ImageMagick"],
        "url": "/2013/09/16/imagemagick-write-shapes-by-commandline/",
        "teaser": null
      },{
        "title": "ImageMagick - convert コマンドで画像変換！",
        "excerpt":"コマンドラインから画像処理ソフト ImageMagick の convert コマンドを使用して、画像を色々と変換してみました。 convert コマンドでどのような変換ができるかを確認するためです。 今回、やってみたことは以下の通り。 0. 前提条件 Linux Mint 14 (64bit) での作業・動作確認を想定。 画像処理処理ソフト ImageMagick がインストール済みである。 画像に関する用語については説明しない。必要であれば、別途お調べください。 今回使用する画像以下のような画像（ファイル名：”test.jpg”, 幅：320px, 高さ：240px） サイズ変更 画像のサイズをピクセル値を指定して変更する場合は、以下のようにする。 $ convert test.jpg -geometry 240x180 test_resize_1.jpg 画像のサイズを比率を指定して変更する場合は、以下のようにする。 $ convert test.jpg -geometry 100%x70% test_resize_2.jpg 80%x80% のように幅・高さが同じなら 80% と記述してもよい。 また、元の画像のサイズより小さくなる場合のみ適用したいときは 240x180&gt; と、元の画像のサイズより大きくなる場合のみ適用したいときは 240x180&lt; とするようだ。 上下反転 画像を上下反転させたい場合は、以下のようにする。 $ convert...","categories": ["PC_Tips"],
        "tags": ["画像","ImageMagick"],
        "url": "/2013/09/18/imagemagick-convert-by-commandline/",
        "teaser": null
      },{
        "title": "C++ - 連立方程式解法（ガウス・ジョルダン法）！",
        "excerpt":"今回は、連立方程式を「ガウス・ジョルダン法」で解くアルゴリズムを C++ で実装してみました。 以下、簡単な説明と C++ ソースコードの紹介です。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 1. ガウス・ジョルダン法による連立方程式の解法について（簡単に） （数式が多いので、\\(\\LaTeX\\) で記載） 2. C++ ソース作成 File: gauss_jorden.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/09/20/cpp-simultaneous-equation-by-gauss-jorden/",
        "teaser": null
      },{
        "title": "Ruby - 連立方程式解法（ガウス・ジョルダン法）！",
        "excerpt":"前回は、C++ による「連立方程式の解法（ガウス・ジョルダン法）」のアルゴリズムを紹介しました。 C++ - 連立方程式解法（ガウス・ジョルダン法）！ 今回は、同じアルゴリズムを Ruby で実現してみました。アルゴリズムについては、上記リンクの記事を参照してください。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p247 を使用。 連立方程式の解法（ガウス・ジョルダン法）についての説明は割愛。（「C++ - 連立方程式解法（ガウス・ジョルダン法）！」を参照） 1. Ruby スクリプト作成 File: gauss_jorden.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/09/21/ruby-simultaneous-equation-by-gauss-jorden/",
        "teaser": null
      },{
        "title": "C++ - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！",
        "excerpt":"先日は、連立方程式を「ガウス・ジョルダン法」で解くアルゴリズムを C++ で実装したことを紹介しました。 C++ - 連立方程式解法（ガウス・ジョルダン法）！ 今回は、連立方程式を「ガウス・ジョルダン法」を応用した「ガウス・ジョルダン（ピボット選択）法」で解くアルゴリズムを C++ で実装してみました。 以下、簡単な説明と C++ ソースコードの紹介です。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 1. ガウス・ジョルダン（ピボット選択）法による連立方程式の解法について（簡単に） （数式が多いので、\\(\\LaTeX\\) で記載） 2. C++ ソース作成 File: gauss_jorden_pivot.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/09/22/cpp-simultaneous-equation-by-pivot/",
        "teaser": null
      },{
        "title": "Ruby - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！",
        "excerpt":"先日は、連立方程式を「ガウス・ジョルダン法」で解くアルゴリズムを Ruby で実装したことを紹介しました。 Ruby - 連立方程式解法（ガウス・ジョルダン法）！ また、前回は連立方程式を「ガウス・ジョルダン法」を応用した「ガウス・ジョルダン（ピボット選択）法」で解くアルゴリズムを C++ で実装してみました。 C++ - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！ そして、今回はその「ガウス・ジョルダン（ピボット選択）法」で解くアルゴリズムを Ruby で実装してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p247 を使用。 連立方程式の解法（ガウス・ジョルダン（ピボット選択）法）についての説明は割愛。（「C++ - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！」を参照） 1. Ruby スクリプト作成 File: gauss_jorden_pivot.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/09/23/ruby-simultaneous-equation-by-pivot/",
        "teaser": null
      },{
        "title": "C++ - 連立方程式解法（ガウスの消去法）！",
        "excerpt":"ここ最近、連立方程式を「ガウス・ジョルダン法」や「ガウス・ジョルダン（ピボット選択）法」で解くアルゴリズムを C++ で実装したことを紹介しました。 C++ - 連立方程式解法（ガウス・ジョルダン法）！ C++ - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！ 今回は、連立方程式を「ガウスの消去法」で解くアルゴリズムを C++ で実装してみました。 以下、簡単な説明と C++ ソースコードの紹介です。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 1. ガウスの消去法による連立方程式の解法について（簡単に） （数式が多いので、\\(\\LaTeX\\) で記載） 2. C++ ソース作成 File: gauss_elimination.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2013/09/24/cpp-simultaneous-equation-by-gauss-elimination/",
        "teaser": null
      },{
        "title": "Ruby - 連立方程式解法（ガウスの消去法）！",
        "excerpt":"ここ最近、連立方程式を「ガウス・ジョルダン法」や「ガウス・ジョルダン（ピボット選択）法」で解くアルゴリズムを Ruby で実装したことを紹介しました。 Ruby - 連立方程式解法（ガウス・ジョルダン法）！ Ruby - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！ また、前回は連立方程式を「ガウスの消去法」で解くアルゴリズムを C++ で実装してみました。 C++ - 連立方程式解法（ガウスの消去法）！ 今回は、連立方程式を「ガウスの消去法」で解くアルゴリズムを Ruby で実装してみました。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p247 を使用。 連立方程式の解法（ガウスの消去法）についての説明は割愛。（「C++ - 連立方程式解法（ガウスの消去法）！」を参照） 1. Ruby スクリプト作成 File: gauss_elimination.rb 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2013/09/25/ruby-simultaneous-equation-by-gauss-elimination/",
        "teaser": null
      },{
        "title": "Linux - シェルスクリプトで天気予報取得！",
        "excerpt":"シェルスクリプトで Web スクレイピング（スパイダリング）してました。 今回は、試しに「日本気象協会 tenki.jp」の「島根 - 東部（松江）の天気」を取得してみます。 最終的にワンライナーで取得できるようにしていますが、順を追って説明します。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 bash もしくは zsh での作業を想定。（当方、動作確認済み） curl, grep, sed, head, tail コマンドの詳細は説明しない。（特に難しいオプションは使用していない） 正規表現の詳細は説明しない。（特に難しい正規表現は使用していない） 取得元サイトの HTML ソースは予期せず変更される場合があるので注意。 1. HTML 取得 日本気象協会の島根県東部（松江市）の天気予報のページの URL は http://tenki.jp/forecast/city-92.html なので、curl コマンドで HTML を取得する。 $ curl http://tenki.jp/forecast/city-92.html ページの HTML が全部取得される。 2. 必要な行のみ抽出 取得された HTML...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2013/09/27/linux-webscraping-by-shellscript/",
        "teaser": null
      },{
        "title": "Linux - シェルスクリプトで Twitter アカウント ID を取得！",
        "excerpt":"Twitter API を使用せず、特定の Twitter アカウントの ID （数字だけのID）を取得する方法についてです。 今回紹介する方法だと、アカウント ID を取得するだけのことに API 認証までしなくてもよいです。 実際には、シェルスクリプトで HTML を解析する方法になっています。（前回の「Linux - シェルスクリプトで天気予報取得！」の応用です） 最終的にワンライナー（１行完結のスクリプト）にしているが、以下で順を追って説明します。 また、後半ではブラウザ ＋ JavaScript でアカウント ID を取得する方法も紹介しています。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 bash もしくは zsh での作業を想定。（当方、動作確認済み） curl, grep, sed コマンドの詳細は説明しない。（特に難しいオプションは使用していない） 正規表現の詳細は説明しない。（特に難しい正規表現は使用していない） 取得元サイトの HTML ソースは予期せず変更されることがあるので注意。 Twitter のアカウントには、以下の３つがあることを理解しておく。 半角英数字・記号からなる一意の「アカウント名」 任意の「表示名」 数字だけからなる一意の「アカウント ID」 1....","categories": ["PC_Tips","SNS"],
        "tags": ["Linux","Twitter","JavaScript"],
        "url": "/2013/09/28/linux-get-twitter-id-by-shell/",
        "teaser": null
      },{
        "title": "Linux - バーコード画像生成！",
        "excerpt":"Linux のコマンドラインからバーコード画像を生成する方法についての記録です。 以前、職務の都合で Windows マシンからバーコードを生成してラベラーに出力することはしたことがありました。 今回は、Linux のコマンドラインからのバーコード生成が可能かどうか確認してみた次第です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 インストールするソフトは GNU Barcode というソフト。 今回は、ソースを取得後ビルドしてインストールする。（パッケージからのインストールしてもよい。） JANコード（13桁）、短JANコード（８桁）は、それぞれ EAN13, EAN8 であると認識しておく。 1. アーカイブファイルダウンロード アーカイブファイルをダウンロードする。 今回は、当記事執筆時点で最新の Ver.0.99 をダウンロードする。（ただし、ページには beta 版である旨が記載される。問題があるようなら Ver.0.98 をダウンロードする。当方は、問題なかった。） $ wget http://ftp.gnu.org/gnu/barcode/barcode-0.99.tar.gz 2. アーカイブファイル展開 ダウンロードしたアーカイブファイルを展開し、展開されたディレクトリ内へ移動する。 $ tar zxvf barcode-0.99.tar.gz $ cd barcode-0.99 3. ビルド＆インストール 以下のように、configure, make,...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2013/09/29/linux-generate-barcode-image/",
        "teaser": null
      },{
        "title": "CentOS - Tripwire での警告メッセージ！",
        "excerpt":"CentOS (RedHat 系 Linux) サーバで、ファイル改ざん検知システム Tripwire を運用していると、ある警告が出ることがあります。（未確認ですが、他の Linux 系ディストリビューションや BSD 系 Unix 等も同様かも知れません） その警告とは、サイズが 2GB を超えるファイルが存在する場合に出るようです。 以下、現象と対策についての記録です。 0. 前提条件 CentOS 6.4 (32bit) での作業・動作確認を想定。 当然、ファイル改ざん検知システム Tripwire がインストール済みである。 動作確認した Tripwire のバージョンは 2.4.2.2.2 「ファイル改竄検知システム導入(Tripwire) - CentOSで自宅サーバー構築」を参考に Tripwire を構築している。 1. 現象 Tripwire チェック時、チェックするディレクトリ内に 2GB を超えるサイズのファイルが存在する場合に、以下のような警告が出る。（実際には、root 宛にメールが届くようにしている） 以下の例では、対象ファイルのサイズは約 2.2GB である。 ### Warning: File system error....","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2013/09/30/centos-tripwire-warning/",
        "teaser": null
      },{
        "title": "2013年9月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"10月になりましたので、先月9月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 6,758 70.7422 Mac OS 1,466 15.3460 Ubuntu Linux 720 7.5369 Linux 440 4.6059 unknown 75 0.7851 Android 41 0.4292 Fedora Linux 34 0.3559 FreeBSD 14 0.1466 Debian GNU/Linux 1 0.0105 PalmOS 1 0.0105 PlayStation 1 0.0105 Solaris 1 0.0105 Wii 1 0.0105 合　計...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/10/01/blog-access/",
        "teaser": null
      },{
        "title": "Linux - QR コード画像生成！",
        "excerpt":"先日、Linux のコマンドラインからのバーコード画像（一次元）を生成してみました。 Linux - バーコード画像生成！ 当然、一次元のバーコード画像を生成したら次に二次元バーコードの QR コード画像も生成してみたくなります。 以下、Linux のコマンドラインから QR コード画像を生成する方法についての備忘録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 今回は、qrencode(QR Code encoder into PNG image) というパッケージを使用してインストールする。 Mac の QREncoder とは別物であるので注意。 1. パッケージインストール パッケージからのインストールなので apt-get install qrencode でインストールするか、Synaptic パッケージマネージャでインストールする。 2. インストール確認 qrencode がインストールされたか、バージョンを表示して確認してみる。 $ qrencode --version qrencode version 3.3.0 Copyright (C)...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2013/10/02/linux-generate-qrcode-image/",
        "teaser": null
      },{
        "title": "Ruby - tweetstream で Twitter Streaming API を利用！",
        "excerpt":"過去には、Twitter REST API で自分のアカウントに関する様々情報を取得したり、ツイートするボットを作成したりして来ました。 実際、今でも Ruby 製ボットが快調に動作しています。 今回は、REST API ではなく、Streaming API を Ruby で利用してみました。 制限を気にすることなく、どんどんツイートを取得できるのに魅力を感じたからです。 以下、準備とコーディング例の紹介です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Ruby 2.0.0-p247 での作業を想定。 Git でダウンロードしてパッチを当てるので、git がインストール済みであること。 Twitter Streaming API には、本来 Public streams, User streams, Sites streams があるということを認識しておく。 （今回は、それらのうち Public streams の機能を tweetstream で扱う） Twitter Streaming API そのものについては、ここでは説明しない。...","categories": ["プログラミング","SNS"],
        "tags": ["Ruby","Twitter"],
        "url": "/2013/10/04/ruby-twitter-streaming-api-by-tweetstream/",
        "teaser": null
      },{
        "title": "Ruby - スクリプトをデーモン化！",
        "excerpt":"Ruby スクリプトをデーモン化する方法についてです。 デーモン（Daemon）とは、マルチタスク OS におけるバックグラウンドで動作するプロセスのことです。 Windows のようなシングルタスク OS では、同様な処理を擬似的に実現するサービスに当たるでしょうか。 以下、Ruby スクリプト作成例を掲示して簡単に説明し、起動スクリプトも紹介します。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 Ruby 2.0.0-p247 での作業を想定。 デーモン処理を行う Ruby スクリプトを起動・停止・再起動するスクリプトも作成する。 1. Ruby スクリプト作成 以下のような Ruby スクリプトを作成してみた。（説明は次項で） File: test_daemon.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2013/10/06/ruby-daemonize-script/",
        "teaser": null
      },{
        "title": "Linux Mint - notify-send でポップアップ通知！",
        "excerpt":"Linux デスクトップ上でポップアップ通知する機能をコマンドラインから使用する方法についてです。 Mac なら Growl でしょうか。 以下、備忘録です。 0. 前提条件 Linux Mint 14 (64bit) での作業を想定。 「ポップアップ通知の設定」で、テーマを「Nodoka」、位置を「右上隅」と設定していることを想定。 （環境により選択できるテーマは異なるかもしれない） その他、環境により異なる部分があるかもしれない。 1. notify-send のインストール Linux Mint の場合は “libnotify0.4-cil” をインストールすれば notify-send コマンド使用できるようになる。 未インストールなら、以下のようにしてインストールする。Synaptic パッケージマネージャでインストールしてもよい。 $ sudo apt-get install libnotify0.4-cil $ notify-send -v notify-send 0.7.5 2. 使用方法 notify-send --help で使用方法・オプションは確認できる。 書式は以下の通り。（SUMMARY, BODY 内に半角スペースが入る場合はクォーテーションでくくる） $ notify-send [OPTION...]...","categories": ["PC_Tips"],
        "tags": ["LinuxMint"],
        "url": "/2013/10/07/linux-popup-by-notify-send/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - インストール（サーバ用途・最小構成）！",
        "excerpt":"Debian GNU/Linux 7.1.0 をサーバ用途・最小構成でインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 そして、今後しばらく Debian サーバ構築関連の記事が続きます。ご了承ください。 0. 前提条件 Oracle VM VirtualBox で仮想マシンにインストールする。 仮想マシンのメモリ容量は 1GB, ディスク容量は 20GB を想定する。 ネットワークはホストOSからゲストOSへアクセスしたいので「ブリッジ」とする。 DHCP を使用しない。（ネットワークは手動で設定する） パーティションは HDD 全体を使用して LVM を設定する。（実運用時はマニュアルで詳細に設定する） プロキシは使用しない。 ソフトウェアのインストールは行わない。（ソフトウェアを必要になったときにインストールするので） 1. インストールイメージダウンロード 以下のサイトから ISO イメージをダウンロードする。 今回当方は AMD64 版 NetInstall CD イメージ “debian-7.1.0-amd64-netinst.iso” をダウンロードした。（DVD 版でもよいが、必要なものは必要なときにインストールできればよいので NetInstall 版とした） http://cdimage.debian.org/debian-cd/7.1.0/ 当然、ダウンロード後は CD(DVD) に焼き付ける。（ブート可能オプション必須） 仮想マシンにインストールするならディスクに焼き付けなくてもよい。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/10/09/debian-7-install-for-small-server/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - サーバ初期設定！",
        "excerpt":"Debian GNU/Linux 7.1.0 をサーバ用途・最小構成でインストールした後の初期設定についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 「Debian GNU/Linux 7.1.0 - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 ユーザ名は “masaru” とする。 コマンドラインプロンプト # は root ユーザ、 $ は一般ユーザであることを理解しておく。 コメントしての # と混同しないよう注意する。 現時点では、日本語は文字化けするので、一時的に export LANG=C しておく。 1. 管理用ユーザの設定 root でログインし、インストール時に作成した一般ユーザを管理ユーザにし、 root になれるよう設定する。 # usermod -G adm masaru # vi /etc/pam.d/su # 15行目当たり、コメント解除し編集 auth required pam_wheel.so group=adm ちなみに、RedHat...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/10/10/debian-7-setting/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - rootkit 検出ツール chkrootkit インストール！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバに rootkit 検知ツール chkrootkit をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 chkrootkit が検知できるのは既知の rootkit のみであり、新規の rootkit は検知できないことを認識しておく。 chkrootkit では誤検知もあるので、検知結果は参考程度に留める。 コマンド自体が改竄されてからでは遅いので、OS インストール直後に行うのがよいらしい。 1. chkrootkit インストール chkrootkit を以下のようにしてインストールする。 # aptitude -y install chkrootkit 2. chkrootkit 実行 以下のようにして chkrootkit を実行してみる。 問題のある（”INFECTED” の）場合のみ出力する。 # chkrootkit...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/10/11/debian-7-install-chkrootkit/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - アンチウイルスソフト導入！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバにアンチウイルスソフト ClamAV を導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 「Debian GNU/Linux 7.1.0 - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 「Debian GNU/Linux 7.1.0 - サーバ初期設定！」の方法で初期設定が完了していることを想定。 毎日自動でウイルススキャンを実行するようにする。 1. ClamAV インストール 以下のようにして、アンチウイルスソフト ClamAV をインストールする。 # aptitude -y install clamav 2. ウイルス定義ァイル最新化 以下のようにして、ウイルス定義ファイルを最新に更新する。 インストールした ClamAV のバージョンが古い場合に警告メッセージが出力されるが、特に問題はないの無視してよい。 # freshclam 3. ウイルススキャンテスト（ウイルス無しの場合） 以下のようにして、ウイルススキャンを行ってみる。 （スキャンするディレクトリを指定するなら、最後にディレクトリを指定する） # clamscan --infected --remove --recursive ----------- SCAN...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ウイルス対策"],
        "url": "/2013/10/12/debian-7-install-clamav/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - NTP サーバ構築！",
        "excerpt":"Debian GNU/Linux 7.1.0 に NTP サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 「Debian 7 Wheezy - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 「Debian 7 Wheezy - サーバ初期設定！」の方法で初期設定が完了していることを想定。 ファイルの内容を編集する際、vi コマンドを入力する部分については省略。ファイルの内容を表示するのみとする。 ローカルネットワークは 192.168.11.0/24 とする。 1. NTP サーバインストール よくある方法だが、以下のようにして NTP サーバをインストールする。 # aptitude -y install ntp 2. 設定ファイル編集 以下のようにして、設定ファイルを編集する。 File: /etc/ntp.conf 1 2 3 4 5 6 7 8 9 10...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NTP"],
        "url": "/2013/10/13/debian-7-install-ntp/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - SSH サーバ構築！",
        "excerpt":"Debian GNU/Linux 7.1.0 に SSH サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 「Debian 7 Wheezy - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 「Debian 7 Wheezy - サーバ初期設定！」の方法で初期設定が完了していることを想定。 サーバの IP アドレス 192.168.11.102、ホスト名 vbox、ユーザ名 masaru を想定。 クライアント側は Linux Mint 14(64bit) を想定。 SSH 接続に Putty, TeraTerm 等のツールは使用しない。端末コンソールから接続する。 1. SSH サーバインストール 以下のようにして SSH サーバをインストールする。 # aptitude -y install ssh 2. SSH 設定ファイル編集...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","SSH"],
        "url": "/2013/10/14/debian-7-install-ssh/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - ファイアウォール設定！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバでファイアウォール iptables を設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 IPv4 のみついて対応する。（IPv6 は無効化している） （「Debian 7 Wheezy - サーバ初期設定！」参照） ファイアウォールのルールは、取り急ぎ最低限の設定のみ。（必要になった際に追加する） iptables をデーモンとして自動起動するツール iptables-persistent を使用する。 （iptables-persistent を使用しない場合は、別途起動スクリプトを用意する必要がある） 1. iptables インストール iptables と、iptables をデーモンとして自動起動させるツール iptables-persistent を以下のようにしてインストールする。 # aptitude -y install iptables iptables-persistent iptables-persistent のインストールで、「現在の IPv4...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ファイアウォール"],
        "url": "/2013/10/15/debian-7-setting-iptables/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - サービスの管理！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバでのサービスを管理する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0(Wheezy) での作業を想定。 最近は update-rc.d コマンドは非推奨となっていることを認識しておく。 1. sysv-rc-conf のインストール CentOS 等の RedHat 系ディストリビューションのサービス管理ツール chkconfig にあたる sysv-rc-conf というツールを使用することができる。 インストールは以下のようにする。 # aptitude -y install sysv-rc-conf 2. sysv-rc-conf でサービス一覧表示 sysv-rc-conf でサービスの一覧を表示するには以下のようにする。 # sysv-rc-conf --list acpid 2:on 3:on 4:on 5:on bootlogs 1:on 2:on 3:on 4:on 5:on...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/10/16/debian-7-manage-service/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - DNS サーバ構築！",
        "excerpt":"Debian GNU/Linux 7.1.0 に DNS サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 構築先は Debian GNU/Linux 7.1.0 を想定。 サーバのローカル IP アドレスは 192.168.11.102、グローバル IP アドレスは xxx.yyy.zzz.aaa を想定。 ドメイン名は mk-mode.com、ネームサーバホスト名は ns を想定。 セカンダリ DNS は用意しない。 1. BIND のインストール DNS サーバである BIND を、以下のようにしてインストールする。（”dnsutils” は dig コマンド用） # aptitude -y install bind9 dnsutils 2. BIND 設定ファイル編集 BIND 設定ファイルを以下のように編集する。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","DNS"],
        "url": "/2013/10/17/debian-7-install-dns/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - BIND の chroot 化！",
        "excerpt":"Debian GNU/Linux 7.1.0 に 構築した DNS サーバ BIND を chroot 化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 ちなみに、「BIND の chroot 化」とは、仮に BIND に脆弱性があった場合に root 権限を奪われては困るので、BIND のルートディレクトリを別のディレクトリに設定することです。 0. 前提条件 構築先は Debian GNU/Linux 7.1.0 を想定。 DNS サーバ BIND が構築済みであることを想定。 chroot ディレクトリは /var/bind9/chroot/ とする。 1. BIND 停止 BIND が起動していると設定に失敗するので、BIND が起動している場合は停止する。 # /etc/init.d/bind9 stop 2. 起動オプション編集 起動時のオプションを変更するよう “/etc/default/bind9” を編集する。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","DNS"],
        "url": "/2013/10/18/debian-7-dns-chroot/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - FTP サーバ構築！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバに FTP サーバ vsftpd を構築する方法についての記録です。 FTP サーバは世の中に pro-FTPD, pure-FTPd 等色々とありますが、使い慣れた vsftpd で FTP サーバを構築します。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 接続テストでは FileZilla という FTP クライアントを使用する。 1. vsftpd インストール FTP サーバの vsftpd を以下のようにしてインストールする。 # aptitude -y install vsftpd 2. vsftpd 設定ファイル編集 以下のように設定を編集する。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","FTP"],
        "url": "/2013/10/19/debian-7-install-vsftp/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - NFS サーバ構築！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバにファイルサーバ NFS を構築する方法についての記録です。 NFS サーバは、クライアントが Unix/Linux である場合のファイルサーバです。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 NFS 用ディレクトリを新たに作成する。（”/var” 配下に “/exports” ディレクトリを作成する） クライアント側でマウントに使用するディレクトリも “/var/exports” とする。 サーバ側は root で作業することを想定、クライアント側は一般ユーザで作業することを想定している。 ファイアウォール iptables は一時的にオフにしている。 ※NFS サーバは都度ポート番号が変更になるので iptables で開放するポートを指定できないため。 ※別途、NFS サーバのポートを固定する措置を施せばよい。（次回紹介する） 1....","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NFS"],
        "url": "/2013/10/20/debian-7-install-nfs/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - NFS サーバのポート固定！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバに構築した NFS サーバのポートを固定する方法についての記録です。 NFS サーバは接続の都度ポート番号が変わる仕様になっており、ファイアウォールを運用している場合に都合が悪いからです。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 NFS サーバ構築済み。 （参照：「Debian 7 Wheezy - NFS サーバ構築！」） ファイアウォール iptables が構築済み。 （参照：「Debian 7 Wheezy - ファイアウォール設定！」） 以下で設定するポート番号は参考サイトによるもであり、任意に設定可能。 quota は使用していないので、参考サイトにある quota の設定はしない。 1. 前提知識 NFS サーバが使用するポートは以下のとおり。 portmapper =&gt; TCP: 111, UDP:...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NFS"],
        "url": "/2013/10/21/debian-7-fix-nfs-port/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - Samba サーバ構築！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバにファイルサーバ Samba を構築する方法についての記録です。 Samba サーバは、Windows クライアントでも（もちろん Unix/Linux クライアントでも）使用できるファイルサーバです。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 全ユーザ共有ディレクトリは “/home/share” とする。 Web ブラウザで管理できるツール SWAT は導入しない。（一度設定してしまえば、使うことはないので） 1. Samba サーバインストール Samba サーバを以下のようにしてインストールする。 # aptitude -y install samba 2. 共有ディレクトリ作成 全ユーザが共有でフルアクセス可能なディレクトリを作成する。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Samba"],
        "url": "/2013/10/22/debian-7-install-samba/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - SMTP サーバ Postfix 構築！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバに SMTP サーバ Postfix を構築する方法についての記録です。 SMTP サーバは Simple Mail Transfer Protocol の略で、現在最も普及している電子メール送信プロトコルに対応したサーバのことです。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は mail を想定。 1. Postfix インストール SMTP サーバ Postfix を以下のようにしてインストールする。 途中でどの設定を選択するか確認されますが、後で設定を行うので “設定なし” を選択する。 # aptitude -y install postfix sasl2-bin...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix"],
        "url": "/2013/10/23/debian-7-install-postfix/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - POP/IMAP サーバ Dovecot 構築！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバに POP/IMAP サーバ Dovecot を構築する方法についての記録です。 POP は Post Office Protocol の略、IMAP は Internet Message Access Protocol の略で電子メール受信プロトコルのことです。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 1. Postfix インストール POP/IMAP サーバ Dovecot を以下のようにしてインストールする。 # aptitude -y install...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Dovecot"],
        "url": "/2013/10/24/debian-7-install-dovecot/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - メールサーバ SSL 設定！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバに構築したメールサーバ Postfix, Dovecot で SSL 通信を可能にする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 SSL サーバ OpenSSL 導入済み。（インストールは aptitude -y install openssl でよい） 1. SSL 証明書作成 SSL 証明書を以下のように作成する。 # cd /etc/ssl/private # openssl genrsa -des3 -out...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix","Dovecot"],
        "url": "/2013/10/25/debian-7-setting-mail-ssl/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - Postfix と ClamAV の連携！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバに構築したメールサーバ Postfix をアンチウイルスソフト ClamAV と連携させる方法（スパムフィルタも導入）についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 SMTP サーバ Postfix 導入済み。 アンチウイルスソフト ClamAV 導入済み。 スパムフィルタも運用する。 アンチウイルス ClamAV との連携には、 ClamAV daemon を使用する方法の他に、ClamSMTP を使用する方法もある。 スパムフィルタ SpamAssassin との連携には、 amavisd-new を使用する方法の他に SpamPD を使用する方法もある。 1. インストール Postfix を ClamAV と連携させてウイルススキャン・スパムフィルタを行うのに必要な ClamAV daemon,...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix","ウイルス対策"],
        "url": "/2013/10/26/debian-7-cooperate-postfix-clamav/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - Postfix ログ解析！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバに構築したメールサーバ Postfix のログを pflogsumm で解析する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 SMTP サーバ Postfix 導入済み。 ログローテート（logrotate）でメールログがローテーションされていることを想定。 1. pflogsumm インストール Postfix のログ解析ツールである pflogsumm を、以下のようにしてインストールする。 # aptitude -y install pflogsumm 2. pflogsumm 実行スクリプト作成 pflogsumm を実行するスクリプト “pflogsumm_report” を以下のように作成する。 単純に pflogsumm コマンドを実行するだけでもレポートはできるが、それだとログローテートしている場合に正常に取得できない部分も発生する可能性があるので、それを考慮している。 また、以下のスクリプトでは前日のメールログを解析し、結果を postmaster...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/10/27/debian-7-anlyze-postfix-log/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - Web サーバ Nginx をインストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバに Web サーバ Nginx をソースをビルドしてインストールする方法についての記録です。 ちなみに以前、Linux Mint にソースビルドでインストールする方法を紹介しています。（当然、似たような内容となっています） Nginx - Linux Mint にインストール（ソースビルド）！ 0 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 インストールする Nginx のバージョンは 1.4.3（当記事執筆時点最新安定版）を想定。 1. 必要パッケージインストール Nginx のビルドに以下のパッケージが必要なので、未インストールならインストールしておく。（他にも必要なものがあればインストールする） # aptitude -y install gcc libpcre3-dev libssl-dev 依存する libpcre3, zlib1g-dev もインストールされる。 2. アーカイブダウンロード インストールに使用するアーカイブファイルをダインロードし、解凍する。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx"],
        "url": "/2013/10/28/debian-7-install-nginx-by-src/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - DB サーバ MariaDB をインストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバに DB サーバ MariaDB をソースをビルドしてインストールする方法についての記録です。 当然、MySQL と同様な方法でインストールできます。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 インストールする MariaDB のバージョンは 5.5.33a（当記事執筆時点最新安定版）を想定。 MariaDB とは言っても中身は MySQL が元になっているので、各所で “mysql” のキーワードを使用する。 データディレクトリは “/var/lib/mysql” ディレクトリ配下とする。 1. 必要パッケージインストール ビルド時に configure ではなく cmake を使用するので、未インストールならインストールしておく。 また、bison, g++, libncurses5-dev 等も未インストールならインストールしておく。（コンパイルオプションによって異なるかもしれないが、実際に cmake してみてエラー・警告メッセージを確認するのもよい） # aptitude...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","MariaDB"],
        "url": "/2013/10/30/debian-7-install-mariadb-by-src/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - Ruby 2.0 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバにプログラミング言語 Ruby をソースをビルドしてインストールする方法についての記録です。 何てことない、いつものよくある方法ですが。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 インストールする Ruby は 2.0.0-p247 作業は全て root ユーザで行なっている。 1. アーカイブファイルダウンロード＆展開 アーカイブファイルをダンロードし、展開する。（ダンロード先は “/usr/local/src” としている） # cd /usr/local/src # wget http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p247.tar.gz # tar zxvf ruby-2.0.0-p247.tar.gz 2. ビルド＆インストール ビルドインストールは以下のように行う。（よくある .configure, make, make install） # cd...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Ruby"],
        "url": "/2013/10/31/debian-7-install-ruby-by-src/",
        "teaser": null
      },{
        "title": "2013年10月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"11月になりましたので、先月10月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 9,666 70.9015 Mac OS 1,866 13.6874 Ubuntu Linux 1,078 7.9073 Linux 914 6.7043 Android 52 0.3814 unknown 36 0.2641 FreeBSD 8 0.0587 RedHat Linux 7 0.0513 Solaris 5 0.0367 PlayStation 1 0.0073 合　計 13,633 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews 比率(%) Windows 7...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/11/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - Rsync でディレクトリ同期（xined 使用）！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバに Rsync を導入して、クライアント側のディレクトリと同期させる方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 ローカルマシン（Linux Mint 14）からサーバマシン（Debian GNU/Linux 7.1.0 Wheezy）へ同期することを想定。 サーバ側のバックアップ用ディレクトリは “/home/bak” とする。 同期元（クライアントマシン）の IP アドレスは 192.168.11.11 を想定。 同期先（サーバマシン）の IP アドレスは 192.168.11.2 を想定。 記事後半で xined を使用する方法を記述。 以下の記事内では、サーバ側の設定とクライアント側の設定を記述しているので混同しないこと。 1. 【サーバ側】Rsync インストール 同期先のサーバマシン（Debian）へ Rsync をインストールする。 # aptitude -y install rsync 2. 【サーバ側】同期先ディレクトリ作成 同期先のサーバマシン（Debian）にディレクトリを作成する。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","rsync"],
        "url": "/2013/11/02/debian-7-sync-directory-by-rsync/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - ログ解析ツール logwatch インストール！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバにログ解析ツール logwatch を導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 1. logwatch インストール 以下のようにして logwatch をインストールする。 # aptitude -y install logwatch 2. logwatch 設定ファイル編集 まず、デフォルトの設定ファイルを複製する。 # cp /usr/share/logwatch/default.conf/logwatch.conf /etc/logwatch/conf/ デフォルトの設定で充分であるが、必要なら編集する。 メールの送信先等を変更するなら以下のようにする。 File: /etc/logwatch/conf/logwatch.conf 1 2 3 MailTo = hoge@xxxx.com # &lt; = メール送信先 Detail = High #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/11/04/debian-7-install-logwatch/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - 自動バックアップ運用！",
        "excerpt":"Debian GNU/Linux 7.1.0 サーバに自動バックアップ運用を行う方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 バックファイルを配置するディレクトリは “/home/bak” とする。 1. バックアップスクリプト作成 以下のような内容でバックアップスクリプト “backup.sh” を作成する。 File: backup.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/11/06/debian-7-setting-auto-backup/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - Web サーバ Apache2 インストール！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバに Web サーバ Apache2 を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 別の Web サーバ（Nginx 等）がインストール済みなら停止しておくこと。 （ポートを別途設定しているのあれば、停止しなくてもよい） 1. Apache2 インストール Apache2 を以下のようにしてインストールする。 # aptitude -y install apache2 2. 設定ファイル編集 設定ファイル “sites-available/default” を以下のように編集する。 File: /etc/apache2/sites-available/default 1 2 3 4 5 6 ServerAdmin webmaster@mk-mode.com # &lt;= 管理者メールアドレスを変更 ServerName...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Apache"],
        "url": "/2013/11/08/debian-7-install-apache2/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - PHP インストール！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバに PHP5 をインストール・設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 Web サーバは Apache2 を想定。 1. PHP インストール PHP とその他関連ライブラリを以下のようにしてインストールする。 # aptitude -y install php5 php5-cgi libapache2-mod-php5 php5-common php-pear 2. 設定ファイル編集 設定ファイル “mods-enabled/mime.conf” を以下のように編集する。 File: /etc/apache2/mods-enabled/mime.conf 1 2 AddHandler php5-script .php # &lt;= 追加（PHP として扱う拡張子） 設定ファイル “php.ini”...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","PHP"],
        "url": "/2013/11/09/debian-7-install-php5/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - Apache2 の SSL 化！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバ上の Web サーバ Apache2 を SSL 化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 Web サーバは Apache2 を想定。 1. サーバ証明書作成 Apache2 を SSL/TLS で使用できるようサーバ証明書を作成する。 # cd /etc/ssl/private # openssl genrsa -des3 -out server.key 2048 Generating RSA private key, 2048 bit long modulus ........................................................................................................................................+++ ............................................................................+++ e is...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Apache","SSL"],
        "url": "/2013/11/10/debian-7-apache2-ssl/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - Web メールシステム SquirrelMail インストール！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバに Web メールシステム SquirrelMail をインストール・設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 Web サーバは Apache2 を想定。 SMTP サーバ Postfix 構築済み。 IMAP サーバ Dovecot 構築済み。 SMTP, IMAP サーバ名はともに mail.mk-mode.com を想定。 ドメイン名は mk-mode.com を想定。 ネットワークは 192.168.11.0/24 を想定 1. SquirrelMail インストール SquirrelMail とプラグインを以下のようにしてインストールする。 # aptitude -y install squirrelmail squirrelmail-compatibility...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/11/12/debian-7-install-squirrelmail/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - SquirrelMail を Nginx で！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバ上の Web メールシステム SquirrelMail を Web サーバ Nginx で運用する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 Web サーバは Nginx を想定。 SMTP サーバ Postfix 構築済み。 IMAP サーバ Dovecot 構築済み。 1. PHP を Nginx と連携 以下の当ブログ過去記事を参考に PHP を Nginx と連携させる。（”PHP5-FPM” 使用） Nginx - PHP との連携！ - mk-mode BLOG...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx"],
        "url": "/2013/11/13/debian-7-squirrelmail-by-nginx/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - サーバ監視ツール munin 導入！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバ上にサーバ監視ツール munin をインストール・設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 Web サーバは Nginx を想定。 munin 用ディレクトリは “/var/www/munin” とする。 1. munin インストール munin を以下のようにしてインストールする。 # aptitude -y install munin 2. 設定ファイル編集 設定ファイル “munin.conf” を以下のように編集する。 File: /etc/munin/munin.conf 1 2 3 4 5 6 7 dbdir /var/lib/munin # &lt;...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2013/11/14/debian-7-install-munin/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - munin 各種監視追加！",
        "excerpt":"Debian GNU/Linux 7 Wheezy サーバ上に構築したサーバ監視ツール munin に監視項目を追加する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 サーバ監視ツール munin がインストール済み。 ハードディスク温度の監視を追加する。 CPU 温度・電圧・ファン回転数の監視を追加する。 MySQL(MariaDB) の監視を追加する。 Nginx の監視を追加する。 1. ハードディスク温度の監視追加 smartctl コマンドを使用するので、以下のようにしてインストールしておく。 # aptitude -y install smartmontools 以下のように設定ファイル “hddtemp_smartctl” を作成する。（”munin-node” に追記してもよい） File: /etc/munin/plugin-conf.d/hddtemp_smartctl 1 2 3 4 5 6 [hddtemp_smartctl] user root env.drives sda...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2013/11/16/debian-7-munin-optional-setting/",
        "teaser": null
      },{
        "title": "Google App Engine SDK for Python！",
        "excerpt":"Google 提供の Web アプリケーション作成ツール Google App Engine（略して GAE） の環境を簡単に整えてみました。 PHP, Python, Java, Go 等が対応しているようですが、今回は Python 版環境を整備します。 0. 前提条件 Linux Mint 14(64bit) での作業を想定。 Python 2.7.3 がインストール済みであると想定。 1. アーカイブダウンロード 「Downloads - Google App Engine — Google Developers」から “google_appengine_1.8.6.zip” をダウンロードし、展開しておく。（展開する場所は、ユーザのルートとした） 2. デモアプリ起動 コンソール上で展開したディレクトリへ移動し、以下のように実行する。 $ python dev_appserver.py demos/python/guestbook Allow dev_appserver to check for updates...","categories": ["プログラミング"],
        "tags": ["Google","Python"],
        "url": "/2013/11/18/google-app-engine-python/",
        "teaser": null
      },{
        "title": "Ruby on Rails - PubSubHubbub Subscriber 実装！",
        "excerpt":"今回は、PubSubHubbub という Google 提唱のフィードをリアルタイムで配信するプロトコルについてです。 中でも、フィードを購読する側（Subcriber）を Rails で実装する方法についての記録です。 ブログの更新通知を即座に行うのにも利用したりしますが、当方の場合は「気象庁防災情報XML」をリアルタイム受信するために使用したく、実装を試みた次第です。 0. 前提条件 OS: Linux Mint 14(64bit) Ruby: 2.0.0-p247 Rails: 4.0.0 Web サイトを公開できる環境が必要 当方は、Ruby on Rails 製サイトを Nginx + Unicorn で構築している。当然、 Apache 等の Web サーバで PHP 等を使用することも可能。（実際にはそちらの方が多いでしょう） 今回、Subscriber(Callbak) の URL は http://www.mk-mode.com/rails/jmx を想定。 （将来的なことを考えて “jmx” を使用しているだけであり、当然何でもよい） 今回、フィードの URL は http://www.mk-mode.com/test_op/atom.xml を想定。 Subscriber やフィードの...","categories": ["プログラミング"],
        "tags": ["Ruby","Rails","Feed","XML"],
        "url": "/2013/11/20/rails-implement-pubsubhubbub-subscriber/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - コンソールでの日本語表示！",
        "excerpt":"Debian GNU/Linux 7.1.0 をインストール後、コンソールで日本語が文字化けする場合の対処法についてです。 SSH 接続できれば文字化けは起こらないでしょうが、インストール後 SSH 接続するまでの間の応急処置についての備忘録です。 0. 前提条件 Debian GNU/Linux 7.1.0 での作業を想定。 環境によっては、当現象は発生しないかもしれない。また、以下のような対処方法も通用しないかも知れない。 1. フレームバッファロード 以下のようにして vga16fb というフレームバッファをロードする。 # modprobe vga16fb 2. jfbterm インストール Linux フレームバッファ上で日本語を表示するためのプログラム jfbterm を実行する。 # aptitude -y install jfbterm 3. jfbterm 実行 以下のようにして、 jfbterm を実行する。 # jfbterm -c other,EUC-JP,iconv,UTF-8 -q 上記は root での処理だが、一般ユーザでも同様。 4....","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/11/22/debian-7-charset-on-console/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - 起動時に pcspkr ドライバのエラー！",
        "excerpt":"Debian GNU/Linux 7.1.0 Wheezy 起動時に dmesg に pcspkr ドライバ（スピーカー用ドライバ）関連のエラーが出力されることがあります。 以下、現象と原因、対策についての備忘録です。 0. 前提条件 Debian GNU/Linux 7.1.0 Wheezy サーバでの作業を想定。 ハードウェア環境によっては当現象は発生しない。 1. 現象 マシン起動時に以下のようなエラーメッセージが出力される。（”/var/log/dmesg” に記録される） [ 4.345093] Error: Driver 'pcspkr' is already registered, aborting... 2. 原因 色々調べてみると、以下のようなことが原因らしい。 他の名前で、既にカーネルドライバが読み込まれている。 3. 対策 既に読み込まれているために読み込み処理を中止しているのであり、後の処理に影響は無いはずではあるが、エラーとして扱われないように “/etc/modprobe.d/blacklist.conf” に記述する。（”/etc/modprobe.d/” 配下の conf ファイルは全て読み込まれるので、名前は何でも良い） File: /etc/modprobe.d/blacklist.conf 1 blacklist pcspkr 4. 確認...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2013/11/24/debian-7-pcspkr-error/",
        "teaser": null
      },{
        "title": "Linux - cron での locale の挙動！",
        "excerpt":"Linux で、自分が作成したスクリプトがコンソール上では正常に動作するのに、 cron で定時起動させようとすると文字コードの関係でうまく日本語出力ができないことがあります。 以下、それについての備忘録です。 0. 前提条件 CentOS 6.4 (32bit) での作業を想定。 cron は crontab -e ではなく、 /etc/cron.d/ ディレクトリ配下にファイルを設置する方法。 文字化けが起こるスクリプトは “UTF-8” でエンコードされていて、日本語出力を伴うことを想定。 （当然、日本語出力を伴わないのならロケールの心配もない） 1. cron 外（コンソール）でのロケール 普通にコンソールで locale コマンドでロケールを確認してみる。 # locale LANG=ja_JP.UTF-8 LC_CTYPE=\"ja_JP.UTF-8\" LC_NUMERIC=\"ja_JP.UTF-8\" LC_TIME=\"ja_JP.UTF-8\" LC_COLLATE=\"ja_JP.UTF-8\" LC_MONETARY=\"ja_JP.UTF-8\" LC_MESSAGES=\"ja_JP.UTF-8\" LC_PAPER=\"ja_JP.UTF-8\" LC_NAME=\"ja_JP.UTF-8\" LC_ADDRESS=\"ja_JP.UTF-8\" LC_TELEPHONE=\"ja_JP.UTF-8\" LC_MEASUREMENT=\"ja_JP.UTF-8\" LC_IDENTIFICATION=\"ja_JP.UTF-8\" LC_ALL= 2. cron 内でのロケール 次に cron 内で...","categories": ["サーバ構築"],
        "tags": ["サーバ構築","Linux","CentOS"],
        "url": "/2013/11/26/linux-cron-locale-behavior/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 受信手順（概要）！",
        "excerpt":"気象庁発表の防災関連情報を XML 形式で即時に受信する方法についての概要です。 試験的な運用の段階ですが、サイトのデータをパースするのは非推奨とされているので、データを取得したければ公式に二次利用が許可されているこちらの方法を採用しないといけません。 大まかな流れですが、参考になればと思います。（ちなみに、Subscriber の構築が一番の鬼門になるかと思います） 0. 前提条件 Web サーバを自分で自由に操作できる環境が必要。（Apache, Nginx 等） Web サーバ上で動的処理のできる環境が整備済み。（PHP, Ruby on Rails 等） 1. 気象庁防災情報 XML について理解 「気象庁防災情報XMLフォーマット」のページで全てが説明されているので、全てに目を通す。 一度に全てを理解するのは骨が折れる作業になるので、取り敢えずは概要を理解し、その後各種コードの仕様や電文別のフォーマット等の説明は随時理解していくようにすると良いだろう。 実際、受信した XML を処理しようとプログラミングを始めると自ずと理解できるようになる。 2. PubSubHubbub について理解 「気象庁防災情報 XML」の配信には、”PubSubHubbub” という XML を即時に配信するプロトコルが使用されている。 各種 Web サイト等でも説明されているので、参考にして理解する。 当ブログ過去記事でも説明している。参考まで。 Ruby on Rails - PubSubHubbub Subscriber 実装！ - mk-mode BLOG 3....","categories": ["PC_Tips"],
        "tags": ["Feed","XML"],
        "url": "/2013/11/29/jma-disaster-info-xml/",
        "teaser": null
      },{
        "title": "2013年11月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"12月になりましたので、先月11月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 13,833 70.4507 Mac OS 3,508 17.8661 Linux 1,289 6.5648 Ubuntu Linux 712 3.6262 Android 193 0.9829 unknown 65 0.3310 Fedora Linux 9 0.0458 FreeBSD 9 0.0458 RedHat Linux 7 0.0357 Debian GNU/Linux 3 0.0153 Solaris 3 0.0153 3DS 1 0.0051 OpenBSD 1 0.0051...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2013/12/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - Twitter Gem 不具合！",
        "excerpt":"Ruby で Twitter API を使用するのに “Twitter” という RubyGems ライブラリを使用していましたが、アップデートしたら使用できなくなりました。 ライブラリの README にも記載がありますが、以下にその原因と対策について記録しておきます。 0. 前提条件 Ruby 2.0.0-p353 での作業を想定。 RubyGems ライブラリ Twitter のバージョン 4.6.2 では正常に動作する。 RubyGems ライブラリ Twitter のバージョン 5.0.0 以上（？）ではエラーが発生する。 1. 現象 Ruby で Twitter Gem(5.0.0) を require してツイートしようとする以下のようなエラーが出力される。 undefined method `configure' for Twitter:Module 2. 原因 新しいバージョンの Gem では、configure の使用方法が異なるためのようだ。 3....","categories": ["プログラミング"],
        "tags": ["Ruby","Twitter"],
        "url": "/2013/12/02/ruby-gem-twitter-failure/",
        "teaser": null
      },{
        "title": "Ruby - XML に XSLT を適用して HTML 生成！",
        "excerpt":"Ruby で XSLT スタイルシート未適用の XML ファイルに XSLT スタイルシートを適用する方法についての作業記録です。 0. 前提条件 Ruby 2.0.0-p247 での作業を想定。 “libxslt-ruby” という RubyGems ライブラリを使用する。 1. 事前情報 通常、XSLT スタイルシート未適用の XML ファイルに XSLT スタイルシートを適用するには、以下のように XML ファイルに１行を追加すればよいです。HTML ファイルに CSS スタイルシートを適用するのと同じように。 【XML ファイル】 File: test.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["プログラミング"],
        "tags": ["Ruby","XML"],
        "url": "/2013/12/04/ruby-apply-xslt-to-xml/",
        "teaser": null
      },{
        "title": "XML - XSLT で改行コードを br タグに変換！",
        "excerpt":"XML ファイルを HTML に変換するのに、 XSLT スタイルシートを適用する方法があります。 その XSLT スタイルシートを作成する際に、XML 内の改行コードを &lt;br /&gt; に変換するのに若干苦労します。 以下、改行コード &amp;#10; を &lt;br /&gt; に変換する方法についての記録です。 1. この作業を行う理由 通常、XSLT での文字列変換は translate('＜対象文字列＞', '＜変換元文字リスト＞', '＜変換後文字リスト＞') で行う。 例えば、「あいうえお」という文字列内の「い」と「え」を「ゐ」と「ゑ」に変換する場合は、 transltate('あいうえお', 'いえ', 'ゐゑ') とする。 そう、変換元文字リストのｎ番目の文字が変換後文字リストのｎ番目に対応している（変換元と変換後の文字数が一致していないといけない）のである。 今回の、改行コードを &lt;br /&gt; タグに変換する以外にも、任意の文字列を変換するには今回のような方法をとることになるだろう。（XSLT については疎いので、違う方法があるか否かは今のところ不明） 2. XSLT スタイルシート作成 例えば、XSLT スタイルシートを以下のように作成する。 重要なのは “call-template” の部分であるが、要は文字列を 改行コード &amp;#10; より前の部分 改行コード...","categories": ["PC_Tips"],
        "tags": ["Feed","XML"],
        "url": "/2013/12/06/xml-convert-return-to-br-by-xslt/",
        "teaser": null
      },{
        "title": "ブログ - 1,000 投稿を記念して集計！",
        "excerpt":"先日、2009年1月5日に当ブログを開設してから 1,000 ポスト目の記事を公開することができました。（ちなみに、この投稿は 1,024 ポスト目です） 毎月アクセス解析・集計して当ブログ投稿したり、ホームページでリアルタイムに閲覧できるようにしたりしていますが、今回は 1,000 ポストという節目なので少し別の視点で集計してみました。 個人的な記録ですので、興味がなければスルーしてください。 ちなみに、集計は Markdown で記載している全ての記事（テキスト）ファイルを Ruby で読み込んで集計しました。（形態素解析には “MeCab” を使用） 1. カテゴリ別投稿数 当ブログのサイドバーでも確認できるが再掲してみた。（投稿数の降順） 当ブログがどのような趣向なのかが分かる。 （当投稿は集計に含んでいなので、サイドバーの「ブログ」カテゴリの件数と１件だけ合わない） カテゴリ投稿数 サーバ構築332 プログラミング262 PC_Tips194 ブログ177 数学86 ホームページ67 日々の話題60 株式51 ロト６43 自作PC35 玄箱27 SNS18 ルービックキューブ5 2. タグ別投稿数 こちらも、当ブログのサイドバーでも確認できるが再掲してみた。（投稿数の降順） 当ブログがどのような趣向なのかが分かる。 （当投稿は集計に含んでいなので、サイドバーの “MeCab”, “Ruby” タグの件数と１件だけ合わない） タグ投稿数 Ruby265 Linux121 WordPress102 MySQL101 Windows97 CentOS79...","categories": ["ブログ"],
        "tags": ["Ruby","MeCab"],
        "url": "/2013/12/08/blog-summary-1000-posts/",
        "teaser": null
      },{
        "title": "Ruby - MAC アドレスからベンダ名判別！",
        "excerpt":"MAC アドレスは、言わずと知れたネットワーク機器が持っている固有の識別子のことです。 MAC アドレスからベンダ名を判別できるのも「言わずもがな」でしょう。 以下、それについての備忘録です。 1. MAC アドレスとは？ ご存じない方のために。 MAC アドレスは世界中に存在するネットワークカード（Ethernet カード）が持っている固有の識別子である。 MAC アドレスは OSI 参照モデルの「データリンク層（第２層）」に相当する。 MAC アドレスは、全部で 48 ビットのアドレスであり、 “08-00-27-C8-81-99” のように 8 ビット（オクテットと呼ぶ）ずつハイフンで区切って表現することが多い。 MAC アドレスの前半の 24 ビット（第１・２・３オクテット）は OUI（organizationally unique identifier, ベンダ識別子）と呼ばれ、機器メーカーを表わす情報になっている。 MAC アドレスの第４オクテットは機種を表す ID となっている。 MAC アドレスの第５・６オクテットはシリアル ID となっている。 各 OUI（ベンダ識別子）では 24 ビット = 16,777,216 個の MAC アドレスしか使用できないことになるが、不足する場合は別の OUI...","categories": ["プログラミング","PC_Tips"],
        "tags": ["Ruby"],
        "url": "/2013/12/10/ruby-search-vendor-from-mac-address/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - インストール！",
        "excerpt":"先日 CentOS の 6.5 が正式リリースされたので、自分のサーバ構築記録を更新する意味でインストールしてみました。 当方自宅で本運用中の CentOS サーバマシンは 6.4 の時にインストールしたものがアップデートされて 6.5 になっている状態で、今も安定稼働しております。 ですから、今回は物理マシンにはインストールせずに仮想マシンにインストールして作業記録を更新することにしました。 そして、いざ物理マシンでサーバ再構築する機会があった際には、この記録を参考にしてスムーズに作業が進められたらと思っています。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で仮想マシン（Virtual Box）に最小インストールする。（必ずしも Minimal でなくてもよい） ISO イメージは「ミラーサイト」からダウンロードする。（当然、使用するアーキテクチャに合った ISO イメージをダウンロードする） ISO イメージのディスクへの書き込みについてはここでは説明しない。 （ファイルとしてではなくイメージとして書き込むことに注意するくらい。また、仮想マシンへのインストールなら、ディスクに書き込む必要はなくインストール時に ISO イメージを指定すればよい） マシン搭載メモリは 1GB を想定。 今後紹介していくサーバ等構築記録は、主に「CentOSで自宅サーバー構築」を参考にしているが、実際は過去にこのサイトを参考にして作業した際に記録していたものを参照している。 1. CentOS 6.5 のインストール “CentOS-6.5-x86_64-minimal.iso” を使用して最小インストールした。（必要なものはその都度インストールするので） 何も難しいことはないが、以下のようなことに注意。 インストール作業時に使用する言語を「日本語」もしくは「英語」に設定する。 キーボード設定を適切なものに設定する。 ストレージデバイスは「基本ストレージデバイス」を選択する。 ホスト名は “vbox.mk-mode.com” とした。（当方の例）...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2013/12/12/centos-6-5-install/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - 初期設定！",
        "excerpt":"前回 CentOS 6.5 をインストールしたので、今回は各種初期設定を行います。 主に参考にしているサイト以外にも、自分で必要だと思って追加設定していることも多数記録しています。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。_ マシン搭載メモリは 1GB を想定。 主に「CentOSで自宅サーバー構築」も参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. 一般ユーザ作成 インストール直後は一般ユーザが存在しないので、root でログインして一般ユーザを作成する。 vbox login: root Password: [root@vbox ~]# useradd hoge [root@vbox ~]# passwd hoge Changing password for user hoge. New password: Retype new password: passwd: all authentication tokens updated successfully. [root@vbox...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2013/12/13/centos-6-5-first-setting/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - SSHサーバ（OpenSSH）構築！",
        "excerpt":"前回は CentOS 6.5 サーバインストール後の初期設定を行いました。 今回は SSH サーバである OpenSSH のインストール・設定を行います。 デフォルトでインストールされている OpenSSH サーバには chroot 機能がないため、OpenSSH 6.4-p1 アーカイブを取得して RPM インストールします。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 （Telnet サーバ未インストール。SSH サーバ既インストール） サーバマシン搭載メモリは 1GB を想定。 クライントマシンは Linux Mint 14(64bit) を想定。 OpenSSH 6.4-p1 を RPM でインストールし直す。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. Telnet サーバのインストール サーバ側で直接作業するのなら不要であるが、クライアント側から端末コンソールからリモートで作業したいので、Telnet サーバをインストールし、マシン起動時に自動起動するように設定する。 そして、Telnet サーバを起動する。...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","SSH"],
        "url": "/2013/12/14/centos-6-5-openssh-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - SSH サーバ 鍵認証接続！",
        "excerpt":"前回は CentOS 6.5 サーバに SSH サーバ OpenSSH をインストールしました。 今回は OpenSSH サーバに鍵認証方式で接続する設定を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 OpenSSH 6.4-p1 構築済み。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. 鍵ペア（公開・秘密）の生成 クライアント側で以下のコマンドで公開鍵・秘密鍵を生成する。 作成先・ファイル名を指定しなければ、/home/(ユーザ名)/.ssh/ に id_rsa, id_rsa.pub が作成される。 途中、鍵用のパスワードも入力する。 $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","SSH"],
        "url": "/2013/12/15/centos-6-5-ssh-connection-by-key-certificate/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - NTP サーバ構築！",
        "excerpt":"前回は CentOS 6.5 サーバに SSH サーバ OpenSSH をインストールしました。 今回は NTP サーバのインストールを行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. NTP サーバインストール NTP サーバをインストールする。（最近はデフォルトでインストールされている） # yum -y install ntp 2. NTP サーバ設定ファイル編集 以下のように編集する。（同期するサーバは適宜変更） File: /etc/ntp.conf 1 2 3 4 5 6 7 8 9...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","NTP"],
        "url": "/2013/12/16/centos-6-5-ntp-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - ファイル改ざん検知システム（Tripwire）導入！",
        "excerpt":"前回は CentOS 6.5 サーバに NTP サーバをインストールしました。 今回はファイル改ざん検知システム Tripwire の導入を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 Tripwire 2.4.2.2 をインストールする。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. アーカイブダウンロード 最新の Tripwire アーカイブファイルをダウンロード＆展開する。 # wget http://jaist.dl.sourceforge.net/sourceforge/tripwire/tripwire-2.4.2.2-src.tar.bz2 # tar jxvf tripwire-2.4.2.2-src.tar.bz2 2. Tripwireインストール 展開先ディレクトリへ移動して、インストールを実行する。 # cd tripwire-2.4.2.2-src # ./configure --prefix=/usr/local/tripwire --sysconfdir=/etc/tripwire &amp;&amp; make...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2013/12/17/centos-6-5-tripwire-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - rootkit 検知ツール（chkrootkit）導入！",
        "excerpt":"前回は CentOS 6.5 サーバにファイル改ざん検知システム Tripwire の導入を行いました。 今回は rootkit 検知ツール chkrootkit の導入を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 CentOS 6.5 - 初期設定！ 内のとおり EPEL リポジトリの導入を行なっている。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. chkrootkit インストール rootkit 検知ツール chkrootkit を以下のようにしてインストールする。 （当記事執筆時点では RPMforge リポジトリには存在しなかったので、 EPEL リポジトリを使用） # yum --enablerepo=epel -y install chkrootkit...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2013/12/18/centos-6-5-chkrootkit-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - アンチウイルスソフト（Clam AntiVirus）導入！",
        "excerpt":"前回は CentOS 6.5 サーバに rootkit 検知ツール chkrootkit の導入を行いました。 今回はアンチウイルスソフト Clam AntiVirus 導入を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 CentOS 6.5 - 初期設定！ 内のとおり RPMforege リポジトリの導入を行なっている。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. Clam AntiVirus インストール ベースリポジトリには存在しないので、RPMforge リポジトリからインストールする。 # yum --enablerepo=rpmforge -y install clamd 2. clamd 設定ファイル編集 Clam AntiVirus...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","ウイルス対策"],
        "url": "/2013/12/19/centos-6-5-clamantivirus-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - ファイアウォール（iptables）構築！",
        "excerpt":"前回は CentOS 6.5 サーバにアンチウィルスソフト Clam AntiVirus の導入を行いました。 今回はファイアウォール iptables の構築を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 SSH のポートはセキュリティ上デフォルトの 22 から変更している。 「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） （また、最初のうちはそのままコピーさせてもらっているが、今後各種サーバを構築していくにつれポート開放部分を追加していく） 1. ファイアウォール設定スクリプト作成 以下のようにファイアウォール設定スクリプトを作成する。 File: iptables.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","ファイアウォール"],
        "url": "/2013/12/20/centos-6-5-iptables-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - DNS サーバ（BIND）構築！",
        "excerpt":"前回は CentOS 6.5 サーバにファイアウォール iptables の構築を行いました。 今回は DNS サーバ BIND の構築を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 セカンダリネームサーバは構築しない。 使用しているルータは DNSSEC 非対応。 PPPoE 環境ではない。 IPv6 は使用しない。 グローバル IP アドレスは固定。（aaa.bbb.ccc.ddd と仮定） ドメイン名は “mk-mode.com” ローカルネットワークは “192.168.11.0/24” サーバマシンのローカル IP アドレスは “192.168.11.102” 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. BIND インストール DNS サーバである...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","DNS"],
        "url": "/2013/12/21/centos-6-5-bind-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - FTP サーバ（vsftpd）構築！",
        "excerpt":"前回は CentOS 6.5 サーバに DNS サーバ BIND の構築を行いました。 今回は FTP サーバ vsftpd の構築を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 PASV モード用開放ポートは 4000 〜 4005 を想定。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. vsftpd インストール FTP サーバ vsftpd を以下のようにしてインストールする。 # yum -y install vsftpd 2. vsftpd 設定ファイル編集 vsftpd 設定ファイルを以下のように編集する。...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","FTP"],
        "url": "/2013/12/22/centos-6-5-vsftpd-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - ファイルサーバ（NFS）構築！",
        "excerpt":"前回は CentOS 6.5 サーバに FTP サーバ vsftpd の構築を行いました。 今回はファイルサーバ NFS の構築を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 NFS 用ディレクトリを新たに作成する。（”/home” 配下に “/exports” ディレクトリを作成する） クライアント側でマウントに使用するディレクトリは “/var/exports” とする。 サーバ側は root で作業することを想定、クライアント側は一般ユーザで作業することを想定している。 過去にこのサイトを参考にして作業した際に記録していたものを参照している。 1. インストール NFS サーバツールを以下のようにしてインストールする。 # yum -y install...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","NFS"],
        "url": "/2013/12/23/centos-6-5-nfs-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - ファイルサーバ（Samba）構築！",
        "excerpt":"前回は CentOS 6.5 サーバにファイルサーバ NFS の構築を行いました。 今回はファイルサーバ Samba の構築を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 既存の一般ユーザを Samba ユーザとする。 ローカルネットワークは 192.168.11.0/24 を想定。 共有ディレクトリは “/home/samba” を想定。 プリンタ共有はしない。 ごみ箱機能は使用しない。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. Samba インストール ファイルサーバ Samba を以下のようにしてインストールする。 # yum -y install samba 2. Samba サーバアクセス用ユーザ設定 既存の一般ユーザを Samba...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Samba"],
        "url": "/2013/12/24/centos-6-5-samba-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - 送信メールサーバ（Postfix）構築！",
        "excerpt":"前回は CentOS 6.5 サーバにファイルサーバ Samba の構築を行いました。 今回は送信メールサーバ Postfix の構築を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 SMTP-Auth 機能にはシステムのユーザ名・パスワードを使用する。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. Postfix インストール 今は送信メールサーバ Postfix はデフォルトでインストールされている。 インストールされていない場合は、以下のようにしてインストールする。 # yum -y install postfix 2. Postfix 設定ファイル編集 Postfix 設定ファイルを以下のように編集する。（該当箇所のみ抜粋） File: /etc/postfix/main.cf 1 2 3 4 5 6...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix"],
        "url": "/2013/12/25/centos-6-5-postfix-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Postfix の OP25B 対策！",
        "excerpt":"前回は CentOS 6.5 サーバに送信メールサーバ Postfix の構築を行いました。 今回は Postfix の OP25B 対策を行います。 自宅サーバであるとは言っても、Postfix でメールを送信する際にはプロバイダを経由することになる。 プロバイダが OP25B(Outbound Port 25 Blocking)対策していて自宅サーバからメールが送信できない場合は、OP25B 対策の影響を受けることになるので対策を施す必要がある。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 プロバイダは @nifty を想定。 メールサーバは Postfix を想定。（Sendmail 等については各自お調べください） 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. メールサーバ名確認 クライアントマシンから nslookup コマンドでプロバイダに接続し、メールサーバ名を確認する。 # nslookup -type=mx nifty.com Server:...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix"],
        "url": "/2013/12/26/centos-6-5-postfix-op25b-setting/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - 受信メールサーバ（Dovecot）構築！",
        "excerpt":"前回は CentOS 6.5 サーバに Postfix の OP25B 対策を行いました。 今回は受信メールサーバ Dovecot の構築を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. Dovecot インストール 受信メールサーバ Dovecot を以下のようにしてインストールする。 # yum -y install dovecot 2. Dovecot 設定ファイル covecot.conf 編集 初期設定時 IPv6 を無効化にした場合 Dovecot が影響を受けるので以下のようにする。 File: /etc/dovecot/dovecot.conf 1 2...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Dovecot"],
        "url": "/2013/12/27/centos-6-5-dovecot-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - メールサーバ間通信内容暗号化（OpenSSL）！",
        "excerpt":"前回は CentOS 6.5 サーバに受信メールサーバ Dovecot の構築を行いました。 今回は OpenSSL によるメールサーバ間通信内容暗号化を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 送信メールサーバ Postfix, 受信メールサーバ Dovecot 構築済みであること。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. Postfix 設定 1-1. サーバ証明書作成 以下のようにしてサーバ証明書を作成する # cd /etc/pki/tls/certs/ # make mail.pem umask 77 ; \\ PEM1=`/bin/mktemp /tmp/openssl.XXXXXX` ; \\ PEM2=`/bin/mktemp /tmp/openssl.XXXXXX`...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix","Dovecot"],
        "url": "/2013/12/28/centos-6-5-mail-openssl/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - メールサーバ（Postfix）でウイルスチェック！",
        "excerpt":"前回は CentOS 6.5 サーバで OpenSSL によるメールサーバ間通信内容暗号化を行いました。 今回はメールサーバ Postfix でウイルスチェックを行います。 送信メールサーバ Postfix と Clam AntiVirus を Amavisd-new で連携して、メールのウイルスチェックを行う。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 送信メールサーバ Postfix 構築済みであること。 CentOS 6.5 - 初期設定！ 内のとおり RPMforege, EPEL リポジトリの導入を行なっている。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. clamd 設定ファイル編集 clamd 設定ファイル “/etc/clamd.conf” を以下のように編集する。 File:...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix","ウイルス対策"],
        "url": "/2013/12/29/centos-6-5-mail-virus-check/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - メールサーバ（Postfix）でスパムチェック！",
        "excerpt":"前回は CentOS 6.5 サーバ上のメールサーバ Postfix でウィルスチェックを行いました。 今回はメールサーバ Postfix でスパムチェックを行います。 送信メールサーバ Postfix と SpamAssassin を Amavisd-new で連携して、スパムメールチェックを行う。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 送信メールサーバ Postfix 構築済みであること。 CentOS 6.5 - 初期設定！ 内のとおり RPMforege, EPEL リポジトリの導入を行なっている。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. v310.pre 編集 SpamAssassin 設定ファイルの ok_languages オプションを有効にするため、”v310.pre” ファイルを以下のように編集する。 File:...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix","スパム対策"],
        "url": "/2013/12/30/centos-6-5-mail-spam-check/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - スパムメール誤認識対策（Postfix + SpamAssassin）！",
        "excerpt":"本年最後の投稿です。 前回は CentOS 6.5 サーバ上のメールサーバ Postfix でスパムチェックを行いました。 今回は Postfix + SpamAssassin でのスパムメール誤認識対策を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 送信メールサーバ Postfix 構築済みであること。 スパム対策として、 Postfix と SpamAssassin を amavisd-new で連携している。 1. スパムと誤認識する場合の対処方法。 “/etc/mail/spamassassin/local.cf” を直接編集しても、spamassassin-update が cron.daily により毎日自動起動して “/etc/mail/spamassassin/local.cf” が上書きされてしまうので、以下のようにする。 1-1. ホワイトリストファイル新規作成 （以下は一例） File: /root/whitelist 1 2...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix","スパム対策"],
        "url": "/2013/12/31/centos-6-5-taking-measures-spam-disrecognition/",
        "teaser": null
      },{
        "title": "2013年12月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"明けまして、おめでとうございます。 旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 話は変わりまして、先月12月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 5,980 65.0920 Mac OS 1,948 21.2039 Ubuntu Linux 572 6.2262 Linux 553 6.0194 Android 77 0.8381 unknown 44 0.4789 Debian GNU/Linux 5 0.0544 Solaris 3 0.0327 FreeBSD 2 0.0218 Fedora Linux 1 0.0109 PlayStation 1 0.0109 RedHat Linux 1 0.0109...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/01/01/blog-access/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - メール自動返信機能（Vacation）導入！",
        "excerpt":"前回は CentOS 6.5 サーバ上の Postfix + SpamAssassin でスパムメール誤認識対策を行いました。 今回はメール自動返信機能 Vacation の導入を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 送信メールサーバ Postfix、受信メールサーバ Dovecot 構築済みであること。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. 必要パッケージインストール Vacation のインストールに必要な gdbm-devel がインストールされていなれば、インストールしておく。 # yum -y install gdbm-devel 2. アーカイブファイルダウンロード＆展開 # wget \"http://downloads.sourceforge.net/project/vacation/vacation/1.2.7.1/vacation-1.2.7.1.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fvacation%2Ffiles%2F&amp;ts=1325220962&amp;use_mirror=jaist\" # tar zxvf vacation-1.2.7.1.tar.gz 3....","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix"],
        "url": "/2014/01/02/centos-6-5-vacation-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Postfix ログ解析ツール（pflogsumm）導入！",
        "excerpt":"前回は CentOS 6.5 サーバにメール自動返信機能 Vacation の導入を行いました。 今回は Postfix ログ解析ツール pflogsumm の導入を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 メールサーバ Postfix 構築済みであること。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. pflogsumm インストール # yum -y install postfix-pflogsumm 2. pflogsumm 実行スクリプト作成 File: pflogsumm_report 1 2 3 4 5 6 7 8 9...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix"],
        "url": "/2014/01/03/centos-6-5-pflogsumm-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - 複数ドメイン宛メールの集約（Fetchmail）！",
        "excerpt":"前回は CentOS 6.5 サーバに Postfix ログ解析ツール pflogsumm の導入を行いました。 今回は Fetchmail による複数ドメイン宛メールの集約を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 メールサーバ構築済みであること。 例として、@nifty 宛メールと YahooMail 宛メール、POP3S の場合のメールを集約する。 メール転送先は “hoge@mk-mode.com” を想定。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. Fetchmail インストール # yum -y install fetchmail 2. Fetchmail 設定ファイル作成 対象のユーザになって作業を行なう。 File: .fetchmailrc 1 2...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix"],
        "url": "/2014/01/04/centos-6-5-fetchmail-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Web サーバ Nginx 構築（ソースインストール）！",
        "excerpt":"前回は CentOS 6.5 サーバで Fetchmail による複数ドメイン宛メールの集約を行いました。 今回は Web サーバ Nginx の構築（ソースをビルドしてインストール）を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 ソースを取得し、ビルドしてインストールする。 当記事執筆時点で最新の安定版 1.4.4 をインストールする。 過去にこのサイトを参考にして作業した際に記録していたものを参照している。 1. 必要パッケージインストール ソースビルドに必要なパッケージをあらかじめインストールしておく。 # yum install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel 2. アーカイブダウンロード # cd /usr/local/src # wget http://nginx.org/download/nginx-1.4.4.tar.gz #...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Nginx"],
        "url": "/2014/01/05/centos-6-5-nginx-installation-by-src/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - DB サーバ MariaDB 構築（ソースインストール）！",
        "excerpt":"前回は CentOS 6.5 サーバに Web サーバ Nginx の構築（ソースをビルドしてインストール）を行いました。 今回は DB サーバ MariaDB の構築（ソースインストール）を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 ソースを取得し、ビルドしてインストールする。 当記事執筆時点で最新の安定版 5.5.34 をインストールする。 MariaDB とは言っても MySQL からフォークした DB であるので、内部の随所で “MySQL” の単語が出現することを認識しておく。 データディレクトリ作成先は “/var/lib/mysql” とした。 過去にこのサイトを参考にして作業した際に記録していたものを参照している。 1. 事前準備 最近の MariaDB, MySQL（5.5系以降）はビルド時に configure ではなく cmake を使用するので、未インストールならインストールしておく。...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","MariaDB","MySQL"],
        "url": "/2014/01/06/centos-6-5-mariadb-installation-by-src/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Ruby 2.0 インストール（ソースビルド）！",
        "excerpt":"前回は CentOS 6.5 サーバに DB サーバ MariaDB の構築（ソースインストール）を行いました。 今回は Ruby 2.0 のインストール（ソースビルド）を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 ソースを取得し、ビルドしてインストールする。 当記事執筆時点で最新の Ruby 2.0.0-p353 をインストールする。 過去にこのサイトを参考にして作業した際に記録していたものを参照している。 1. アーカイブファイルダウンロード＆展開 アーカイブファイルをダンロードし、展開する。（ダンロード先は “/usr/local/src” としている） # cd /usr/local/src # wget http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz # tar zxvf ruby-2.0.0-p353.tar.gz 2. ビルド＆インストール ビルド＆インストールは以下のように行う。（よくある .configure, make,...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Ruby"],
        "url": "/2014/01/07/centos-6-5-ruby-installation-by-src/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - 自動バックアップ運用！",
        "excerpt":"前回は CentOS 6.5 サーバに Ruby 2.0 のインストール（ソースビルド）を行いました。 今回は自動バックアップ運用の設定を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 バックアップ先ディレクトリは “/home/backup” を想定。 バックアップファイルの暗号化は行わない。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. バックアップスクリプト作成 バックアップアーカイブファイルの暗号化を行いたければ PASS にパスワードを設定すればよい。 File: backup.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/01/08/centos-6-5-automatic-backup-setting/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - rsync でファイル・ディレクトリ同期（同期先として）！",
        "excerpt":"前回は CentOS 6.5 サーバで自動バックアップ運用の設定を行いました。 今回は rsync で CentOS サーバを同期先としてファイル・ディレクトリの同期を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 ローカルマシン（Linux Mint 14）からサーバマシン（CentOS 6.5）へ同期することを想定。 サーバ側のバックアップ用ディレクトリは “/home/backup/rsync/” とする。 同期元（クライアントマシン）の IP アドレスは 192.168.11.11 を想定。 同期先（サーバマシン）の IP アドレスは 192.168.11.102 を想定。 クライアント側から同期要求があった場合にのみ rsync を起動させるために、 xined を使用する。 以下の記事内では、サーバ側の設定とクライアント側の設定を記述しているので混同しないこと。 1. 同期先（CentOS）側 1-1. 【サーバ側】rsync, xinetd インストール...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","rsync"],
        "url": "/2014/01/09/centos-6-5-rsync-setting-as-destination/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - rsync でファイル・ディレクトリ同期（同期元として）！",
        "excerpt":"前回は CentOS 6.5 サーバを同期先として rsync でファイル・ディレクトリの同期を行いました。 今回はその逆で rsync で CentOS サーバを同期元としてファイル・ディレクトリの同期を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 サーバマシン（CentOS 6.5）からローカルマシン（Linux Mint 14）へ同期することを想定。 サーバ側のバックアップ用ディレクトリは “/home/backup/rsync/” とする。 同期元（サーバマシン）の IP アドレスは 192.168.11.102 を想定。 同期先（クライアントマシン）の IP アドレスは 192.168.11.11 を想定。 クライアント側から同期要求があった場合にのみ rsync を起動させるために、 xined を使用する。 以下の記事内では、サーバ側の設定とクライアント側の設定を記述しているので混同しないこと。 1. 同期先（Linux Mint）側 1-1....","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","rsync"],
        "url": "/2014/01/10/centos-6-5-rsync-setting-as-source/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Git サーバ構築！",
        "excerpt":"前回は CentOS 6.5 サーバを同期元として rsync でファイル・ディレクトリの同期を行いました。 今回は Git サーバの構築を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 クライント側から要求があった場合のみ Git サーバを起動するようにするために xinetd を使用する。 サーバホスト名は “vbox.mk-mode.com” サーバマシンに OpenSSH サーバ構築済みで、鍵ペアによる SSH 接続が可能。 サーバマシンに xinetd 導入済み。 一般ユーザは “wheel” に属する “hoge” を想定。 1. Git サーバ構築 1-1. インストール git, git-daemon, git-all を...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Git"],
        "url": "/2014/01/11/centos-6-5-git-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - ログ解析ツール（LogWatch）導入！",
        "excerpt":"前回は CentOS 6.5 サーバに Git サーバの構築を行いました。 今回はログ解析ツール LogWatch の導入を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 1. インストール # yum -y install logwatch 2. 設定編集 File: /etc/logwatch/conf/logwatch.conf 1 2 3 MailTo = root Detail = High LogDir = /var/log 3. 動作確認 結果を端末に表示してみる。 # logwatch --print...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/01/12/centos-6-5-logwatch-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - サーバ監視ツール（munin）導入！",
        "excerpt":"前回は CentOS 6.5 サーバでログ解析ツール LogWatch の導入を行いました。 今回はサーバ監視ツール munin の導入を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 CentOS 6.5 - 初期設定！ 内のとおり EPEL リポジトリの導入を行なっている。 閲覧に使用する Web(HTTP) サーバは Nginx を想定。 ローカルネットワークは “192.168.11.0/24” を想定。 1. munin マスタ・ノードのインストール ベースリポジトリには存在しないので、EPEL リポジトリからインストールする。 # yum --enablerepo=epel -y install munin 2. 設定ファイル編集 File:...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","munin"],
        "url": "/2014/01/13/centos-6-5-munin-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - サーバ監視ツール（munin）でハードディスク温度監視！",
        "excerpt":"前回は CentOS 6.5 サーバでサーバ監視ツール munin の導入を行いました。 今回はサーバ監視ツール munin でハードディスク温度監視の設定を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 閲覧に使用する Web(HTTP) サーバは Nginx を想定。 ハードディスク温度取得には smartctl を使用する。インストール済みであること。 （hddtemp コマンドインストールして監視する方法もある） 1. munin-node 設定ファイル編集 File: /etc/munin/plugin-conf.d/hddtemp_smartctl 1 2 3 4 5 [hddtemp_smartctl] user root env.drives sda # &lt;= 追加（\"sda\" は監視するハードディスク）...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","munin"],
        "url": "/2014/01/14/centos-6-5-munin-setting-of-hddtemp/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - サーバ監視ツール（munin）でCPU温度・電圧・ファン回転数測定！",
        "excerpt":"前回は CentOS 6.5 サーバ上のサーバ監視ツール munin でハードディスク温度監視の設定を行いました。 今回はサーバ監視ツール munin で CPU 温度・電圧・ファン回転数監視の設定を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 閲覧に使用する Web(HTTP) サーバは Nginx を想定。 1. lm_sensors インストール ハードウェア状況を取得するのに必要な lm_sensors をインストールして、ハードウェアを検出する。 # yum -y install lm_sensors 2. lm_sensors でハードウェア検出 lm_sensors インストール後は、ハードを検出する。途中の質問は全てデフォルト応答でよい。 （当然ながら、仮想マシンの場合は正常にハードが検出されないのでご注意を！） # sensors-detect 3. lm_sensors 動作確認...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","munin"],
        "url": "/2014/01/15/centos-6-5-munin-setting-of-cpu-fan/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - サーバ監視ツール（munin）で MariaDB(MySQL) を監視！",
        "excerpt":"前回は CentOS 6.5 サーバ上のサーバ監視ツール munin で CPU 温度・電圧・ファン回転数監視の設定を行いました。 今回はサーバ監視ツール munin で MariaDB(MySQL) の監視設定を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 閲覧に使用する Web(HTTP) サーバは Nginx を想定。 MySQL 用プラグインはデフォルトで用意されているものを使用する。 1. munin-node 設定ファイル編集 File: /etc/munin/plugin-conf.d/munin-node 1 2 3 4 [mysql*] env.mysqlopts -u root -p＜root のパスワード＞ #env.mysqladmin /usr/bin/mysqladmin #...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","munin","MariaDB","MySQL"],
        "url": "/2014/01/16/centos-6-5-munin-setting-of-mariadb-mysql/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - サーバ監視ツール（munin）で Nginx を監視！",
        "excerpt":"前回は CentOS 6.5 サーバ上のサーバ監視ツール munin で MariaDB(MySQL) の監視設定を行いました。 今回はサーバ監視ツール munin で Web(HTTP) サーバ Nginx の監視設定を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 閲覧に使用する Web(HTTP) サーバも Nginx を想定。 Nginx 用プラグインはデフォルトで用意されているものを使用する。 ローカルネットワークは “192.168.11.0/24” を想定。 1. Nginx 設定ファイル編集 Nginx 設定ファイルの “server” ディレクティブ内に以下を追加する。 File: /usr/local/nginx/conf/nginx.conf 1 2 3 4...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","munin","Nginx"],
        "url": "/2014/01/17/centos-6-5-munin-setting-of-nginx/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Web サーバ Nginx で SSL 接続！",
        "excerpt":"前回は CentOS 6.5 サーバ上のサーバ監視ツール munin で Web(HTTP) サーバ Nginx の監視設定を行いました。 今回は Web(HTTP) サーバ Nginx で SSL 接続するため設定を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 Web(HTTP)サーバ Nginx が「CentOS 6.5 - Web サーバ Nginx 構築（ソースインストール）！」の方法で導入済みであることを想定。 1. SSL 証明書作成 SSL 証明書を以下のようにして作成する。 # cd /etc/pki/tls/certs # sed -i 's/365/3650/g'...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Nginx"],
        "url": "/2014/01/18/centos-6-5-nginx-setting-of-ssl/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - PHP インストール（ソースビルド）！",
        "excerpt":"前回は CentOS 6.5 サーバ上の Web(HTTP) サーバ Nginx で SSL 接続するため設定を行いました。 今回は PHP のインストール（ソースビルド）を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 Web サーバ Nginx, DB サーバ MySQL(MariaDB) と連携することを想定。 「CentOS 6.5 - 初期設定！ 」内のとおり RPMforge リポジトリの導入を行なっている。 「CentOS 6.5 - Web サーバ Nginx 構築（ソースインストール）！」のとおり Nginx のインストールを行なっている。 「CentOS 6.5...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","PHP"],
        "url": "/2014/01/19/centos-6-5-php-installation-by-src/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - PHP と Nginx の連携！",
        "excerpt":"前回は CentOS 6.5 サーバ上で PHP のインストール（ソースビルド）を行いました。 今回は PHP と Web サーバ Nginx の連携を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 「CentOS 6.5 - Web サーバ Nginx 構築（ソースインストール）！」のとおり Nginx のインストールを行なっている。 「CentOS 6.5 - PHP インストール（ソースビルド）！ 」のとおり PHP のインストールを行なっている。 1. PHP-FPM 設定ファイル作成 デフォルトの設定ファイルを複製する # cd /usr/local/php-5.5.8/etc/ #...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","PHP","Nginx"],
        "url": "/2014/01/20/centos-6-5-php-coordination-with-nginx/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - ユーザ管理ツール（Usermin）導入！",
        "excerpt":"前回は CentOS 6.5 サーバ上で PHP と Web サーバ Nginx の連携を行いました。 今回はユーザ管理ツール Usermin の導入を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 メールサーバ構築済みであること。 Web サーバは Apache ではなく Nginx を想定。 CentOS 6.5 - 初期設定！ 内のとおり RPMforge リポジトリの導入を行なっている。 Usermin 1.550 をインストールする。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. Perl - Net::SSLeay モジュールインストール RPMforge...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/01/21/centos-6-5-usermin-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Usermin で Vacation 設定！",
        "excerpt":"前回は CentOS 6.5 サーバ上でユーザ管理ツール Usermin の導入を行いました。 今回は Usermin でメール自動返信 Vacation を利用する設定を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 メールサーバ構築済みであること。 Vacation 導入済み。 Usermin 導入済み。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. Usermin::Vacation アーカイブダウンロード Usermin::Vacation のアーカイブをダウンロードして展開する。 # wget http://jaist.dl.sourceforge.net/sourceforge/userminvacation/usermin_vacation-0.9.tar.gz # tar zxvf usermin_vacation-0.9.tar.gz 2. Usermin::Vacation ディレクトリコピー 展開した Usermin::Vacation のディレクトリを所定のディレクトリへコピーする。 # cp...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/01/22/centos-6-5-usermin-vacation-setting/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Webmail システム SquirrelMail 導入！",
        "excerpt":"前回は CentOS 6.5 サーバ上でユーザ管理ツール Usermin でメール自動返信 Vacation を利用する設定を行いました。 今回は Web メールシステム SquirrelMail の導入を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 Web サーバは Nginx を想定。 SMTP サーバ Postfix 構築済み。 IMAP サーバ Dovecot 構築済み。 PHP インストール済み。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. アーカイブダウンロード＆展開 アーカイブをダウンロードし、展開する。そして、ディレクトリごと所定の位置へ移動する。 # wget http://sourceforge.net/projects/squirrelmail/files/stable/1.4.22/squirrelmail-webmail-1.4.22.tar.gz/download # tar zxvf...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/01/23/centos-6-5-squirrel-mail-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - ログ監視ツール SWATCH 導入！",
        "excerpt":"前回は CentOS 6.5 サーバ上で Web メールシステム SquirrelMail の導入を行いました。 今回はログ監視ツール SWATCH の導入を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 DNS サーバ BIND 構築済み。（監視する場合） SSH サーバ構築済み。（監視する場合） FTP サーバ vsftp 構築済み。（監視する場合） 「CentOS 6.5 - 初期設定！」内のとおり EPEL リポジトリの導入を行なっている。 主に「CentOSで自宅サーバー構築」を参考にしている。 （実際は、過去にこのサイトを参考にして作業した際に記録していたものを参照している） 1. SWATCH インストール # yum --enablerepo=epel -y install swatch...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/01/24/centos-6-5-swatch-installation/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Python インストール（ソースビルド）！",
        "excerpt":"前回は CentOS 6.5 サーバ上でログ監視ツール SWATCH の導入を行いました。 今回はプログラミング言語 Python をソースをビルドしてインストールします。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 デフォルトでインストールされている Python 2.6.6 はアンインストールせず、Python 3.3.3 をインストールし、 2.6.6 と 3.3.3 を共存させる。 （python コマンドと python3.3 コマンドで使い分ける） 「デフォルトでインストールされている Python をアンインストールすることはサーバ管理上悪影響を与えるので危険である」ということを理解しておく。 過去にこのサイトを参考にして作業した際に記録していたものを参照している。 1. Python バージョン確認 インストール済み（現状）の Python のバージョンを確認してみる。 # python -V Python 2.6.6...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Python"],
        "url": "/2014/01/25/centos-6-5-python-installation-by-src/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Web カメラ構築！",
        "excerpt":"前回は CentOS 6.5 サーバ上でプログラミング言語 Python をソースをビルドしてインストールしました。 今回は Web カメラの構築（USB カメラによる静止画自動保存）を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 Web カメラを構築するマシンはサーバ用途のマシンなので、GUI 環境もないしディスプレイも接続していない。（ディスプレイはインストール時に接続しただけ） カメラは市販の USB カメラを使用する。OS が USB カメラを認識していること。 （今回の当方の場合、 “/dev/video0” として認識している） 過去にこのサイトを参考にして作業した際に記録していたものを参照している。 1. X11 ドライバのインストール X11 のウィンドウでモニタするアプリなので、X11 に依存する。X11 がインストールされていない環境下では webcam も make できないので、ドライバをインストールする。 # yum -y install...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Webカメラ"],
        "url": "/2014/01/26/centos-6-5-webcam-setting/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - Procmail によるメール転送設定！",
        "excerpt":"前回は CentOS 6.5 サーバ上で Web カメラの構築（USB カメラによる静止画自動保存）を行いました。 今回はメール転送（振り分け）システム Procmail でのメール転送設定を行います。 0. 前提条件 CentOS 6.5(x86_64) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 14(64bit) を想定。 メールサーバ構築済み。 複雑な設定も可能であるが、今回は単純な転送設定についてのみ。 過去にこのサイトを参考にして作業した際に記録していたものを参照している。 1. Procmail インストール Procmail がインストールされていなければインストールする。 # yum -y install procmail 2. メール転送設定 以下の作業は転送設定したいユーザになって行う。 ユーザルートの “.forward” を以下のように編集（無ければ作成）する。 File: .forward 1 \"|IFS=' ' &amp;&amp; exec /usr/bin/procmail -f-...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/01/27/centos-6-5-procmail-setting/",
        "teaser": null
      },{
        "title": "CentOS 6.5 - サーバ構築まとめ！",
        "excerpt":"これまで、１か月以上にわたって CentOS 6.5 によるサーバ構築について（実際に当方が行なっている作業を中心に）紹介してきました。 ちなみに、毎日膨大な労力を費やして記事にしていた訳ではありません。 普段から録りためていた資料を参考にサーバ構築作業を行い、変更点があればその記録を修正し、それをコピーアンドペーストして記事にしていただけです。 以下に今回のシリーズで行なった作業の一覧と追記事項を掲載します。 1. 作業一覧（記事にした順） CentOS 6.5 - インストール！ CentOS 6.5 - 初期設定！ CentOS 6.5 - SSHサーバ（OpenSSH）構築！ CentOS 6.5 - SSH サーバ 鍵認証接続！ CentOS 6.5 - NTP サーバ構築！ CentOS 6.5 - ファイル改ざん検知システム（Tripwire）導入！ CentOS 6.5 - rootkit 検知ツール（chkrootkit）導入！ CentOS 6.5 - アンチウィルスソフト（Clam AntiVirus）導入！ CentOS 6.5 - ファイアウォール（iptables）構築！...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/01/28/centos-6-5-summary-of-server-setting/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML 取得（その後）！",
        "excerpt":"以前、「気象庁防災情報 XML」の受信方法等について紹介しました。 よくあるフィードを自分で定期的に受信して情報を取得するような方法ではなく、フィードの発行があった場合のみ更新通知を受信し、その通知受信後に本フィードの情報を取得しに行くような方法です。（リアルタイムフィード機能を利用した方法） Ruby on Rails - PubSubHubbub Subscriber 実装！ 気象庁防災情報 XML - 受信手順（概要）！ その後、受信した気象庁防災情報 XML のデータを利用したデータ参照ページを作成したので、その紹介です。 1. 参照ページ概要 まず、気象庁防災情報 XML の情報の二次利用について 「公開ＸＭＬ電文の第三者への提供やホームページへの掲載等の二次的な利用については、利用目的が気象業務法の趣旨及び公序良俗に反しない限り、原則として制限はありません。」（引用元「気象庁ホームページを通じて公開するＸＭＬ形式電文のご利用にあたっての留意事項」）に準拠して当サイトでも利用している。 「XML Feed 受信履歴」ページについて 随時送信されるフィードの受信履歴を確認できるページを設置。（1ページ） 内容の更新は、フィードを受信した都度。 「気象庁防災情報 XML」で一般に公開されている全ての情報を管理。（現時点） 「気象庁防災情報 XML」の仕様通りの「情報名称」単位で管理。 受信した XML フィードもそのまま閲覧できるように設定。 受信した XML フィードを XSLT スタイルシートで整形して閲覧できるようにも設定。 データベースページについて 受信したフィードをデータベースに登録後、情報を参照しやすく加工したページを設置。（40ページ） 内容の更新は、15分間隔。（現時点） 「気象庁防災情報 XML」仕様の「情報名称」単位ではなく、ある程度まとめて管理。 詳細な内容のある情報については別途内容表示ページを設置。 2. 作成ページ一覧 当方のホームページ上に、受信した「気象庁防災情報 XML」のデータを参照できるページを作成した。...","categories": ["Webサイト"],
        "tags": ["XML","Atom"],
        "url": "/2014/01/30/jma-xml-2/",
        "teaser": null
      },{
        "title": "2014年1月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 12,908 69.2118 Mac OS 3,608 19.3458 Linux 942 5.0509 Ubuntu Linux 933 5.0027 Android 179 0.9598 unknown 45 0.2413 FreeBSD 15 0.0804 RedHat Linux 8 0.0429 SuSE Linux 4 0.0214 Debian GNU/Linux 3 0.0161 Solaris 3 0.0161 PlayStation 1 0.0054 Wii 1 0.0054...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/02/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby on Rails - Unicorn のログローテーション！",
        "excerpt":"以前、Ruby on Rails のログ（”production.log”）のローテーションについて記録を残しました。 * CentOS - Rails ログローテーション！ Rails のログだけでなく、Rails サーバ Unicorn のログも放おっておくと肥大化します。そこで、ログローテーションの設定を行なってみました。 0. 前提条件 Ruby 2.0.0-p247, Rails 4.0.0 を想定（動作確認）。 “/var/www/rails/” ディレクトリ配下に “rails_app” という Rails アプリを作成。 １．logrotate 全体設定の確認 全体的な logrotate の設定を確認してみる。 File: /etc/logrotate.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["サーバ構築"],
        "tags": ["Ruby","Rails","Unicorn"],
        "url": "/2014/02/02/unicorn-logrotation/",
        "teaser": null
      },{
        "title": "MySQL(MariaDB) - 整数型の範囲！",
        "excerpt":"データベースサーバ MySQL(MariaDB) の整数型の範囲について、よく参照するのでメモとして残しておきます。 １. 整数型範囲一覧 タイプ サイズ（byte） 最小値 (Signed/Unsigned) 最大値 (Signed/Unsigned) TINYINT 1 -128 0 127 255 SMALLINT 2 -32768 0 32767 65535 MEDIUMINT 3 -8388608 0 8388607 16777215 INT 4 -2147483648 0 2147483647 4294967295 BIGINT 8 -9223372036854775808 0 9223372036854775807 18446744073709551615 2. 注意 Mysql(MariaDB) では、 INT(4) のように型指定の後に整数値を指定できるが、これは「バイト数」ではなく「表示桁数」である。 INT(4) などと数字を指定したからと言って、カラムに格納できる値の範囲が制限されたりすることはない。 つまり、...","categories": ["サーバ構築"],
        "tags": ["MySQL","MariaDB"],
        "url": "/2014/02/04/mysql-type-of-integer/",
        "teaser": null
      },{
        "title": "Linux - GUI でマシンがフリーズした場合の対処法！",
        "excerpt":"Linux マシンの GUI でフリーズした場合の対処方法についてのメモです。 Unix 系 OS では、カーネルそのものが暴走することは非常に稀で、フリーズするならアプリケーションや X Window System の暴走によるものでしょう。それでも、非常に稀ですが。。。 一応、有事に備えて記録しておいた次第です。 0. 前提知識 Linux の GUI 環境の裏には、通常 tty1 から tty6 の６つの仮想コンソールが存在する（tty7 以降は X Window System である）ということを認識しておく。 フリーズの仕方によっては、以下の作業では効果がないこともある。 1. マシンのフリーズ Linux マシンの GUI 環境で作業中に、突然マシンがフリーズする（フリーズしたとする）。 2. 仮想コンソールに遷移 Ctrl キーと Alt キーを押下しながら F1 〜 F6 のいずれかのキーを押下して、仮想コンソール１〜６のいずれかに遷移する。 3. 原因プロセスの強制終了 仮想コンソール上で ps ax,...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2014/02/06/how-to-do-in-case-of-linux-freeze/",
        "teaser": null
      },{
        "title": "Bash - バックアップスクリプト（年月日別ディレクトリ）！",
        "excerpt":"年別・月別・日別にディレクトリがあり、日別ディレクトリ内に多数のファイルが保存されているとした場合に、日単位や月単位でファイルを圧縮保存したいことがあると思います。（当方はあります） 以下、当方が使用しているシェルスクリプトの紹介です。 0. 前提知識 GNU bash 4.1.2 での作業を想定。 CentOS 6.5, Linux Mint 14 で動作を確認。 1. バックアップ仕様 バックアップ元は下図のように年別・月別・日別ディレクトリに該当日のファイルが保存されているものとする。 年は半角数字４文字、月・日は半角数字２文字であるものとするが、ファイル名は任意でよい。 path +-- to | +-- src | | +-- 2013 | | | +-- 11 | | | | +-- 01 | | | | | +-- aaaaaaaa.txt | | | |...","categories": ["サーバ構築"],
        "tags": ["Linux","シェル"],
        "url": "/2014/02/08/bash-backup-script-daily/",
        "teaser": null
      },{
        "title": "Vim - インデントを把握しやすくするプラグイン！",
        "excerpt":"高機能テキストエディタ Vim でインデントを把握しやすくするためのプラグインが存在するようです。 今までそれほど「インデントがもっと把握しやすかったらよかったら」と気にしたことはありませんでしたが、あればそれなりに便利ではないかと思い、導入してみました。 導入したのは、 vim-indent-guides というプラグインです。 0. 前提条件 Linux Mint 14 での作業を想定。 Vim のプラグインを Neobundle で管理していることを想定。（参照「Vim - プラグイン管理を Vundle から NeoBundle へ移行！」） 1. Vim 設定ファイル編集 今回は NeoBundle でプラグインをインストールするので、設定ファイル “.vimrc” に以下の記述を追加する。 File: ~/.vimrc 1 NeoBundle 'nathanaelkane/vim-indent-guides' 2. プラグインのインストール Vim エディタのコマンドモードで以下のように実行する。 :NeoBundleInstall [neobundle/install] (1/1): |vim-indent-guides| git clone --recursive https://github.com/nathanaelkane/vim-indent-guides.git \"/home/masaru/.vim/bundle/vim-indent-guides\" もしも以下のように出力されてインストールできなかった場合は、Vim...","categories": ["PC_Tips"],
        "tags": ["Vim"],
        "url": "/2014/02/10/vim-installation-of-indent-plugin/",
        "teaser": null
      },{
        "title": "R 言語 - マンデルブロ集合！",
        "excerpt":"統計解析向けのプログラミング言語 R で「マンデルブロ集合」を図形化してみました。 詳しいことは述べません。「こんなこともできるんだ」程度にとどめています。 0. 前提条件 Linux Mint 14 での作業を想定。 統計解析向けのプログラミング言語 R 導入済み。（Ver. 3.0.1 を想定） 今回は、２次元グラフと３次元グラフを描画する。 1. マンデルブロ集合について マンデルブロ集合とは、以下の条件を満たす複素数 \\(c\\) 全体が作る集合で表される複素平面上の点の集合のことである。 漸化式 \\(\\begin{eqnarray*} \\left\\{ \\begin{array}{l} z_{n+1}=z_{n}^{2} + c \\ (n \\in \\mathbb{N}) \\\\ z_{0}=0 \\\\ \\end{array} \\right. \\end{eqnarray*}\\) で定義される複素数列｛\\(z_{n}｜n \\in \\mathbb{N}\\)｝が、 \\(n \\rightarrow \\infty\\) で無限大に発散しない。 また、\\(z _ {n}\\) を点 \\((x...","categories": ["プログラミング","数学"],
        "tags": ["R"],
        "url": "/2014/02/12/r-mandelbrot/",
        "teaser": null
      },{
        "title": "Nginx - www 有無を統一！！",
        "excerpt":"軽量 Web サーバ Nginx で URL をリダイレクトさせる方法についての備忘録です。 Apache なら RewriteCond と RewriteRule を使うところを Nginx ではどう記述すればよいのかということです。 “www” 付きの URL にも “www” 無しの URL にもそのままアクセスできるようになっているということは、 SEO 的にも効果が薄れます。 特に検索エンジンによるクロールで大きく影響がでます。”www” 付き URL と “www” 無し URL は別々の URL と判断されるので、”robots.txt”, “sitemap.xml” を設定していても効果が弱いということです。（Apache でも Nginx 等でも同じ） 実際には色々と設定できますが、今回は “www” なしの URL を “www” 付きの URL に統一させる方法に限定してます。 0....","categories": ["サーバ構築"],
        "tags": ["Nginx"],
        "url": "/2014/02/14/nginx-redirection-of-url-without-www/",
        "teaser": null
      },{
        "title": "Linux - cowsay で Linux コマンド説明表示！",
        "excerpt":"アスキーアートのキャラクタがメッセージをつぶやく cowsay という Linux コマンドについての備忘録です。 0. 前提条件 Linux Mint 14(64bit) での作業を想定。 GNU bash 4.2.37, zsh 5.0.0 で動作確認。 1. cowsay について “cowsay” とは、アスキーアート生成コマンドで、吹き出しでメッセージを表示させることができるものである。 2. cowsay インストール cowsay コマンドがインストールされていなければ、インストールする。 $ sudo apt-get -y install cowsay また、fortune コマンド（後述）もインストールされていなければ、インストールする。 $ sudo apt-get -y install fortune 3. cowsay 使用方法 ヘルプ表示。 $ cowsay -h cowsay -h...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2014/02/17/linux-cowsay-usage/",
        "teaser": null
      },{
        "title": "nanoc - sitemap.xml 生成！",
        "excerpt":"Ruby 製の静的 CMS システム nanoc でコンパイル時に sitemap.xml を生成させる方法についての記録です。 sitemap.xml は検索エンジンのクローラ（ボット）にクロールを許可する一覧が記述されている XML ファイルです。人間が見てどうこうするものではありません。 0. 前提条件 Ruby 2.1.0-p0 を想定。 RubyGems 2.2.1 を想定。 nanoc 3.6.7 を想定。 Nanoc サイトの URL は http://www.mk-mode.com/nanoc を想定。 （当方は、ベースは http://www.mk-mode.com とし、サブディレクトリ運用している） sitemap ジェネレータには “Nanoc3::Helpers::XMLSitemap” という nanoc ヘルパを使用する 1. Gem パッケージ builder のインストール “Nanoc3::Helpers::XMLSitemap” を使用するには builder という Gem パッケージが必要なので、未インストールならインストールする。 $...","categories": ["ブログ"],
        "tags": ["Ruby","nanoc","XML"],
        "url": "/2014/02/19/nanoc-generate-sitemap-xml/",
        "teaser": null
      },{
        "title": "C++ - 線形計画法（シンプレックス法）！",
        "excerpt":"今回は、線形計画法を「シンプレックス法」で解くアルゴリズムを C++ で実装してみました。 以下、簡単な説明と C++ ソースコードの紹介です。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2 1. 線形計画法（シンプレックス法）について （数式が多いので、別途 \\(\\LaTeX\\) で作成した文書を貼り付け） 2. C++ ソース作成 以下のように C++ ソールコードを作成してみた。 File: linear_programming.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2014/02/21/cpp-linear-programming-by-simplex/",
        "teaser": null
      },{
        "title": "Ruby - 線形計画法（シンプレックス法）！",
        "excerpt":"前回は、C++ による「線形計画法（シンプレックス法）」のアルゴリズムを紹介しました。 C++ - 線形計画法（シンプレックス法）！ 今回は、同じアルゴリズムを Ruby で実現してみました。アルゴリズムについては、上記リンクの記事を参照してください。 0. 前提条件 Linux Mint 14 Nadia (64bit) での作業を想定。 Ruby 2.0.0-p247 を使用。 線形計画法（シンプレックス法）についての説明は割愛。（「C++ - 線形計画法（シンプレックス法）！」を参照） 1. Ruby スクリプト作成 File: linear_programming_simplex.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2014/02/22/ruby-linear-programming-simplex/",
        "teaser": null
      },{
        "title": "Linux - チェックサムコマンド！",
        "excerpt":"ファイルのチェックサム値を確認するための Linux(Unix) コマンドについての備忘録です。 インストールメディアをダウンロードした際に、そのメディア破損していないかを確認するためによく使用するでしょう。 0. 前提条件 Linux Mint 14(64bit), CentOS 6.5(32bit) で動作確認。 1. チェックサムコマンドについて md5sum コマンドは、MD5(Message Digest 5)チェックサムを計算・確認するコマンド。 sha1sum コマンドは、を計算・確認するコマンド。 sha256sum コマンドは、 16ビットのチェックサムを計算する sum というコマンドもある。 CRC チェックサムを計算する cksum というコマンドもある。 他にもいくつかチェックサムコマンドは存在する。 2. チェックサムの確認（その１） チェック対象のファイルのファイル名を指定してコマンドを実行すればよい。 以下は md5sum, sha1suml, sha256sum コマンドの例。（-t オプションを指定してもよいが、デフォルトなので不要） $ md5sum SL-65-i386-2013-12-05-boot.iso aef6070e6cde255097eb28ddf624b69f SL-65-i386-2013-12-05-boot.iso $ sha1sum SL-65-i386-2013-12-05-boot.iso b0cce1f83d7fc0e811237be7926d25ce9d32818e SL-65-i386-2013-12-05-boot.iso $...","categories": ["PC_Tips"],
        "tags": ["Linux","Unix"],
        "url": "/2014/02/24/linux-checksum-command/",
        "teaser": null
      },{
        "title": "Nginx - Linux Mint 13 へ最新をインストール（パッケージ使用）！",
        "excerpt":"これまで Linux Mint 上で Web(Reverse Proxy) サーバ Nginx をソースをビルドしてインストールしたり、標準リポジトリからパッケージインストールしたりしてきました。 Nginx - Linux Mint にインストール（ソースビルド）！ Nginx - Linux Mint にインストール（パッケージ使用）！ 今回はパッケージでインストールするのですが、標準リポジトリではなく Nginx リポジトリを使用してインストールしてみます。 0. 前提条件 Linux Mint 13(Maya, 64bit) での作業を想定。 Nginx 1.4.5 をインスールする。 サービス管理ソフト sysv-rc-conf コマンドインストール済み。（update-rc.d コマンドは今は非推奨） 1. 公開鍵登録 $ wget http://nginx.org/keys/nginx_signing.key $ sudo apt-key add nginx_signing.key 2. sources.list 編集 File:...","categories": ["サーバ構築"],
        "tags": ["Linux","LinuxMint","Nginx"],
        "url": "/2014/02/26/nginx-newest-installation-by-package/",
        "teaser": null
      },{
        "title": "Linux Mint - IPv6 無効化！",
        "excerpt":"IPv4 のみを使用する環境で IPv6 を有効にしていると思わぬ所で不具合が発生するかも知れないので、無効化する。 （ネットワーク接続の設定で IPv6 を「無効」にすればよいでしょうが、それでも不安なので） 0. 前提条件 Linux Mint 13(Matya) での作業を想定。 IPv4 や IPv6 が何かはここでは説明しない。 1. 設定前状況確認 ターミナル上で ifconfig コマンドで確認する。 ネットワーク接続の設定で IPv6 を「無効」に設定していない場合は、該当の Ethernet カードに inet6アドレス: xxxx::xxx:xxxx:xxxx:9999/64 範囲:リンク のような行が存在するはずである。 IPv6 が有効になっているということである。 2. 設定ファイル編集 設定ファイル “/etc/sysctl.conf” に以下のような記述を追加する。 （全てのネットワークカードについて IPv6 を無効にする場合） File: /etc/sysctl.conf 1 2 # IPv6 net.ipv6.conf.all.disable_ipv6 = 1...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2014/02/27/linux-mint-disable-ipv6/",
        "teaser": null
      },{
        "title": "2014年2月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 15,258 70.3069 Mac OS 3,785 17.4408 Ubuntu Linux 1,282 5.9073 Linux 1,061 4.8890 Android 187 0.8617 unknown 103 0.4746 FreeBSD 16 0.0737 RedHat Linux 5 0.0230 SuSE Linux 2 0.0092 3DS 1 0.0046 Solaris 1 0.0046 Wii 1 0.0046 合　計 21,702 100.0000 2....","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/03/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - 最小二乗法！",
        "excerpt":"今回は、最小二乗法で近似方程式で解くアルゴリズムを C++ で実装してみました。 以下、簡単な説明と C++ ソースコードの紹介です。 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 g++ (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3 1. 最小二乗法について （数式が多いので、別途 \\(\\LaTeX\\) で作成した文書を貼り付け） 2. C++ ソース作成 以下のように C++ ソールコードを作成してみた。 処理系によっては、べき乗を求める pow 関数がエラーになるので、自前で ipow 関数を作成している。 File: least_squares_method.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2014/03/02/cpp-least-squares-method/",
        "teaser": null
      },{
        "title": "Ruby - 最小二乗法！",
        "excerpt":"前回は、C++ による「最小二乗法」のアルゴリズムを紹介しました。 C++ - 最小二乗法！ 今回は、同じアルゴリズムを Ruby で実現してみました。アルゴリズムについては、上記リンクの記事を参照してください。 以下、Ruby によるサンプルスクリプトです。 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 Ruby 2.1.0-p0 を使用。 最小二乗法についての説明は割愛。（「C++ - 最小二乗法！」を参照） 1. Ruby スクリプト作成 File: least_squares_method.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2014/03/03/ruby-least-squares-method/",
        "teaser": null
      },{
        "title": "Fortran - 最小二乗法！",
        "excerpt":"前々回、前回は、C++, Ruby による「最小二乗法」のアルゴリズムを紹介しました。 C++ - 最小二乗法！ Ruby - 最小二乗法！ 今回は、同じアルゴリズムを Fortran 95 で実現してみました。アルゴリズムについては、上記リンクの記事を参照してください。 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 GNU Fortran (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3 最小二乗法についての説明は割愛。（「C++ - 最小二乗法！」を参照） 1. Fortran ソースコード作成 File: least_squares_method.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2014/03/04/fortran-least-squares-method/",
        "teaser": null
      },{
        "title": "Java - 最小二乗法！",
        "excerpt":"これまで、C++, Ruby, Fortran による「最小二乗法」のアルゴリズムを紹介しました。 C++ - 最小二乗法！ Ruby - 最小二乗法！ Fortran - 最小二乗法！ 今回は、同じアルゴリズムを Java で実現してみました。アルゴリズムについては、上記リンクの記事を参照してください。 0. 前提条件 Linux Mint 13 Maya (64bit) での作業を想定。 コンパイラ・ランタイムは、 Oracle Java 1.7.0_51 を想定。 最小二乗法についての説明は割愛。（「C++ - 最小二乗法！」を参照） 1. Java ソースコード作成 File: LeastSquaresMethod.java 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング","数学"],
        "tags": ["Java"],
        "url": "/2014/03/05/java-least-squares-method/",
        "teaser": null
      },{
        "title": "opensource COBOL - Linux Mint にインストール！",
        "excerpt":"opensource COBOL は GNU Cobol（以前の OpenCOBOL）を日本特有のビジネス環境に対応すべく拡張したオープンソースの Cobol 開発環境です。 日本特有のビジネス環境にこだわらなければ、 GNU Cobol(OpenCOBOL) でもよいでしょう。 0. 前提条件 Linux Mint 13(Maya, 64bit) での作業を想定。 GNU Cobol(以前の OpenCOBOL) ではなく、opensource COBOL なので混同しないこと。 しかし、基本的なことは GNU Cobol(OpenCOBOL) と同じだと考えてよい。 Redhat 系（RPM でのパッケージ管理）環境なら RPM ファイルをダウンロードしてインストールしてもよいだろう。 1. GMP ライブラリインストール opensource COBOL のコンパイルに GMP(GNU Multi Precision) という「任意精度数演算ライブラリ」が必要なので、アーカイブをダウンロード＆展開して、ビルド＆インストールする。（当記事執筆時点では GMP 5.1.3 が最新） $ wget https://gmplib.org/download/gmp/gmp-5.1.3.tar.bz2...","categories": ["PC_Tips"],
        "tags": ["Cobol"],
        "url": "/2014/03/07/opensource-cobol-linux-mint-installation/",
        "teaser": null
      },{
        "title": "Scientific Linux - yum リポジトリ接続先変更！",
        "excerpt":"Scientific Linux で yum を使用してパッケージをインストールしたりアップデートしたりする際に、デフォルトでは海外のサイトへつながってしまいます。 気にならないならそれでもよいのですが、当方は気になるので国内のサーバへ変更しています。 以下、当方の設定例です。 0. 前提条件 Scientific Linux 6.5(x86_64) での作業を想定。 （CentOS 等 Redhat 系ディストリビューションな同様に設定可能） yum-fastestmirror パッケージは使用しない。 取り急ぎ sl, sl-security リポジトリのみ対応する。（enabled=1 で有効にしているもののみ） 1. 設定ファイル編集 設定ファイル “/etc/yum.repos.d/sl.repo” を以下のように編集する。 既存の baseurl を国内サーバの URL に変更している。（以下では、接続先を「北陸先端科学技術大学院大学(JAIST)」に設定しているが、「KDDI」や「理研」等でもよいし、複数設定してもよい。） また、mirrorlist は yum-fastestmirror でミラーサイトの一覧を取得する場合に参照されるので、 yum-fastestmirror を導入していなければ mirrorlist は不要。（有ってもよいが、無意味にミラーサイトへ接続に行き、戸惑うかも知れない） yum-fastestmirror を導入しているのなら、 mirrorlist も国内サーバの URL に変更するとよい。 （[sl-source] は...","categories": ["サーバ構築"],
        "tags": ["Linux","ScientificLinux"],
        "url": "/2014/03/09/scientific-linux-setting-repo-url/",
        "teaser": null
      },{
        "title": "ISO 3166（国・地域名コード一覧）について！",
        "excerpt":"ISO（国際標準化機構）が定義する国・地域名コードについての備忘録です。 参考までに。 1. ISO 3166 とは？ ISO（国際標準化機構）が定義する「国・地域名コード」の標準規格で、国やそれに含まれる地域を境界線ごとに分かりやすく割り振った地理情報を符号化したコードのことである。 ISO 3166-1, ISO 3166-2, ISO 3166-3 の３部で構成されている。 ISO 3166-1 は、国・地域名コードの一覧で、英字２文字・英字３文字・数字３文字が定義されている。英字２文字はインターネット・トップレベルドメインの国コードとしても使用される。 ISO 3166-1 は、JIS（日本工業規格）では JIS X 0304 で定義されている。 ISO 3166-2 は、各国・地域内の州や都道府県等の行政区画名等が定義されている。前半２文字が国名を表す英字２文字、ハイフンでつないで後半が英数字１〜３文字である。 日本国内の都道府県については、 ISO 3166-2:JP で定義されている。 ISO 3166-2:JP は、JIS（日本工業規格）では JIS X 0401 で定義されている。 ISO 3166-3 は、旧国・地域名が定義されている。国・地域名が変更となった場合は必要に応じて ISO 3166-1 を改定し、旧国・地域名については ISO 3166-3 で対応することになっている。 2. ISO 3166-1...","categories": ["PC_Tips"],
        "tags": ["ISO"],
        "url": "/2014/03/11/iso-3166-country-codes/",
        "teaser": null
      },{
        "title": "天気予報 - テロップ番号一覧！",
        "excerpt":"メディアで使用される天気予報のマーク（通称：テロップ天気）の一覧です。 テレビ画面や新聞等紙面にマークで表現する場合に使用する天気の一覧のことです。 事細かくマークにすると描ききれないのである程度分類されているのです。 例えば、ある日の天気予報が「晴れのち一時雨」やより詳細に「晴れ後くもり夜遅く雨」だった場合には、テロップ用天気「晴れのち一時雨」に対応する「112番」の「晴れのち雨」のマークを使用するのです。 参考までに、以下にその一覧を掲載します。 当方ホームページの「気象庁防災情報 XML」ページ上等でも使用しています。 テロップ番号一覧 「後」や「のち」は「のち」に、「曇」や「曇り」や「くもり」は「くもり」に統一している。 テロップ番号 テロップ用天気 対応天気マーク 100 晴れ 晴れ 101 晴れ時々くもり 晴れ時々くもり 102 晴れ一時雨 晴れ時々雨 103 晴れ時々雨 晴れ時々雨 104 晴れ一時雪 晴れ一時雪 105 晴れ時々雪 晴れ一時雪 106 晴れ一時雨か雪 晴れ時々雨 107 晴れ時々雨か雪 晴れ時々雨 108 晴れ一時雨か雷雨 晴れ時々雨 110 晴れのち時々くもり 晴れのちくもり 111 晴れのちくもり 晴れのちくもり 112 晴れのち一時雨 晴れのち雨 113 晴れのち時々雨...","categories": ["PC_Tips"],
        "tags": [],
        "url": "/2014/03/13/weather-forecast-telop-list/",
        "teaser": null
      },{
        "title": "Ruby - Excel ファイル読み書き！",
        "excerpt":"プライベートで表計算ソフト Excel を使用することはなくなりました。（業務ではやむを得ず使用しますが） しかし、重要なデータの提供が xsl ファイルのみのことがあるので、 処理（CSV データ生成や DB Insert スクリプト等の生成）を容易にするために Ruby で読みこむようにしている。 VB や VBA が扱いにくいということはないのですが、 Ruby を使うようになってからは Ruby で処理を行う方が断然容易で扱いやすいのです。（個人的には） 以下は、基本的な使用例です。 0. 前提条件 Linux Mint 13(64bit) での作業を想定。 Ruby 2.1.0-p0 “Spreadsheet” という RubyGem パッケージを使用する。 Excel のワークブックは読み書きできる。 OpenOffice や LibreOffice のワークブックは読み書きできない。 1. Spreadsheet パッケージインストール “Spreadsheet” という RubyGem パッケージがインストールされていなければインストールする。 $ gem install...","categories": ["プログラミング"],
        "tags": ["Ruby","Excel"],
        "url": "/2014/03/15/ruby-read-write-excel/",
        "teaser": null
      },{
        "title": "Ruby - Twitter アプリの登録済み Consumer Key から Access Token を取得！",
        "excerpt":"Twitter アプリを開発する際は Consumer Key, Consumer Secret, Access Token, Access Token Secret が必要です。 Twitter アプリを開発する都度開発者サイトで登録してもよいのですが、その頻度がそれほど頻繁でなくても結構面倒な作業です。 （最近（当記事公開時点）では、アプリを新規に登録する際に携帯電話との関連付けも必須になったようなので余計に。。。） そこで、当方は１組の登録済み Consumer Key, Consumer Secret から Access Token, Access Token Secret を取得する Ruby スクリプトを作成して使用しています。 Web サイトで検索すれば Ruby に限らず色々とヒットするとは思いますが、参考までに当方が使用している Ruby スクリプトを紹介します。 0. 前提条件 Linux Mint 13(64bit) での作業を想定。 Ruby 2.1.1-p76 での作業を想定。 OAuth という RubyGem パッケージが必要なので、未インストールなら gem install...","categories": ["プログラミング","SNS"],
        "tags": ["Ruby","Twitter","OAuth"],
        "url": "/2014/03/17/ruby-get-twitter-access-token/",
        "teaser": null
      },{
        "title": "Linux - ファイルマネージャでの名前ソートの挙動！",
        "excerpt":"Linux GUI 上のファイルマネージャでファイル名でソートした時の挙動についての備忘録です。 ファイル名でソートした際のソート順のおかしいことが気になったので自分なりに熟慮してみた次第。 0. 前提条件 Linux Mint 13(64bit) での作業を想定。 ファイルマネージャは Caja 1.2.1(Nautilus フォーク) を想定。 1. コンソール上でのソート あるディレクトリ配下に、以下のようなファイル名が半角英数字とハイフンで構成されているファイル（いわゆる UUID + “.xml”）が存在するものと想定する。 コンソール上で ls コマンドを使用して一覧にすると、以下のような順で表示される。 特にオプション指定しなくても、ファイル名を文字列とみなして昇順でソートされて表示される。何も不自然でなく、全く問題ない。 $ ls e003cfee-b7f6-3761-92dd-1e4e9011254f.xml e1b46ed2-4e25-3932-a80d-b4f47f49007c.xml e1befd45-9d1b-348c-af98-b3dd9daf3eb6.xml e1f8811d-cd21-3a7d-96f5-96f3010587b6.xml e2a032fa-04dc-3d46-be87-cd7e206686df.xml e3f95f96-6db1-3641-b0ff-836b1d0bb49f.xml e4ac8922-5d24-3e70-80ad-700574af07d2.xml 2. ファイルマネージャ上でのソート ファイルマネージャで「名前」でソートすると、以下のようなソート順となる。 コンソール上での表示と異なるのは、”e003cfee-b7f6-3761-92dd-1e4e9011254f.xml” が５番目に表示されるということ。 3. 結論 ファイルマネージャ上での「名前」でのソートは、ファイル名を（単純に）文字列とはみなしていない。 ファイルマネージャ上では、連続する数字は「ゼロサプレス」した数値として比較してしまう。 例えば、”009” と “1” という文字列は “9” と “1”...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2014/03/19/linux-file-order-on-file-manager/",
        "teaser": null
      },{
        "title": "GIS - 測地系について！",
        "excerpt":"今日は「測地系」についての個人的な備忘録です。 1. 測地系とは 「緯度経度の座標軸を使って、地図画面上の特定の位置を示す際の基準となる前提条件」のことである。 「異なる測地系の間では、同じ『経度・緯度』でも地図上で示す位置が異なる」ということ。 2. 各測地系について 主な測地系について。 WGS84 アメリカ国防総省策定の「世界測地系（”World Geodetic System”）」であり、（非公式だが）事実上の世界標準である。 楕円体：WGS-84、座標系：WGS84 GPS に使用されている。 Google マップが採用している。 世界測地系（＝日本測地系2011（JGD2011, Japanese Geodetic Datum 2011） 2011年10月21日（測量法改正時）からの日本の公式測地系であり、実質は世界測地系のうち日本が構築した部分のこと。 2011年3月の東日本大震災により大規模な地殻変動が発生しため、 JGD2000 から改定された。 楕円体：GRS-80、座標系：ITRF2008 学術的には「日本測地系2011」、法令上は「世界測地系」と呼ぶ。 WGS84 と JGD2011 の誤差はほとんどない（なくなってきた）。 国土地理院で正式に採用されている。（実際は JGD2000 に補正パラメータでパッチを当てて対応している？） 日本で「世界測地系」と言えばこの JGD2011 のことである。JGD2000 や WGS84 と混同しないこと。 日本測地系2000（JGD2000, Japanese Geodetic Datum 2000） 2011年10月20日までの日本の公式測地系であった。 楕円体：GRS-80、座標系：ITRF94 学術的には「日本測地系2000」と呼ぶ。 国土地理院等で正式に採用されている。...","categories": ["その他"],
        "tags": ["GIS","測地系"],
        "url": "/2014/03/21/about-datum/",
        "teaser": null
      },{
        "title": "MySQL - InnoDB 全テーブルのレコード数取得！",
        "excerpt":"よくある “information schema” からレコード数を取得する方法は、ストレージエンジン MyISAM では正確にレコード数が取得できるが、ストレージエンジン InnoDB では概算値となり正確に取得できない。 以下、コンソールから概算のレコード数を取得する方法と、正確なレコード数を取得するシェルスクリプトの紹介です。 0. 前提条件 MySQL 5.6.16 サーバでの作業を想定。（MariaDB でも同様だと思われる） 1. 手順１（概算値） コンソール上で以下のように実行する。 もちろん、MySQL サーバにログインして SELECT ... の部分を実行してもよい。 また、リモートの MySQL サーバに対して実行したければ、オプション -h＜IPアドレス＞ を追加すればよい。 $ mysql -uユーザ名 -pパスワード -e \"SELECT table_name, table_rows FROM information_schema.tables WHERE table_schema = 'DB名';\" +------------------------------------------+------------+ | table_name | table_rows | +------------------------------------------+------------+ |...","categories": ["サーバ構築"],
        "tags": ["MySQL","シェル","bash"],
        "url": "/2014/03/23/mysql-getting-row-counts/",
        "teaser": null
      },{
        "title": "Linux - ディスク使用量監視＆メール通知！",
        "excerpt":"Linux サーバで、ディスク使用量を監視しパーティションの残容量が少なくなった場合にメール通知する設定についてです。 そういうことは munin 等のサーバ監視ツールでもできますが、当方が以前から使用している方法（シェルスクリプト＆cronを使用する方法）を紹介します。 0. 前提条件 CentOS 6.5 での作業を想定。 GNU bash, version 4.1.2(1)-release での動作を確認。 パーティションを細かく分割していることを想定。 複数パーティションのうち１つでも設定した使用量を超えたらメール送信する。 警告検知時にメール送信するので、SMTP サーバ構築済みで mail コマンドも使用できるようになっている。 1. シェルスクリプト作成 以下のように Bash スクリプトを作成する。 このスクリプトでは、複数あるパーティションの１つでも使用量が 90% を超えたらメール通知するようにしている。 このスクリプトでは、root ユーザ宛てにメール送信するようにしているが、特定のメールアドレに設定してもよい。 File: check_df.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","シェル","bash"],
        "url": "/2014/03/25/linux-check-capasity-of-disk/",
        "teaser": null
      },{
        "title": "Ruby - NOAA（アメリカ海洋大気庁）気象観測所一覧！",
        "excerpt":"NOAA - National Oceanic and Atmospheric Administration（アメリカ海洋大気庁）の所有する世界中の気象観測所一覧についてです。 0. NOAA 気象観測所一覧等について（概要） NOAA が気象観測・予報等を行うのに使用している気象観測所の一覧(“A list of weather stations”)のことである。 アメリカは日本とは比べ物にならないくらい航空交通が盛んなため、気象観測所のほとんどが空港・飛行場に設置されている。 ゆえに、一覧内にある日本の観測所も空港・飛行場ばかり。 METAR（定時航空実況気象通報式）対応の観測所は、気象データも公開されている。 （日本の場合は、航空業務で使用するもので、気象庁のデータとは異なる。） METAR による気象情報は、Linux OS 等の時計（天気）アプレットで表示する気象情報に使用されている。（METAR による気象情報は、一般公開されている） 1. 気象観測所一覧の取得 NOAA の気象観測所一覧は以下のサイトで公開されている。 ページ内の “ADDS Station Table(stations.txt)” リンクがそれである。 ADDS - METARs 2. 気象観測所一覧の項目説明 気象観測所一覧の各項目は以下のようになっている。 項目名 説明 CD 州短縮コード STATION 測候所名（16文字以内） ICAO 国際民間航空機関コード（4文字） IATA 国際航空運送協会（3文字）...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2014/03/27/ruby-noaa-weather-stations/",
        "teaser": null
      },{
        "title": "Bash - NOAA 気象観測所検索！",
        "excerpt":"前回は、NOAA - National Oceanic and Atmospheric Administration（アメリカ海洋大気庁）の所有する世界中の気象観測所一覧、それらを国別に集計する Ruby スクリプトを紹介しました。 Ruby - NOAA（アメリカ海洋大気庁）気象観測所一覧！ 今回は、指定した ICAO コードに一致する空港（気象観測所）の情報を検索するシェル(Bash)スクリプトを紹介します。（単純に取得したテキストファイル内を検索しているだけですが） 0. 前提条件 GNU bash, バージョン 4.2.25(1)-release での作業を想定。 1. Bash スクリプト作成 以下のように Bash スクリプトを作成した。（英字は大文字限定） File: noaa_weather_station.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20...","categories": ["PC_Tips"],
        "tags": ["Linux","シェル","bash"],
        "url": "/2014/03/28/bash-getting-a-weather-station-noaa/",
        "teaser": null
      },{
        "title": "Bash - METAR 気象情報取得！",
        "excerpt":"前回は、NOAA - National Oceanic and Atmospheric Administration（アメリカ海洋大気庁）の所有する世界中の気象観測所一覧から目的の観測所を検索するシェル（Bash）スクリプトを紹介しました。 Bash - NOAA 気象観測所検索！ 今回は、METAR（定時航空実況気象通報式）についての備忘録です。 また、指定した ICAO コードの観測所（空港）の METAR 情報を取得するシェル（Bash）スクリプトも紹介します。 0. 前提条件 GNU bash, バージョン 4.2.25(1)-release での作業を想定。 1. METAR とは？ METAR とは「定時航空実況気象通報式」と呼ばれ、ICAO（国際民間航空機関）が基本形式をWMO（世界気象機関）が国際符号を策定した、航空気象情報を定期的に通報するために定められた共通フォーマットのことである。 Linux OS(GUI) の時計アプレット・お天気アプレットの天気情報として利用されている。 データは、以下のサイトで公開されている。 ADDS - METARs 2. METAR 書式 METAR の基本的な書式は以下のようになっている。（以下は一例で、説明用の架空の情報） 書式等は国によって異なる部分もあるので注意。また、状況により出現したりしなかったりする項目もある。 2014/03/18 23:00 RJOC 182300Z 15003KT 130V250 8000 SHRA...","categories": ["PC_Tips"],
        "tags": ["Linux","シェル","bash"],
        "url": "/2014/03/30/bash-getting-a-metar/",
        "teaser": null
      },{
        "title": "2014年3月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 15,275 69.1928 Mac OS 3,801 17.2178 Ubuntu Linux 1,320 5.9793 Linux 1,258 5.6985 Android 239 1.0826 unknown 126 0.5708 Solaris 28 0.1268 Debian GNU/Linux 12 0.0544 FreeBSD 12 0.0544 Fedora Linux 3 0.0136 RedHat Linux 2 0.0091 合　計 22,076 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/04/01/blog-access/",
        "teaser": null
      },{
        "title": "Git - Linux にソースビルドでインストール！",
        "excerpt":"当記事執筆時点、Git は 1.9.1 が最新ですが、Scientific Linux 6.5, CentOS 6.5 の標準リポジトリでは 1.7.1, Linux Mint 13 では 1.7.9.5 と若干古いです。 そこで、ソースを取得後ビルドしてインストールしてみました。 0. 前提条件 Scientific Linux 6.5 での作業を想定。 （CentOS 等の Redhat 系ディストリビューションなら同様） Git サーバとして運用することを想定。 当記事執筆時点で、ソースは 1.9.0 までしか公開されていないので Git 1.9.0 をインストールすることにする。 クライント側から要求があった場合のみ Git サーバを起動するようにするために xinetd を使用する。 xinetd サーバ導入済みであることを想定。 Git リポジトリユーザディレクトリは “/var/lib/git/public_git” を想定。 ドキュメントはインストールしない。 すべて root ユーザで作用することを想定。...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","ScientificLinux","Git"],
        "url": "/2014/04/02/git-installation-on-linux-by-src/",
        "teaser": null
      },{
        "title": "C++ - ヒープ生成（上方移動）！",
        "excerpt":"今回は「ヒープ」という情報処理試験等でもよく登場する「木（二分木）」のアルゴリズムについてです。 以下、簡単な説明と C++ ソースコードの紹介です。 1. ヒープについて 「ヒープ」は「木構造」の一つで、「子要素は親要素より常に大きい（or 小さい）か等しい（子要素の左と右の大小は問わない）」という条件を満足する「完全二分木」である。 以下の【図１】のような構造。 2. ヒープ生成方法（上方移動） 上方移動によるヒープの生成（親要素 ＜ 子要素 の場合）は、以下の【図２】のように最後に追加した要素が親より大きければ交換するという作業を【図１】の状態になるまで繰り返し方法である。（要素を追加する都度生成する方法） アルゴリズムとしては、 上位の親要素から順に配列化して考える。（【図３】） 左の子要素の位置を s とすると、親要素の位置 p は s / 2 となる。 追加した要素とその親要素を比較し、親要素の方が大きければ子要素と交換する。 交換されて親要素になった要素をその親要素と比較して同様に作業を行い、親要素 ≦ 子要素になるまで繰り返す。 3. C++ ソースコード作成 以下のようにソースコードを作成してみた。（要素は乱数で生成） File: heap_upward.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2014/04/04/cpp-generation-heap-upward/",
        "teaser": null
      },{
        "title": "C++ - ヒープ生成（下方移動）！",
        "excerpt":"前回は「ヒープ」の生成を「上方移動」で行うアルゴリズム、C++ での実装について紹介しました。 C++ - ヒープ生成（上方移動）！ 今回は「下方移動」によるヒープの生成についてです。 以下、簡単な説明と C++ ソースコードの紹介です。 1. ヒープについて 「ヒープ」、「上方移動」については前回の記事を参照ください。 C++ - ヒープ生成（上方移動）！ 2. ヒープ生成方法（下方移動） 下方移動のアルゴリズムは、 まず、上方移動同様、上位の親要素から順に配列化して考える。 子要素を持つ最後の親要素から順に上位へ以下の処理を繰り返す。 親要素のほうが子要素より小さければ、２つの子要素のうち小さい方と親要素を交換する。 交換した子要素を新たな親要素とし、親要素 ＜ 子要素 の関係を満たす間、下方のループに対して同じ処理を繰り返す。 3. C++ ソースコード作成 以下のようにソースコードを作成してみた。（要素は乱数で生成） File: heap_downward.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2014/04/06/cpp-generation-heap-downward/",
        "teaser": null
      },{
        "title": "Ruby - ヒープ生成（上方・下方移動）！",
        "excerpt":"前々回、前回は「ヒープ（上方移動・下方移動）」のアルゴリズムを C++ で実装することについて紹介しました。。 C++ - ヒープ生成（上方移動）！ C++ - ヒープ生成（下方移動）！ 今回は、同じアルゴリズムを Ruby で実装してみました。（上方・下方移動） 以下、Ruby スクリプトの紹介です。 1. ヒープについて 「ヒープ」、「上方移動」、「下方移動」については前々回、前回の記事を参照ください。 C++ - ヒープ生成（上方移動）！ C++ - ヒープ生成（下方移動）！ 2. Ruby スクリプト作成（上方移動） 以下のようにスクリプトを作成してみた。（要素はメルセンヌ・ツイスタに基づく疑似乱数で生成） File: heap_upward.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2014/04/07/ruby-generation-heap/",
        "teaser": null
      },{
        "title": "Linux - サービスの init.d 起動と service 起動の違い！",
        "excerpt":"Linux 上でサービス起動・停止等の操作を行う際に、/etc/init.d/xxxx [start|stop|...] や service xxxx [start|stop|...] とコマンドを入力すると思います。 一見全く同じ挙動するように思うかも知れませんが、厳密には異なります（場合によっては異なる挙動をします）。 以下、それについての備忘録です。 1. init.d 起動と service 起動の違い init.d 起動、つまり以下のように実行してサービスを起動する場合は、 # /etc/init.d/xxxx start 環境変数全てこのコマンド実行時のまま引き継がれて、サービス起動作業に移る。 一方、service 起動、つまり以下のように実行してサービスを起動する場合は、 # service xxxx start 環境変数 PATH と TERM のみが引き継がれて、サービスの起動作業に移る。 ※但し、CentOS 6 系の場合。CentOS 5 や Ubuntu 系だと LANG も引き継がれる）。 2. service コマンドの内容確認 なぜ、環境変数 PATH と TERM のみが引き継がれるのか、/sbin/service コマンド（スクリプト）の内容を確認してみた。（CentOS...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Ubuntu"],
        "url": "/2014/04/08/linux-difference-of-service-start/",
        "teaser": null
      },{
        "title": "C++ - ソート処理各種テスト！",
        "excerpt":"各種ソート処理について C++ で実装して速度を計測してみました。 以下、各種ソート処理の概要と C++ ソースです。 0. 前提条件 c++ (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3 での作業を想定。 各種ソートの試行は以下のように行なった。 １回のソートに使用するデータの個数は 1,000 個。 データそれぞれは 0 以上 10,000 未満の整数。 ソート試行（ループ）回数は、10,000 回。（１回のソートは一瞬であるため） 各種ソートのアルゴリズムの詳細については説明しない。（必要なら、別途お調べください） ここでは、それぞれのアルゴリズムを C++ で実装して試行することに専念している。 1. 各種ソートについて 基本交換法（バブル・ソート） 隣接する２項を逐次交換する。原理は簡単だが交換回数が多い。 計算量：\\(O(n^{2})\\) 基本選択法（直接選択法） 数列から最大（最小）を探すことを繰り返す。比較回数は多いが交換回数は少ない。 計算量：\\(O(n^{2})\\) 基本挿入法 整列された部分数列に対し該当項を適切な位置に挿入することを繰り返す。 計算量：\\(O(n^{2})\\) 改良交換法（クイック・ソート） 数列の要素を１つずつ取り出し、それが数列の中で何番目になるかその位置を求める。 計算量：\\(O(n log_{2}n)\\) 改良選択法（ヒープ・ソート） 数列をヒープ構造（一種の木構造）にしてソートを行う。 計算量：\\(O(n log_{2}n)\\) 改良挿入法（シェル・ソート） 数列を飛び(gap)のあるいくつかの部分数列に分け、そのそれぞれを基本挿入法でソートする。 計算量：\\(O(n^{1.2})\\)...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2014/04/10/cpp-sort-test/",
        "teaser": null
      },{
        "title": "Ruby - ソート処理各種テスト！",
        "excerpt":"前回は、各種ソート処理のアルゴリズムを C++ で実装することについて紹介しました。。 C++ - ソート処理各種テスト！ 今回は、同じアルゴリズムを Ruby で実装してみました。 以下、Ruby スクリプトの紹介です。 0. 前提条件 ruby 2.1.1-p76 での作業を想定。 各種ソートの試行は以下のように行なった。 １回のソートに使用するデータの個数は 100 個。（C++ 版では 1,000 回だったが） データそれぞれは 0 以上 10,000 未満の整数。 ソート試行（ループ）回数は、10,000 回。（１回のソートは一瞬であるため） 各種ソートのアルゴリズムの詳細については説明しない。（必要なら、別途お調べください） ここでは、それぞれのアルゴリズムを Ruby で実装して試行することに専念している。 1. 各種ソート処理について 各種ソート処理の概要については、前回の記事を参照ください。 C++ - ソート処理各種テスト！ 2. Ruby スクリプト作成 File: sort_test.rb 1 2 3 4 5...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2014/04/11/ruby-sort-test/",
        "teaser": null
      },{
        "title": "Nginx - ファイルディスクリプタ設定(Too many open files 対策)！",
        "excerpt":"Linux では、１プロセスが同時オープン可能なファイルディスクリプタの上限に達すると “Too many open files” などというエラーを発生します。 OS 上でのファイルディスクリプタ設定についての記事は結構存在するので、対策はそれほど難しくありません。 しかし、Web サーバ Nginx が絡むと若干ワナにかかる可能性があります。 以下、その事象、対策についての記録です。 不勉強なので、それほど突っ込んだ内容ではありません。当方が行なった対策についての記録です。 0. 前提条件 CentOS 6.5 上での作業を想定。 Web サーバは Nginx 1.4.7 を想定。 Web アプリ・サイトは Ruby on Rails で構築されていることを想定。（当方の場合） 1. 発生事象・原因 突如、自前で運用中の Web サーバにアクセスると、ブラウザ上に以下のようなメッセージが表示されるようになった。 500 Internal Server Error If you are the administrator of this website, then please...","categories": ["サーバ構築"],
        "tags": ["Nginx","Linux"],
        "url": "/2014/04/13/nginx-file-discriptor-limit/",
        "teaser": null
      },{
        "title": "Ruby on Rails - CSRF 対策（InvalidCrossOriginRequest 関連）！",
        "excerpt":"実は、最近の Rails ではデフォルトで CSRF（クロスサイトリクエストフォージェリ）対策はなされています。 しかし、その対策が原因でエラーになるケースもあります。 （当方の場合、Rails 4.0.0 で問題なかった処理が 4.1.0 にアップデートした後にエラーが発生するようになった） 以下、備忘録です。 0. 前提条件 Rails 4.1.0 での作業を想定。 CSRF についてはここでは説明しない。（必要なら各自お調べください） 今回発生した現象に対する対策についてのみ下記する。 1. デフォルト設定確認 Rails アプリの “/app/controllers/application_controller.rb” には、CSRF 対策としてデフォルとで以下のように記述されている。通常は変更する必要はないだろう。 コメントにもあるとおり、protect_from_forgery with: :null_session とすることでアプリ全体に対して CSRF 対策を無効にすることも可能である。（ただし、そうしても問題のないアプリに対してのみ） File: /app/controllers/application_controller.rb 1 2 3 4 5 class ApplicationController &lt; ActionController::Base # Prevent CSRF attacks by raising an...","categories": ["プログラミング"],
        "tags": ["Ruby","Rails","CSRF"],
        "url": "/2014/04/15/rails-disable-csrf-protection/",
        "teaser": null
      },{
        "title": "Linux - sudo でパスワード要求しない！",
        "excerpt":"Linux の一般ユーザで root 権限のコマンドを実行する際に sudo をコマンドを使用します。 デフォルトでは実行時にパスワードが要求されますが、場合によってはパスワード要求を不要にしたい場合もあります。 以下、備忘録です。 0. 前提条件 Linux Mint 14(64bit) での作業を想定しているが、他のディストリビューションでも同様と思われる。 “/etc/sudoers” や “/etc/sudoers.d” 配下のファイルの設定を誤ると大変なことになるらしい！厳重注意！ 1. sudoers 確認 まず、以下のコマンドで sudo コマンドの設定を確認してみる。 $ sudo visudo デフォルトでは以下のようになっているはず。（環境により多少異なる） File: /etc/sudoers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2014/04/17/linux-sudo-no-password/",
        "teaser": null
      },{
        "title": "Linux - 特定の文字列を「複数個」含むファイルの検索！",
        "excerpt":"ディレクトリ内から特定の文字列を２個以上含むファイルのみを検索するコマンドについての備忘録です。 （特定の文字列を「１個以上」含むファイルを検索するコマンドはよくあると思いますが） 1. 前置き（よくあるケース） よくある、特定のディレクトリ内の複数のファイルから特定の文字列（１個以上）を含むファイルを抽出するコマンドは、以下のようになるかと思う。 （以下は、カレントディレクトリ内の複数の “xml” ファイルの中から “Hoge” 文字列を含むファイルを検索する例） $ find ./ -name \"*.xml\" -print0 | xargs -0 grep -l \"Hoge\" もしくは $ find ./ -name \"*.xml\" -exec grep -l \"Hoge\" {} \\; find コマンドの -print0 オプションと xargs コマンドの -0（もしくは --null）オプションは、区切り文字を null 文字に設定するおまじない。 2. 文字列を複数個含むファイルを検索する例 時に特定の文字列を２個以上含むファイルを検索したいことがある。 （正常なら指定の文字列を１個しか含まないはずのファイルに、その文字列を２個以上含んでいないかを確認したい場合、等） 以下のようにすることで実現可能である。（正規表現をうまく利用して） $...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2014/04/19/linux-find-words-contain-two-or-more/",
        "teaser": null
      },{
        "title": "Ruby - XML パーステスト(Nokogiri, Hpricot)！",
        "excerpt":"当方、Ruby で HTML や XML を解析する際に Nokogiri や Hpricot という HTML/XML パーサライブラリをよく使用します。 大量にパースすることも多いので、実際にはどちらのほうが高速なのか気になるところです。 そこで、実際に XML ファイルをパースして速度を比較してみました。 0. 前提条件 ruby 2.1.1-p76 での作業を想定。 1. パース対象ファイル準備 当然ながら、パースの対象となるファイルを用意する。当方は以下のような、当ブログの “sitemap.xml” を用意した。（ちなみに、 url タグは 1,118 個ある） File: sitemap.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["プログラミング"],
        "tags": ["Ruby","XML"],
        "url": "/2014/04/21/ruby-xml-parse-test/",
        "teaser": null
      },{
        "title": "Nginx - リバースプロキシキャッシュ設定（基本的）！",
        "excerpt":"Nginx のリバースプロキシでファイルをキャッシュする方法についての備忘録です。 0. 前提条件 CentOS 6.5 での作業を想定。 Nginx 1.4.7 での作業を想定。 バックエンドは Unicorn(Ruby on Rails) を想定。 バックエンドとの通信にはソケットを使用することを想定。 ベンチマークテストに ab コマンドを使用するので、未インストールならインストールしておく。 1. Nginx 設定 Nginx の設定ファイルに以下のように記述を追加する。 以下は当方の一例で、該当箇所のみ抜粋。（try_files を使ったり等、色々と書き方は考えられる） File: /usr/local/nginx/conf/nginx.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["サーバ構築"],
        "tags": ["Nginx","Proxy"],
        "url": "/2014/04/23/nginx-proxy-cache-setting/",
        "teaser": null
      },{
        "title": "Linux - システム稼働開始日時取得！",
        "excerpt":"Linux 等では uptime でシステムの稼働時間を取得できますが、いつから稼動しているのかは取得できません。 以下、別のコマンドでシステム稼働開始日時を取得する方法についてです。 0. 前提条件 CentOS 6.5, Linux Mint 14 で動作確認したが、 Unix 系 OS ならどれも同じはず。 1. システム稼働開始日時取得コマンド 以下のようにコマンドを実行するとシステム稼働開始日を取得できる。 $ last -1 reboot | grep reboot | awk '{print $5, $6, $7, $8}' Sun Jun 30 00:21 last コマンドは、最近ログインしたユーザのリストを表示するコマンド。 （”/var/log/wtmp” ファイルから検索して表示。詳細は man last コマンド等でご参照ください） -1 は、表示行数を１行に指定するオプション。 reboot は、参照するユーザ名。（システムリブート時の擬似的なユーザ） grep...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","LinuxMint"],
        "url": "/2014/04/25/linux-getting-system-starttime/",
        "teaser": null
      },{
        "title": "Linux - KAKASI で「日本語 => ローマ字・かな・カナ」変換！",
        "excerpt":"日本語をひらがなやカタカナ、ローマ字に変換する方法についての記録です。 変換には “KAKASI” というアプリを使用します。 0. 前提条件 Linux Mint 13 での作業を想定。 （他の Linux ディストリビューションでも同様） 実行環境の文字コードは utf-8 を想定。 （実行環境の文字コードやファイルの文字コードの違いにより、使用するオプションが変わってくるので注意） 1. インストール よくある以下のような方法でインストールする。（apt-get でインストールしてもよいが、バージョンが少し古いかも） $ wget http://kakasi.namazu.org/stable/kakasi-2.3.6.tar.gz $ tar zxvf kakasi-2.3.6.tar.gz $ cd kakasi-2.3.6 $ ./configure $ make $ sudo make install 2. インストール確認 以下のようなコマンドでインストールできているか確認する。 （--help や --version 等のオプションは存在しないが、存在しないオプションを指定すると、バージョン情報や使用方法が表示される。） $ kakasi --help KAKASI...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2014/04/27/linux-replacement-by-kakasi/",
        "teaser": null
      },{
        "title": "Linux - NKF で「かな・カナ・記号」の変換！",
        "excerpt":"漢字コード変換フィルタ NKF でひらがな・カタカナ・記号の各種変換を行なってみました。 プログラミングでは頻繁に使用することのあるツールですが、コマンドラインから単独で使用することが（個人的には）今まであまりなかったので、備忘録として記録しておきます。 0. 前提条件 Linux Mint 13 での作業を想定。 （他の Linux ディストリビューションでも同様） 実行環境の文字コードは utf-8 を想定。 1. インストール 以下のようにしてインストールするか、Synaptic パッケージマネージャでインストールする。 （最新バージョンをインストールしたければ、ソースをビルドしてインストールする） $ sudo apt-get install nkf インストールできているかバージョン情報を表示して確認してみる。 $ nkf -v Network Kanji Filter Version 2.1.1 (2010-08-08) Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa). Copyright (C) 1996-2010, The nkf Project. 2. 「ひらがな...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2014/04/29/linux-replacement-by-nkf/",
        "teaser": null
      },{
        "title": "2014年4月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 19,089 70.5798 Mac OS 4,354 16.0985 Linux 1,685 6.2301 Ubuntu Linux 1,464 5.4130 Android 224 0.8282 unknown 149 0.5509 Solaris 33 0.1220 FreeBSD 21 0.0776 PlayStation 12 0.0444 Debian GNU/Linux 7 0.0259 Fedora Linux 4 0.0148 OpenBSD 2 0.0074 RedHat Linux 1 0.0037...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/05/01/blog-access/",
        "teaser": null
      },{
        "title": "MySQL(MariaDB) - InnoDB レコード件数取得高速化！",
        "excerpt":"MySQL や MariaDB で件数を取得する際に COUNT(*) をよく使用すると思いますが、件数が多くなると取得にも時間がかかるようになります。 以下、高速化する方法についての備忘録です。（乱筆・乱文ご容赦ください） 0. 前提条件 MySQL 5.6.16 での作業を想定。（最近のバージョンなら同様。MariaDB も同様） 使用するテーブル用のデータベースが作成済みであることを想定。 COUNT(*), COUNT(1) は全行取得、 COUNT(col_name) は NULL 以外取得であることを理解しておく。 1. 未対策状態 まず、高速化未対策の状態で検証してみる。 1-1. テーブル準備 例として、元のテーブルを以下のように作成する。（id カラムにだけプライマリキーを設定） File: 元のテーブル 1 2 3 4 5 6 7 8 CREATE TABLE table_a ( id int(11) NOT NULL AUTO_INCREMENT, val_1 int(11) DEFAULT...","categories": ["サーバ構築"],
        "tags": ["MySQL","MariaDB"],
        "url": "/2014/05/02/mysql-acceleration-of-getting-count/",
        "teaser": null
      },{
        "title": "MySQL - BINLOG_FORMAT 関連のエラーログ！",
        "excerpt":"MySQL のエラーログを眺めていてあるエラーを発見しました。 以下、その現象についての調査・作業記録です。（乱文ご容赦ください） 0. 前提条件 MySQL 5.6.16 サーバを想定。（最近のバージョンなら同様。MariaDB も同様） バイナリログ機能を使用していることを想定。 レプリケーション機能は使用していないことを想定。 該当のテーブルにトリガを設定していることを想定。 今回の当方の場合、該当のテーブルにレコートが INSERT された場合に、別テーブルを UPDATE するような「トリガ」を設定している。 1. 現象 MySQL のエラーログに以下のような出力がされていた。 File: error.log 1 2 3 4 5 6 Unsafe statement written to the binary log using statement format \\ since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it \\...","categories": ["サーバ構築"],
        "tags": ["MySQL","MariaDB"],
        "url": "/2014/05/04/mysql-binlog_format-error/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 天気予報一覧、時系列予報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 天気予報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 今回、最新の「天気予報」・「時系列予報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 天気予報」ページ 以下のようなページを作成・公開した。 マウスオーバで詳細な情報や解説をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 天気予報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 時系列予報」ページ 以下のようなページを作成・公開した。 マウスオーバで詳細な情報や解説をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 時系列予報（気象庁防災情報XML） （気象庁防災情報...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/06/jmaxml-list-yoho/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 週間天気予報（府県、全般・地方）一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 週間天気予報（気象庁防災情報XML） mk-mode SITE : DB - 週間天気予報（全般・地方）（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回の「天気予報一覧、時系列予報一覧」同様、最新の「週間天気予報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 週間天気予報（府県）」ページ 「府県週間天気予報」に関しては、以下のようなページを作成・公開した。 マウスオーバで詳細な情報や解説をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 週間天気予報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 週間天気予報（全般・地方）」ページ 「全般週間天気予報」・「地方週間天気予報」は「府県週間天気予報」と書式が異なるので、別途以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE :...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/08/jmaxml-list-shukan/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 気象警報・注意報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 気象警報・注意報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「気象警報・注意報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 気象警報・注意報」ページ 以下のようなページを作成・公開した。 マウスオーバで詳細な情報や解説をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 気象警報・注意報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber を準備する） 気象庁に「気象庁防災情報 XML」受信登録の申請をする。 登録完了後、実際に...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/10/jmaxml-list-keiho/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 天気概況一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 天気概況（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「天気概況」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 天気概況」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 天気概況（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber を準備する） 気象庁に「気象庁防災情報 XML」受信登録の申請をする。 登録完了後、実際に HTTP サーバで...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/12/jmaxml-list-gaikyo/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 竜巻注意情報一覧、スモッグ気象情報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 竜巻注意情報（気象庁防災情報XML） mk-mode SITE : DB - スモッグ気象情報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「竜巻注意情報」、「スモッグ気象情報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 竜巻注意情報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 竜巻注意情報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - スモッグ気象情報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 -...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/13/jmaxml-list-tatsumaki-smog/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 土砂災害警戒情報一覧、記録的短時間大雨情報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 土砂災害警戒情報（気象庁防災情報XML） mk-mode SITE : DB - 記録的短時間大雨情報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「土砂災害警戒情報」、「記録的短時間大雨情報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 土砂災害警戒情報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 土砂災害警戒情報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 記録的短時間大雨情報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 -...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/15/jmaxml-list-dosha-kirokuame/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 気象情報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 気象情報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「気象情報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 気象情報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 気象情報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber を準備する） 気象庁に「気象庁防災情報 XML」受信登録の申請をする。 登録完了後、実際に HTTP サーバで...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/17/jmaxml-list-kisho/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 高温注意情報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 高温注意情報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「高温注意情報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 高温注意情報」ページ 以下のようなページを作成・公開した。（地方高温注意情報と府県高温注意情報を同じページに並べて掲載） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 高温注意情報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber を準備する） 気象庁に「気象庁防災情報 XML」受信登録の申請をする。 登録完了後、実際に HTTP サーバで...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/19/jmaxml-list-kohon/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 地方海上警報一覧、地方海上予報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 地方海上警報（気象庁防災情報XML） mk-mode SITE : DB - 地方海上予報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「地方海上警報」、「地方海上予報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 地方海上警報」ページ 以下のようなページを作成・公開した。 マウスオーバで詳細な情報や解説をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 地方海上警報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 地方海上予報」ページ 以下のようなページを作成・公開した。 マウスオーバで詳細な情報や解説をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/20/jmaxml-list-umi-keiho-yoho-area/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 指定河川洪水予報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 指定河川洪水予報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「指定河川洪水予報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 指定河川洪水予報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 指定河川洪水予報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber を準備する） 気象庁に「気象庁防災情報 XML」受信登録の申請をする。 登録完了後、実際に HTTP サーバで...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/21/jmaxml-list-kozui/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 潮位情報一覧、海氷予報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 潮位情報（気象庁防災情報XML） mk-mode SITE : DB - 海氷予報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「潮位情報」、「海氷予報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 潮位情報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 潮位情報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 海氷予報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。（今の季節は、情報の発表はないが。。。） mk-mode SITE : 一覧 -...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/22/jmaxml-list-choi-kaihyo/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 台風情報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 台風情報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「台風情報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 台風情報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 台風情報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber を準備する） 気象庁に「気象庁防災情報 XML」受信登録の申請をする。 登録完了後、実際に HTTP サーバで...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/23/jmaxml-list-typhoon/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 天候情報一覧、季節予報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 天候情報（気象庁防災情報XML） mk-mode SITE : DB - 季節予報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「天候情報」、「季節予報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 天候情報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 天候情報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 季節予報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 -...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/24/jmaxml-list-tenko-kisetsuyoho/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 台風解析情報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 台風解析・予報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「台風解析情報」を一覧で確認できるようなページを作成したので紹介します。（予報の部分はデータの構造上同じ一覧するのは困難（不可能ではないが見た目が煩雑になりそう）なため除外） 1. 「一覧 - 台風解析情報」ページ 以下のようなページを作成・公開した。 マウスオーバで簡単な Tips をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） また、24時間後・48時間後の予報情報については発表日時リンクをクリックして詳細情報ページヘ遷移してご確認下さい。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 台風解析情報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber を準備する）...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/25/jmaxml-list-typhoon-analyze/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 異常天候早期警戒情報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 異常天候早期警戒情報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「異常天候早期警戒情報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 異常天候早期警戒情報」ページ 以下のようなページを作成・公開した。 マウスオーバで詳細な情報や解説をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 異常天候早期警戒情報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber を準備する） 気象庁に「気象庁防災情報 XML」受信登録の申請をする。 登録完了後、実際に...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/26/jmaxml-list-ijotenko/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 地震情報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 地震情報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「地震情報（震源・震度に関する情報）」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 地震情報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 地震情報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber を準備する） 気象庁に「気象庁防災情報 XML」受信登録の申請をする。 登録完了後、実際に HTTP サーバで...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/27/jmaxml-list-jishin/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 津波警報・注意報・予報一覧、津波情報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 津波警報・注意報・予報（気象庁防災情報XML） mk-mode SITE : DB - 津波情報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「津波警報・注意報・予報」、「津波情報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 津波警報・注意報・予報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 津波警報・注意報・予報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 津波情報」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 -...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/28/jmaxml-list-tsunami/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 火山噴火警報・予報一覧、火山海上警報・予報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 火山噴火警報・予報（気象庁防災情報XML） mk-mode SITE : DB - 火山海上警報・予報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「火山噴火警報・予報」、「火山海上警報・予報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 火山噴火警報・予報」ページ 以下のようなページを作成・公開した。 マウスオーバで火山情報や詳細な説明を表示するようにしている。（UA によっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 火山噴火警報・予報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 火山海上警報・予報」ページ 以下のようなページを作成・公開した。 マウスオーバで火山情報や詳細な説明を表示するようにしている。（UA によっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/05/30/jmaxml-list-kazan-funka-kaijo-keiho/",
        "teaser": null
      },{
        "title": "2014年5月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,801 70.6219 Mac OS 5,475 16.9578 Linux 2,141 6.6314 Ubuntu Linux 1,383 4.2836 Android 304 0.9416 unknown 130 0.4027 FreeBSD 14 0.0434 Debian GNU/Linux 11 0.0341 Solaris 10 0.0310 RedHat Linux 7 0.0217 Fedora Linux 4 0.0124 PlayStation 3 0.0093 NetBSD 2 0.0062...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/06/01/blog-access/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 火山噴火観測報一覧、火山状況解説情報一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 火山噴火観測報（気象庁防災情報XML） mk-mode SITE : DB - 火山状況解説情報（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「火山噴火観測報」、「火山状況解説情報」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 火山噴火観測報」ページ 以下のようなページを作成・公開した。 マウスオーバで火山情報や簡易な説明を表示するようにしている。（UA によっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 火山噴火観測報（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 火山状況解説情報」ページ 以下のようなページを作成・公開した。 マウスオーバで火山情報や簡易な説明を表示するようにしている。（UA によっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/02/jmaxml-list-kazan-kansoku-kaisetsu/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 季節観測一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 季節観測（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「季節観測」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 季節観測（初雪・初氷・初霜）」ページ 「初霜・初氷・初霜」に関して、以下のようなページを作成・公開した。 マウスオーバで簡易な Tips をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 季節観測（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 季節観測（初冠雪）」ページ 「初冠雪」に関しては、観測官署により扱いの有無が異なるので、別途以下のようなを表を作成した。 マウスオーバで簡易な Tips をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE :...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/03/jmaxml-list-kisetsu/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 生物季節観測一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 生物季節観測（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「生物季節観測」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 生物季節観測」ページ 以下のようなページを作成・公開した。 生物季節観測には「植物」と「動物」があり、ともに「規定種目」と「選択種目」がある。容易に選択表示できるようセレクトボックス（実質は Input ボタン）も設置した。 マウスオーバで簡易な Tips をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 生物季節観測（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/04/jmaxml-list-seibutsu/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 特殊気象報（各種現象、風、気圧）一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 特殊気象報（各種現象）（気象庁防災情報XML） mk-mode SITE : DB - 特殊気象報（風）（気象庁防災情報XML） mk-mode SITE : DB - 特殊気象報（気圧）（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「特殊気象報（各種現象、風、気圧）」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 特殊気象報（各種現象）」ページ 以下のようなページを作成・公開した。 観測項目には、「黄砂」、「風じん」、「竜巻」、「ひょう」、「なだれ」、「不連続線の通過」があるが、３項目ずつ分割し選択表示するようにしている。 マウスオーバで簡易な Tips をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 特殊気象報（各種現象）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない）...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/05/jmaxml-list-tokushu/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 紫外線観測一覧！",
        "excerpt":"当方、「気象庁防災情報 XML」のデータを受信後、データベース MySQL に保存し、さらにホームページ上で公開しています。 mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML） mk-mode SITE : DB - 紫外線観測（気象庁防災情報XML） 今までは受信したデータをある程度整形して公開していただけでしたので、若干現状を把握しにくい部分もありました。 前回までの一覧同様、最新の「紫外線観測」を一覧で確認できるようなページを作成したので紹介します。 1. 「一覧 - 紫外線観測」ページ 以下のようなページを作成・公開した。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 紫外線観測（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5, 6 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber を準備する） 気象庁に「気象庁防災情報 XML」受信登録の申請をする。 登録完了後、実際に HTTP サーバで...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/06/jmaxml-list-shigaisen/",
        "teaser": null
      },{
        "title": "Ruby on Rails - メソッド(Action)の Ajax 化！",
        "excerpt":"Ruby on Rails で Submit ボタンを押下後に画面遷移することなく部分的に表示を更新する方法についての備忘録です。 ちなみに、以前は別のアプローチで Rails + jQuery の Ajax 化（遅延読み込み）の記事を紹介しています。 Ruby on Rails - jQuery で Ajax 処理（遅延読み込み）！ 0. 前提条件 Rails 4.1.0 での作業を想定。 jQuery 導入済みであることを想定。（但し、通常の JavaScript でも代替可能のはず） Form の Submit ボタン押下でメソッド（Controller の Action）を呼び、結果を部分的に View（部分テンプレート）に反映させることを想定。 （Submit ボタン押下に限らず、リンククリックの場合も同様） 1. 準備 以下のような View テンプレートがあるとする。（説明用に簡素な例） （「検索」ボタン押下で、 “HogeContller” の “fuga” Action が呼ばれ、検索結果は下部の...","categories": ["プログラミング"],
        "tags": ["Ruby","Rails","Ajax","JavaScript","jQuery"],
        "url": "/2014/06/08/rails-make-method-ajax/",
        "teaser": null
      },{
        "title": "Ruby on Rails - jQuery で Ajax 処理の callback 判定！",
        "excerpt":"Ruby on Rails + jQuery で Ajax 処理を行う際に、そのステータスにより処理を振り分ける必要があるケースもあります。 その方法についての備忘録です。 0. 前提条件 Rails 4.1.0 での作業を想定。 jQuery 導入済みであることを想定。 1. 準備 以下のような View テンプレートがあるとする。（説明用に簡素な例） （Form 内の Submit ボタン押下でメソッド hoge Controller, fuga Action を Ajax 呼び出しする） File: app/views/hoge/fuga.html.erb 1 2 3 &lt;%= form_tag({controller: \"hoge\", action: \"fuga\"}, {id: \"frm-search\", data: {remote: true}}) do %&gt; &lt;%=...","categories": ["プログラミング"],
        "tags": ["Ruby","Rails","Ajax","JavaScript","jQuery"],
        "url": "/2014/06/09/rails-ajax-callback-by-jquery/",
        "teaser": null
      },{
        "title": "Ruby on Rails - submit_tag で付加される commit, utf8 パラメータ！",
        "excerpt":"Ruby on Rails で submit_tag メソッドを使用して submit タグを生成すると、Submit 後の URL に自分の意識していないパラメータが勝手に付加されます。 utf8 と commit です。 以下、現象と対策方法についての備忘録です。 0. 前提条件 Rails 4.1.0 での作業を想定。 1. 現象確認 例えば、Rails の HTML 生成部分（erb ファイル）を以下のようにしたとする。 &lt;%= form_tag({controller: \"hoge\", action: \"fuga\" }, {method: \"get\"}) do %&gt; &lt;!-- セレクトボックス、テキストボックス、ラジオボタン --&gt; &lt;%= submit_tag(\"検　索\") %&gt; &lt;% end %&gt; すると、生成後の HTML は以下のようになる。...","categories": ["プログラミング"],
        "tags": ["Ruby","Rails"],
        "url": "/2014/06/11/rails-commit-utf8-param-of-submit-tag/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 気象警報・注意報発表中の区市町村一覧、地方海上警報発表中の海域一覧！",
        "excerpt":"以前、「気象庁防災情報 XML」で発表されたデータのうち、「気象警報・注意報」や「地方海上警報」の最新のデータを一覧で確認できるようなページを紹介しました。 mk-mode SITE : 一覧 - 気象警報・注意報（気象庁防災情報XML） mk-mode SITE : 一覧 - 地方海上警報（気象庁防災情報XML） これらのページは区市町村単位または細分海域単位で発表中の警報・注意報、海上警報を確認するためのものでしたが、今回は逆に警報・注意報単位または海上警報単位で発表中の区市町村または細分海域を確認するためのページを作成・公開しました。 （興味がなければ、無視して下さい。あくまで個人の記録ですので。） 1. 「一覧 - 気象警報・注意報（種類別）」ページ 以下のようなページを作成・公開した。 マウスオーバで詳細な情報や解説をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 気象警報・注意報（種類別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「一覧 - 地方海上警報（種類別）」ページ 以下のようなページを作成・公開した。 マウスオーバで詳細な情報や解説をポップアップするようにしている。（UA, ブラウザによっては表示されないかも） 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 一覧 - 地方海上警報（種類別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない）...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/13/jmaxml-list-keiho-umikeiho-2/",
        "teaser": null
      },{
        "title": "MySQL(MariaDB) - スキーマのみ、データのみ、ストアド・トリガーのみのダンプ！",
        "excerpt":"MySQL や MariaDB でダンプする際、場合によっては、スキーマ（テーブル作成情報等）のみ、データのみ、ストアド（プロシージャ、ファンクション）・トリガーのみをダンプしたいことがあります。（当方はよくあります） 以下、それぞれをダンプする方法についての備忘録です。 0. 前提条件 MySQL 5.6.16 サーバでの作業を想定。（MySQL 5.5 系や MariaDB でも同じ。旧バージョンは未確認） 1. スキーマ（ビューを含む）のみのダンプ $ mysqldump -u root -p db_name --no-data --skip-triggers --skip-dump-date &gt; only_schema.sql 2. データのみのダンプ $ mysqldump -u root -p db_name --no-create-info --skip-triggers --skip-dump-date &gt; only_data.sql 3. ストアドとトリガーのみ $ mysqldump -u root -p db_name --no-create-info --no-data...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2014/06/15/mysql-dump-only-schema-data-stored/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 気象警報・注意報集計！",
        "excerpt":"これまで「気象庁防災情報 XML」で発表された情報を（一覧や検索で）確認するためのページを当方サイト上で公開してきました。（以下のページ等） mk-mode SITE : 気象庁防災情報XML 今回は、「気象警報・注意報」の発表回数（2013年1月1日以降）を集計したページを作成・公開しました。 （興味がなければ、無視して下さい。あくまで個人の記録ですので。） 1. 「集計 - 気象警報・注意報（警報・注意報別）」ページ 以下のようなページを作成・公開した。 「府県予報区」、「一次細分区域」、「市町村等をまとめた地域」、「二次細分区域」での絞り込みが可能である。 また、警報・注意報名のリンクをクリックすることで「区市町村別」のページへ遷移するようにしている。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 気象警報・注意報（警報・注意報別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「集計 - 気象警報・注意報（区市町村別）」ページ 以下のようなページを作成・公開した。 「府県予報区」、「一次細分区域」、「市町村等をまとめた地域」、「二次細分区域」、「警報・注意報」での絞り込み、明細の並び順の指定が可能である。 また、二次細分区域名のリンクをクリックすることで「警報・注意報別」のページへ遷移するようにしている。 さらに、「地図」リンクをクリックすることで「Google マップ」を表示するようにしている。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 気象警報・注意報（区市町村別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 3. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5〜7 は当方独自） HTTP サーバを利用できる環境を準備する。...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/17/jmaxml-count-keiho/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 竜巻注意情報、土砂災害警戒情報、記録的短時間大雨情報集計！",
        "excerpt":"これまで「気象庁防災情報 XML」で発表された情報を（一覧や検索で）確認するためのページを当方サイト上で公開してきました。（以下のページ等） mk-mode SITE : 気象庁防災情報XML 今回は、「竜巻注意情報」、「土砂災害警戒情報」、「記録的短時間大雨情報」の発表回数を集計したページを作成・公開しました。 （興味がなければ、無視して下さい。あくまで個人の記録ですので。） 1. 「集計 - 竜巻注意情報（区市町村別）」ページ 以下のようなページを作成・公開した。 「府県予報区」、「一次細分区域」、「市町村等をまとめた地域」、「二次細分区域」での絞り込み、明細の並び順の指定が可能である。 また、「地図」リンクをクリックすることで「Google マップ」を表示するようにしている。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 竜巻注意情報（区市町村別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「集計 - 土砂災害警戒情報（区市町村別）」ページ 以下のようなページを作成・公開した。 「府県予報区」、「一次細分区域」、「市町村等をまとめた地域」、「二次細分区域」での絞り込み、明細の並び順の指定が可能である。 また、「地図」リンクをクリックすることで「Google マップ」を表示するようにしている。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 土砂災害警戒情報（区市町村別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 3. 「集計 - 記録的短時間大雨情報（府県別）」ページ 以下のようなページを作成・公開した。 明細の並び順の指定が可能である。...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/19/jmaxml-count-tatsumaki-dosha-kirokuame/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 高温注意情報、異常天候早期警戒情報集計！",
        "excerpt":"これまで「気象庁防災情報 XML」で発表された情報を（一覧や検索で）確認するためのページを当方サイト上で公開してきました。（以下のページ等） mk-mode SITE : 気象庁防災情報XML 今回は、「高温注意情報」、「異常天候早期警戒情報」の発表回数を集計したページを作成・公開しました。 （興味がなければ、無視して下さい。あくまで個人の記録ですので。） 1. 「集計 - 高温注意情報（地方・府県別）」ページ 以下のようなページを作成・公開した。 明細の並び順の指定が可能である。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 高温注意情報（地方・府県別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「集計 - 異常天候早期警戒情報（地方別）」ページ 以下のようなページを作成・公開した。 明細の並び順の指定が可能である。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 異常天候早期警戒情報（地方別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 3. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5〜7 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/21/jmaxml-count-kohon-ijotenko/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 地方海上警報集計！",
        "excerpt":"これまで「気象庁防災情報 XML」で発表された情報を（一覧や検索で）確認するためのページを当方サイト上で公開してきました。（以下のページ等） mk-mode SITE : 気象庁防災情報XML 今回は、「地方海上警報」の発表回数を集計したページを作成・公開しました。 （興味がなければ、無視して下さい。あくまで個人の記録ですので。） 1. 「集計 - 地方海上警報（警報別）」ページ 以下のようなページを作成・公開した。 「地方海上予報区」での絞り込み、明細の並び順の指定が可能である。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 地方海上警報（警報別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「集計 - 地方海上警報（海域別）」ページ 以下のようなページを作成・公開した。 「地方海上予報区」、「細分海域」、「海上警報」での絞り込み、明細の並び順の指定が可能である。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 地方海上警報（海域別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 3. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5〜7 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub の Subscriber...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/25/jmaxml-count-umi-keiho-area/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 特殊気象報（各種現象、風、気圧）集計！",
        "excerpt":"これまで「気象庁防災情報 XML」で発表された情報を（一覧や検索で）確認するためのページを当方サイト上で公開してきました。（以下のページ等） mk-mode SITE : 気象庁防災情報XML 今回は、「特殊気象報（各種現象）」「特殊気象報（風）」、「特殊気象報（気圧）」の発表回数を集計したページを作成・公開しました。 （興味がなければ、無視して下さい。あくまで個人の記録ですので。） 1. 「集計 - 特殊気象報（各種現象）（観測地点別）」ページ 以下のようなページを作成・公開した。 「項目名」での絞り込み、明細の並び順の指定が可能である。 また、「地図」リンクをクリックすることで「Google マップ」を表示するようにしている。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 特殊気象報（各種現象）（観測地点別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「集計 - 特殊気象報（風）（観測地点別）」ページ 以下のようなページを作成・公開した。 明細の並び順の指定が可能である。 また、「地図」リンクをクリックすることで「Google マップ」を表示するようにしている。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 特殊気象報（風）（観測地点別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 3. 「集計 - 特殊気象報（気圧）（観測地点別）」ページ 以下のようなページを作成・公開した。 明細の並び順の指定が可能である。...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/26/jmaxml-count-tokushu/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 地震情報集計！",
        "excerpt":"これまで「気象庁防災情報 XML」で発表された情報を（一覧や検索で）確認するためのページを当方サイト上で公開してきました。（以下のページ等） mk-mode SITE : 気象庁防災情報XML 今回は、「地震情報」の発表回数を（震央地別、震源深さ別、地震規模別、最大震度別に）集計したページを作成・公開しました。 （興味がなければ、無視して下さい。あくまで個人の記録ですので。） 1. 「集計 - 地震情報（震央地別）」ページ 以下のようなページを作成・公開した。 明細の並び順の指定が可能である。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 地震情報（震央地別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「集計 - 地震情報（震源深さ別）」ページ 以下のようなページを作成・公開した。 明細の並び順の指定が可能である。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 地震情報（震源深さ別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 3. 「集計 - 地震情報（地震規模別）」ページ 以下のようなページを作成・公開した。 明細の並び順の指定が可能である。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE :...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/28/jmaxml-count-jishin/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 津波警報・注意報・予報集計！",
        "excerpt":"これまで「気象庁防災情報 XML」で発表された情報を（一覧や検索で）確認するためのページを当方サイト上で公開してきました。（以下のページ等） mk-mode SITE : 気象庁防災情報XML 今回は、「津波警報・注意報・予報」の発表回数を（警報・注意報・予報別、津波予報区別に）集計したページを作成・公開しました。 （興味がなければ、無視して下さい。あくまで個人の記録ですので。） 1. 「集計 - 津波警報・注意報・予報（警報・注意報・予報別）」ページ 以下のようなページを作成・公開した。 「津波予報区」での絞り込みが可能である。 また、「警報・注意報・予報」のリンクをクリックすることで「津波予報区別」のページヘ遷移するようにもしている。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 津波警報・注意報・予報（警報・注意報・予報別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「集計 - 津波警報・注意報・予報（津波予報区別）」ページ 以下のようなページを作成・公開した。 「津波警報・注意報・予報」での絞り込み、明細の並び順の指定が可能である。 また、「津波予報区」のリンクをクリックすることで「警報・注意報・予報別」のページヘ遷移するようにもしている。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 津波警報・注意報・予報（津波予報区別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 3. 作成手順 今回のようなページを作成する手順を簡単に説明する。（1〜4は一般的な手順で、5〜7 は当方独自） HTTP サーバを利用できる環境を準備する。 「気象庁防災情報 XML」を受信する準備を行う。（PubSubHubbub...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/06/30/jmaxml-count-tsunami-keiho/",
        "teaser": null
      },{
        "title": "2014年6月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"7月になりましたので、先月6月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 28,179 70.6506 Mac OS 6,661 16.7005 Linux 2,359 5.9145 Ubuntu Linux 2,027 5.0821 Android 425 1.0656 unknown 142 0.3560 FreeBSD 37 0.0928 RedHat Linux 31 0.0777 Solaris 8 0.0201 Fedora Linux 7 0.0176 Debian GNU/Linux 3 0.0075 NetBSD 2 0.0050 PalmOS 2 0.0050...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/07/01/blog-access/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 火山噴火警報・予報、火山噴火観測報集計！",
        "excerpt":"これまで「気象庁防災情報 XML」で発表された情報を（一覧や検索で）確認するためのページを当方サイト上で公開してきました。（以下のページ等） mk-mode SITE : 気象庁防災情報XML 今回は、「火山噴火警報・予報」、「火山噴火観測報」の発表回数を集計したページを作成・公開しました。 （ちなみに、噴火警報・予報の情報には、「火山」を対象にしたもの、「市町村等」を対象にしたもの、「市町村の防災対応等」を示したもの、「海上予報区」を対象にしたものがあります） （興味がなければ、無視して下さい。あくまで個人の記録ですので。） 1. 「集計 - 火山噴火警報・予報（火山）（警報・予報別）」ページ 以下のようなページを作成・公開した。 「火山」での絞り込みが可能である。 また、「警報・予報」のリンクをクリックすることで「火山別」のページヘ遷移するようにもしている。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 火山噴火警報・予報（火山）（警報・予報別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 2. 「集計 - 火山噴火警報・予報（火山）（火山別）」ページ 以下のようなページを作成・公開した。 「警報・予報」での絞り込み、明細の並び順の指定が可能である。 また、「火山」のリンクをクリックすることで「警報・予報別」のページヘ遷移するようにもしている。 実際のサイトは以下。よろしければ、ご参照ください。 mk-mode SITE : 集計 - 火山噴火警報・予報（火山）（火山別）（気象庁防災情報XML） （気象庁防災情報 XML の受信状況によっては正しく表示されないことがあるかも知れない） 3. 「集計 - 火山噴火警報・予報（市町村等）（警報・予報別）」ページ 以下のようなページを作成・公開した。 「市町村」での絞り込みが可能である。 また、「警報・予報」のリンクをクリックすることで「市町村別」のページヘ遷移するようにもしている。...","categories": ["Webサイト"],
        "tags": ["Feed","XML","MySQL"],
        "url": "/2014/07/03/jmaxml-count-kazan/",
        "teaser": null
      },{
        "title": "MySQL(MariaDB) - テーブルの検査・分析・最適化・修復！",
        "excerpt":"MySQL もしくは MariaDB でのテーブルの検査・分析・最適化・修復についての備忘録です。 それほど日常的な作業でもなく忘れやすいので、その時のための個人的記録です。 0. 前提条件 MySQL 5.6.16 サーバでの作業を想定。（MySQL 5.5 系や MariaDB でも同じ。旧バージョンは未確認） ストレージエンジンが InnoDB であるデータベースでの作業を想定。 （以下の「チェック」や「分析」は可能だが、「最適化」や「修復」は不可（別の方法で行う）） 1. テーブルの検査 1-1. 特定のテーブルのみを検査する場合は、以下のようにする。 $ mysqlcheck -u root -p db_name table_name Enter password: db_name.table_name OK -c もしくは --check オプションはデフォルトなので付加しなくてもよい（付加してもよい）。 詳細な情報も出力したければ -v もしくは --verbose を付加するとよい。 $ mysqlcheck -u root -p -v db_name table_name...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2014/07/05/mysql-check-analyze-optimize-repair/",
        "teaser": null
      },{
        "title": "MySQL(MariaDB) - AUTO INCREMENT のリナンバリング！",
        "excerpt":"MySQL(MariaDB) で AUTO INCREMENT のカラムを設定している場合、レコードの削除を行なうと当然ながら番号が歯抜けになります。 それほど問題に感じることでもありませんが、気にならないこともないです。 以下、リナンバリング（再採番）する方法についての記録です。 0. 前提条件 MySQL 5.6.16 サーバでの作業を想定。（MySQL 5.5 系や MariaDB でも同じ） ストレージエンジンが InnoDB であるデータベースでの作業を想定。（MyISAM も同様のはず（未確認）） 1. SQL 作成＆実行 以下のような SQL を作成して実行する。 手順としては、まずユーザ変数を利用してリナンバリングする。 そして、リナンバリングしただけでは次回レコード挿入時の番号はリナンバリングする前のままであるので、 AUTO_INCREMENT の設定値を最大番号＋１に設定する（プリペアドステートメントを実行する）。（かなり重要） -- Auto Increment リナンバリング SET @new_id := 0; UPDATE table_name SET id = @new_id := @new_id + 1 ORDER BY...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2014/07/07/mysql-renumber-auto-increment/",
        "teaser": null
      },{
        "title": "QGIS(Quantum GIS) - Linux Mint へインストール！",
        "excerpt":"フリーでオープンソースの地理情報システム QGIS(Quantum GIS) を Linux Mint へインストールして使用してみました。 クロスプラットフォーム対応なので、 Windows, Mac, Linux, BSD に対応しています。（Android もまもなく対応予定） 0. 今回の前提条件 Linux Mint 17 上に QGIS 2.4 をインストールすることを想定。 地図データをダウンロードできるサイトは多数あるが、今回は「QGIS」サンプルと「e-Stat（政府統計の総合窓口）」のデータを使用する。 1. QGIS インストール $ sudo apt-get install python-software-properties $ sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable [sudo] password for hoge: You are about to add the following PPA to your...","categories": ["PC_Tips"],
        "tags": ["GIS","Linux","LinuxMint","QGIS"],
        "url": "/2014/07/09/qgis-installation-to-linx-mint/",
        "teaser": null
      },{
        "title": "QGIS(Quantum GIS) - 国土地理院・地球地図日本を表示！",
        "excerpt":"前回フリーでオープンソースの地理情報システム QGIS(Quantum GIS) を Linux Mint へインストールし、例として「QGIS」サンプルと「e-Stat（政府統計の総合窓口）」のデータを使用して地図を表示してみました。 QGIS(Quantum GIS) - Linux Mint へインストール！ 今回は、国土地理院の「地球地図日本」の Shape 形式データを利用して日本地図を表示してみました。 0. 今回の前提条件 Linux Mint 17 での作業を想定。 Quntum GIS 2.4 での作業を想定。 使用したデータは「第2版ベクタ（2011年公開）」の Shape ファイル。 1. データダウンロード 「地球地図日本のデータ｜国土地理院」のページから「第2版ベクタ（2011年公開）」の Shape ファイルのアーカイブ（zip ファイル）をダウンロードし展開する。（「行政界」、「水系」、「人口集中域」、「交通」とこれら全ての「全レイヤ」のアーカイブが存在するので希望のものを） ただし、2011年公開のデータであるため市町村によっては行政界が「合併前」のものになっている。 2. データ読み込み QGIS Desktop を起動し、「ベクタレイヤの追加」で先ほど展開した Shape ファイル（またはディレクトリ）を読み込ませる。 今回は「行政界」と「人口集中域」のデータを使用してみた。 デザイン等を調整してみたものが以下の２種類。 （出典：地球地図日本(国土地理院技術資料D・1-No.576)） （出典：地球地図日本(国土地理院技術資料D・1-No.576)） 3. 地球地図データの利用について 少量のデータのみの非営利目的の利用は「出典の明記」のみでよいことになっている。（「少量」がどの程度の量かは不明だが）...","categories": ["PC_Tips"],
        "tags": ["GIS","Linux","LinuxMint","QGIS"],
        "url": "/2014/07/11/qgis-gsi-global-map-japan/",
        "teaser": null
      },{
        "title": "国土地理院・基盤地図情報対応ライブラリ GDAL/OGR インストール！",
        "excerpt":"フリーでオープンソースの地理情報システム QGIS(Quantum GIS) では国土地理院の基盤地図情報をそのまま（JPGIS, JPGIS(GML) 形式）では読み込めません。 QGIS インストール時に GIS ラスターデータフォーマット用ライブラリ GDAL/OGR もインストールされますが、これは基盤地図情報のデータ形式に対応していません。（ogr2ogr2 --formats や gdal_translate --formats で表示される一覧に FGD(Japanese Fundamental Geographic Data) がない） 国土地理院のサイトには別フォーマットにコンバートできるツールが用意されていますが、これは Windows 専用です。 Linux でも Wine（Unix 系 OS で Windows プログラムを動作させるためのソフト）を使用すれば可能でしょうが、個人的には本末転倒に感じるというかあまりやりたくはありません。 そこで、「文部科学省宇宙利用促進調整委託費『衛星利用の裾野拡大プログラム』の課題として進められているプロジェクト」で公開されている基盤地図情報のデータ形式にも対応したライブラリをインストールして使用します。 0. 前提条件 Linux Mint 17(64bit) での作業を想定。 既に QGIS インストール済みである場合は GDAL/OGR(QGIS 2.4 の場合は 1.11.0 ?) ライブラリもインストールされているので、これからインストールするライブラリとの衝突（ライブラリの読み込み順）に注意する。(ldd コマンド等で確認)...","categories": ["PC_Tips"],
        "tags": ["GIS","Linux","LinuxMint","QGIS"],
        "url": "/2014/07/13/gsi-install-gdal-ogr-lib-for-fgd/",
        "teaser": null
      },{
        "title": "GIS - 国土地理院・基盤地図情報表示！",
        "excerpt":"前回は、国土地理院・基盤地図情報に対応した GDAL/OGR ライブラリでファイル形式を変換しました。 今回は、変換した Shapefile 形式のデータを QGIS(Quantum GIS) で表示してみました。 以下、その記録です。（当方 GIS については素人です。乱文ご容赦ください） 0. 前提条件 QGIS 2.4 での作業を想定。(on Linux Mint 17) 基盤地図情報対応 GDAL/OGR ライブラリ導入済みを想定 国土地理院・基盤地図情報対応ライブラリ GDAL/OGR インストール！ GDAL はラスタデータ、OGR はベクタデータ用であることを理解しておく。（ラスタデータ、ベクタデータが何であるかも含めて） 1. 基盤地図情報について GIS（地理情報システム）、地理空間情報を整備する際に、利用者により位置のズレ等が生じないよう共通の位置の基準を用いることが必要となる。そこで、電子地図における位置の基準となる情報が国土地理院から「基盤地図情報」として提供されている。 提供されている情報は以下の６つで、ファイル形式は “JPGIS2.x” 又は “JPGIS2.x(GML)” である。（ジオイド・モデルは “GSIGEO2011(Ver.1)” 形式もある） 基盤地図情報（縮尺レベル2500） 基盤地図情報（縮尺レベル25000） 基盤地図情報（数値標高モデル） 基盤地図情報（測量の基準点） 基盤地図情報（街区の境界線及び代表点） 基盤地図情報（ジオイド・モデル） （単に Web ブラウザ上で閲覧するだけなら、「基盤地図情報の閲覧｜国土地理院」のページで可能） 2. サービスにログイン...","categories": ["PC_Tips"],
        "tags": ["GIS","Linux","LinuxMint","QGIS"],
        "url": "/2014/07/15/gsi-display-fgd/",
        "teaser": null
      },{
        "title": "Linux - bash 設定ファイル！",
        "excerpt":"Linux で bash(Bourne Shell) の設定をする際に知っておくとよい読み込み順についての備忘録です。 0. 前提条件 CentOS などの Redhat 系 Linux ディストリビューションを想定。（Debian 系は多少異なる。また、バージョンによって異なることもある） 以下の説明はデフォルト設定での読み込み順を想定。 1. bash 設定ファイル 各種 bash 設定ファイルの読み込み順と簡単な説明。（Redhat 系の場合。Debian 系は若干異なる） [1]-----------------+ | /etc/profile | +-------------------+ | [2]-----------------+ | ~/.bash_profile | ----&gt;（ない場合） +-------------------+ | | [3]-----------------+ | | ~/.bash_login | ----&gt;（ない場合） | +-------------------+ | | [4]-----------------+ | |...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","RedHatEnterpriseLinux","シェル","bash"],
        "url": "/2014/07/17/linux-bash-setting-files/",
        "teaser": null
      },{
        "title": "Linux - bash 設定ファイル（Debian 系）！",
        "excerpt":"前回は Redhat 系 Linux ディストリビューション上の bash(Bourne Shell) の読み込み順について簡単に説明しました。 Linux - bash 設定ファイル！ その中で Debian 系は若干異なると記載しました。 今回は Debian 系での bash 設定ファイル読み込み順についての備忘録です。 0. 前提条件 Debain, Ubuntu, Linux Mint などの GNU Debian 系 Linux ディストリビューションを想定。（Redhat 系は多少異なる。また、バージョンによって異なることもある） 以下の説明はデフォルト設定での読み込み順を想定。 1. bash 設定ファイル 各種 bash 設定ファイルの読み込み順と簡単な説明。（Debian 系の場合。Redhat 系は若干異なる） [1]------------------+ | /etc/profile | +--------------------+ | [2]------------------+ |...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian","シェル","bash"],
        "url": "/2014/07/20/linux-bash-setting-files-debian/",
        "teaser": null
      },{
        "title": "MySQL(MariaDB) - 連番の仮想表作成！",
        "excerpt":"MariaDB(MySQL) で自然数の連番だけのテーブル（表）が必要なことがあります。 以下、作成例と応用例についての備忘録です。 0. 前提条件 MariaDB サーバ 5.5.31, MySQL 5.6.19 での作業を想定。 1. 作成例 以下のようにユーザ変数と UNION 句を利用して作成して実行する。 SELECT @seq_no := 1 AS seq_no UNION SELECT @seq_no := @seq_no + 1 AS seq_no FROM table_name LIMIT 5 +--------+ | seq_no | +--------+ | 1 | | 2 | | 3 | |...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2014/07/22/mysql-virtual-view-sequential-number/",
        "teaser": null
      },{
        "title": "R - maptools で地図表示！",
        "excerpt":"統計解析向けプログラミング言語の R で地図（Shape ファイル）を表示する方法についての記録です。 0. 前提条件 R 3.1.1 での作業を想定。 Shape ファイルは国土地理院の基盤地図情報から取得済み。（「島根県」分） 1. ライブラリのインストール Shape ファイルを扱うためのライブラリ maptools が未インストールならインストールする。（ミラーサイトは近場を適当に） &gt; install.packages(\"maptools\" , dependencies =TRUE) dependencies=TRUE は依存するライブラリも一緒にインストールするオプションで、 deldir, abind, tensor, polyclip, sp, rgeos, spatstat, PBSmapping, RColorBrewer もインストールされる。 （補足）ミラーサイトが上がってない場合は以下のようなエラーとなりインストールできないかも知れない。（随分長い間「兵庫教育大」にあるミラーサイトに接続できない状態が続いているため、当方は「筑波大」にあるミラーサイトに接続するようにしている） package ‘maptools’ is not available (for R version 3.1.1) 2. R スクリプト作成 Shape ファイルを読み込み地図を表示する R...","categories": ["PC_Tips"],
        "tags": ["R","GIS"],
        "url": "/2014/07/24/r-display-map-by-maptools/",
        "teaser": null
      },{
        "title": "QGIS(Quantum GIS) - 国土交通省・国土数値情報からの地図表示！",
        "excerpt":"少し前にフリーでオープンソースの地理情報システム QGIS(Quantum GIS) で国土地理院の地球地図日本や基盤地図情報を表示してみたことを紹介しました。 QGIS(Quantum GIS) – Linux Mint へインストール！ GIS - 国土地理院・基盤地図情報表示！ 今回は、国土交通省の「国土数値情報」のデータを利用して QGIS 上で地図を表示してみました。 ちなみに、今まで他の地図情報を扱ってきましたが、今回の「国土数値情報」を扱うのが当方の最終目標でした。 以下、その記録です。（当方 GIS については素人です。乱文ご容赦ください） 0. 前提条件 QGIS 2.4 での作業を想定。(on Linux Mint 17) 利用するデータ形式は JPGIS2.1 形式。 1. データダウンロード 「国土数値情報ダウンロードサービス」ページの “JPGIS2.1” から「行政区域」のページヘ移動し必要な都道府県データをダウンロードする。（途中で簡単なアンケートに回答する） ダウンロードしたら Zip ファイルを展開する。 以下は、「行政区域データ・島根県分、”N03-140401_32_GML.zip”」を展開した場合。 KS-META-N03-14_32_140401.xml N03-14_32_140401.dbf N03-14_32_140401.prj N03-14_32_140401.sbn N03-14_32_140401.sbx N03-14_32_140401.shp N03-14_32_140401.shx N03-14_32_140401.xml 2. QGIS...","categories": ["PC_Tips"],
        "tags": ["GIS","Linux","LinuxMint","QGIS"],
        "url": "/2014/07/26/qgis-display-mlit-ksj/",
        "teaser": null
      },{
        "title": "QGIS(QuantumGIS) - 国土数値情報・ポリゴンの融合！",
        "excerpt":"国土交通省提供の国土数値情報（行政区域データ）を取得して地理情報システム QGIS(Quantum GIS) で表示させる場合に、そのままだと地物それぞれがポリゴンになっているために市区町村単位でラベル表示をしたい際に地物（ポリゴン）単位に表示されてしまいます。 そこで、同じ市区町村を１つのポリゴンに融合する方法についての記録です。（結合ではなく融合です） （当方 GIS については素人です。乱文ご容赦ください） 0. 前提条件 Linux Mint 17 での作業を想定。 Quntum GIS 2.4 での作業を想定。 使用したデータは国土交通省提供・国土数値情報（行政区域データ[JPGIS2.1形式]）の島根県分。（ファイル名：”N03-14_32_140401.shp”） 1. 元の SHAPE ファイル確認 融合する前に元の SHAPE ファイルを確認してみる。（「市区町村名（項目名：”N03_004”）」ラベルも表示） ご覧のとおり、各地物（ポリゴン）にラベルが表示されるため海岸線の小島それぞれにもラベルが付いてしまう。 この時の属性テーブルは以下のようになっている。 2. ポリゴンの融合 QGIS メニューの「ベクタ」ー「空間演算ツール」ー「融合」を使用する。 「入力ベクタレイヤ」欄には今開いている SHAPE ファイルがセットされている。 「融合フィールド」欄では融合したい項目をセットする。今回は市区町村で融合したいので “N03_004”（市区町村名） を選択する。（市区町村と１対１の “N03_007”（行政区域コード）でもよい） 「出力シェープファイル」欄では出力ファイル名を指定する。日本語が文字化けしないようエンコードは “Shift_JIS” を指定する。 OK ボタン押下で融合処理が始まる。（「結果をキャンバスに追加する」にチェックを入れれば処理終了後にレイヤに追加される） 融合処理が終了したら「閉じる」ボタンで閉じる。 3. 融合後 SHAPE ファイル確認 「ベクタレイヤの追加」で先ほど融合した...","categories": ["PC_Tips"],
        "tags": ["GIS","Linux","LinuxMint","QGIS"],
        "url": "/2014/07/28/qgis-fusion-of-polygons/",
        "teaser": null
      },{
        "title": "GDAL/OGR - 国土数値情報の複数 Shapefile を結合！",
        "excerpt":"国土交通省が提供する国土に関する電子地図データダウンロードサービス「国土数値情報」の都道府県別データを１つに結合する方法についての記録です。 都道府県別に読み込むよりまとめて読み込んだ方が作業をしやすい、という場合に使えるのではないでしょうか。 フリーでオープンソースの地理情報システム QGIS(QuantumGIS) の「ベクタ」ー「データマネジメントツール」ー「複数のシェープファイルを１つに結合する」でも可能ですが、エンコードに難があるようです。（エンコード指定をどのように試しても文字情報の文字化けが解消しない） そこで、データ変換ライブラリ GDAL/OGR の ogr2ogr コマンドを使用して結合してみます。 以下、その記録です。（当方 GIS については素人です。乱文ご容赦ください） 0. 前提条件 GDAL/OGR 1.10.0 での作業を想定。 （国土地理院・基盤地図情報対応の GDAL/OGR(1.11.0) でも同じ） 使用するデータは、国土数値情報「行政区域」データ(JPGIS2.1形式)の全都道府県分。（平成26年4月分） 作業用ディレクトリは “N03-140401_00_GML” とする。 bash スクリプトを使用する。 1. 準備 QGIS でもそうであるが、結合使用する Shapefile を１つのディレクトリにまとめておく必要がある。 国土数値情報「行政区域」データの圧縮ファイル１つ（１県分）展開すると “N03-140401_XX_GML” というディレクトリができる。（”XX” は都道府県番号） 47都道府県分のディレクトリ内のファイル全てを作業用ディレクトリ内へコピーする。（今回の場合は “N03-140401_00_GML” というディレクトリ） 2. シェルスクリプト作成 以下のような bash スクリプトを作成する。 File: merge_shp.sh 1 2 3...","categories": ["PC_Tips"],
        "tags": ["GIS","Linux","LinuxMint","QGIS"],
        "url": "/2014/07/30/gdal-ogr-merge-shapefiles/",
        "teaser": null
      },{
        "title": "R - maptools で地図表示（国土数値情報）！",
        "excerpt":"少し前に、統計解析向けプログラミング言語の R で maptools パッケージを用いて国土地理院・基盤地図情報から地図（Shape ファイル）を表示しました。 R - maptools で地図表示！ 今回は、国土交通省・国土数値情報から地図を表示してみます。 （今回は plot ではなく ggplot を使用します） （乱文ご容赦下さい） 0. 前提条件 R 3.1.1 での作業を想定。 SHAPE ファイルは国土交通省・国土数値情報を使用する。（行政区域データ「島根県」分） 1. ライブラリのインストール 必要なパッケージが未インストールならインストールする。 今回必要なのは ggplot2, gpclib, maptools パッケージ。 &gt; install.packages(\"ggplot2\" , dependencies =TRUE) &gt; install.packages(\"gpclib\" , dependencies =TRUE) &gt; install.packages(\"maptools\" , dependencies =TRUE) 2. R スクリプト作成...","categories": ["PC_Tips"],
        "tags": ["R","GIS","地図"],
        "url": "/2014/07/31/r-display-map-by-maptools-ksj/",
        "teaser": null
      },{
        "title": "2014年7月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"8月になりましたので、先月7月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 30,018 70.6356 Mac OS 7,944 18.6931 Linux 2,301 5.4145 Ubuntu Linux 1,516 3.5673 Android 514 1.2095 unknown 120 0.2824 FreeBSD 57 0.1341 Solaris 15 0.0353 Fedora Linux 4 0.0094 Debian GNU/Linux 3 0.0071 NetBSD 2 0.0047 RedHat Linux 2 0.0047 PalmOS 1 0.0024...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/08/01/blog-access/",
        "teaser": null
      },{
        "title": "QGIS(Quantum GIS) - 世界地図表示！",
        "excerpt":"Shapefile 形式等の地図情報は国内外問わず多数公開されていますが、今回は海外で公開されている Shapefile を使用して QGIS で世界地図を表示してみます。 （当方、GIS については素人です。乱文ご容赦ください） 0. 前提条件 Linux Mint 17 での作業を想定。 Quntum GIS 2.4 での作業を想定。 1. Natural Earth の Shapefile データ “Natural Earth” という地図データを無償で提供しているサイトの Shapefile データを取得して世界地図を表示してみる。 上から、1/10,000,000、1/50,000,000、1/110,000,000 縮尺の国境界データを地図化したもの。 全体図として見ただけでは小島の有無が認識できる程度。 次に、これらの地図の日本部分をズームアップしてみた。 同様に、上から 1/10,000,000、1/50,000,000、1/110,000,000 縮尺。 当然縮尺により粗さは異なる。 島根県を中心に見てみると、1/10,000,000 では「隠岐諸島・島前」も存在しているが、1/50,000,000 では「隠岐諸島・島前」は無くなり、さらに 1/110,000,000 では「隠岐諸島・島後」も無くなる。（ちなみに、1/10,000,000 では隠岐の島と鬱陵島（ウルルン島）の間に「竹島」（極小の点）も存在している） 2. DIVA-GIS の Shapefile データ “DIVA-GIS” という地図データを無償で提供しているサイトの...","categories": ["PC_Tips"],
        "tags": ["GIS","Linux","LinuxMint","QGIS"],
        "url": "/2014/08/02/qgis-world-map/",
        "teaser": null
      },{
        "title": "R - 地震活動状況の地図表示！",
        "excerpt":"少し前から国土地理院や国土交通省提供の地図情報（Shape ファイル）から R(maptools) を用いて地図を表示してきました。 今回は、国土地理院・地球地図日本上に気象庁発表の地震情報（震源・地震規模）の情報を重ねて表示してみした。 （乱文ご容赦下さい） 0. 前提条件 R 3.1.1 での作業を想定。 SHAPE ファイルは国土地理院・地球地図日本を使用。（別途都道府県単位で地物融合済み） 1. 地震データ（CSV ファイル）の準備 使用する地震データを何かしらの形で準備する。 当方は、以前から取り貯めていた「気象庁防災情報 XML」の「震源・震度に関する情報」のデータを整形していかのような CSV ファイルを用意した。（2013/01/01から2014/06/30までの3,357件） File: eq_data.csv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 lat,lon,depth,magnitude -23.1,-176.6,210,7.4 -03.8,154.0,380,7.3 39.1,142.1,50,3.6 40.5,141.7,100,3.9 27.1,127.5,90,4.0 38.9,142.0,50,3.5 40.1,141.8,10,3.1 35.7,141.1,10,4.2 39.0,142.1,50,3.7 : ===&lt; 以降省略...","categories": ["PC_Tips"],
        "tags": ["R","GIS","地図"],
        "url": "/2014/08/03/r-display-earthquake-by-maptools/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - インストール！",
        "excerpt":"「CentOS 7.0 - インストール」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を仮想マシン（Virtual Box）に NetInstall でインストールする。（必ずしも NetInstall でなくてもよい） サーバ用途なのでデスクトップ環境は導入しない。 ISO イメージは「ミラーサイト」一覧のうち近い場所を選んでダウンロードする。 ISO イメージのディスクへの書き込みについてはここでは説明しない。 （ファイルとしてではなくイメージとして書き込むことに注意するくらい。また、仮想マシンへのインストールなら、ディスクに書き込む必要はなくインストール時に ISO イメージを指定すればよい） マシン搭載メモリは 1GB を想定。 ローカル IP アドレスは 192.168.11.102 を想定。 ホスト名は vbox.mk-mode.com を想定。 IPv6 は使用しない。 1. CentOS 7.0 インストール開始 “CentOS-7.0-1406-x86_64-NetInstall.iso” を使用してインストールを開始する。 2. 言語選択 言語を「日本語」に設定する。キーボードは自動で “jp” に変わる。 3. インストール概要画面 インストールの概要画面が表示される。...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/08/04/centos-7-0-installation/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - 初期設定！",
        "excerpt":"「CentOS 7.0 - 初期設定」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 一般ユーザはインストール作業時に設定済み。 作業はローカル端末から SSH 接続で行う。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 設定ファイル編集等はテキストエディタ Vi を使用する。（vi コマンド入力のことまで説明はしない） 主に「CentOSで自宅サーバー構築」を参照。 1. 一般ユーザ作成 インストール時に一般ユーザを作成していない場合は、root でログインして一般ユーザを作成する。 vbox login: root Password: [root@vbox ~]# useradd masaru [root@vbox ~]# passwd masaru Changing password for user masaru. New password: Retype new password:...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/08/05/centos-7-0-initial-setting/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - リポジトリ追加！",
        "excerpt":"「CentOS 7.0 - リポジトリ追加」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 主に「CentOSで自宅サーバー構築」を参照。 1. yum-priorities インストール 標準と追加したリポジトリの両方で提供されるパッケージの場合に、追加したリポジトリで提供されるパッケージで上書きされないようにする。 # yum -y install yum-plugin-priorities そして、以下のように追記する。（[centosplus] は元々 enabled=0 で無効になっているの追記不要） File: /etc/yum.repos.d/CentOS-Base.repo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/08/06/centos-7-0-addition-of-repository/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - rootkit 検知ツール chkrootkit 導入！",
        "excerpt":"「CentOS 7.0 - rootkit 検知ツール chkrootkit 導入」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 主に「CentOSで自宅サーバー構築」を参照。 1. chkrootkit インストール rootkit 検知ツール chkrootkit を以下のようにしてインストールする。 （当記事執筆時点では RPMforge, EPEL リポジトリには存在しないためソースをビルドしてインストールする） # wget ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz # &lt;= アーカイブダウンロード # tar zxvf chkrootkit.tar.gz # &lt;= アーカイブ展開 # mkdir -p ~/bin # &lt;= bin...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/08/07/centos-7-0-installation-of-chrootkit/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - アンチウイルスソフト Clam AntiVirus 導入！",
        "excerpt":"「CentOS 7.0 - アンチウイルスソフト Clam AntiVirus 導入」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 RPMforge リポジトリ導入済み。（CentOS 7.0 - リポジトリ追加） 主に「CentOSで自宅サーバー構築」を参照。 1. Clam AntiVirus インストール ベースリポジトリには存在しないので、RPMforge リポジトリからインストールされる。 # yum -y install clamd 2. clamd 設定ファイル編集 Clam AntiVirus 設定ファイルを以下のように編集する。 File: /etc/clamd.conf 1 2 3 #User clamav # &lt;=...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","ウイルス対策"],
        "url": "/2014/08/08/centos-7-0-installation-of-clam-anti-virus/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - ファイアウォール設定！",
        "excerpt":"「CentOS 7.0 - ファイアウォール設定」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 主に「FirewallD/jp - FedoraProject」を参照。 1. FirewallD 概要 iptables の設定をフィルタリング機能で管理する。 iptables の存在を意識する必要がない。 NIC ポートごとに仮想的なファイアウォールを設置して、それぞれについて受信を許可するポートを指定する形式である。 予め用意されているゾーンの中から１つを選択して NIC ポートに適用する。 予め用意はされているが設定変更は可能である。 予め用意されているゾーンは以下の９つ drop（設定変更してはならない） 外部からのあらゆるパケットを破棄し、返信もしない。外部への接続は可能。 block（設定変更してはならない） 外部からのあらゆる接続を拒否し、ICMP Prohibited メッセージを返す。内部から開始した接続は可能。 public デフォルトのゾーン。指定した外部から接続のみアクセス可能。 デフォルト：dhcpv6-client, ssh external 外部用。指定した外部から接続のみアクセス可能。IP マスカレードが有効。 デフォルト：ssh dmz 非武装セグメント用。指定した外部から接続のみアクセス可能。 デフォルト：ssh work...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","ファイアウォール"],
        "url": "/2014/08/09/centos-7-0-setting-of-firewall/",
        "teaser": null
      },{
        "title": "C++ - HTML 取得！",
        "excerpt":"CentOS サーバ構築関連の記事の合間に、気分転換で別カテゴリのストック記事を。 C++ で Web サイトの HTML を取得してファイルに保存する方法についての記録です。 （それほど洗練されたソースコードでもありません。ご承知おきください） 0. 前提条件 Linux Mint 17 での作業を想定。 g++(c++) のバージョンは 4.8.2 1. C++ ソースコード作成 以下のようにソースコードを作成した。 cURL を利用して HTML を取得後、１行ずつ読み込んでテキストファイルに出力している。 File: GetHtml.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["プログラミング"],
        "tags": ["C言語"],
        "url": "/2014/08/10/cpp-getting-html/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - NTP サーバ Chrony 設定！",
        "excerpt":"「CentOS 7.0 - NTP サーバ Chrony 設定」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 時刻同期に関して、CentOS 7 からは NTP の代替として Chrony が採用されてデフォルトでインストール・起動しています。 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 ローカルネットワークは 192.168.11.0/24 を想定。 従来からの NTP は使用しないことを想定。 1. NTP サーバ停止 従来の NTP サーバをインストール・起動している場合は停止する。 # systemctl stop ntpd # systemctl disable ntpd rm '/etc/systemd/system/multi-user.target.wants/ntpd.service' # systemctl list-unit-files...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","NTP"],
        "url": "/2014/08/11/centos-7-0-setting-of-ntp-chrony/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - SSHサーバ OpenSSH 設定！",
        "excerpt":"「CentOS 7.0 - SSHサーバ OpenSSH 設定」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 ローカルネットワークは 192.168.11.0/24 を想定。 開放ポートはデフォルトから変更する。（例として “9999/TCP” を使用） FirewallD のゾーンは public を使用する。 主に「CentOSで自宅サーバー構築」を参照。 1. 鍵ペア（公開・秘密）の生成 クライアント側で以下のコマンドで公開鍵・秘密鍵を生成する。 作成先・ファイル名を指定しなければ、/home/(ユーザ名)/.ssh/ に id_rsa, id_rsa.pub が作成される。 途中、鍵用のパスワードも入力する。 $ ssh-keygen Generating public/private rsa key pair. Enter...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","SSH"],
        "url": "/2014/08/12/centos-7-0-installation-of-openssh/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - DNS サーバ BIND 構築！",
        "excerpt":"「CentOS 7.0 - DNS サーバ BIND 構築」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 セカンダリネームサーバは構築しない。 使用しているルータは DNSSEC 非対応。 PPPoE 環境ではない。 IPv6 は使用しない。 グローバル IP アドレスは固定。（aaa.bbb.ccc.ddd と仮定） ドメイン名は “mk-mode.com” ローカルネットワークは “192.168.11.0/24” サーバマシンのローカル IP アドレスは “192.168.11.102” FirewallD のゾーンは public を使用する。 主に「CentOSで自宅サーバー構築」を参照。 1. BIND,...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","DNS"],
        "url": "/2014/08/13/centos-7-0-installation-of-bind/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - FTP サーバ vsftpd 構築！",
        "excerpt":"「CentOS 7.0 - FTP サーバ vsftpd 構築」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 IPv6 は使用しない。 FirewallD のゾーンは public を使用する。 主に「CentOSで自宅サーバー構築」を参照。 1. vsftpd インストール # yum -y install vsftpd 2. vsftpd 設定ファイル編集 File: /etc/vsftpd/vsftpd.conf 1 2 3 4 5 6 7...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","FTP"],
        "url": "/2014/08/14/centos-7-0-installation-of-vsftpd/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - ファイルサーバ NFS 構築！",
        "excerpt":"「CentOS 7.0 - ファイルサーバ NFS 構築」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 IPv6 は使用しない。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 NFS 用ディレクトリを新たに作成する。（”/home” 配下に “/exports” ディレクトリを作成する） クライアント側でマウントに使用するディレクトリは “/var/exports” とする。 サーバ側は root で作業することを想定、クライアント側は一般ユーザで作業することを想定している。 FirewallD のゾーンは public を使用する。 1. インストール NFS サーバツールを以下のようにしてインストールする。...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","NFS"],
        "url": "/2014/08/15/centos-7-0-installation-of-nfs/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - ファイルサーバ Samba 構築！",
        "excerpt":"「CentOS 7.0 - ファイルサーバ Samba 構築」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 既存の一般ユーザを Samba ユーザとする。 ローカルネットワークは 192.168.11.0/24 を想定。 ネットワークカード名は enp0s3 を想定。 共有ディレクトリは “/home/samba” を想定。 プリンタ共有はしない。 ごみ箱機能は使用しない。 主に「CentOSで自宅サーバー構築」を参照。 1. Samba インストール # yum -y install samba 2. Samba サーバアクセス用ユーザ設定 既存の一般ユーザを Samba...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Samba"],
        "url": "/2014/08/16/centos-7-0-installation-of-samba/",
        "teaser": null
      },{
        "title": "Linux - テキストファイルの文字コード変換！",
        "excerpt":"気分転換に CentOS サーバ構築以外の話題にします。 Linux で ShiftJIS で書かれたテキストファイルを UTF-8 に変換する方法についての個人的備忘録です。 もちろん、オプションを変更することで ShiftJIS -&gt; UTF8 以外の変換も可能です。 0. 前提条件 Linux Mint 17 での作業を想定。 nkf コマンド、 iconv コマンドがインストール済みであること。 1. nkf コマンドを使用する例 $ nkf -w sjis_file.txt &gt; utf8_file.txt -w は UTF8 に変換するオプション。 ShiftJIS に変換するなら -s オプションを使用する。 その他オプションについては nkf --help 等で確認。 ちなみに（ついでに）、改行コードを変換する場合は以下のようにすればよい。 $ nkf -Lu src_file.txt...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2014/08/17/linux-convert-sjis-to-utf8/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - 送信メールサーバ Postfix 構築！",
        "excerpt":"「CentOS 7.0 - 送信メールサーバ Postfix 構築」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 IPv6 は無効化していることを想定。 SMTP-Auth 機能にはシステムのユーザ名・パスワードを使用する。 FirewallD のゾーンは public を使用する。 主に「CentOSで自宅サーバー構築」を参照。 1. Postfix インストール 今は送信メールサーバ Postfix はデフォルトでインストールされている。 インストールされていない場合は、以下のようにしてインストールする。 # yum -y install postfix 2. Postfix 設定ファイル編集 Postfix 設定ファイルを以下のように編集する。（該当箇所のみ抜粋） File: /etc/postfix/main.cf...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix"],
        "url": "/2014/08/18/centos-7-0-installation-of-postfix/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - Postfix の OP25B 対策！",
        "excerpt":"「CentOS 7.0 - Postfix の OP25B 対策」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 自宅サーバであるとは言っても、Postfix でメールを送信する際にはプロバイダを経由することになる。 プロバイダが OP25B(Outbound Port 25 Blocking)対策していて自宅サーバからメールが送信できない場合は、OP25B 対策の影響を受けることになるので対策を施す必要がある。 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 プロバイダは @nifty を想定。 メールサーバは Postfix を想定。（Sendmail 等については各自お調べください） 主に「CentOSで自宅サーバー構築」を参照。 1. メールサーバ名確認 クライアントマシンから nslookup コマンドでプロバイダに接続し、メールサーバ名を確認する。 # nslookup -type=mx nifty.com Server: 127.0.1.1...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix"],
        "url": "/2014/08/19/centos-7-0-setting-of-op25b/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - 受信メールサーバ Dovecot 構築！",
        "excerpt":"「CentOS 7.0 - 受信メールサーバ Dovecot 構築」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 送信メールサーバは Postfix を想定。（Sendmail 等については各自お調べください） FirewallD のゾーンは public を使用する。 主に「CentOSで自宅サーバー構築」を参照。 1. Dovecot インストール # yum -y install dovecot 2. Dovecot 設定ファイル dovecot.conf 編集 初期設定時 IPv6 を無効化にした場合 Dovecot が影響を受けるので以下のようにする。 File:...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Dovecot"],
        "url": "/2014/08/20/centos-7-0-installation-of-dovecot/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - メールサーバ間通信内容暗号化 OpenSSL！",
        "excerpt":"「CentOS 7.0 - メールサーバ間通信内容暗号化 OpenSSL」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 送信メールサーバ Postfix, 受信メールサーバ Dovecot 構築済みであること。 FirewallD のゾーンは public を使用する。 主に「CentOSで自宅サーバー構築」を参照。 1. Postfix 設定 1-1. サーバ証明書作成 # cd /etc/pki/tls/certs/ # make mail.pem umask 77 ; \\ PEM1=`/bin/mktemp /tmp/openssl.XXXXXX` ; \\...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix","Dovecot"],
        "url": "/2014/08/21/centos-7-0-setting-of-openssl-between-mailservers/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - メールサーバ Postfix でウィルス＆スパムチェック！",
        "excerpt":"「CentOS 7.0 - メールサーバ Postfix でウィルス＆スパムチェック」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 送信メールサーバ Postfix と Clam AntiVirus, SpamAssassin を Procmail で連携して、メールのウィルス＆スパムチェックを行う。 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 送信メールサーバ Postfix 構築済みであること。 アンチウィルスソフト Clam AntiVirus 構築済みであること。 主に「CentOSで自宅サーバー構築」を参照。 1. SpamAssassin インストール # yum -y install spamassassin 2. SpamAssassin 起動...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix"],
        "url": "/2014/08/22/centos-7-0-setting-of-antivirus-spam-on-mail/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - スパムメール誤認識対策 Postfix + SpamAssassin！",
        "excerpt":"「CentOS 7.0 - スパムメール誤認識対策 Postfix + SpamAssassin」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 送信メールサーバ Postfix 構築済みであること。 スパム対策として、 Postfix と SpamAssassin を Procmail で連携している。 主に「CentOSで自宅サーバー構築」を参照。 1. スパムと誤認識する場合の対処方法。 “/etc/mail/spamassassin/local.cf” を直接編集しても、spamassassin-update が cron.daily により毎日自動起動して “/etc/mail/spamassassin/local.cf” が上書きされてしまうので、以下のようにする。 1-1. ホワイトリストファイル新規作成 （以下は一例） File: /root/whitelist 1 2...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix"],
        "url": "/2014/08/23/centos-7-0-setting-of-spamassassin-misrecognition/",
        "teaser": null
      },{
        "title": "C++ - ShiftJIS -> UTF-8 変換！",
        "excerpt":"気分転換に CentOS サーバ構築以外の話題にします。 C++ で ShiftJIS で書かれたテキストファイルを UTF-8 に変換する方法についての記録（簡単な例）です。 （それほど洗練されたソースコードでもありません。ご承知おきください） 0. 前提条件 Linux Mint 17 での作業を想定。 g++(c++) のバージョンは 4.8.2 1. C++ ソースコード作成 以下のようにソースコードを作成した。 “sjis.txt” という ShiftJIS で書かれたテキストファイルを読み込んで、UTF-8 に変換した内容で “utf8.txt” に保存する。 File: SjisToUtf8.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["プログラミング"],
        "tags": ["C言語"],
        "url": "/2014/08/24/cpp-convert-sjis-to-utf8/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - メール自動返信機能 Vacation 導入！",
        "excerpt":"「CentOS 7.0 - メール自動返信機能 Vacation 導入」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 送信メールサーバ Postfix、受信メールサーバ Dovecot 構築済みであること。 主に「CentOSで自宅サーバー構築」を参照。 1. 必要パッケージインストール Vacation のインストールに必要な gdbm-devel がインストールされていなれば、インストールしておく。 # yum -y install gdbm-devel 2. アーカイブファイルダウンロード＆展開 # wget \"http://downloads.sourceforge.net/project/vacation/vacation/1.2.7.1/vacation-1.2.7.1.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fvacation%2Ffiles%2F&amp;ts=1325220962&amp;use_mirror=jaist\" -O vacation-1.2.7.1.tar.gz # tar zxvf vacation-1.2.7.1.tar.gz 3....","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix","Dovecot"],
        "url": "/2014/08/25/centos-7-0-installation-of-vacation/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - Postfix ログ解析ツール pflogsumm 導入！",
        "excerpt":"「CentOS 7.0 - Postfix ログ解析ツール pflogsumm 導入」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 メールサーバ Postfix 構築済みであること。 主に「CentOSで自宅サーバー構築」を参照。 1. pflogsumm インストール # yum -y install postfix-pflogsumm 2. pflogsumm 実行スクリプト作成 File: pflogsumm_report 1 2 3 4 5 6 7 8 9 10...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix"],
        "url": "/2014/08/26/centos-7-0-installation-of-pflogsumm/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - 複数ドメイン宛メールの集約 Fetchmail！",
        "excerpt":"「CentOS 7.0 - 複数ドメイン宛メールの集約 Fetchmail」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 メールサーバ構築済みであること。 例として、@nifty 宛メールと YahooMail 宛メール、POP3S の場合のメールを集約する。 メール転送先は “hoge@mk-mode.com” を想定。 主に「CentOSで自宅サーバー構築」を参照。 1. Fetchmail インストール # yum -y install fetchmail 2. Fetchmail 設定ファイル作成 対象のユーザになって作業を行なう。 File: .fetchmailrc 1 2 3 4 5...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix","Dovecot"],
        "url": "/2014/08/27/centos-7-0-installation-of-fetchmail/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - Web サーバ Nginx 構築（ソースインストール）！",
        "excerpt":"「CentOS 7.0 - Web サーバ Nginx 構築（ソースインストール）」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 ソースを取得し、ビルドしてインストールする。 FirewallD のゾーンは public を使用する。 当記事執筆時点で最新の安定版 1.6.0 をインストールする。（当記事公開時点の最新安定版は 1.6.1） 1. 必要パッケージインストール ソースビルドに必要なパッケージをあらかじめインストールしておく。 # yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel 2. アーカイブダウンロード # cd...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Nginx"],
        "url": "/2014/08/28/centos-7-0-installation-of-nginx-by-src/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - DB サーバ MariaDB 構築！",
        "excerpt":"「CentOS 7.0 - DB サーバ MariaDB 構築」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 デフォルト DB サーバが MariaDB になって最初の CentOS なので、今回はソースインストールではなく yum インストールする。 （ソースビルドでのインストールは後日。現時点で TokuDB ストレージエンジン部分のビルド不具合もあるので） サーバマシンのメモリ容量は 1GB を想定。 データディレクトリ作成先は “/home/mariadb”, ストレージエンジンは InnoDB とした。 MariaDB とは言っても MySQL からフォークした DB であるので、随所で “MySQL”,...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","MariaDB"],
        "url": "/2014/08/29/centos-7-0-installation-of-mariadb/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - Ruby 2.1.2 インストール（ソースビルド）！",
        "excerpt":"「CentOS 7.0 - Ruby 2.1.2 インストール（ソースビルド）」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 当記事執筆時点で最新の Ruby 2.1.2 をインストールする。 RPMforge リポジトリ導入済み。（CentOS 7.0 - リポジトリ追加） 1. 必要ライブラリのインストール やりたいこと等により導入するライブラリも異なるだろうが、取り急ぎ以下をインストールした。(libyaml-devel は Ruby インストール前にインストールしておかないと、Ruby インストールに成功しても gem コマンド関連で不具合が生じる） # yum -y install ncurses-devel gdbm-devel readline-devel libyaml-devel 2. アーカイブファイルダウンロード＆展開...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Ruby"],
        "url": "/2014/08/30/centos-7-0-installation-of-ruby-by-src/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - Python 3.4.1 インストール（ソースビルド）！",
        "excerpt":"「CentOS 7.0 - Python 3.4.1 インストール（ソースビルド）」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 デフォルトでインストールされている Python 2.7.5 はアンインストールせず、Python 3.3.3 をインストールし、 2.7.5 と 3.3.3 を共存させる。 （python コマンドと python3.4 コマンドで使い分ける） 「デフォルトでインストールされている Python をアンインストールすることはサーバ管理上悪影響を与えるので危険である」ということを理解しておく。 1. Python バージョン確認 インストール済み（現状）の Python のバージョンを確認してみる。 # python -V Python 2.7.5...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Python"],
        "url": "/2014/08/31/centos-7-0-installation-of-python-by-src/",
        "teaser": null
      },{
        "title": "2014年8月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"9月になりましたので、先月8月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 27,105 70.6761 Mac OS 6,995 18.2394 Linux 2,094 5.4601 Ubuntu Linux 1,472 3.8382 Android 501 1.3064 unknown 150 0.3911 FreeBSD 22 0.0574 Solaris 3 0.0078 Wii 3 0.0078 Fedora Linux 2 0.0052 RedHat Linux 2 0.0052 Debian GNU/Linux 1 0.0026 SuSE Linux 1...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/09/01/blog-access/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - 自動バックアップ運用！",
        "excerpt":"「CentOS 7.0 - 自動バックアップ運用」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 バックアップ先ディレクトリは “/home/backup” を想定。 バックアップファイルの暗号化は行わない。 主に「CentOSで自宅サーバー構築」を参照。 1. バックアップスクリプト作成 バックアップアーカイブファイルの暗号化を行いたければ PASS にパスワードを設定すればよい。 File: backup.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/09/02/centos-7-0-setting-of-auto-backup/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - rsync でファイル・ディレクトリ同期（同期先として）！",
        "excerpt":"「CentOS 7.0 - rsync でファイル・ディレクトリ同期（同期先として）」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 ローカルマシン（Linux Mint 17）からサーバマシン（CentOS 7.0）へ同期することを想定。 サーバ側のバックアップ用ディレクトリは “/home/backup/rsync/” とする。 同期元（クライアントマシン）の IP アドレスは 192.168.11.11 を想定。 同期先（サーバマシン）の IP アドレスは 192.168.11.102 を想定。 クライアント側から同期要求があった場合にのみ rsync を起動させるために、 xined を使用する。 以下の記事内では、サーバ側の設定とクライアント側の設定を記述しているので混同しないこと。 1. 同期先（CentOS）側 1-1. 【サーバ側】rsync, xinetd インストール...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","rsync"],
        "url": "/2014/09/03/centos-7-0-synchronizing-of-rsync-as-destinations/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - rsync でファイル・ディレクトリ同期（同期元として）！",
        "excerpt":"「CentOS 7.0 - rsync でファイル・ディレクトリ同期（同期元として）」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 サーバマシン（CentOS 7.0）からローカルマシン（Linux Mint 17）へ同期することを想定。 サーバ側のバックアップ用ディレクトリは “/home/backup/rsync/” とする。 同期元（サーバマシン）の IP アドレスは 192.168.11.11 を想定。 同期先（クライアントマシン）の IP アドレスは 192.168.11.102 を想定。 クライアント側から同期要求があった場合にのみ rsync を起動させるために、 xined を使用する。 以下の記事内では、サーバ側の設定とクライアント側の設定を記述しているので混同しないこと。 1. 同期先（Linux Mint）側 1-1. 【クライアント側】rsync インストール...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","rsync"],
        "url": "/2014/09/04/centos-7-0-synchronizing-of-rsync-as-sources/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - Git サーバ構築！",
        "excerpt":"「CentOS 7.0 - Git サーバ構築」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 クライント側から要求があった場合のみ Git サーバを起動するようにするために xinetd を使用する。 サーバホスト名は “vbox.mk-mode.com” サーバマシンに OpenSSH サーバ構築済みで、鍵ペアによる SSH 接続が可能。 サーバマシンに xinetd 導入済み。 一般ユーザは “wheel” に属する “masaru” を想定。 サーバ側 SSH ポートは TCP:9999 を想定。（デフォルトは TCP:22 だが、変更していることを想定） 1. Git...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Git"],
        "url": "/2014/09/05/centos-7-0-installation-of-git-server/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - ログ解析ツール LogWatch 導入！",
        "excerpt":"「CentOS 7.0 - ログ解析ツール LogWatch 導入」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 1. インストール # yum -y install logwatch 2. 設定編集 File: /etc/logwatch/conf/logwatch.conf 1 2 3 MailTo = root Detail = High LogDir = /var/log 3. 動作確認 結果を端末に表示してみる。 # logwatch...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/09/06/centos-7-0-installation-of-logwatch/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - パーティショニング！",
        "excerpt":"MySQL 5.1 から導入されたテーブルのパーティショニング（１テーブルの分割管理）についての備忘録です。 パーティショニングすることにより主に以下のようなメリットがあると考えられます。 対象のパーティションのみ参照するようになるため、高速化が見込まれる。 パーティションごと削除が可能であるため、管理が楽になる。 （以下、乱文ご容赦ください） 0. 前提条件 MariaDB(MySQL) 5.5 系、5.6 系での作業を想定。 （5.1 以降ならパーティショニング可能であるが、RANGE で date 型, datetime 型がそのまま使用できるのは 5.5 以降） 1. 準備 例として、以下のようなテーブルをあらかじめ作成しておく。 次項以降は ALTER TABLE でこのテーブルに対して操作することを想定しているが、テーブル作成時に ALTER TABLE より後ろの部分を付加してもよい。 CREATE TABLE table_name ( id int(11) NOT NULL AUTO_INCREMENT, recv_at datetime NOT NULL, kubun tinyint(4) NOT NULL, text...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2014/09/07/mariadb-mysql-partitioning/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - サーバ監視ツール Munin 導入！",
        "excerpt":"「CentOS 7.0 - サーバ監視ツール Munin 導入」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 EPEL リポジトリ導入済み。（CentOS 7.0 - リポジトリ追加） 閲覧に使用する Web(HTTP) サーバは Nginx を想定。 ローカルネットワークは “192.168.11.0/24” を想定。 1. munin マスタ・ノードのインストール ベースリポジトリには存在しないので、EPEL リポジトリからインストールされる。 # yum -y install munin 2. 設定ファイル編集 File: /etc/munin/munin.conf 1...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","munin"],
        "url": "/2014/09/08/centos-7-0-installation-of-munin/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - サーバ監視ツール Munin でハードディスク温度監視！",
        "excerpt":"「CentOS 7.0 - サーバ監視ツール Munin でハードディスク温度監視」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 閲覧に使用する Web(HTTP) サーバは Nginx を想定。 ハードディスク温度取得には smartctl を使用する。インストール済みであること。 （hddtemp コマンドインストールして監視する方法もある） 1. munin-node 設定ファイル編集 File: /etc/munin/plugin-conf.d/hddtemp_smartctl 1 2 3 4 5 [hddtemp_smartctl] user root env.drives sda # &lt;= 追加（\"sda\"...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","munin"],
        "url": "/2014/09/09/centos-7-0-setting-of-munin-hddtemp/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - サーバ監視ツール Munin でCPU温度・電圧・ファン回転数測定！",
        "excerpt":"「CentOS 7.0 - サーバ監視ツール Munin でCPU温度・電圧・ファン回転数測定」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 閲覧に使用する Web(HTTP) サーバは Nginx を想定。 1. lm_sensors インストール ハードウェア状況を取得するのに必要な lm_sensors をインストールして、ハードウェアを検出する。 # yum -y install lm_sensors 2. lm_sensors でハードウェア検出 lm_sensors インストール後は、ハードを検出する。途中の質問は全てデフォルト応答でよい。 （当然ながら、仮想マシンの場合は正常にハードが検出されないのでご注意を！） # sensors-detect 3. lm_sensors 動作確認 実際にハードウェアの状況が取得できるか確認してみる。（以下は運用中のマシンの例）...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","munin"],
        "url": "/2014/09/10/centos-7-0-setting-of-munin-cpu-volt-fan/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - サーバ監視ツール Munin で MariaDB(MySQL) を監視！",
        "excerpt":"「CentOS 7.0 - サーバ監視ツール Munin で MariaDB(MySQL) を監視」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 閲覧に使用する Web(HTTP) サーバは Nginx を想定。 MySQL 用プラグインはデフォルトで用意されているものを使用する。 1. munin-node 設定ファイル編集 File: /etc/munin/plugin-conf.d/munin-node 1 2 3 [mysql*] env.mysqlopts -u root -p＜root のパスワード＞ env.mysqladmin /usr/bin/mysqladmin 2. シンボリックリング設定 あらかじめデフォルトで用意されているプラグインの中から、使用したいものにシンボリックリンクを設定する。...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","munin"],
        "url": "/2014/09/11/centos-7-0-setting-of-munin-mariadb-mysql/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - サーバ監視ツール Munin で Nginx を監視！",
        "excerpt":"「CentOS 7.0 - サーバ監視ツール Munin で Nginx を監視」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 閲覧に使用する Web(HTTP) サーバも Nginx を想定。 Nginx 用プラグインはデフォルトで用意されているものを使用する。 1. Nginx 設定ファイル編集 Nginx 設定ファイルの “server” ディレクティブ内に以下を追加する。 File: /usr/local/nginx/conf/nginx.conf 1 2 3 4 5 6 7 8 9 10...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","munin"],
        "url": "/2014/09/12/centos-7-0-setting-of-munin-nginx/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - Web サーバ Nginx で SSL 接続！",
        "excerpt":"「CentOS 7.0 - Web サーバ Nginx で SSL 接続」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 Web(HTTP)サーバ Nginx が「CentOS 7.0 - Web サーバ Nginx 構築（ソースインストール）！」の方法で導入済みであることを想定。 1. SSL 証明書作成 SSL 証明書を以下のようにして作成する。 # cd /etc/pki/tls/certs # sed -i 's/365/3650/g' Makefile # make server.crt...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Nginx"],
        "url": "/2014/09/13/centos-7-0-setting-of-nginx-ssl-connection/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - PHP インストール（ソースビルド）！",
        "excerpt":"「CentOS 7.0 - PHP インストール（ソースビルド）」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 Web サーバ Nginx, DB サーバ MariaDB(MySQL) と連携することを想定。 DB サーバ MariaDB がインストール済みである。 RPMforge リポジトリ導入済み。（CentOS 7.0 - リポジトリ追加） 「CentOS 7.0 - Web サーバ Nginx 構築（ソースインストール）！」のとおり Nginx のインストールを行なっている。 PHP 5.5.15（当記事執筆時点で最新）をインストールする。 1. 事前準備...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","PHP"],
        "url": "/2014/09/14/centos-7-0-installation-of-php-by-src/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - PHP と Nginx の連携！",
        "excerpt":"「CentOS 7.0 - PHP と Nginx の連携」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 「CentOS 7.0 - Web サーバ Nginx 構築（ソースインストール）！」のとおり Nginx のインストールを行なっている。 「CentOS 7.0 - PHP インストール（ソースビルド）！ 」のとおり PHP のインストールを行なっている。 1. PHP-FPM 設定ファイル作成 デフォルトの設定ファイルを複製する # cd /usr/local/php-5.5.15/etc/ # cp php-fpm.conf.default...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Nginx","PHP"],
        "url": "/2014/09/15/centos-7-0-setting-of-cooperation-nginx-php/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - ユーザ管理ツール Usermin 導入！",
        "excerpt":"「CentOS 7.0 - ユーザ管理ツール Usermin 導入」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 メールサーバ構築済みであること。 Web サーバは Apache ではなく Nginx を想定。 Usermin 1.600 をインストールする。 RPMforge, EPEL リポジトリ導入済み。（CentOS 7.0 - リポジトリ追加） 主に「CentOSで自宅サーバー構築」を参照。 1. Perl - Net::SSLeay, Authen::PAM モジュールインストール ベースリポジトリ存在しなければ別のリポジトリからインストールされる。 # yum -y install...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/09/16/centos-7-0-installation-of-usermin/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - Usermin で Vacation 設定！",
        "excerpt":"「CentOS 7.0 - Usermin で Vacation 設定」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 メールサーバ構築済みであること。 Web サーバは Apache ではなく Nginx を想定。 Vacation 導入済み。 Usermin 導入済み。 主に「CentOSで自宅サーバー構築」を参照。 1. Usermin::Vacation アーカイブダウンロード # wget http://jaist.dl.sourceforge.net/sourceforge/userminvacation/usermin_vacation-0.9.tar.gz # tar zxvf usermin_vacation-0.9.tar.gz 2. Usermin::Vacation ディレクトリコピー 展開した Usermin::Vacation...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/09/17/centos-7-0-setting-of-vacation-on-usermin/",
        "teaser": null
      },{
        "title": "CentOS 7.0 - Webmail システム RoundCube Webmail 導入！",
        "excerpt":"「CentOS 7.0 - Webmail システム RoundCube Webmail 導入」についての記録です。 （旧バージョンでの作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 CentOS 7.0-1406(x86_64) を NetInstall で最小限インストールしている。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17 を想定。 メールサーバ構築済みであること。 Web サーバは Apache ではなく Nginx を想定。 PHP インスール済みであること。（CentOS 7.0 - PHP インストール（ソースビルド）） PHP と Nginx の連携が設定済みであること。（CentOS 7.0 - PHP と Nginx の連携） RoundCube Webmail は当記事執筆時点で最新の...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Postfix","Dovecot","PHP","Nginx"],
        "url": "/2014/09/18/centos-7-0-installation-of-roundcube-mail/",
        "teaser": null
      },{
        "title": "C++ - Boost で正規表現マッチング！",
        "excerpt":"C++ で Boost(Regex) ライブラリを利用して正規表現マッチングを行う方法についての記録です。 C++ 4.9 以降であれば標準ライブラリで用意されていますが、今回は 4.8.2 の環境を想定しているので Boost を使用します。 （C++ にそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17 での作業を想定。 g++(c++) のバージョンは 4.8.2 boost-regex-dev パッケージ導入済み。（apt-get 等で） 1. C++ ソースコード作成 以下のようにソースコードを作成した。 File: BoostRegex.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19...","categories": ["プログラミング"],
        "tags": ["C言語","正規表現"],
        "url": "/2014/09/20/cpp-regex-matching-by-boost/",
        "teaser": null
      },{
        "title": "C++ - Boost で正規表現マッチング（Iterator 版）！",
        "excerpt":"前回 C++ で Boost(Regex) ライブラリを利用して正規表現マッチングを行う方法について紹介しました。 C++ - Boost で正規表現マッチング！ 今回はイテレータを使用したバージョンについての記録です。 （C++ にそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17 での作業を想定。 g++(c++) のバージョンは 4.8.2 boost-regex-dev パッケージ導入済み。（apt-get 等で） 1. C++ ソースコード作成 以下のようにソースコードを作成した。 File: BoostRegexI.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20...","categories": ["プログラミング"],
        "tags": ["C言語","正規表現"],
        "url": "/2014/09/21/cpp-regex-matching-using-iterator-by-boost/",
        "teaser": null
      },{
        "title": "C++ - Boost で正規表現置換！",
        "excerpt":"前回、前々回 C++ で Boost(Regex) ライブラリを利用して正規表現マッチングを行う方法について紹介しました。 C++ - Boost で正規表現マッチング！ C++ - Boost で正規表現マッチング（Iterator 版）！ 今回は正規表現でマッチした部分を置換する方法についてのの記録です。 （C++ にそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17 での作業を想定。 g++(c++) のバージョンは 4.8.2 boost-regex-dev パッケージ導入済み。（apt-get 等で） 1. C++ ソースコード作成 以下のようにソースコードを作成した。 File: BoostRegexI.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング"],
        "tags": ["C言語","正規表現"],
        "url": "/2014/09/22/cpp-regex-replacement-by-boost/",
        "teaser": null
      },{
        "title": "GIS - GMT インストール！",
        "excerpt":"高機能の地図・グラフ作成，データ処理ツール GMT（The Generic Mapping Tools）の導入についての記録です。 （GIS, GMT について精通している訳でもありません。乱文ご容赦ください） 0. 前提条件 Linux Mint 17 での作業を想定。 今回は APT でインストールする。（ソースをビルドしてインストールすることも可能） 1. GMT インストール GMT 本体と海岸線データ（低解像度）をインストールする。（高解像度データ等は別途用意する必要がある） $ sudo apt-get install gmt gmt-coast-low 2. パスの設定 インストール後デフォルトではパスが通っていないので Bash 設定ファイルで設定する。（以下は Bash で “.profile” に設定する場合。 “.bash_profile”, “.bashrc” でもよいだろう） File: ~/.profile 1 2 export PATH=/usr/lib/gmt/bin:$PATH export GMTHOME=/usr/lib/gmt そして、即時反映。（ログインし直してもよい） $...","categories": ["PC_Tips"],
        "tags": ["GIS"],
        "url": "/2014/09/24/gis-installation-of-gmt/",
        "teaser": null
      },{
        "title": "C++ - MariaDB(MySQL) への接続！",
        "excerpt":"C++ から MariaDB(MySQL) へ接続する方法についての記録です。 （C++ にそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17 での作業を想定。 libmysqlclient-dev パッケージを使用するのでインストール済みであること。 g++(c++) のバージョンは 4.8.2 MySQL 5.6.19 へ接続することを想定。（MariaDB も同様） MySQL サーバのポートはデフォルトの 3306 を想定。 1. C++ ソースコード作成 以下のようにソースコードを作成してみた。（最低限これだけ知っていれば大丈夫であろうという基本的なコーディング） 他に知りたいことがあれば後述の参考サイト等で調べてみればよい。 （ちなみに、以下のソースコードでは “mysql” スキーマに存在するテーブル名を取得している） File: Mysql.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング"],
        "tags": ["C言語","MariaDB","MySQL"],
        "url": "/2014/09/26/cpp-connecting-to-mysql/",
        "teaser": null
      },{
        "title": "C++ - twitcurl でツイート！",
        "excerpt":"C++ で twitcurl ライブラリを使用して Twitter へポストする方法についての記録です。 （C++ にそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17 での作業を想定。 g++(c++) のバージョンは 4.8.2 Twitter の Consumer Key, Secret, OAuth Access Token, Secret が取得済みであることを想定。 Twitter の Consumer Key, Secret, OAuth Access Token, Secret が未取得の場合の処理やツイート以外の処理を実装することも可能だが、今回はツイートに限定した処理にしている。詳細は参考サイトのコーディング例を参照のこと。 1. 必要パッケージインストール twitcurl ライブラリのインストールに必要なパッケージが未インストールならインストールする。 $ sudo apt-get install g++ subversion さらに libcurl4-dev パッケージも必要だが、これは...","categories": ["プログラミング","SNS"],
        "tags": ["C言語","Twitter"],
        "url": "/2014/09/28/cpp-tweet-by-twitcurl/",
        "teaser": null
      },{
        "title": "GCC - 最新版をソースビルドでインストール(on Linux Mint)！",
        "excerpt":"パッケージでインストールされる GCC(GNU Compiler Collection) はバージョンが若干古く、新しいバージョンで搭載された機能を試す（使用する）ことができません。 （例えば、旧バージョンでは boost ライブラリを使用しなければならなかった “regex” が標準で使用できるようになっている、等） そこで、最新バージョンをソースをビルドしてインストールしてみました。（Linux Mint 17 64bit へ） 0. 前提条件 Linux Mint 17 での作業を想定しているが Debian 系はどれも同様と思われる。 パッケージ版 GCC インストール済み。（バージョンは 4.8.2 を想定） 新たにインストールする GCC は 4.9.1 を想定。（当記事執筆時点で最新バージョン） インストール先は “/usr/local/gcc-4.9.1” を想定。 コンパイルできるようにする言語は C, C++, Objective-C, Fortran とする。 インストール済みのパッケージ版 GCC は他のパッケージ管理等で影響が出ると面倒なのでアンインストールしない。 念の為、インストール済みパッケージをアップデートしておく。 1. アーカイブダウンロード ミラーサイト一覧「GCC mirror...","categories": ["プログラミング"],
        "tags": ["GCC","C言語","Fortran","ObjectiveC","LinuxMint"],
        "url": "/2014/09/30/installation-newest-gcc-by-src-on-linux-mint/",
        "teaser": null
      },{
        "title": "2014年9月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"10月になりましたので、先月9月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 28,646 70.6297 Mac OS 7,171 17.6809 Linux 2,358 5.8139 Ubuntu Linux 1,692 4.1718 Android 529 1.3043 unknown 101 0.2490 FreeBSD 23 0.0567 RedHat Linux 15 0.0370 Solaris 10 0.0247 Fedora Linux 6 0.0148 Debian GNU/Linux 3 0.0074 Wii 2 0.0049 Linux Mint 1...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/10/01/blog-access/",
        "teaser": null
      },{
        "title": "GCC - 最新版をソースビルドでインストール(on CentOS)！",
        "excerpt":"こんばんは。 パッケージでインストールされる GCC(GNU Compiler Collection) はバージョンが若干古く、新しいバージョンで搭載された機能を試す（使用する）ことができません。 （例えば、旧バージョンでは boost ライブラリを使用しなければならなかった “regex” が標準で使用できるようになっている、等） そこで、最新バージョンをソースをビルドしてインストールしてみました。（今回は CentOS 7.0(x86_64) へ） 0. 前提条件 CentOS 7.0(x86_64) サーバでの作業を想定しているが、 RedHat 系は同様と思われる。 パッケージ版 GCC インストール済み。（バージョンは 4.8.2 を想定） 新たにインストールする GCC は 4.9.1 を想定。（当記事執筆時点で最新バージョン） インストール先は “/usr/local/gcc-4.9.1” を想定。 コンパイルできるようにする言語は C, C++, Fortran とする。 （Linux Mint 環境ではこれらに加えて Objective-C もインストールしたが、当方サーバ環境では Objective-C を使用することもないし、 GNUstep Base の関連の導入が面倒であったので...","categories": ["プログラミング"],
        "tags": ["GCC","C言語","Fortran","CentOS"],
        "url": "/2014/10/02/installation-newest-gcc-by-src-on-centos/",
        "teaser": null
      },{
        "title": "C++ - UTF-8 文字列の文字数をカウント！",
        "excerpt":"C++ で UTF-8 の文字列の文字数をカウントする方法についての記録です。 （C++ にそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17 での作業を想定。 g++(c++) のバージョンは 4.8.2 1. UTF-8 について UTF-8 について詳細に説明はしないが、UTF-8 の仕様では１バイト目の先頭からの連続するビット数(1 となっているビットの連続数）で１文字のバイト数が決まるということを理解しておく。 さらに、このことから以下のように定義されていることも理解しておく。（参照・ RFC 3629 ） １バイト目： 0x00 〜 0x7f → 1 バイト １バイト目： 0xc2 〜 0xdf → 2 バイト １バイト目： 0xe0 〜 0xef → 3 バイト １バイト目： 0xf0 〜...","categories": ["プログラミング"],
        "tags": ["C言語"],
        "url": "/2014/10/04/cpp-count-strings-of-utf8/",
        "teaser": null
      },{
        "title": "C++ - UTF-8 文字列から部分文字列を抽出！",
        "excerpt":"C++ で UTF-8 の文字列から部分文字列を抽出する方法についての記録です。 前回の「C++ - UTF-8 文字列の文字数をカウント！」の応用です。 （C++ にそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17 での作業を想定。 g++(c++) のバージョンは 4.8.2 1. UTF-8 について UTF-8 について詳細に説明はしないが、UTF-8 の仕様では１バイト目の先頭からの連続するビット数(1 となっているビットの連続数）で１文字のバイト数が決まるということを理解しておく。 さらに、このことから以下のように定義されていることも理解しておく。（参照・ RFC 3629 ） １バイト目： 0x00 〜 0x7f → 1 バイト １バイト目： 0xc2 〜 0xdf → 2 バイト １バイト目： 0xe0 〜 0xef → 3...","categories": ["プログラミング"],
        "tags": ["C言語"],
        "url": "/2014/10/05/cpp-get-substring-of-utf8/",
        "teaser": null
      },{
        "title": "Ruby + GIS - Shapefile 読み込み！",
        "excerpt":"事実上の地図情報の業界標準フォーマット Shapefile を Ruby で読み込む方法についての記録です。 Shapefile についての詳細な説明はしませんが、広義の Shapefile は shp 拡張子の「形状規格」ファイル（狭義の Shapefile） shx 拡張子の「形状インデックス規格」ファイル dbf 拡張子の「属性規格」の3つのファイル で構成されるファイルのことで地図情報システム間で情報をやりとりするためのファイルです。必要に応じてこれら3つ以外のオプションファイルを含めることもあります。 以下は、広義の Shapefile 読み込みについての記録であり、実際に取得するのは dbf ファイル（属性規格）内の情報です。 0. 前提条件 Linux Mint 17 での作業を想定。 Ruby 2.1.2-p95 での作業を想定。 読み込みに使用する Shapefile は、国土交通省・国土数値情報・行政区域データのうち島根県分 “N03-140401_32_GML”。 georuby という RubyGem パッケージを使用する。（GeoRuby ではない） 1. RubyGems パッケージのインストール Ruby で Shapefile を読み込むための RubyGem パッケージ georuby(GeoRuby...","categories": ["プログラミング"],
        "tags": ["Ruby","GIS"],
        "url": "/2014/10/07/ruby-read-shapefile-with-georuby/",
        "teaser": null
      },{
        "title": "R - コロプレスマップ（都道府県別人口密度）！",
        "excerpt":"統計解析プログラム言語 R でコロプレスマップ（階級区分図、区画別段彩図とも呼ばれる）を描画してみました。 例として、日本の都道府県別人口密度のデータを使用して地図を塗り分けてみました。 （R について精通している訳でもありません。乱文ご容赦下さい） 0. 前提条件 R 3.1.1 での作業を想定。 地図情報は「国土地理院・地球地図日本」を使用。 （参照「QGIS(Quantum GIS) - 国土地理院・地球地図日本を表示！」） データは「総務省統計局・平成22年国勢調査」の都道府県別人口密度の部分を使用。 1. CSV データの準備 「政府統計の総合窓口 GL01010101(http://www.e-stat.go.jp/SG1/estat/eStatTopPortal.do “”)」のサイトの中から「主要な統計から探す」-「国勢調査」とたどるなどして「平成22年国勢調査」のデータ（表計算ファイル）を取得し、表計算ソフト等で「都道府県名」と「人口密度」のデータのみを CSV 形式にしておく。 実際には以下のような内容（ファイル名： “population_density_pref.csv”）で、カラム名は “PREF_NAME”, “VALUE” としている。（都道府県名でマッチングすることを考慮している） File: \"population_density_pref.csv\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 PREF_NAME,VALUE 北海道,70.2 青森県,142.4...","categories": ["PC_Tips"],
        "tags": ["R","GIS","地図"],
        "url": "/2014/10/09/r-choropleth-map-of-population-density/",
        "teaser": null
      },{
        "title": "GIS - 国土数値情報データの市区町村をチェック！",
        "excerpt":"国土交通省の「国土数値情報ダウンロードサービス」からダウンロードした「行政区域」データ(Shapefile)に含まれる「市区町村」をチェックしてみました。 実際には、「地方公共団体情報システム機構」に登録されている市区町村と比較して、過不足の有無を確認しました。 今回このようなチェック作業を行った理由は、市区町村別の地図情報を扱いたい場合に実在する市区町村と１対１に対応していいないと不都合になるケースが出てくるからです。 以下、簡単な作業記録です。 0. 前提条件 当記事で出現する「市」とは「政令指定都市」以外の市のこと。「政令指定都市」は「区」を使用。 国土数値情報の市区町村の状態を確認した結果を紹介するだけで、具体的なチェック方法は説明しない。 チェックは「市区町村コード」で行う。 1. 地図データ（Shapefile）の準備 今回は、国土交通省の国土数値情報ダウンロードサービス」からダウンロードした「平成26年4月1日」作成の全都道府県分の「行政区域」データを使用する。（Shapefile の使用方法等については、当ブログ過去記事等をご参照ください） ただ、ダウンロードしたままの Shapefile ではポリゴンが地物単位になっていて市区町村が一意なものになっていないので、あらかじめ市区町村単位で「地物融合」しておく。 （参照「QGIS(QuantumGIS) - 国土数値情報・ポリゴンの融合！」） さらに、扱いやすいように全都道府県分を１つに結合しておく。 （参照「GDAL/OGR - 国土数値情報の複数 Shapefile を結合！） 今回実際に使用したデータは「市町村コード（N03_007）」と「市町村名（N03_004）」のみ。 2. 市区町村データの準備 比較用データとして、「地方公共団体情報システム機構」に登録されている市区町村のデータを取得して CSV ファイルに保存しておく。 今回実際に使用したデータは「市町村コード（チェックデジット除く）」と「市町村名」のみ。 3. 比較チェック Shapefile を読み込んで CSV データと比較してみる。 詳細は紹介しないが、実際には Ruby で Shapefile, CSV データを読み込んで比較チェックした。 4. 結果 以下のような結果となった。 * 国土数値情報・行政区域データに存在する市区町村数 ===&gt;...","categories": ["PC_Tips"],
        "tags": ["GIS","地図"],
        "url": "/2014/10/11/gis-check-ksj-shapefile/",
        "teaser": null
      },{
        "title": "GIS - 国土数値情報データの市区町村をチェック（その２）！",
        "excerpt":"前回は、国土交通省の「国土数値情報ダウンロードサービス」からダウンロードした「行政区域」データ(Shapefile)に含まれる「市区町村」と、「地方公共団体情報システム機構」に登録されている市区町村と比較して、過不足の有無を確認しました。 GIS - 国土数値情報データの市区町村をチェック！ 今回は、国土交通省の「国土数値情報ダウンロードサービス」からダウンロードした「行政区域」データ(Shapefile)に含まれる「市区町村」と、気象庁が地震の最大震度を発表する際に使用する市区町村と比較して、過不足の有無を確認しました。 以下、簡単な作業記録です。 0. 前提条件 当記事で出現する「市」とは「政令指定都市」以外の市のこと。「政令指定都市」は「区」を使用。 国土数値情報の市区町村の状態を確認した結果を紹介するだけで、具体的なチェック方法は説明しない。 チェックは「市区町村コード」で行う。 1. 地図データ（Shapefile）の準備 今回も、国土交通省の国土数値情報ダウンロードサービス」からダウンロードした「平成26年4月1日」作成の全都道府県分の「行政区域」データを使用する。（Shapefile の使用方法等については、当ブログ過去記事等をご参照ください） ただ、ダウンロードしたままの Shapefile ではポリゴンが地物単位になっていて市区町村が一意なものになっていないので、あらかじめ市区町村単位で「地物融合」しておく。 （参照「QGIS(QuantumGIS) - 国土数値情報・ポリゴンの融合！」） さらに、扱いやすいように全都道府県分を１つに結合しておく。 （参照「GDAL/OGR - 国土数値情報の複数 Shapefile を結合！） 今回実際に使用したデータは「市町村コード（N03_007）」と「市町村名（N03_004）」のみ。 2. 市区町村データの準備 比較用データとして、「気象庁防災情報XMLフォーマット」（要環境整備＆ユーザ登録）で提供されているマスタデータを加工して CSV ファイルに保存しておく。 今回実際に使用したデータは「市町村コード（チェックデジット除いた５桁）」と「市町村名」のみ。 3. 比較チェック Shapefile を読み込んで CSV データと比較してみる。 詳細は紹介しないが、実際には Ruby で Shapefile, CSV データを読み込んで比較チェックした。 4. 結果 以下のような結果となった。 *...","categories": ["PC_Tips"],
        "tags": ["GIS","地図"],
        "url": "/2014/10/12/gis-check-ksj-shapefile-jmx/",
        "teaser": null
      },{
        "title": "C++ - yaml-cpp で YAML をパース！",
        "excerpt":"C++ で YAML ファイルの内容を解析する方法についての記録です。 （YAML の詳細についてはここでは説明しませんが、簡単に言えばテキストの設定ファイルだと思っていればよい） （C++ にそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17(64bit) での作業を想定。（CentOS 等でも同様） yaml-cpp はソースをビルドしてインストールする。 ビルドに必要な cmake がインストール済みであること。 libboost-dev がインストール済みであること。（CentOS なら boost-devel） 1. アーカイブ取得＆展開 $ wget https://yaml-cpp.googlecode.com/files/yaml-cpp-0.5.1.tar.gz $ tar zxvf yaml-cpp-0.5.1.tar.gz 2. ビルド ビルド用ディレクトリを作成して作業。 $ cd yaml-cpp-0.5.1 $ mkdir build $ cd build $ cmake .. $ make...","categories": ["プログラミング"],
        "tags": ["C言語"],
        "url": "/2014/10/14/cpp-installation-yaml-cpp/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - インストール！",
        "excerpt":"「FreeBSD 10.0 - インストール」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 FreeBSD 10.0(x86_64 版) をインストールする。（サーバ用途） IPv4 を使用する。（IPv6 は使用しない） 固定 IP を使用する。（DHCP は使用しない） インストールマシンの IP アドレス/サブネットマスクは 192.168.11.102/255.255.255.0 を想定。 ネットワーク内のルータの IP アドレスは 192.168.11.1 を想定。 1. マシン起動 ディスクをセットするか、仮想マシンなら ISO イメージを指定して起動する。 2. インストール作業開始 “Install” を選択。 3. キーボード設定 “Japanese 106” を選択。（環境により適宜設定） そして、入力テストを行う。 4. ホスト名設定 当マシンのホスト名を設定。 5. インストールコンポーネントの設定 “lib32”, “ports”...","categories": ["サーバ構築"],
        "tags": ["FreeBSD"],
        "url": "/2014/10/16/freebsd-10-0-installation/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - 初期設定！",
        "excerpt":"「FreeBSD 10.0 - 初期設定」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 インストール作業時に SSH サーバをインストールを行っている。 インストール作業に一般ユーザを作成している。(wheel グループ設定もしている） 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 主にFreeBSDサーバー構築マニュアルを参照。 1. プロンプト表示変更 File: ~/.cshrc 1 2 #set prompt = \"%N@%m:%~ %# \" set prompt = \"[%n@%m %c]# \"...","categories": ["サーバ構築"],
        "tags": ["FreeBSD"],
        "url": "/2014/10/17/freebsd-10-0-initial-setting/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - UTF-8 化！",
        "excerpt":"「FreeBSD 10.0 - UTF-8 化」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 インストール作業時に SSH サーバをインストールを行っている。 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 主にFreeBSDサーバー構築マニュアルを参照。 1. 設定ファイル編集 設定ファイルを編集する。 File: /etc/login.conf 1 2 3 4 5 6 7 8 #russian|Russian Users Accounts:\\ japanese|Japanese Users Accounts:\\...","categories": ["サーバ構築"],
        "tags": ["FreeBSD"],
        "url": "/2014/10/18/freebsd-10-0-setting-of-utf8/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - SSH 公開鍵認証！",
        "excerpt":"「FreeBSD 10.0 - SSH 公開鍵認証」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 インストール作業時に SSH サーバをインストールを行っている。 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 リモート操作は既存の端末で行う（当然、端末ソフトを使用してもよい） SSH サーバのポートはセキュリティ上デフォルトの 22 から変更していることを想定。 主にFreeBSDサーバー構築マニュアルを参照。 1. 鍵ペア（公開・秘密）の生成 クライアント側で以下のコマンドで公開鍵・秘密鍵を生成する。 作成先・ファイル名を指定しなければ、/home/(ユーザ名)/.ssh/ に id_rsa, id_rsa.pub が作成される。 途中、鍵用のパスワードも入力する。（以下ではファイル名を “id_rsa_vbox_freebsd” としている） $ ssh-keygen Generating...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","SSH"],
        "url": "/2014/10/19/freebsd-10-0-setting-ssh-pubkey-authentication/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - ログローテーション logrotate インストール！",
        "excerpt":"「FreeBSD 10.0 - ログローテーション logrotate インストール」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 主にFreeBSDサーバー構築マニュアルを参照。 1. logrotate インストール # cd /usr/ports/sysutils/logrotate # make BATCH=yes install clean # cd 2. logrotate 設定ファイル編集 まず、サンプルの設定ファイルから複製。 # cp /usr/local/etc/logrotate.conf.sample /usr/local/etc/logrotate.conf...","categories": ["サーバ構築"],
        "tags": ["FreeBSD"],
        "url": "/2014/10/20/freebsd-10-0-installation-of-logrotate/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - DNS サーバ BIND9 インストール！",
        "excerpt":"「FreeBSD 10.0 - DNS サーバ BIND9 インストール」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 インストールする BIND は 9.9 系。 固定 IP 環境を想定。（グローバル IP は “aaa.bbb.ccc.ddd” を想定） ルータ経由の接続を想定。（ルータの LAN 側 IP は “192.168.11.1” を想定） ローカルネットワークは “192.168.11.0/24”...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","DNS"],
        "url": "/2014/10/21/freebsd-10-0-installation-of-bind/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - ファイアウォール IP Filter 設定！",
        "excerpt":"「FreeBSD 10.0 - ファイアウォール IP Filter 設定」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 マシンのローカル IP アドレスは 192.168.11.102, ネットマスクは 255.255.255.0 を想定。 参考までに、FreeBSD には IP Filter ipf の他に IP Firewall ipfw 等のファイウォール（パケットフィルタリング）もある。 主にFreeBSDサーバー構築マニュアルを参照。 1. ipl モジュールのロード...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","ファイアウォール"],
        "url": "/2014/10/22/freebsd-10-0-setting-of-ip-filter/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - 暗号化通信 OpenSSL 設定！",
        "excerpt":"「FreeBSD 10.0 - 暗号化通信 OpenSSL 設定」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 ここでは秘密鍵の作成を行う。（証明書の作成は必要になった時にその都度行う） 主にFreeBSDサーバー構築マニュアルを参照。 1. 秘密鍵作成 # cd /etc/ssl # openssl genrsa -des3 -out server.key 2048 [root@vbox ssl]# openssl genrsa -des3 -out server.key 2048...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","SSL"],
        "url": "/2014/10/23/freebsd-10-0-setting-of-openssl/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - ポートスキャン遮断 PortSentry インストール！",
        "excerpt":"「FreeBSD 10.0 - ポートスキャン遮断 PortSentry インストール」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 主にFreeBSDサーバー構築マニュアルを参照。 1. PortSentry インストール # cd /usr/ports/security/portsentry # make BATCH=yes install clean # cd 2. PortSentry 設定 # cp /usr/local/etc/portsentry.conf.default /usr/local/etc/portsentry.conf #...","categories": ["サーバ構築"],
        "tags": ["FreeBSD"],
        "url": "/2014/10/24/freebsd-10-0-installation-of-portsentry/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - アンチウイルス Clam Antivirus インストール！",
        "excerpt":"「FreeBSD 10.0 - アンチウイルス Clam Antivirus インストール」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 ログローテションをするので logrotate がインストール済みであること。 主にFreeBSDサーバー構築マニュアルを参照。 1. Clam Antivirus インストール # cd /usr/ports/security/clamav # make BATCH=yes install clean # rehash # cd 2....","categories": ["サーバ構築"],
        "tags": ["FreeBSD","ウイルス対策"],
        "url": "/2014/10/25/freebsd-10-0-installation-of-clamav/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - NTP サーバ ntpd 設定！",
        "excerpt":"「FreeBSD 10.0 - NTP サーバ 設定」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 主にFreeBSDサーバー構築マニュアルを参照。 1. 設定ファイル編集 念の為、オリジナルの設定ファイルを退避。 # cp /etc/ntp.conf /etc/ntp.conf.org そして、編集。 File: /etc/ntp.conf 1 2 3 4 5 6 7 #server 0.freebsd.pool.ntp.org iburst #...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","NTP"],
        "url": "/2014/10/26/freebsd-10-0-setting-of-ntpd/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - FTP サーバ vsftpd インストール！",
        "excerpt":"「FreeBSD 10.0 - FTP サーバ vsftpd インストール」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 ログローテションをするので logrotate がインストール済みであること。 SSL 証明書を使用するので OpenSSL がインストール・設定済みであること。 外部へ公開するなら BIND がインストール・設定済みであること。 FTP の PASV モードで使用するポートは 4000〜4009/TCP を想定。 主にFreeBSDサーバー構築マニュアルを参照。 1. SSL 証明書作成 #...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","FTP"],
        "url": "/2014/10/27/freebsd-10-0-installation-of-vsftpd/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - DB サーバ MariaDB インストール！",
        "excerpt":"「FreeBSD 10.0 - DB サーバ MariaDB インストール」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 サーバマシンのメモリ容量は 1GB を想定。 データディレクトリは “/home/mariadb” とする。 MariaDB とは言っても内部では随所に MySQL の単語は出現することを意識しておく。 主にFreeBSDサーバー構築マニュアルを参照。 1. pkgtools.conf編集 make 実行時に常時設定するパラメータを設定しておく。 File: /usr/local/etc/pkgtools.conf 1 2 3 MAKE_ARGS...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","MariaDB"],
        "url": "/2014/10/28/freebsd-10-0-installation-of-mariadb/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - 送信メールサーバ Postfix インストール！",
        "excerpt":"「FreeBSD 10.0 - 送信メールサーバ Postfix インストール」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 ドメインは “mk-mode.com” を想定。 主にFreeBSDサーバー構築マニュアルを参照。 1. Procmail インストール メール振り分けに Procmail を使用するのでインストール。 # cd /usr/ports/mail/procmail # make BATCH=yes install clean # cd 2, pkgtools.conf...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","Postfix"],
        "url": "/2014/10/29/freebsd-10-0-installation-of-postfix/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - 受信メールサーバ Dovecot インストール！",
        "excerpt":"「FreeBSD 10.0 - 受信メールサーバ Dovecot インストール」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 ドメインは “mk-mode.com” を想定。 ログローテションをするので logrotate がインストール済みであること。 主にFreeBSDサーバー構築マニュアルを参照。 1. Dovecot インストール # cd /usr/ports/mail/dovecot # make BATCH=yes install clean # cd 2. dovecot.conf...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","Dovecot"],
        "url": "/2014/10/30/freebsd-10-0-installation-of-dovecot/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - HTTP & リバースプロキシサーバ Nginx インストール！",
        "excerpt":"「FreeBSD 10.0 - HTTP &amp; リバースプロキシサーバ Nginx インストール」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 HTTP サーバに Apache は使用しない。 1. Nginx インストール # cd /usr/ports/www/nginx # make BATCH=yes install clean # cd 2. Nginx インストール確認...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","Nginx"],
        "url": "/2014/10/31/freebsd-10-0-installation-of-nginx/",
        "teaser": null
      },{
        "title": "2014年10月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"11月になりましたので、先月10月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 37,097 71.0807 Mac OS 9,194 17.6164 Linux 3,222 6.1736 Ubuntu Linux 1,705 3.2669 Android 704 1.3489 unknown 185 0.3545 FreeBSD 40 0.0766 Debian GNU/Linux 10 0.0192 Solaris 8 0.0153 PlayStation 6 0.0115 Fedora Linux 5 0.0096 RedHat Linux 5 0.0096 SuSE Linux 5...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/11/01/blog-access/",
        "teaser": null
      },{
        "title": "FreeBSD 10.0 - 最新 Ruby インストール（ソースビルド）！",
        "excerpt":"「FreeBSD 10.0 - 最新 Ruby インストール（ソースビルド）」についての記録です。 （旧バージョンでの個人の作業記録を更新しました。興味がなければスルーしてください） 0. 前提条件 以下の作業は、リモート接続して行う。（リモートから ssh vbox で接続） リモート端末は、 Linux Mint 17 マシンを想定しているが、 Unix 系 OS なら同じ。 設定ファイル等のテキストファイルの編集には vi コマンドを使用。 作業はリモート接続で一般ユーザから root になって行う。 デフォルトで Ruby がインストールされているが、アンインストールはしない。 1. アーカイブダウンロード # cd /usr/local/etc # fetch http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.3.tar.gz # tar zxvf ruby-2.1.3.tar.gz 2. Ruby インストール # cd ruby-2.1.3 #...","categories": ["サーバ構築"],
        "tags": ["FreeBSD","Ruby"],
        "url": "/2014/11/02/freebsd-10-0-installation-of-ruby-by-src/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で相関係数計算！",
        "excerpt":"2変量の間にどれくらいの相関があるのかを調べる指標の「相関係数」を Ruby で簡単に計算するように試してみました。 Array クラスを拡張する方法です。 それほど難しい数学的アルゴリズムでも、それほど難しいプログラミングロジックでもありませんが、少し頻繁に使用することになりそうなので試してみた次第です。 0. 前提条件 Ruby 2.1.3-p242 での作業を想定。 1. 相関係数について まず、簡単に相関係数の定義について。 （数式が多いので、別途 \\(\\LaTeX\\) で作成した文書を貼り付け） 2. Ruby スクリプト作成 以下のように Array クラスを拡張してメソッドを定義してみた。 （ちなみに、相関係数を表す数学的な略称を表す r をメソッド名にしている。別の意味に捉えられる可能性のある C や O ではなく R を使用するのが慣例となっているため） File: correlation_coefficient.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2014/11/04/ruby-correlation-coefficient/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰直線計算！",
        "excerpt":"２変量の「単回帰直線」の「切片」と「傾き」を Ruby で簡単に計算するように試してみました。 Array クラスを拡張する方法です。 それほど難しい数学的アルゴリズムでも、それほど難しいプログラミングロジックでもありませんが、少し頻繁に使用することになりそうなので試してみた次第です。 0. 前提条件 Ruby 2.1.3-p242 での作業を想定。 1. 単回帰直線について まず、簡単に単回帰直線について。 （数式が多いので、別途 \\(\\LaTeX\\) で作成した文書を貼り付け） 説明変数\\(x\\)が1次だったので「単回帰『直線』」と呼んでいたが、2次以上なら「単回帰『曲線』」と呼ぶことになる。 また、説明変数が2種類以上ある場合は「重回帰曲線」と呼ぶ。 さらに、回帰直線・曲線を求めたり、これらを使用して分析したりすることを「回帰分析」と呼ぶ。 2. Ruby スクリプト作成 以下のように Array クラスを拡張してメソッドを定義してみた。 File: regression_line.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2014/11/05/ruby-simple-linear-regression-line/",
        "teaser": null
      },{
        "title": "GCC - ccache でビルド高速化！",
        "excerpt":"ccache は、コンパイラ・キャッシュで前回のプリプロセスの結果を再利用して次回以降のコンパイル時間を大幅に短縮する。 よって、ビルド（コンパイル＋リンク）が大幅に高速化されます。 0. 前提条件 Linux Mint 17(64bit), CentOS 7.0(64bit) での作業を想定。 GCC(GNU Compiler Collection) 4.9.1 を想定。（別バージョンも同様のはず） 今回は使用しないが、make 時に make -j [並列実行数] で並列化することも可能であることも認識しておくとよいかも。 1. ccache インストール パッケージマネージャもしくは apt-get コマンド等でインストールするだけ。 （CentOS なら yum インストールできる（但し、ベースリポジトリには存在しないので “EPEL” リポジトリから）） $ sudo apt-get install ccache 2. ccache インストール確認 $ ccache --version ccache version 3.1.9 Copyright (C)...","categories": ["プログラミング"],
        "tags": ["GCC","C言語"],
        "url": "/2014/11/07/gcc-acceleration-of-build/",
        "teaser": null
      },{
        "title": "Linux - 大量ユーザの一括作成、パスワード一括変更！",
        "excerpt":"Linux で一般ユーザを追加作成する際 useradd, adduser コマンドを使用すると思いますが、一度に大量に作成したい場合に面倒に感じてしまいます。 一括作成の方法は様々なサイト等で紹介されていますが、その方法だけでは useradd, adduser で登録した場合と状態が異なります。 “/etc/skel” ディレクトリ配下がコピーされないのです。（以前は、パスワードの暗号(HASH)化方式も異なっていたが、現在は useradd, adduser で登録した場合も（下記の方法で）一括登録した場合も SHA-512 がデフォルトとなっているので相違（問題）はない） 以下、一括作成する方法についての記録です。（パスワード一括変更方法、暗号化方式の変更方法も） 0. 前提条件 Linux Mint 17(64bit), CentOS 7.0(64bit) での作業を想定。 以下では、ユーザ一括作成とディレクトリコピーを一度に行うようにしているが、好みに合わせて変更してください。 Linux でのユーザ管理についての基本的な知識がある。 1. 作成ユーザ一覧作成 一括作成するユーザの一覧をテキストファイルに作成する。 （ファイル名は任意。ここでは、”addusers.txt” としている） 書式は “/etc/passwd” と同じで ユーザー名:パスワード:ユーザID:グループID:フルネーム:ホームディレクトリ:ログインシェル である。 「ユーザID」と「グループID」は、省略すると自動で設定される。明示的に指定したければ入力する。（グループの作成方法はここでは省略） 空行を作らないこと。（特に、最終行に改行のみの行を作らない） File: addusers.txt 1 2 3 foo:foo_password::::/home/foo:/bin/bash bar:bar_password::::/home/bar:/bin/bash baz:baz_password::::/home/baz:/bin/bash 2. シェルスクリプト作成...","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2014/11/09/linux-adding-many-users/",
        "teaser": null
      },{
        "title": "Bash - Web サイト(HTML)差異チェックスクリプト！",
        "excerpt":"Web サイトの表示内容がいつもと変わっていないかチェックするための簡単な Bash スクリプトです。 何か事象が発生した場合のみ Web サイトの表示が変更されるような場合、変更されていないかを都度手動でチェックしていては骨が折れます。 スクリプトを作成して cron で定期的に起動させれば、後でまとめて確認もできます。 0. 前提条件 Linux Mint 17(64bit), CentOS 7.0(64bit) での作業を想定。 Bash のバージョンは、4.3.11(Linux Mint), 4.2.45(CentOS) を想定。 1. Bash スクリプト作成 以下のような簡単な Bash スクリプトを作成。 （１回目の起動で比較元になる HTML を取得、２回目以降保存 HTML との差異をチェック） File: check_html.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["サーバ構築"],
        "tags": ["Linux","bash","シェル"],
        "url": "/2014/11/11/bash-check-html-difference/",
        "teaser": null
      },{
        "title": "Vim - URL からブラウザオープン！",
        "excerpt":"高機能テキストエディタ Vim に入力した URL 文字列からブラウザを開く方法についての記録です。 Vim に入力した URL を都度ヤンク後ブラウザに貼り付けて開くのが面倒な場合に有用かと思います。 今回は “open-browser.vim” というプラグインを使用します。 0. 前提条件 Linux Mint 17(64bit) での作業を想定。 Vim 7.4(patch 1-273) での作業を想定。 NeoBundle プラグインがインストール済み。（参照「Vim - プラグイン管理を Vundle から NeoBundle へ移行！」） （Vundle 等のプラグインを使う方法や個別にインストールする方法はここでは説明しない。適宜ご対応ください） 1. vim 設定ファイル編集 NeoBundle を使用して open-browser.vim をインストールするので、 “.vimrc” に以下の記述を追加。 File: ~/.vimrc 1 NeoBundle 'open-browser.vim' 2. open-browser.vim インストール Vim...","categories": ["PC_Tips"],
        "tags": ["Vim"],
        "url": "/2014/11/13/vim-open-browser-plugin/",
        "teaser": null
      },{
        "title": "C++ - JSON データの解析(by picojson)！",
        "excerpt":"GNU C++ で JSON データを読み込んで解析する方法についての記録です。 ライブラリは定番の、そしてヘッダファイルの配置だけで済む “picojson” を使用します。（他に JSON-C や rapidjson 等もあるかと思いますが） 0. 前提条件 Linux Mint 17(64bit) での作業を想定。 1. picojson 準備 “kazuho/picojson - a header-file-only, JSON parser serializer in C++” から “picojson.h” をダウンロードし適切な場所へ配置する。（今回は作成する C++ ソースと同じディレクトリへ配置した） 2. JSON データ準備 テスト読み込み用の JSON データファイルを作成。（文字エンコード: UTF-8） （整数、小数、文字列（日本語含む）、真偽、配列のデータを盛り込んでいる） File: test.json 1 2 3 4 5...","categories": ["プログラミング"],
        "tags": ["C言語","JSON"],
        "url": "/2014/11/15/cpp-parse-json-by-picojson/",
        "teaser": null
      },{
        "title": "Ruby - 配列内で要素数が最多のものを求める！",
        "excerpt":"Ruby で、配列内で最も多い要素を求める方法の備忘録です。 ちょっとしたスクリプトだが、意外と便利で当方は使用する頻度も少なくないです。 0. 前提条件 Ruby 2.1.3-p242 での作業を想定。 色々とやり方はあると思うが、今回は２通りだけ紹介。 1. Ruby スクリプト・その１ ary = [5,3,3,4,1,3,3,4,5,2,3,5,4,1,3,3,4,5,2,3] ary.group_by { |e| e }.sort_by { |e, v| -v.size }.map(&amp;:first).first 上記のスクリプトを実際に実行してみると、 3 が返ってくるはずである。 やっていることは以下のとおりだが、実際に順を追って実行してみると分かり安いだろう。 group_by メソッドでグループ化 sort_by メソッドで要素数でソート map メソッドで要素の値を取得 first で１番目の値を取得 2. Ruby スクリプト・その２ ary = [5,3,3,4,1,3,3,4,5,2,3,5,4,1,3,3,4,5,2,3] ary.max_by { |v| ary.count(v) } 上記のスクリプトを実際に実行してみると、 3...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2014/11/17/ruby-select-most-item-from-array/",
        "teaser": null
      },{
        "title": "Scala - Linux Mint へインストール（アーカイブファイル使用）！",
        "excerpt":"パッケージを使用すれば Scala のインストールが容易ですが、若干バージョンが古いです。 そこで、最新のアーカイブファイルをダウンロードしてインストールしてみました。（当方は普段は Scala を使用しませんが、ベンチマーク比較用として環境を用意しておく必要がでてきたため） 0. 前提条件 Linux Mint 17(64bit) での作業を想定。 インストールする Scala は 2.11.2 （当記事執筆時点（数週間前）で最新）とする。 1. アーカイブファイル準備 “[Download - The Scala Programming Language](http://www.scala-lang.org/download/ “”)” から最新版のアーカイブファイルをダウンロード。（以下は wget コマンドでのダウンロード） $ wget http://downloads.typesafe.com/scala/2.11.2/scala-2.11.2.tgz 2. Scala インストール アーカイブファイルを展開。 $ tar zxvf scala-2.11.2.tgz そして、展開したディレクトリを適切な位置へ移動。（ここでは “/usr/local/share/” ディレクトリ配下へ移動） $ sudo mv scala-2.11.2 /usr/local/share/ 3. 環境変数設定...","categories": ["プログラミング"],
        "tags": ["Scala","LinuxMint"],
        "url": "/2014/11/19/scala-installation-on-linux-mint-by-src/",
        "teaser": null
      },{
        "title": "ベンチマーク - C, C++, Objective-C, Java, Scala, Ruby, Python！",
        "excerpt":"各種プログラミング言語、 C, C++, Objective-C, Java, Scala, Ruby, Python でベンチマークテストを行ってみました。 0. 前提条件 Linux Mint 17(64bit) での作業を想定。 メソッド呼び出しを 2^31 - 1 (= 2,147,483,647) 回 行う。 使用した言語のバージョン GCC 4.8.2 （パッケージインストール） GCC 4.9.1 （ソースビルドインストール） Oracle Java 1.8.0_05 （アーカイブインストール） Scala 2.11.2 （アーカイブインストール） Ruby 1.9.3-p484 （パッケージインストール） Ruby 2.1.3-p242 （ソースビルドインストール） Python 2.7.6 （パッケージインストール） Python 3.4.0 （ソースビルドインストール） 1....","categories": ["プログラミング"],
        "tags": ["C言語","Java","Scala","Ruby","Python"],
        "url": "/2014/11/21/benchmark-c-cpp-m-java-scala-ruby-python/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で重回帰式計算！",
        "excerpt":"以前、２変量（説明（独立）変数１個、目的（従属）変数１個）の「単回帰直線」の計算を Ruby の Array クラスを拡張する方法で実装しました。 Ruby - Array クラス拡張で単回帰直線計算！ 今回は、説明（独立）変数２個以上、目的（従属）変数１個の「重回帰式」の計算を Ruby の Array クラスを拡張する方法で実装してみました。 0. 前提条件 Ruby 2.1.4-p265 での作業を想定。 1. 重回帰式について まず、簡単に重回帰式について。 ここでは詳細に説明しない。過去の当ブログ記事等を参照のこと。 （偏微分して得られた連立方程式を解く（平方和・積和を行列に見立てて計算する）方法。分散・共分散を行列に見立てて計算する方法等もある） Excel製の数学文書をLATEXで整形！ 連立方程式の解法には「ガウスの消去法」を使用した。 Ruby - 連立方程式解法（ガウスの消去法）！ 2. Ruby スクリプト作成 以下のように Array クラスを拡張してメソッドを定義してみた。 （ちなみに、x1, x2, … を左辺、y を右辺として連立方程式を解いている） 【2019-06-24】 以下のソーススクリプトを行列をイメージしやすくなるよう変更した。 File: regression_multi.rb 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2014/11/23/ruby-multiple-regression-function/",
        "teaser": null
      },{
        "title": "C++ - yaml-cpp 0.3 系で YAML をパース！",
        "excerpt":"Linux Mint 17 や CentOS 7.0 では C++ 用 YAML パーサ yaml-cpp の最新版 0.5 系 をインストールして使用出来ましたが、CentOS 6.6 では 0.5 系のインストールができなかったので、旧バージョンの 0.3 系をインストールして使用してみました。 使用方法も 0.5 系と 0.3 系では全く異なるため、今回別途記録しておいた次第です。 （C++ にそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 CentOS 6.6 (32bit) での作業を想定。 cmake コマンドを使用するのでインストール済みであること。 g++(GCC) 4.4.7 での作業を想定。 libboost-dev がインストール済みであること。（CentOS なら boost-devel） 1. yaml-cpp 0.3.0 のインストール EPEL リポジトリ等からも...","categories": ["プログラミング"],
        "tags": ["C言語"],
        "url": "/2014/11/25/cpp-parsing-yaml-cpp-0-3/",
        "teaser": null
      },{
        "title": "CentOS - yum の 'Not using downloaded repomd.xml because it is older than what we have' エラー対策！",
        "excerpt":"CentOS サーバで、いつの頃から yum update 関係のエラーが出力されるようになりました。 実際には cron.hourly がエラーメールを送ってくるようになりました。 以下、原因と対策についての備忘録です。 0. 前提条件 CentOS 7.0.1406 での作業を想定。 1. 現象 cron.hourly が以下のようなメールを送信するようになった。 /etc/cron.hourly/0yum-hourly.cron: Not using downloaded repomd.xml because it is older than what we have: Current : Tue Nov 11 03:09:16 2014 Downloaded: Fri Nov 7 03:59:46 2014 2. 原因 色々調べてみると、 yum のキャッシュが残っているかららしい。 3....","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2014/11/27/centos-yum-cache-error/",
        "teaser": null
      },{
        "title": "C++ - Twitter Streaming API でツイート取得！",
        "excerpt":"C++ で Twitter Streming API を使用してツイート等の情報を取得する方法についての記録（ソースコードの紹介）です。 （C++ にそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17 (64bit) での作業を想定。 g++(GCC) 4.9.1 での作業を想定。 libcurl4-dev (= libcurl4-openssl-dev or libcurl4-nss-dev or libcurl4-gnutls-dev) がインストール済みであること。 liboauth-dev がインストール済みであること。 1. C++ ソースコード作成 以下のような C++ ソースコードを作成。 （Public Streams / sample の情報を取得する例） File: TwitterStream.cpp 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング"],
        "tags": ["C言語","Twitter"],
        "url": "/2014/11/29/cpp-twitter-streaming-api/",
        "teaser": null
      },{
        "title": "2014年11月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"12月になりましたので、先月11月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 36,255 70.0268 Mac OS 9,881 19.0852 Linux 3,256 6.2890 Ubuntu Linux 1,451 2.8026 Android 703 1.3579 unknown 152 0.2936 FreeBSD 35 0.0676 Fedora Linux 18 0.0348 RedHat Linux 9 0.0174 Solaris 8 0.0155 Debian GNU/Linux 3 0.0058 NetBSD 1 0.0019 Wii 1 0.0019...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2014/12/01/blog-access/",
        "teaser": null
      },{
        "title": "R - maptools で沖縄を左上に移動した地図！",
        "excerpt":"統計解析向けプログラミング言語 R で maptools ライブラリを使って日本地図を描画する際、沖縄地方を図の左上に移動すると地図が多くなって若干見やすくなります。 その方法についての記録です。 0. 前提条件 Linux Mint 17 (64bit) での作業を想定。 R 3.1.2 での作業を想定。 使用する地図データは、国土交通省「国土数値情報（行政区域データ）」を想定。 更に、使いやすいよう今回は以下ような前処理を施している。（フリーでオープンソースの地理情報システム QGIS にて） 全都道府県データ（Shapefile）を１つのデータに結合している。 面積の小さい地物（ポリゴン）は除去している。 区市町村コード単位で１つの地物（ポリゴン）に融合している。 区市町村コードでユニークにしたいので、区市町村が未割り当ての地物は除去している。 元のデータでは精度が高いため、ファイルサイズが大きかったり、海岸線等で線が重なりあって太線に見えてしまう。それを解消するために適度な「ジオメトリの簡素化」処理をしている。 また、区市町村コードは N03_007 という名称のカラムに５桁（先頭２桁は都道府県コード）で格納されていることを認識しておく。 1. R ソーススクリプト（標準 Ver.）作成 まず、沖縄地方を分割しない標準的な地図を描画する R ソースコードを作成。（説明はソースコード中のコメントを参照） File: japan_standard.R 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング"],
        "tags": ["R","GIS","地図"],
        "url": "/2014/12/03/gis-japan-okinawa-division/",
        "teaser": null
      },{
        "title": "Heroku - コマンドラインツール Heroku Toolbelt のインストール！",
        "excerpt":"PaaS 環境 Heroku を使用する準備として、 Heroku コマンドを使えるようにするために Heroku Toolbelt というものをインストールします。 以下、その記録です。 0. 前提条件 Linux Mint 17(64bit) での作業を想定。 Git 環境が構築済みであること。（当方は、 Git 1.9.1 の環境が構築済み） Heroku アカウント作成済みであることを想定。（アカウント作成は、 “[Heroku](http://www.heroku.com/ “Heroku Cloud Application Platform”)” サイトにアクセしてメールアドレスの登録後、パスワードを設定する程度） 1. Heroku Toolbelt のインストール “Heroku Toolbelt” にアクセスすると、使用している OS に合わせてアクティブになる。 当方の場合は Linux Mint なので “Debian/Ubuntu” がアクティブになり、以下のようなコマンドが表示された。 $ wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh...","categories": ["プログラミング"],
        "tags": ["Heroku"],
        "url": "/2014/12/05/heroku-toolbelt-installation/",
        "teaser": null
      },{
        "title": "Ruby - twitter-stream で Twitter Streaming API を利用！",
        "excerpt":"以前、 Ruby + tweetstream で Twitter Streaming API を使用してツイートする方法についてに記録しました。 今回は、 Ruby + twitter-stream(json_stream) で同じことをしてみました。 以下、その記録です。 0. 前提条件 Linux Mint 17(64bit) での作業を想定。 Ruby 2.1.5-p273 での作業を想定。 OAuth 認証が必要なので、 Twitter の各種キー(ConsumerKey etc)が取得済みであること。 今回はテストのため、取得するのは Public streams - sample データ。 1. RubyGems ライブラリ twitter-stream のインストール “twitter-stream” という RubyGems ライブラリが必要なので、インストールする。 $ sudo gem install twitter-stream 2....","categories": ["プログラミング"],
        "tags": ["Ruby","Twitter"],
        "url": "/2014/12/07/ruby-twitter-json-stream/",
        "teaser": null
      },{
        "title": "Heroku - Ruby 製 Twitter Bot の運用！",
        "excerpt":"Ruby で自作した Twitter Streaming を取得する Bot を動作させる方法についての記録です。 （当方、自宅サーバ派のため PaaS に精通している訳でもありません。ご承知おきください） 0. 前提条件 Ruby 2.1.5-p273 での作業を想定。 Heroku アカウント作成済み。 Git 導入済み。 1. 使用する Ruby スクリプト tweetstream ライブラリを使用して Twitter の Public streams - sample を取得する例。 File: ts_test.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["プログラミング"],
        "tags": ["Heroku","Ruby"],
        "url": "/2014/12/09/heroku-app-creation/",
        "teaser": null
      },{
        "title": "Bash - プロセス起動中・CPU 時間チェック！",
        "excerpt":"Linux 上で指定のプロセスが起動中か否か、CPU 時間が指定の時間を超えているか否かをチェックする Bash スクリプトの紹介です。 Linux サーバ上で短い間隔で cron 起動する場合に、前に起動したプロセスが終了しないうちに同じプロセスが二重に起動すると困る。 また、何らかの理由でプロセスが終了せずに永遠と残り続けていないかのチェックも行いたい。 そんな場合に使えるかと思います。（以下で紹介するスクリプトはシンプルなものにです。実際は応用を効かせてください） 0. 前提条件 Linux Mint 17(64bit), CentOS 6.6, 7.0 での動作を想定。 Bash 4.3.11(Linux Mint 17), 4.1.2(CentOS 6.6), 4.2.45(CentOS 7.0) を想定。 1. 作成する Bash スクリプトの概要 プロセス起動個数取得。 起動プロセス個数別に処理。 起動プロセス数が 0 個なら、リターンコードを 0 にして終了。 起動プロセス数が 1 個なら、CPU 時間取得。 CPU 時間 ＜ 指定値 なら、リターンコードを 1...","categories": ["サーバ構築"],
        "tags": ["Linux","シェル","bash"],
        "url": "/2014/12/11/linux-bash-process-check/",
        "teaser": null
      },{
        "title": "GMT - 5.1 系をソースからインストール！",
        "excerpt":"“Installing - GMT - GMT - The Generic Mapping Tools” に「4 系の Ubuntu/Debian パッケージには大きな問題があるため、問題のないソースをビルドする方法で」旨の注意書きがあるので、ソースをビルドしてインストールすることにしました。（4 系ではなく 最新の 5 系を） 実際、パッケージでインストールした GMT 4.5.11 では pscoast した際に、余分な線が描画されることがありました。（4 系のバグが原因かどうかは不明ですが） 以下、インストール作業の記録です。 0. 前提条件 Linux Mint 17(64bit) で QGIS 2.6.1 を使用して作業することを想定。 GMT 5.1.1 （当記事執筆時点で最新）をインストールする。 GMT 4 系と共存させることは考えない。（共存を考えるのであれば、インストール Prefix を変えるなどの設定が必要） ドキュメントのインストール、 CPack パーケージング(プラットフォーム固有のインストーラの作成）は行わない。 下記で紹介する記録は、ほぼ公式サイトの説明通り。 1. 依存パッケージのインストール 依存するパッケージが未インストールなら、インストールしておく。...","categories": ["PC_Tips"],
        "tags": ["GIS","地図","GMT"],
        "url": "/2014/12/13/gis-newest-gmt-installation-by-src/",
        "teaser": null
      },{
        "title": "GIS - Shapefile を GMT フォーマットに変換！",
        "excerpt":"GMT(The Generic Mapping Tools) という地図等を描画するソフトには日本地図の行政区域データが存在しないので、別途 Shapefile を GMT 用の形式に変換して使用する必要があります。 以下、変換作業についての記録です。 （当方、 GIS についてそれほど精通しているわけでもありません。ご承知おきください） 0. 前提条件 Linux Mint 17(64bit) で QGIS 2.6.1 を使用して作業することを想定。 GMT 5.1.1 で動作確認。（導入は「GMT - 5.1 系をソースからインストール！」参照） 使用する Shapefile は国土数値情報（行政区域データ）。 ただし、全都道府県分のファイルを１つに結合済みである。（当ブログ過去記事等を参照） さらに、扱いやすくするために、区市町村単位で地物を融合したり、ジオメトリの簡素化の処理を施している。 1. GMT フォーマットへの変換 まず、QGIS で変換元となる Shapefile を開く。（「ベクタレイヤの追加」で） 次に、レイヤ名右クリックで「名前を付けて保存」を選択する。 そして、以下のように設定して保存する。 形式：Generic Mapping Tools [GMT] 名前を付けて保存：適当なファイル名（拡張子は txt 等でも問題ないようだが、慣例的な gmt...","categories": ["PC_Tips"],
        "tags": ["GIS","地図","GMT"],
        "url": "/2014/12/15/gis-conversion-shapefile-gmt/",
        "teaser": null
      },{
        "title": "GIS - Shapefile を GMT フォーマットに変換（by ogr2ogr コマンド）！",
        "excerpt":"前回、 QGIS を使って Shapefile を GMT 用ファイルに変換する方法を紹介しました。 今回は ogr2ogr コマンドを使って変換する方法についてです。（こちらが楽です） （当方、 GIS についてそれほど精通しているわけでもありません。ご承知おきください） 0. 前提条件 Linux Mint 17(64bit) で作業することを想定。 ogr2ogr を使用するには GDAL/OGR ライブラリがインストール済みであること。 （QGIS が正常にインストールできてればインストールされてるはず） 1. GMT フォーマットへの変換 以下のように、出力フォーマット、出力ファイル名、入力ファイル名を指定して実行するだけ。 $ ogr2ogr -f \"GMT\" out_file in_file.shp （出力ファイル名は拡張子を指定しても自動で “gmt” になる） 2. 出力ファイルの確認 出力されたファイルの中身を確認してみる。 File: out_file.gmt 1 2 3 4 5 6 7...","categories": ["PC_Tips"],
        "tags": ["GIS","地図","GMT"],
        "url": "/2014/12/17/gis-conversion-shapefile-gmt-2/",
        "teaser": null
      },{
        "title": "Ruby - Twitter アカウント(Screen Name)登録済みチェック！",
        "excerpt":"Twitter アカウントの Screen Name (@xxxx の部分) が登録済みか否かをチェックするための Ruby スクリプトです。 １個や数個程度なら Web ブラウザで https://twitter.com/xxxxxxxx のように URL を指定してチェックすればよいのですが、一度に大量にチェックしたいケースがあったために Ruby スクリプトを作成した次第です。 以下、その記録です。 0. 前提条件 Linux Mint 17(64bit) での作業を想定。 Ruby 2.1.5-p273 での作業を想定。 単純に HTTP ステータスが HTTPSuccess になるかどうかをチェックしているだけ。 1. Ruby スクリプトの作成 以下のような Ruby スクリプトを作成した。 File: check_twitter_accounts.rb 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング"],
        "tags": ["Ruby","Twitter"],
        "url": "/2014/12/19/ruby-check-twitter-account/",
        "teaser": null
      },{
        "title": "GIS - GMT で出力した PostScript ファイルを JPEG, PNG に変換！",
        "excerpt":"GMT (The Generic Mapping Tools) で生成した画像ファイルは PostScript 形式となりますが、このままだとファイルサイズが大きく Web サイトに掲載するには負荷になります。 以下、 JPEG 形式、もしくは PNG 形式に変換する方法についての備忘録です。 （当方、 GIS についてはそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17(64bit) で作業することを想定。 GMT 5.1.1 での作業を想定。（GMT 4 系は未確認） 環境等によっては、以下で紹介しているオプション指定とは異なる結果になるかも知れない。 参考までに、当記事最後に ImageMagick convert コマンドでの変換方法も記録している。 1. PS ファイルを JPEG 形式に変換 以下のように、 PS ファイルを指定して ps2raster コマンドを実行するだけ。 （デフォルトの解像度は 300dpi で大きいので、 -E100 で解像度を 100dpi...","categories": ["PC_Tips"],
        "tags": ["GIS","地図","GMT"],
        "url": "/2014/12/21/gis-gmt-convert-ps-png/",
        "teaser": null
      },{
        "title": "Git - Linux Mint へソースビルドでインストール！",
        "excerpt":"以前 Redhat 系 Linux へソースビルドでインストールする方法を記録していました。 Git - Linux にソースビルドでインストール！ （但し、 この方法より「Git - Git のインストール」に記載されている方法の方が良いと思う） 今回は Linux Mint へソースビルドでインストールす方法の備忘録です。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 apt パッケージでインストールしていた git はアンインストール済み。 1. 依存パッケージのインストール $ apt-get install libcurl4-gnutls-dev libexpat1-dev \\ gettext libz-dev libssl-dev 2. アーカイブファイルの取得 $ wget https://www.kernel.org/pub/software/scm/git/git-2.2.1.tar.gz $ tar zxvf git-2.2.1.tar.gz 3. ビルド＆インストール...","categories": ["サーバ構築"],
        "tags": ["Linux","LinuxMint","Git"],
        "url": "/2014/12/23/git-installation-on-linux-mint-by-src/",
        "teaser": null
      },{
        "title": "Ruby - Web サイト(HTML)差異チェックスクリプト！",
        "excerpt":"以前、 Web サイト(HTML) の前回取得した HTML との差異をチェックする簡単な Bash スクリプトを紹介しました。 Bash - Web サイト（HTML）差異チェックスクリプト！ 今回は Ruby で作成してみました。（紹介するほどのものでもありませんが） 当方、何かと Ruby で処理している一連の流れがあるのですが、その中で HTML 差異チェックだけ Bash に任せていたのが気になっていたもので。 0. 前提条件 Linux Mint 17(64bit), CentOS 7.0(64bit), 6.6(32bit) での作業を想定。 Ruby 2.1.5-p273 での作業を想定。 1. Ruby スクリプト作成 以下のような簡単な Ruby スクリプトを作成。 エンコーディングは “UTF-8” に統一。 一応ボットになるので、ユーザエージェントをその旨が分かるように設定。 また、何らかの理由でチェック対象 Web サイトに迷惑がかかるようなことが発生した場合に連絡が取れるようメールアドレスも記載している。 保存している HTML と新たに取得した...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2014/12/25/ruby-check-html-difference/",
        "teaser": null
      },{
        "title": "Linux - システム稼働開始日時取得（btime 使用）！",
        "excerpt":"以前、最近ログインしたユーザ情報を表示する last コマンドで reboot 行からシステム稼働開始日時を判別する方法を紹介しました。 Linux - システム稼働開始日時取得！ しかし、この方法は “wtmp” ファイルに依存するするため、 “wtmp” ファイルに “reboot” に関する情報が記録されてない場合は取得できません。（経験上、環境により記録されていたり記録されてなかったりした） 以下、プロセスの状態が記録されている “/proc/stat” ファイルから btime 値を取得して起動日時を判別する方法についての記録です。 0. 前提条件 Linux Mint 17.1(64bit), CentOS 6.6, 7.0 で動作確認済み。 以下では、説明のため順を追って説明している。 1. btime 行の取得 システムの起動日時が “/proc/stat” ファイルの btime 行に記録されているので、それを取得。 $ grep btime /proc/stat btime 1413336664 もしくは、 $ cat /proc/stat | grep...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2014/12/27/linux-get-system-start-time-by-btime/",
        "teaser": null
      },{
        "title": "Bash - スクリプトでカーソル位置移動！",
        "excerpt":"Bash スクリプトで文字を出力する際に位置を指定したいことがあります。 terminfo データベースを使ってターミナル・セッションの初期化と操作を行うことのできる tput コマンドコマンドを使用することで、実現可能です。 以下、それについての備忘録です。 0. 前提条件 Linux Mint 17.1(64bit), CentOS 6.6, 7.0 で動作確認済み。 Bash 4.3.11(Mint), 4.1.2(CentOS 6.6), 4.2.45(CentOS 7.0 で動作確認済み。 tput コマンドの詳細については man tput 等を参照。 1. 例ー１ 1-1. Bash スクリプト作成 ３つの例を１つのシェルファイル内に記載している。 その他の注目事項。 echo -n は文字列出力後開業しない。 tput cub 19 はカーソル位置を19桁左に移動。 tput cuu 1 はカーソル位置を1行上に移動。 printf での \\r は...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2014/12/29/bash-moving-cursor-position/",
        "teaser": null
      },{
        "title": "Ruby - 素数判定！",
        "excerpt":"過去にも「素数判定」に関する記事を公開しましたが、再考してみました。 0. 前提条件 Linux Mint 17(64bit) での作業を想定。 Ruby 2.1.5-p273 での作業を想定。 1. Ruby スクリプト作成 1-1. 引数で与えた数値が素数かどうかを判定 File: prime_number_1.rb 1 2 3 4 5 6 7 8 9 10 11 12 #! /usr/local/bin/ruby # coding: utf-8 # -------------------------------------- # Check a prime number # -------------------------------------- def is_prime(n) res = (2..Math.sqrt(n)).any? { |i|...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2014/12/31/ruby-calc-prime-number/",
        "teaser": null
      },{
        "title": "2014年12月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"明けまして、おめでとうございます。 旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 話は変わりまして、先月12月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 37,141 69.9994 Mac OS 9,979 18.8074 Linux 3,011 5.6748 Ubuntu Linux 1,906 3.5922 Android 761 1.4343 unknown 161 0.3034 FreeBSD 41 0.0773 Fedora Linux 17 0.0320 Solaris 17 0.0320 RedHat Linux 13 0.0245 Debian GNU/Linux 5 0.0094 Wii 3 0.0057...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/01/01/blog-access/",
        "teaser": null
      },{
        "title": "2014年 - ツイート集計！",
        "excerpt":"2014年の Twitter でのツイート（メインで使用しているアカウントのみ）を Ruby で集計してみました。（今日気付きましたが、2013 年分の公開は失念していました） 当方は、ツイートは全て自宅サーバ(CentOS)上のデータベース(MariaDB(MySQL))に保存しています。 （実際には１時間に１回 Ruby + Twitter API で本家からデータを取得して保存） ほとんど SQL で集計可能でした。 品詞・単語別集計は形態素解析エンジン MeCab を使用しました。 集計内容は以下のとおり。 月別ツイート数 曜日別ツイート数 時間別ツイート数 文字数別ツイート数 １日当たりツイート数別集計 品詞別出現回数 単語別出現回数 1. 月別ツイート数 [ 年 月 ] [件数] [ 比 率 ] 2014年01月 288 ( 6.95%) 2014年02月 306 ( 7.38%) 2014年03月 387 ( 9.33%)...","categories": ["SNS"],
        "tags": ["Twitter","Ruby","MySQL","MariaDB"],
        "url": "/2015/01/02/summary-tweet-2014/",
        "teaser": null
      },{
        "title": "GIS - QGIS で国土数値情報「標高・傾斜度5次メッシュデータ」を描画！",
        "excerpt":"国土交通省の「国土数値情報　ダウンロードサービス」からダウンロードできるデータに標高データもあるので、QGIS というツールで描画してみました。 （当方、 GIS についてはそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 QGIS 2.6.1-Brighton での作業を想定。 「国土数値情報　ダウンロードサービス」から “JPGIS2.1” -「行政区域データ」をダウンロード＆展開済み。 1. 標高・傾斜度データの準備 まず、「国土数値情報　ダウンロードサービス」から “JPGIS2.1” -「標高・傾斜度5次メッシュ」をダウンロードする。（簡単なアンケートに回答が必要） 今回は島根県分(5131, 5132, 5231, 5232, 5233, 5332, 5333, 5432, 5433, 5531)をダウンロードした。（ちなみに、「5次」は 250m メッシュ、「4次」は500m メッシュ、「3次」は 1km メッシュ） ダウンロード終了後、 zip ファイルを展開して全てのファイルを１つのディレクトリ内に配置する。（shp, shx, dbf, xml ファイルが展開される） 2. 標高・傾斜度データ Shapefile の結合 現時点では Shapefile が複数存在することなるので、扱いやすくするために１つの Shapefile に結合する。 QGIS...","categories": ["PC_Tips"],
        "tags": ["GIS","地図","QGIS"],
        "url": "/2015/01/04/gis-qgis-painting-ksj-elevation-data/",
        "teaser": null
      },{
        "title": "GIS - GMT で標高データを描画！",
        "excerpt":"こんにちは。 今回は、GMT(The Generic Mapping Tools) で地図に標高データを反映させる方法についての記録です。 （当方、 GIS についてはそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 GMT 5.1.1 での作業を想定。 日本と周辺の陸地・海底を標高・水深で色分けする。 1. 標高データの準備 NOAA（アメリカ海洋大気庁）が “ETOPO1 Global Relief - ngdc.noaa.gov” で公開している陸地・海底地形データ “ETOPO1_Bed_g_gmt4.grd.gz”（約400MB）をダウンロードする。（Bedrock でなく、南極大陸やグリーンランドの氷の厚みも考慮した Ice Surface のデータでも違いはないだろう） （ちなみに、 “ETOPO1” は緯度・経度が１分間隔の地形データのこと） ダウンロード後、展開しておく。（約930MBほどになる） 2. シェルスクリプトの作成 複数の一連作業を一括で行いたいので、以下のような Bash スクリプトを作成。 File: JAPAN_ETOPO1.sh 1 2 3 4 5 6...","categories": ["PC_Tips"],
        "tags": ["GIS","地図","GMT"],
        "url": "/2015/01/06/gmt-paint-map-with-elevation-data/",
        "teaser": null
      },{
        "title": "Rails - Bootstrap + Bootswatch 導入！",
        "excerpt":"こんにちは。 Rails アプリに Twitter Bootstarp のデザインを適用する方法についての記録です。 Bootstrap デフォルトのテーマでは代り映えがしないので Bootswatch のテーマを使用します。 さらに、動的スタイルシート言語は LESS ではなく SASS を使用する。 0. 前提条件 パッケージ管理ツール bower は使用しないことを想定。 RubyGems パッケージを使用して導入する。 （Bootstrap のデザインを編集せずにそのまま使用するのであれば、 RubyGems パッケージを使用せずにソースを直接ダウンロードして使用したり、もしくは CDN を使用してもよいだろう） Bootswatch 用 RubyGems ライブラリは SASS 版の “bootswatch-rails” を使用する。（LESS 版の “twitter-bootswatch-rails” ではない） Rails アプリ作成済みであることを想定。 テーマに Bootswatch を使用。 当然ながら、 Rails, HTML, CSS 等の知識が必要。 1....","categories": ["サーバ構築"],
        "tags": ["Rails","Bootstrap"],
        "url": "/2015/01/08/rails-installation-bootstrap-bootswatch/",
        "teaser": null
      },{
        "title": "MySQL 5.6 - APT リポジトリからインストール(on Linux Mint 17.1)！",
        "excerpt":"こんにちは。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 古いバージョンの MySQL サーバ・クライアントはアンインストール済み。（パッケージインストール分、ソースビルドインストール分） Linux Mint は Ubuntu ベースの Linux ディストリビューションなので、 Ubuntu 用リポジトリを使用する。（どの Ubuntu バージョンがどの Linux Mint バージョンと対応するのか注意して） 1. APT リポジトリ追加用パッケージのダウンロード Linux Mint 17.1 なので Ubuntu 14.04 用パッケージをダウンロード。 （”MySQL :: Download MySQL APT Repository” からリンクをたどってダウンロードしてもよい） $ wget http://dev.mysql.com/get/mysql-apt-config_0.3.2-1ubuntu14.04_all.deb 2. APT リポジトリ追加用パッケージのインストール $ sudo dpkg...","categories": ["サーバ構築"],
        "tags": ["MySQL","LinuxMint"],
        "url": "/2015/01/10/mysql-installation-on-linux-mint-by-apt/",
        "teaser": null
      },{
        "title": "Linux - ユーザ名、グループ名の変更等！",
        "excerpt":"こんにちは。 Linux 上に作成済みのユーザやグループの名称・ID、作成済みのユーザホームディレクトリを変更する方法についての備忘録です。 0. 前提条件 Linux 上での作業を想定。（どのディストリビューションでも同じはず） root での作業を想定。（root 権限が必要） 詳細な説明は man コマンド等で確認。 1. ユーザ名の変更 ユーザ名を変更するだけであるため、ホームディレクトリ名の変更も必要となる。 # usermod -l user_name_new user_name_old 2. ユーザIDの変更 0 〜 999 はシステムアカウント用に予約されているため、 1000 以上の数字で指定する。 ホームディレクトリ以下のユーザ ID も自動で変更される。 # usermod -u 9999 user_name 3. グループ名の変更 # groupmod -n group_name_new group_name_old 4. グループIDの変更 グループIDは既存のグループIDより大きい数値でなければならない。 グループID変更後、変更前のグループIDのファイルは手作業で新しいグループIDに変更しなければならない。 # groupmod...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2015/01/12/linux-change-user-group/",
        "teaser": null
      },{
        "title": "Ruby - Twitter REST API でアカウントの設定！",
        "excerpt":"Twitter アカウントを複数（しかも同じ系統のもの）を所有している場合、同時にアカウントの設定を変更したい際に画面を開いて作業するのは大変骨の折れる作業になります。 そこで、当方が普段使用している Ruby スクリプトの重要部分のみ抜粋したもの（テスト用に作成したもの）を紹介します。 （実際は、複数アカウントの Twitter Key や設定内容を一覧にした Yaml ファイルを読み込んでループ処理しています） 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 Ruby 2.2.0-p0 での作業を想定。 RubyGems ライブラリ “twitter”, “oauth” を使用するので、gem install 済みであること。 Twitter API を使用するので、 Consumer Key, Secret や Access Token, Secret を取得済みであること。 設定する Twitter アカウントの項目は以下のとおり。 タイムゾーン 名前（screen_name でない方） URL 場所 アカウント説明文 リンクの色 背景画像（自アカウントのホーム画面の背景） ヘッダ画像...","categories": ["プログラミング","SNS"],
        "tags": ["Ruby","Twitter","OAuth"],
        "url": "/2015/01/15/ruby-twitter-setting-by-api/",
        "teaser": null
      },{
        "title": "Debian 7.8 - ファイアウォール ufw 導入！",
        "excerpt":"以前 Debian GNU/Linux 7.1.0 サーバでファイアウォール iptables を設定する方法について紹介しました。 Debian 7 Wheezy - ファイアウォール設定！ 今回は iptables のフロントエンドツール ufw(= “Uncomplicated Firewall”) でファイアウォールを設定する方法についてです。 0. 前提条件 Debian GNU/Linux 7.8.0 での作業を想定。 接続元のマシンは Linux Mint 14(64bit) を想定。 IPv4 のみに対応する。（IPv6 は無効化している） （「Debian 7 Wheezy - サーバ初期設定！」参照） インストール後の各種設定は、運用する環境やインストールしたサービスに合わせて適宜行う。 1. ufw インストール # apt-get -y install ufw 2. 各種コマンド 各種コマンドの使用法について簡単に説明する。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ファイアウォール"],
        "url": "/2015/01/17/debian-7-8-ufw-installation/",
        "teaser": null
      },{
        "title": "vsftpd - Over SSL/TLS 設定すると FileZilla でエラー！",
        "excerpt":"こんにちは。 普段は自宅サーバ上でのファイルのアップロード・ダウンロードは FileZilla で SSH(SFTP) 接続で行なっているため、 FTP サーバを使用することはありませんが、一時的に FTP サーバ(+SSL)で使用したい事案が発生した場合にそなえて準備だけはしておきたいと考えています。 しかし、Linux で vsftpd サーバを構築後 Over SSL/TLS 設定を行うと、 FTP クライアント FileZilla の「新しいバージョン」から接続できないのです。 以下、それについての記録です。 0. 前提条件 Debian GNU/Linux 7.8.0 上に構築した vsftpd サーバを想定。 vsftpd サーバの構築は当ブログ過去記事「Debian 7 Wheezy - FTP サーバ構築！」のとおりに行なっていることを想定。 クライアント側で使用する FileZilla のバージョンは 3.7.3 を想定。 転送モードは Active を想定（サーバ側で Passive 設定していない） 1. 現象 FileZilla...","categories": ["サーバ構築"],
        "tags": ["Linux","FTP","Debian"],
        "url": "/2015/01/20/vsftpd-ssl-error-on-filezilla/",
        "teaser": null
      },{
        "title": "海面校正気圧等の計算！",
        "excerpt":"こんにちは。 天気図に表示される等圧線は標高 0m での気圧に校正した値を使用してます。当然、標高により気圧が変化するからです。 （「海面校正」は「海面更正」と表現することもあるが、気象庁は「海面校正」を使用） 以下は、その計算式と計算するための簡単な Ruby スクリプトです。 （「海面校正気圧」の他に、「標高から気圧」、「気圧から標高」、」目的地の気温」の計算式・Ruby スクリプトも掲載） 1. 各種計算式 数式が多いので、\\(\\LaTeX\\)で作成した文書のハードコピーを掲載。 2. Ruby スクリプト File: calc_pressure.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32...","categories": ["その他","プログラミング"],
        "tags": ["Ruby"],
        "url": "/2015/01/23/calculate-pressures/",
        "teaser": null
      },{
        "title": "Debian 7.8 - Web サーバ Nginx インストール（Apt 使用）！",
        "excerpt":"以前 Debian GNU/Linux Wheezy 7.1.0 サーバで Web・プロキシサーバ Nginx をソースビルドでインストールする方法について紹介しました。 Debian 7 Wheezy - Web サーバ Nginx をインストール（ソースビルド）！ 今回は Nginx 公式の Apt リポジトリを使用してインストール方法についての記録です。 0 前提条件 Debian GNU/Linux Wheezy 7.8.0 での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 インストールする Nginx のバージョンは 1.6.2（当記事執筆時点最新安定版）を想定。 ファイアウォール ufw 導入済みであることを想定。（参照「Debian 7.8 - ファイアウォール ufw 導入！」） 1. リポジトリ追加設定 まず、キー追加。 #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx"],
        "url": "/2015/01/26/debian-7-8-nginx-installation-by-apt/",
        "teaser": null
      },{
        "title": "Debian 7.8.0 - DB サーバ MariaDB 10.0 系インストール（Apt 使用）！",
        "excerpt":"以前、MariaDB 5.5 系を Linux Mint に MariaDB 公式リポジトリからインストールしたり、Debian GNU/Linux にソースをビルドしてインストールしたりしました。 MariaDB - Linux Mint にインストール（apt 使用）！ Debian 7 Wheezy - DB サーバ MariaDB をインストール（ソースビルド）！ 今回は、Debian GNU/Linux 7.8.0 に MariaDB 10.0 系の最新バージョンを MariaDB 公式リポジトリを使用してインストールしてみました。 0. 前提条件 Debian GNU/Linux 7.8.0 での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 インストールする MariaDB のバージョンは 10.0.15（当記事執筆時点の 10.0 系最新安定版）を想定。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","MariaDB","MySQL"],
        "url": "/2015/01/29/debian-7-8-mariadb-10-0-installation-by-apt/",
        "teaser": null
      },{
        "title": "2015年1月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 38,189 67.8638 Mac OS 11,603 20.6191 Linux 3,206 5.6972 Ubuntu Linux 2,080 3.6963 Android 914 1.6242 unknown 156 0.2772 FreeBSD 73 0.1297 Fedora Linux 19 0.0338 Solaris 14 0.0249 RedHat Linux 13 0.0231 Wii 3 0.0053 NetBSD 1 0.0018 PlayStation 1 0.0018 SuSE...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/02/01/blog-access/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - Server Status をコンソールでリアルタイムに監視！",
        "excerpt":"こんにちは。 MariaDB(MySQL) の Server Status をコンソールでリアルタイムに監視する方法についての備忘録です。 とは言っても、今は MySQL Workbench で監視したり、ターミナル上で innotop コマンドを使用することが多いですが。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 監視する MariaDB サーバは別マシン(Debian GNU/Linux 7.8.0)に構築した 10.0.15 を想定。 （MariaDB, MySQL ならプラットフォームやバージョンによる違いはないはず） 1. Server Status 監視コマンド 以下のように実行するだけ。 以下は 5 秒間隔で IP アドレスが 192.168.11.11 であるマシンに構築した MariaDB サーバの Status を監視する例。 （ローカルマシン上なら -h オプションは不要。当然、 IP アドレスでなくてもホスト名でもよい） $...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","LinuxMint"],
        "url": "/2015/02/02/mariadb-mysql-processlist-on-console/",
        "teaser": null
      },{
        "title": "Debian GNU/Linux Wheezy - root のパスワードが消えた！",
        "excerpt":"Debian GNU/Linux Wheezy (7.8.0) での作業中に root のパスワードが消滅し root ユーザになれなくなったため、原因の調査を行い対策を施しました。 0. 前提条件 Debian GNU/Linux Wheezy (7.8.0) での作業を想定。 1. 現象 一般ユーザから root になろうとすると以下のようなエラーが出るようになった。（今までエラーにならなかったのに） $ su - Password: su: Authentication failure そればかりか、SSH 接続ではなく当該マシン上で直接 root でログインしようとしてもログインできない。 しかし、一般ユーザで sudo コマンドは使用可能。 2. 原因調査 直前に一般ユーザを一括で作成する（newusers コマンドを使用したシェルスクリプトでの）作業をしていたので、誤って何かを編集したのではないかと思い、”/etc/passwd”, “/etc/aliases”, “/etc/pam.d/su” 等を確認するも、特に怪しい箇所は見当たらない。 以下のように SUID パーミッションを確認してみるが、問題ない。 $ ls -l /bin/su -rwsr-xr-x...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2015/02/05/debian-7-8-disappearance-of-root-password/",
        "teaser": null
      },{
        "title": "MySQL(MariaDB) - innotop コマンド導入(on Linux Mint)！",
        "excerpt":"こんにちは。 MySQL の各種状態を top コマンド風に表示して確認できるツール “innotop” コマンドをインストールします。 名称どおり対象のストレージエンジンは “InnoDB” ですが、当然 MariaDB にも対応しています。 0. 前提条件 MySQL 5.6.23 での作業を想定。 インストール作業は root ユーザで作業を行う。 （一般ユーザで作業を行うと、インストール先がコマンドのみならずマニュアル等も一般ユーザディレクトリ配下になってしまうため） 1. 依存パッケージのインストール # apt-get install libterm-readkey-perl libdbd-mysql-perl 2. ソースのダウンロード 「innotop/innotop」から git clone する。 （ちなみに、innotop プロジェクト自体が Google Code から Git へ移行しているので、「Downloads - innotop - A powerful top clone for MySQL...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","LinuxMint"],
        "url": "/2015/02/08/mysql-innotop-installation-on-linuxmint/",
        "teaser": null
      },{
        "title": "Debian 7 Wheezy - セキュリティ・アップデートの自動化！",
        "excerpt":"cron-apt でもパッケージアップデートの自動化は可能であるが、今回は unattended-upgrades でセキュリティ・アップデートの自動化を行う。 ちなみに、インストール済みの各種パッケージを自動アップデートするのは（依存パッケージの整合性等の問題があるため）危険であり、当方はセキュリティ・アップデート以外は自動でアップデートしない（ダウンロードまでの）方針にしています。 0. 前提条件 Debian GNU/Linux Wheezy 7.8.0 サーバでの作業を想定。 root での作業を想定。 1. unattended-upgrades のインストール unattended-upgrades はデフォルトでインストールされているはずだが、インストールされていなければインストールする。 また、パッケージ変更履歴ツール apt-listchanges もインストールする。 # apt-get install unattended-upgrades apt-listchanges 2. “50unattended-upgrades” の編集 メール送信先を編集（コメント解除）する。（当然、ユーザ名のみならず外部のメールアドレスも設定可） File: /etc/apt/apt.conf.d/50unattended-upgrades 1 Unattended-Upgrade::Mail \"root\"; 3. “20auto-upgrades” の作成 自動アップグレードのための設定ファイルを、以下のような内容で作成する。 “/etc/cron.daily/apt” に記述があるとおりデフォルトでは無効になっているので、有効にするための記述。 File: /etc/apt/apt.conf.d/20auto-upgrades 1 2 APT::Periodic::Update-Package-Lists \"1\"; APT::Periodic::Unattended-Upgrade \"1\";...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2015/02/11/debian-7-8-security-update-automatically/",
        "teaser": null
      },{
        "title": "MySQL - datadir 変更時のエラー対策(on Debian)！",
        "excerpt":"Linux Mint などの Debian GNU/Linux 系のディストリビューション上に Apt で MySQL サーバをインストール後に datadir を変更すると、エラーで起動しなく状況に陥るようです。 （ちなみに、 Debian Wheezy 上の MariaDB では今回のような現象は発生しない（経験上）） 当方、これまで MySQL サーバはソースをビルドしてインストールことが多かったため、今回のような現象については疎かったというのもありますが。 以下、現象・原因・対策についての記録です。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。（Debian 系は同じ） MySQL 5.6.23 を MySQL 公式 Apt リポジトリを使用してインストールしている。 （参照：「MySQL 5.6 - APT リポジトリからインストール(on Linux Mint 17.1)！」） 1. 現象 まず、MySQL サーバを停止する。 そして、 datadir...","categories": ["サーバ構築"],
        "tags": ["MySQL","LinuxMint","Debian"],
        "url": "/2015/02/14/mysql-error-when-datadir-changed-on-debian/",
        "teaser": null
      },{
        "title": "Linux - CPU プロセッサアフィニティ（親和性）の設定！",
        "excerpt":"こんにちは。 Linux 上で、実行中のプロセス（コマンド）が複数あるどの CPU プロセッサと親和性があるのか確認したり、親和性をとる CPU プロセッサを指定する方法についての記録です。 「CPU プロセッサアフィニティ」は、簡単に説明すると「あるプロセスがどの CPU プロセッサで実行されるか」ということです。 「アフィニティ(affinity)」は、 「親和性」、「関係」、「有縁性」などと呼ばれることもあります。 注意するのは、「CPU コア」ではなく「CPU プロセッサ」であるということです。 ここでの「プロセッサ」とは、物理的な CPU ではなく cat /proc/cpuinfo で出力されるプロセッサや lscpu コマンドで出力される CPU(s) のことで、いわゆる「論理 CPU」のことです。 ちなみに、「CPU コア数」はプロセッサ（ソケット）当たりのコア数のことです。 （例えば、 “Intel Atom 230” などは CPU コア数は 1 だが、プロセッサ数は 2 ） 以下では、デフォルトでインストール済みの taskset コマンドの使用方法について記録しています。 0. 前提条件 Linux Mint 17.1(64bit), CentOS 6.6(32bit),...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2015/02/17/linux-cpu-processor-affinity-setting/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - クエリキャッシュの自動デフラグメント！",
        "excerpt":"こんにちは。 MariaDB(MySQL) で、自動でクエリキャッシュのメモリ領域をデフラグメントして使用効率を向上させる方法についての記録です。 0. 前提条件 MariaDB 10.0.15, MySQL 5.6.23 サーバでの作業を想定。 クエリキャッシュ機能を有効にしていること。 “my.cnf” で query_cache_size を 0 以外、query_cache_type を 0(OFF) 以外に設定している。 （設定確認は SHOW VARIABLES LIKE 'have_query_cache';, SHOW VARIABLES LIKE 'query_cache_%'; で） MariaDB(MySQL) のイベントスケジューラを使用し自動で処理することを想定。 1. クエリキャッシュのデフラグメント 手動でクエリキャッシュのデフラグメントするには、MariaDB(MySQL) サーバに root（or RELOAD 権限を保有しているユーザ）でログインして以下を実行する。 &gt; FLUSH QUERY CACHE 2. イベントスケジューラの有効化 自動化するには、イベントスケジューラの機能を使用する。 MariaDB(MySQL) のイベントスケジューラが有効になっていなければ、以下のように “my.cnf” の...","categories": ["サーバ構築"],
        "tags": ["MySQL","MariaDB"],
        "url": "/2015/02/20/mysql-automatic-defragment-of-query-cache/",
        "teaser": null
      },{
        "title": "MySQL(MariaDB) - MySQLTuner でチューニング診断！",
        "excerpt":"こんにちは。 MySQL や MariaDB のチューニングを診断する MySQLTuner の導入についてです。 当方よく使用するツールですが、記事にしたことがなかった（記録を取っていなかった）ので、今回記録しておいた次第です。 0. 前提条件 MySQL 5.6.23 (on Linux Mint 17.1), MariaDB 5.5.41 (on CentOS 6.6), MariaDB 10.0.15 (on Debian GNU/Linux 7.8.0) で動作確認。 （付属の “README.md” に MySQL 5.6 系をサポートしているという情報はないが、問題なさそう。また、MariaDB 10.x 系はフルサポートされている訳ではない） インストール先は “/usr/local/src” ディレクトリ配下を想定。 root ユーザでの作業を想定。 1. MySQLTuner のインストール アーカイブファイルをダウンロード後、展開するだけでよい。（実行権限を付与されているはずだが、付与されていなければ付与する） # cd /usr/local/src/ # wget...","categories": ["サーバ構築"],
        "tags": ["MySQL","MariaDB"],
        "url": "/2015/02/23/mysql-diagnosing-by-mysqltuner/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - innodb_table_stats not found!",
        "excerpt":"こんにちは。 MariaDB 10.0 系や MySQL 5.6 系サーバ起動時に innodb_table_stats が見当たらない旨のエラーが出力されることがあります。 以下、現象・原因・対策についてです。 0. 前提条件 MariaDB 公式リポジトリを使用してインストールした MariaDB 10.0.15 サーバでの作業を想定。（MySQL 5.6 系でも同様） 1. 現象 MariaDB サーバ起動時にログファイルに以下のようなエラーが出力される。 File: /var/log/mysql/error.log 1 2015-02-15 09:59:48 7f9fe25a3700 InnoDB: Error: Table \"mysql\".\"innodb_table_stats\" not found. 2. 原因 調べてみると、 MySQL 5.6 系のバグと思われるが、 MariaDB 10.0 にも該当しているように感じられる。 （ちなみに、MariaDB 10.0 系は MariaDB 5.5 系をベースに...","categories": ["サーバ構築"],
        "tags": ["MySQL","MariaDB"],
        "url": "/2015/02/26/mysql-innodb-table-stats-not-found/",
        "teaser": null
      },{
        "title": "2015年2月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 36,987 69.1333 Mac OS 11,213 20.9585 Linux 2,851 5.3289 Ubuntu Linux 1,276 2.3850 Android 922 1.7233 unknown 152 0.2841 FreeBSD 44 0.0822 Fedora Linux 27 0.0505 Debian GNU/Linux 9 0.0168 Solaris 8 0.0150 RedHat Linux 7 0.0131 NetBSD 3 0.0056 PlayStation 1 0.0019...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/03/01/blog-access/",
        "teaser": null
      },{
        "title": "Linux - smartctl で HDD 診断！",
        "excerpt":"こんにちは。 Linux でハードディスクの状態をある程度診断できる smartctl コマンドについての備忘録です。 0. 前提条件 Debian GNU Linux 7.8.0, CentOS 6.6, Linux Mint 17.1 での作業を想定。 smartctl コマンドが利用可能である。 （RedHat 系ではデフォルトでインストールされているが、 Debian 系ではデフォルトでインストールされていないので、 apt-get install smartmontools 等でインストールしておく） 以下では root ユーザになって作業を行なっている。 1. smartctl コマンド実行（エラーありのケース） -a or --all オプションで SMART 情報全てを表示してみる。（この項の最後に簡単な説明あり） # smartctl -a /dev/sda smartctl 5.41 2011-06-09 r3365 [x86_64-linux-3.2.0-4-amd64] (local build)...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2015/03/03/linux-hdd-diagnosing-by-smartctl/",
        "teaser": null
      },{
        "title": "Linux - badblocks コマンドで HDD 不良ブロックのチェック！",
        "excerpt":"こんにちは。 badblocks コマンドでデバイス (通常は HDD 等のディスクパーティション) 上の 不良ブロックを探すことが可能です。 普段あまり使用しないコマンドなので、備忘録として残しておきます。 0. 前提条件 Linux Mint 17.1(64bit), CentOS 6.6(32bit), Debian GNU/Linux 7.8.0(64bit) で（非破壊的読み出しチェックのみ）実際に動作確認済み。 1. badblocks コマンド使用例 以下は、非破壊的読み出しチェック（単純なブロック読み出しチェック）を行う例。 # badblocks -sv -o badblocks_sda.txt /dev/sda Checking blocks 0 to 248831 Checking for bad blocks (read-only test): done Pass completed, 0 bad blocks found. (0/0/0 errors)...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2015/03/06/linux-hdd-checking-by-badblocks/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - ibd ファイルの移行！",
        "excerpt":"こんにちは。 MariaDB(MySQL) でテーブルデータを別のサーバへ移行する際に、大抵の場合は移行元でダンプエクスポートしてから移行先でダンプインポートすると思います。（当然、高速化のためにログやキャッシュ等の設定を一時的に変更して） しかし、ダンプファイルが数GBもあったり、数千万レコード以上あったりすると、場合によっては（非力なマシン等では）半日に経ってもインポートが終了しないことがあります。 以下、ダンプファイルをエクスポート＆インポートせずに ibd ファイル（テーブルスペース）を丸ごと移行する方法についての記録です。 0. 前提条件 InnoDBのデータ領域（テーブルスペース）をテーブル単位で運用している。（”my.cnf” に innodb_file_per_table を記述している） 移行元・移行先ともに MySQL 5.6.23 という環境で動作確認済み。 移行元・移行先ともに MariaDB 10.0.15 という環境で動作確認済み。 移行元 MySQL 5.6.23, 移行先 MariaDB 10.0.15 という環境では、エラー（後述）が発生して移行不可能。（逆は未確認） 1. 移行元サーバ 1-1. cfg ファイルの作成 &gt; FLUSH TABLE tbl_name FOR EXPORT; 1-2. ibd, cfg ファイルの退避 ibd ファイルと前項で作成された cfg ファイルを適当なディレクトリに退避（複製）する。 （クライアントを閉じると cfg ファイルが消えてしまうので注意）...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2015/03/09/mysql-innodb-ibd-file-migration/",
        "teaser": null
      },{
        "title": "Linux - Bash をソースビルドでインストール！",
        "excerpt":"こんにちは。 Bash(Bourne-again shell) の最新版をソースをビルドしてインストールする方法についての記録です。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定しているが、他のディストリビューションでも同様。 Bash 4.3.33 をインストールする。 Bash 4.3 に 1 から 33 までのパッチを適用する方法でインストールを行う。 作業はパッケージでインストールされた Bash の元で行う。 パッケージでインストールされている Bash は削除せず残しておく。 1. Bash バージョンの確認 現状のパッケージでインストールされている Bash のバージョンを確認してみる。 $ bash --version GNU bash, バージョン 4.3.11(1)-release (x86_64-pc-linux-gnu) Copyright (C) 2013 Free Software Foundation, Inc. ライセンス GPLv3+: GNU...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Linux","bash"],
        "url": "/2015/03/12/linux-bash-installation-by-src/",
        "teaser": null
      },{
        "title": "Linux - swappiness でスワップ処理調整！",
        "excerpt":"こんにちは。 swappiness というカーネルパラメータを使用してスワップ処理を調整する方法についての備忘録です。 物理メモリに余裕があるにも関わらず頻繁にスワップしてしまうことがあるので、対策したかったからです。（特に DB サーバマシンで） 0. 前提条件 Debian GNU/Linux 7.8.0(64bit) (Kernel: 3.2.0-4-amd64), CentOS 6.6(32bit) (Kernel: 2.6.32-504.3.3.el6.i686) での作業を想定。 Kernel 2.6 系以上なら同様のはず。 1. swappiness パラメータの概要 このパラメータには設定する値は 0 ～ 100 で、デフォルトは 60 である。 値が大きいほどページのスワップ処理が増える。 0 だと、物理メモリを完全に使いきるまでスワップ処理は行われない。 2. 現在値の確認 # cat /proc/sys/vm/swappiness 60 3. 設定値の変更（次回マシンを再起動するまでの暫定的な設定） 以下は 10 に設定する例。 # sysctl -w vm.swappiness=10 vm.swappiness...","categories": ["PC_Tips","サーバ構築"],
        "tags": ["Linux"],
        "url": "/2015/03/15/linux-swap-adjusting-by-swappiness/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - クエリキャッシュヒット率の計算！",
        "excerpt":"こんにちは。 MariaDB(MySQL) サーバをチューニングする際によく使用する計算式についてに備忘録です。 0. 前提条件 MySQL 5.6.23, MariaDB 10.0.15, MariaDB 5.5.42 での作業を想定。 クエリキャッシュ機能を有効にしている。 (query_cache_type が 0 以外、query_cache_size が 0 以外) 1. クエリキャッシュ情報の出力 コマンドラインで以下のように実行する。 # mysqladmin -u root -p extended-status | grep Qcache Enter password: | Qcache_free_blocks | 3314 | | Qcache_free_memory | 12395448 | | Qcache_hits | 823407 | |...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2015/03/18/mysql-calculate-query-cache-hit-ratio/",
        "teaser": null
      },{
        "title": "Debian Wheezy - su(root) パスワード誤入力時のログ！",
        "excerpt":"こんにちは。 Debian GNU/Linux Wheezy 7.8.0 で、su - コマンドで root のパスワードを誤入力した場合についての単なる備忘録です。 0. 前提条件 Debian GNU/Linux Wheezy 7.8.0 で確認。 1. ログの確認 一般ユーザから root になるためには su - を実行して root のパスワードを入力するが、その際にパスワードを誤った場合は “/var/log/auth.log” に以下のようなログが出力される。（foo は一般ユーザ名） File: /var/log/auth.log 1 2 3 4 Feb 1 23:52:57 noah su[3756]: pam_unix(su:auth): authentication failure; logname=foo uid=1000 euid=0 tty=/dev/pts/1 ruser=foo rhost=...","categories": ["PC_Tips"],
        "tags": ["Linux","Debian"],
        "url": "/2015/03/21/debian-wheezy-logging-when-wrong-root-password/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - シェル(Bash)スクリプトで複数 SQL 実行！",
        "excerpt":"こんにちは。 シェルスクリプト（今回は Bash）内で MariaDB(MySQL) の SQL を実行する際、 -e or --execute オプションを使用することが多いと思います。 しかし、複数の SQL（特にトランザクション処理）を実行する際、このオプションではワンライナーにするしかありません。 別ファイルにした SQL を取り込むことも可能ですが、それだと Bash の引数が渡せません。 以下、Bash スクリプト内でワンライナーにせず、ヒアドキュメントを使用して複数 SQL を実行する例です。（Bash 引数渡しも可） 0. 前提条件 Bash スクリプトを想定。 1. Bash スクリプト 以下のような Bash スクリプトを作成する。 ヒアドキュメント内に Bash 引数が渡せる。また、トランザクションも効く。 File: tesh.sh 1 2 3 4 5 6 7 8 9 10 11 12...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","シェル","bash"],
        "url": "/2015/03/24/mysql-execute-multiple-sqls-on-bash/",
        "teaser": null
      },{
        "title": "MySQL(MariaDB) - 国土交通省・位置参照情報をデータベース化！",
        "excerpt":"こんにちは。 国土交通省が公開している「位置参照情報」についてです。 「位置参照情報」には「街区レベル」と「大字・町丁目レベル」の２種類あります。要約すると、「街区レベル」は街区とその代表点座標を、「大字・町丁目レベル」は大字・町丁目とその代表点座標を対応付けた情報のことです。 以下は、「位置参照情報」を MySQL(MariaDB) でデータベース化する手順についての記録です。 0. 前提条件 MySQL 5.6.23 での作業を想定。（MariaDB も同様のはず） DB スキーマが作成済みである。（以下では mlit_isj としている） 今回は、全都道府県の全て（「街区レベル」＆「大字・町丁目レベル」）のデータ（データ整備年度が最新のもの）をダウンロードする。 （必要な都道府県や必要なデータ形式のみ選択してもよいが、その場合は展開されるディレクトリ名やファイル名が以下で紹介していものと若干異なるので注意） unzip コマンド nkf コマンドが導入済みであること。 1. データ形式 まず、街区レベル位置参照情報と大字・町丁目レベル位置参照情報のデータ形式について。 1-1. 街区レベル位置参照情報 街区レベル位置参照情報のデータ形式は、CSV(Comma Separated Values)形式です。数字のコードはASCII、文字のコードはSHIFT-JISコードです。 Ｘ・Ｙ座標および緯度経度座標の値は、世界測地系（日本測地系2000）です。現在旧日本測地系に基づくデータは提供しておりません。 平成24年度街区レベル位置参照情報データの項目は以下の通りです。（履歴フラグの部分はデータの作成・更新年度ごとに異なりますが、基本的にはどの年度のデータも同じフォーマットになっています。） （引用元：国土交通省国土政策局GISHP【インターネットサービス】「位置参照情報ダウンロードサービス - 位置参照情報のデータ形式」） 項目備考 都道府県名例：東京都 市区町村名例：千代田区 大字・町丁目名例：霞が関二丁目 街区符号・地番例：1 座標系番号平面直角座標系の座標系番号（1～19） 例：9 Ｘ座標平面直角座標系の座標系原点からの距離 メートル単位（小数第1位まで）（北方向プラス） 例：-35925.9 Ｙ座標平面直角座標系の座標系原点からの距離 メートル単位（小数第1位まで）（東方向プラス） 例：-7446.2 緯度十進経緯度（少数第6位まで） 例：35.676154...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","シェル","bash","GIS"],
        "url": "/2015/03/27/mysql-import-mlit-isj/",
        "teaser": null
      },{
        "title": "Ruby - 日本道路交通情報センターから規制一覧を取得！",
        "excerpt":"こんにちは。 Ruby で JARTIC（日本道路交通情報センター）の Web サイトから規制情報の一覧を取得する方法についての記録です。 0. 前提条件 Ruby 2.2.1-p85 での作業を想定。 1. 規制一覧データについて http://www.jartic.or.jp/_json/M_**_301.json へアクセスすることで JSON データを取得することができる。 ** は２桁の都道府県コードか４桁の高速道路コード（1*** が一般、2*** が都市高速）。 （「JARTIC：日本道路交通情報センター」のサイトでマウスオーバーで表示される URL を見れば分かる） 取得できるデータは JSON 形式となっている。（後述のように、”uptime” に更新日時、 “item” に一覧データが格納されている） 路線名称・規制区間が同じでも「上り（or 西行、内回 etc）」と「下り（or 東行、外回 etc）」で別々の item になっている。 規制区間が「○○付近」の場合は、４項目目が “” となり５項目目に格納される。 File: JSON 1 2 3 4 5 6 7 8...","categories": ["プログラミング"],
        "tags": ["Ruby","JSON"],
        "url": "/2015/03/30/ruby-getting-road-closing-info-from-jartic/",
        "teaser": null
      },{
        "title": "2015年3月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 38,062 69.0492 Mac OS 11,309 20.5159 Linux 2,926 5.3081 Ubuntu Linux 1,614 2.9280 Android 841 1.5257 unknown 151 0.2739 Fedora Linux 98 0.1778 FreeBSD 52 0.0943 Solaris 51 0.0925 RedHat Linux 6 0.0109 Debian GNU/Linux 4 0.0073 NetBSD 3 0.0054 Wii 3 0.0054...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/04/01/blog-access/",
        "teaser": null
      },{
        "title": "GIS - Shapefile を GeoJSON に変換！",
        "excerpt":"こんにちは。 地理情報データの業界標準である Shapefile を GeoJSON 形式に変換する方法についての記録です。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 今回、Shapefile は国土交通省・国土数値情報を使用する。（参照「QGIS(Quantum GIS) - 国土交通省・国土数値情報からの地図表示！」） ポリゴン（地物）を都道府県単位で融合済み。（参照「QGIS(QuantumGIS) - 国土数値情報・ポリゴンの融合！」） 全都道府県分の Shapefile を１つ（ファイル名： “japan.shp”）に統合済み。（参照「GDAL/OGR - 国土数値情報の複数 Shapefile を結合！」） 変換には GDAL/OGR ライブラリの ogr2ogr コマンドを使用する。（インストール済みであること。 QGIS がインストールされていればインストールされている） （使用する ogr2ogr のバージョンは “1.11.1” を想定） 元々国土交通省・国土数値情報には以下の属性情報が含まれていたが、 N03_001 … 都道府県名 N03_002 … 支庁・振興局名 N03_003 … 郡・政令市名...","categories": ["PC_Tips"],
        "tags": ["GIS","地図"],
        "url": "/2015/04/03/gis-conversion-from-shapefile-to-geojson/",
        "teaser": null
      },{
        "title": "GIS - GeoJSON を TopoJSON に変換！",
        "excerpt":"こんにちは。 Web サイトで地図を表示するのに D3.js というものを使用するのですが、データ形式が GeoJSON か TopoJSON でなければなりません。 GeoJSON はファイル容量が非常に大きいので、TopoJSON に変換して容量を小さくするとパフォーマンスも向上するでしょう。 以下、 GeoJSON 形式のデータを TopoJSON 形式に変換する方法についての記録です。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 GeoJSON 形式のデータファイル準備済み。（参照「GIS - Shapefile を GeoJSON に変換！」） 属性情報は元々の国土交通省・国土数値情報を都道府県単位で融合したため、以下のようになっている（融合時に以下のように設定し直している）。 PREF_CODE … 都道府県コード PREF_NAME … 都道府県名 1. TopoJSON について TopoJSON を簡単に説明すると以下のとおり。 地理空間情報をエンコードするためのフォーマットで、同じく地理空間情報をエンコードするためのフォーマット GeoJSON を Topology の概念を利用して拡張した形式（トポロジ構造のデータ）である。 （ちなみに、「トポロジ」＝「位相幾何学」で、簡単に言えば「コーヒーカップとドーナツを（連続的に形状を変化させても穴が数が１個という性質は変わらないので）区別しない」ような数学的概念のこと） GeoJSON 形式と比べファイルサイズが格段に小さい。（GeoJSON...","categories": ["PC_Tips"],
        "tags": ["GIS","地図"],
        "url": "/2015/04/06/gis-conversion-from-geojson-to-topojson/",
        "teaser": null
      },{
        "title": "GIS - D3.js で地図描画！",
        "excerpt":"こんにちは。 Web ページ上に画像を使用せずに JavaScript で地図を描画する方法につての記録です。 使用するツールは D3.js - Data-Driven Documents という Web ブラウザ上で動的にコンテンツを描画するための JavaScript ライブラリです。 0. 前提条件 地図データは国土交通省・国土数値情報を使用する。 Shapefile を TopoJSON 形式に変換済みであること。（過去記事参照） GIS - Shapefile を GeoJSON に変換！ GIS - GeoJSON を TopoJSON に変換！ 以下はベタな HTML &amp; JavaScript による基本的な作成例。（当方、実際は Ruby on Rails に実装している） 1. 地図表示用ページの HTML 作成 File: d3_map.html 1...","categories": ["PC_Tips"],
        "tags": ["GIS","地図"],
        "url": "/2015/04/09/gis-painting-map-by-d3sj/",
        "teaser": null
      },{
        "title": "GIS, Ruby - georuby で Shapefile のジオメトリデータ取得！",
        "excerpt":"こんにちは。 以前、Ruby で地理空間情報データ Shapefile の属性情報(DBF)を読み込む方法について記事にしました。 Ruby + GIS - Shapefile 読み込み！ 今回はジオメトリデータ（緯度・経度の情報）を取得する方法についての記録です。 0. 前提条件 Ruby 2.2.1-p85 での作業を想定。 RubyGems ライブラリの georuby-2.5.2（GeoRuby でない方）がインストール済み。 テストで使用した Shapefile は国土交通省・国土数値情報の行政区域データ（島根県分）。 1. Ruby スクリプトの作成 簡単なスクリプトなので、特に説明は不要だと思う。 以下の例ではas_json メソッドを使用して JSON(GeoJSON) 形式でデータを取得しているが、 as_wkt, as_ewkt, as_hex_wkt, as_hex_ewkt, as_georss, as_kml メソッドも使用可能である。 また、 shebang ストリングは環境に合わせて適宜変更すること。ちなみに、当方はサーバ環境での cron 運用（cron では環境変数 PATH が通常の実行と異なること）を考慮して #! /usr/bin/env ruby...","categories": ["プログラミング"],
        "tags": ["GIS","地図"],
        "url": "/2015/04/12/gis-getting-geometry-data-from-shapefile-by-georuby/",
        "teaser": null
      },{
        "title": "Bash - ImageMagick で複数画像を一括作成！",
        "excerpt":"こんにちは。 bash スクリプトで ImageMagick を使用して複数の画像を一括で作成する方法についての備忘録です。 シリーズ化したい画像や大量にサンプル画像が必要な際に役立つ（GUI ツールを使用するよりは楽になる）と思います。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 Bash 4.3.33 での作業を想定。 ImageMagick 6.7.7-10 での作業を想定。 1. bash スクリプトの作成 それほど凝ったものでもないので、説明はしない。 （以下のの ps_city は、市の名称が２文字の場合と３文字の場合でポイントサイズを分けるために計算している） File: image_magick.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["プログラミング"],
        "tags": ["bash"],
        "url": "/2015/04/15/bash-automatical-drawing-images-by-image-magick/",
        "teaser": null
      },{
        "title": "Ruby - TCP ソケット通信！",
        "excerpt":"こんにちは。 よく Java の入門編でやるソケット通信を Ruby でやってみました。 非常に簡単な実装例です。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 Ruby 2.2.1-p85 での作業を想定。 1. Ruby スクリプト（サーバ側）の作成 以下のような（非常に）簡単なスクリプトを作成する。 （shebang ストリングは環境に合わせて変更すること。ちなみに、env を使用しても環境に依存することが多々あるため、当方は最初からフルパスで指定する方針） File: socket_server.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2015/04/18/ruby-socket-connection/",
        "teaser": null
      },{
        "title": "GMP - ソースビルドでインストール (on Linux Mint)！",
        "excerpt":"こんにちは。 C や C++ で多倍長の数値演算を行いたく GMP ライブラリをソースビルドでインストールしてみました。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定しているが、 Unix 系 OS なら同様。 今回はソースをビルドしてインストールする。 C だけでなく C++ でも使用可能となるようにする。 今回の動作確認は整数に関してのみ行なう。 1. GMP とは The GNU Multi Precision Arithmetic Library の略 符号付き整数や有理数、浮動小数を任意精度で扱うための算術ライブラリ GNU プロジェクトの一部 2. アーカイブの取得＆展開 最新の “tar.bz2” ファイルをダウンロードする。（”tar.lz”, “tar.xz” でもよい。但し、”tar.lz” の展開には lzip コマンドが必要） $ wget https://gmplib.org/download/gmp/gmp-6.0.0a.tar.bz2 $...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2015/04/21/gmp-installation-by-source-build-on-linux-mint/",
        "teaser": null
      },{
        "title": "Ruby - rbenv インストール(on Linux Mint)！",
        "excerpt":"こんにちは。 当方、普段は Ruby はソースをビルドしてインストールして使用していますが、他のバージョンを使用した場合はバージョン管理システム rbenv を使用しています。 Linux Mint へのインストール方法について今まで記録したことがなかったので、今回記録しておいた次第です。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 Ruby そのもののインストールには rbenv のプラグイン ruby-build を使用する。 git コマンドを使用するのでインストール済みであること。 1. rbenv, ruby-build のチェックアウト(git clone) $ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv $ git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build 2. 環境設定 “.bashrc” （環境によっては “.bash_profile”）に設定を追記。 $ echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.bashrc $...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2015/04/24/ruby-rbenv-installation-on-linux-mint/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - ログローテート時のエラー！",
        "excerpt":"こんにちは。 Linux サーバでのログローテート時に MariaDB(MySQL) ログ部分でエラーが発生することがあります。 以下、当方が以前体験した事案についての現象・原因・対策の記録です。 0. 前提条件 Debian GNU/Linux 7.8(64bit) を想定。 MariaDB 10.0.15 を想定。 環境等により設定ファイルの配置場所等が以下の記事内容と若干異なるかもしれないので注意すること。 1. 現象 ログローテート時に以下のようなエラーが発生する。 /etc/cron.daily/logrotate: /usr/bin/mysqladmin: flush failed; error: 'Unknown error' error: error running shared postrotate script for '/var/log/mysql.log /var/log/mysql/mysql.log /var/log/mysql/mysql-slow.log ' run-parts: /etc/cron.daily/logrotate exited with return code 1 2. 原因 mysqladmin にパスワードが未設定であることにより “/etc/logrotate.d/mysql-server” 内でエラーが発生するため。...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","Linux"],
        "url": "/2015/04/27/mariadb-mysql-error-on-logrotation/",
        "teaser": null
      },{
        "title": "Ruby - Shebang ストリングによるスクリプト実行！",
        "excerpt":"こんにちは。 Shebang（シバン、シェバン）ストリングを使用して Ruby スクリプトを実行する方法についての記録（＆個人的方針）です。 どの方法を使用するかは個人の趣味・趣向によるところがあります。ご了承ください。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 Ruby 2.2.2-p95 での作業を想定。 Bash 4.3.33 での作業を想定。 Shebang ストリングとは？についてはここでは説明しない。 以下の文書内に出現する「コマンドライン引数」以外の「引数」は Shebang 行の引数のことである。 1. env コマンドを使用する方法 これはよくある方法。 #! /usr/bin/env ruby メリット 環境に依存しにくい。（と一部で言われている。当然、環境に依存することも多々ある） デメリット OS によっては /usr/bin/env ではなく /bin/env であったり、当然 env コマンドそのものが存在しないこともあるため、実行できないことがある。 Shebang 行では引数が１個しか取得できない。（但し、取得できる引数の個数や文字数は OS により異なる） 例えば ruby -v のように記述した場合、ruby コマンドと -v...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2015/04/30/ruby-script-running-by-shebang/",
        "teaser": null
      },{
        "title": "2015年4月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 38,302 68.8315 Mac OS 11,245 20.2081 Linux 3,065 5.5080 Ubuntu Linux 1,717 3.0856 Android 942 1.6928 unknown 197 0.3540 Fedora Linux 85 0.1528 FreeBSD 42 0.0755 Solaris 23 0.0413 Debian GNU/Linux 10 0.0180 RedHat Linux 6 0.0108 PlayStation 5 0.0090 NetBSD 3 0.0054...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/05/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - メール(ISO-2022-JP)送信！",
        "excerpt":"こんにちは。 Ruby でメール（日本語）を送信する方法についての記録です。 メール送信に関しては多数の RubyGems ライブラリが公開されていますが、今回は “mail-iso-2022-jp” ライブラリを使用します。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 Ruby 2.2.2-p95 での作業を想定。 SMTP プロトコルを使用したメール送信を想定。 SMTP サーバのログイン情報を用意しておく。 1. RubyGems ライブラリのインストール “mail-iso-2022-jp” という RubyGems ライブラリと、これが依存する “mail” という RubyGems ライブラリをインストールする。 （日本語(ISO-2022-JP)を使用しないのであれば、 “mail” ライブラリのみでよい） $ sudo gem install mail mail-iso-2022-jp 2. Ruby スクリプトの作成 以下は SMTP Over SSL でメールを送信する例。（説明についてはコメントを参照） （shebang...","categories": ["プログラミング"],
        "tags": ["Ruby","Mail"],
        "url": "/2015/05/03/ruby-sending-mail-iso-2022-jp/",
        "teaser": null
      },{
        "title": "C++ - 円周率計算（Chudnovsky の公式使用）！",
        "excerpt":"こんにちは。 今、円周率を計算するための公式で最も高速だと言われているのは、 Ramanujan（ラマヌジャン）系の「Chudnovsky（チャドノフスキー）の公式」です。 今回は、C++ で Chudnovsky の公式を使用して円周率を計算してみました。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 演算には GMP(The GNU Multi Precision Arithmetic Library) 任意精度算術ライブラリを使用する。 （C 用のライブラリではなく C++ 用にラップされたライブラリを使用） 計算に使用したマシンは CPU: Intel Core2Duo E8500 ( 3.16GHz ), MEM: 3.9GiB 1. Chudonvsky の公式を使用した円周率計算について （数式が多いので \\(\\LaTeX\\) で作成した文書を貼り付け）（PDF ファイルは「mk-mode SITE: アーカイブ」に置いた） （Chudnovsky の公式に Binary Splitting Algorithm を適用することに特化しているので、他で説明されている...","categories": ["プログラミング","数学"],
        "tags": ["C言語","円周率"],
        "url": "/2015/05/06/cpp-pi-computation-by-chudnovsky-bsa-with-gmp/",
        "teaser": null
      },{
        "title": "Ruby - 円周率計算（Chudnovsky の公式使用）！",
        "excerpt":"こんにちは。 前回、C++ で Chudnovsky の公式を使用して円周率を１億桁まで計算しました。（任意精度算術ライブラリ GMP(The GNU Multi Precision Arithmetic Library) を使用） 今回は、同じことを Ruby で実装してみました。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 演算には GMP(The GNU Multi Precision Arithmetic Library) 任意精度算術ライブラリを Ruby 用にラップした gmp という RubyGems ライブラリ使用するので、インストール済みであること。 RubyGems ライブラリ gmp で浮動小数点数を扱う場合は MPFR(The GNU Multiple Precision Floating-Point Reliably) ライブラリが必要であるので、インストール済みであること。（後日、ソースをビルドしてインストール方法は紹介する予定） 計算に使用したマシンは CPU: Intel Core2Duo...","categories": ["プログラミング","数学"],
        "tags": ["Ruby","円周率"],
        "url": "/2015/05/08/ruby-pi-computation-by-chudnovsky-bsa-with-gmp/",
        "teaser": null
      },{
        "title": "MPFR - ソースビルドでインストール (on Linux Mint)！",
        "excerpt":"こんにちは。 C や C++ で多倍長浮動小数点演算を行いたく MPFR ライブラリをソースビルドでインストールしてみました。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定しているが、 Unix 系 OS なら同様。 1. MPFR とは The GNU Multiple Precision Floating-Point Reliably の略 多倍長浮動小数点を高精度で扱うためのライブラリ GNU プロジェクトの一部 2. アーカイブの取得＆展開 最新の “tar.gz” ファイルをダウンロード後に展開。（tar.xz”, “tar.bz2”, “zip” でもよい） $ wget http://www.mpfr.org/mpfr-current/mpfr-3.1.2.tar.gz $ tar zxvf mpfr-3.1.2.tar.gz 3. ビルド＆インストール $ cd mpfr-3.1.2...","categories": ["プログラミング"],
        "tags": ["C言語"],
        "url": "/2015/05/10/mpfr-installation-by-source-build-on-linux-mint/",
        "teaser": null
      },{
        "title": "C++ - べき剰余アルゴリズムの実装！",
        "excerpt":"こんにちは。 C++ に「べき剰余アルゴリズム」を実装したい事案があったので、記録しておきます。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 G++ 4.8.2, 4.9.1 での作業を想定。（特別なことはしていないので、他のバージョンでも問題ないはず） 1. べき剰余について その名のとおり、べき乗の剰余のことである。 底を \\(b(\\in\\mathbb{Z})\\) 、べき指数を \\(e(\\in\\mathbb{Z})\\) 、剰余を \\(m(\\in\\mathbb{Z})\\) とすると、べき剰余 \\(c\\) は次のように表される。 \\[c \\equiv b^e \\pmod m\\] 2. べき剰余演算アルゴリズムについて 当然単純にべき乗後に剰余を計算してもよいが、計算機ではべき乗時にすぐにオーバーフローしてしまうことは目に見えている。（この場合の計算量は、 \\(O(\\log(e))\\)回の乗算と最後の剰余１回となる） そこで、計算機での計算に都合のいいように計算しなければならない。 たとえば、\\(a, b (\\in\\mathbb{Z})\\) があるとき、 \\[(a \\times b)\\pmod m \\equiv ((a\\pmod m) \\times (b\\pmod m))\\pmod m\\]...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2015/05/13/cpp-implementation-of-modular-exponentiation/",
        "teaser": null
      },{
        "title": "Ruby - べき剰余アルゴリズムの実装！",
        "excerpt":"こんにちは。 前回 C++ で「べき剰余」のアルゴリズムを実装しました。 C++ - べき剰余アルゴリズムの実装！ 今回は Ruby で実装してみました。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 Ruby 2.2.2-p95 での作業を想定。 1. べき剰余、べき剰余演算アルゴリズムについて 前回の記事を参照。 C++ - べき剰余アルゴリズムの実装！ 2. Ruby スクリプトの作成 まず、非再帰的な記述方法で作成。 File: modular_exponentiation_1.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19...","categories": ["プログラミング","数学"],
        "tags": ["C言語"],
        "url": "/2015/05/15/ruby-implementation-of-modular-exponentiation/",
        "teaser": null
      },{
        "title": "C++ - 円周率計算（BBP の公式使用）！",
        "excerpt":"こんにちは。 円周率を計算する際、小数点以下1桁目から希望の桁までを全て計算する方法以外に、希望の桁だけを計算する方法もあります。 小数点以下1桁目から希望の桁までを全て計算した後、任意の桁の値が正しいかどうかを検証するために使用したりします。 今回は BBP(Bailey, Borwein, Plouffe ) の公式を使用して任意の桁の円周率を16進で計算するアルゴリズムを、C++ で実装してみました。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 計算に使用したマシンは CPU: Intel Core2Duo E8500 ( 3.16GHz ), MEM: 3.9GiB 1. BBP の公式を使用した円周率計算について （数式が多いので \\(\\LaTeX\\) で作成した文書を貼り付け）（PDF ファイルは「mk-mode SITE: アーカイブ」に置いた） 2. C++ ソースコードの作成 第1引数で計算を開始する桁を指定し、その桁から 14 桁ほど計算後に先頭 10 桁を出力する仕様。（べき剰余の演算も自前で実装。「C++ - べき剰余アルゴリズムの実装！」参照） File: pi_bbp.cpp 1 2 3...","categories": ["プログラミング","数学"],
        "tags": ["C言語","円周率"],
        "url": "/2015/05/17/cpp-pi-computation-by-bbp/",
        "teaser": null
      },{
        "title": "Ruby - 円周率計算（BBP の公式使用）！",
        "excerpt":"こんにちは。 前回、 BBP(Bailey, Borwein, Plouffe) の公式を使用して任意の桁の円周率を16進で計算するアルゴリズムを C++ で実装しました。 C++ - 円周率計算（BBP の公式使用）！ 今回は、同じアルゴリズムを Ruby で実装してみました。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 ruby 2.2.2-p95 での作業を想定。 計算に使用したマシンは CPU: Intel Core2Duo E8500 ( 3.16GHz ), MEM: 3.9GiB 1. BBP の公式を使用した円周率計算について 前回の記事を参照。 C++ - 円周率計算（BBP の公式使用）！ 2. Ruby スクリプトの作成 第1引数で計算を開始する桁を指定し、その桁から 10 桁を出力する仕様。（べき剰余の演算も自前で実装。「Ruby - べき剰余アルゴリズムの実装！」参照）...","categories": ["プログラミング","数学"],
        "tags": ["C言語","円周率"],
        "url": "/2015/05/19/ruby-pi-computation-by-bbp/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - インストール（サーバ用途・最小構成）！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) をサーバ用途・最小構成でインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Oracle VM VirtualBox で仮想マシンにインストールする。 仮想マシンのメモリ容量は 1GB, ディスク容量は 50GB を想定する。 ネットワークはホストOSからゲストOSへアクセスしたいので「ブリッジ」とする。 DHCP を使用しない。（ネットワークは手動で設定する） パーティションは手動設定する。 プロキシは使用しない。 ソフトウェアのインストールは行わない。（必要になったときにインストールするので） 1. インストールイメージのダウンロード 以下のサイト、もしくは国内ミラーサイトから ISO イメージをダウンロードする。 今回当方は AMD64 版 NetInstall CD イメージ “debian-8.0.0-amd64-netinst.iso” をダウンロードした。（DVD 版でもよいが、必要なものは必要なときにインストールできればよいので NetInstall 版とした） http://cdimage.debian.org/debian-cd/ 当然、ダウンロード後は CD(DVD) に焼き付ける。（ブート可能オプション必須） 仮想マシンにインストールするならディスクに焼き付けなくてもよい。 2. インストール 以下のような手順でインストールする。 （スクリーンショットは、画像が多くなるため非掲載。以下の文章だけで理解できるはず） “Boot...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2015/05/22/debian-8-installation-for-small-server/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - サーバ初期設定！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) インストール後の初期設定についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 「Debian 8 (Jessie) - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 ユーザ名は “masaru” とを想定。 コマンドラインプロンプト # は root ユーザ、 $ は一般ユーザであることを理解しておく。 コメントしての # と混同しないよう注意する。 ネットワークカードは “eth0” を想定。 IP アドレスは固定する。 各種設定ファイルの編集方法までは説明しない。（vi コマンドについての初歩的な知識があることが前提） 1. ネットワークの設定 デフォルトでは DHCP で IP アドレスが付与されるので、固定する。 root でログイン後 “/etc/network/interfaces” を編集する。 File: /etc/network/interfaces 1 2 3...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2015/05/23/debian-8-initial-setting/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - SSH サーバ構築！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) 上に SSH サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 「Debian 8 (Jessie) - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 「Debian 8 (Jessie) - サーバ初期設定！」の方法で初期設定が完了していることを想定。 サーバの IP アドレス 192.168.11.102、ホスト名 vbox、ユーザ名 masaru を想定。 DNS サーバは未だ設定していない。 （設定済みなら、ローカルから IP アドレスではなくホスト名で SSH 接続可） クライアント側は Linux Mint 17.1(64bit) を想定。 SSH 接続に Putty, TeraTerm 等のツールは使用しない。端末コンソールから接続する。 以下ではポート 9999 を想定。 1. SSH...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","SSH"],
        "url": "/2015/05/24/debian-8-ssh-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - セキュリティ・アップデートの自動化！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) のセキュリティ・アップデートを自動化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) サーバでの作業を想定。 cron-apt でもパッケージアップデートの自動化は可能であるが、今回はセキュリティ・アップデートのみなので unattended-upgrades を使用する。 （ちなみに、インストール済みの各種パッケージを自動アップデートするのは（依存パッケージの整合性等の問題があるため）危険であり、当方はセキュリティ・アップデート以外は自動でアップデートしない方針） 以下、 root での作業を想定。 1. unattended-upgrades のインストール unattended-upgrades はデフォルトでインストールされているはずだが、インストールされていなければインストールする。 また、パッケージ変更履歴ツール apt-listchanges もインストールする。 # apt-get install unattended-upgrades apt-listchanges 2. “50unattended-upgrades” の編集 メール送信先を編集（コメント解除）する。（当然、ユーザ名のみならず外部のメールアドレスを設定することも可） File: /etc/apt/apt.conf.d/50unattended-upgrades 1 Unattended-Upgrade::Mail \"root\"; 3. “20auto-upgrades” の作成 以下のコマンドを実行して自動アップデートに関する質問に ＜Yes＞ と回答すると、自動アップグレードのための設定ファイル...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2015/05/25/debian-8-automation-security-update/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - rootkit 検出ツール chkrootkit インストール！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に rootkit 検出ツール chkrootkit をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 chkrootkit が検知できるのは既知の rootkit のみであり、新規の rootkit は検知できない、ということを認識しておく。 chkrootkit では誤検知もあるので、検知結果は参考程度に留める。 コマンド自体が改竄されてからでは遅いので、OS インストール直後に行うのがよい。 1. chkrootkit のインストール # apt-get -y install chkrootkit 2. chkrootkit の実行 以下のようにして chkrootkit を実行してみる。 問題のある（”INFECTED” の）場合のみ出力する。 #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2015/05/27/debian-8-chrootkit-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - アンチウイルスソフト導入！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) にウイルス対策ソフト ClamAV をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 【2016-12-26 追記】 当記事の改訂版を公開しました。 「Debian 8 (Jessie) - アンチウィルスソフト導入（改訂）！」の方をご参照ください。 【追記ここまで】 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 Debian GNU/Linux 8 (Jessie) はサーバ用途としてインストールし、GUI 環境は非整備。 Apt でインストールする。（但し、Apt のパッケージはバージョンが古い。最新版が良ければ、[こちら](http://sourceforge.net/projects/clamav/files/clamav/ ““)からダウンロードしてビルドするとよい） 毎日自動でウイルススキャンを実行するようにする。 1. ClamAV のインストール 以下のようにして、アンチウイルスソフト ClamAV, ClamAV Daemon をインストールする。 # apt-get -y install clamav clamav-daemon...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ウイルス対策"],
        "url": "/2015/05/29/debian-8-anti-virus-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - ファイアウォール設定！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) でファイアウォールを設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 ufw (= Uncomplicated Firewall) という iptables のフロントエンドツールを使用する。 ファイアウォールのルールは、取り急ぎ最低限の設定のみ。（運用する環境やインストールしたサービスに合わせて適宜行う） 1. ufw のインストール 依存する iptables 等もインストールされる。 # apt-get -y install ufw 2. 各種コマンドについて 各種コマンドの使用法について簡単に説明する。 （以下のサービス名、ポート番号は一例） # ufw status # &lt;= 状況確認 # ufw...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ファイアウォール"],
        "url": "/2015/05/30/debian-8-firewall-setting/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - NTP サーバ Chrony 構築！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に NTP サーバ Chrony を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 従来からの ntpd ではなく chronyd をインストールする。 ntpd と chronyd の違いについては、「第13章 chrony スイートを使用した NTP 設定」を参照。 ローカルネットワークは 192.168.11.0/24 とする。 1. Chrony のインストール # apt-get -y install chrony 2. 設定ファイルの編集 File: /etc/chrony/chrony.conf 1 2 3 4...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NTP"],
        "url": "/2015/05/31/debian-8-ntp-chrony-installation/",
        "teaser": null
      },{
        "title": "2015年5月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 36,688 67.4920 Mac OS 11,334 20.8503 Linux 3,014 5.5446 Ubuntu Linux 1,805 3.3205 Android 1,103 2.0291 unknown 250 0.4599 Fedora Linux 73 0.1343 FreeBSD 61 0.1122 RedHat Linux 9 0.0166 Solaris 9 0.0166 PlayStation 4 0.0074 Wii 4 0.0074 Debian GNU/Linux 2 0.0037...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/06/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - サービスの管理！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) でのサービスの管理についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 SystemD の簡単な使用法と SysVinit の導入を行う。 （当方、普段は SystemD でサービスの管理を行うが、有事の際に備えて sysv-rc-conf コマンドも使用できるよう準備しておく（RedHat 系ディストリビューションのサービス管理ツール chkconfig にあたるもの）） 1. SystemD の使用方法 以下は vsftpd サーバの例。（vsftpd.service が正式なサービス名だが .service は省略可能） $ systemctl start vsftpd # &lt;= vsftpd サービスの起動 $ systemctl stop vsftpd # &lt;= vsftpd...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2015/06/03/debian-8-service-management/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - DNS サーバ構築！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に DNS サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 サーバのローカル IP アドレスは 192.168.11.102、グローバル IP アドレスは xxx.yyy.zzz.aaa を想定。 ドメイン名は mk-mode.com、ネームサーバホスト名は ns を想定。 セカンダリ DNS は用意しない。 1. BIND のインストール （”dnsutils” は dig コマンド用） # apt-get -y install bind9 dnsutils 2. BIND 設定ファイルの編集 File: /etc/bind/named.conf 1...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","DNS"],
        "url": "/2015/06/04/debian-8-bind-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - BIND の chroot 化！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に構築した DNS サーバを chroot 化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 DNS サーバ BIND が構築済みであることを想定。 chroot ディレクトリは /var/bind9/chroot/ とする。 1. BIND の停止 BIND が起動していると設定に失敗するので、BIND が起動している場合は停止する。 # systemctl stop bind9 2. 起動オプションの編集 起動時のオプションを変更するよう “/lib/systemd/system/bind9.service” を編集する。 File: /lib/systemd/system/bind9.service 1 2 3 4 [Service] ExecStart=/usr/sbin/named -f...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","DNS"],
        "url": "/2015/06/05/debian-8-bind-chroot/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - FTP サーバ構築！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に FTP サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 接続テストでは FileZilla という FTP クライアントを使用する。 1. vsftpd のインストール # apt-get -y install vsftpd 2. vsftpd 設定ファイルの編集 File: /etc/vsftpd.conf 1 2 3 4 5 6 7 8 9 10 11...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","FTP"],
        "url": "/2015/06/06/debian-8-ftp-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - NFS サーバ構築！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に NFS サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessies) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 NFS 用ディレクトリを新たに作成する。（”/var” 配下に “/exports” ディレクトリを作成する） クライアント側でマウントに使用するディレクトリも “/var/exports” とする。 サーバ側は root で作業することを想定、クライアント側は一般ユーザで作業することを想定している。 1. NFS サーバのインストール # apt-get -y install nfs-kernel-server 2. idmapd 設定の編集...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NFS"],
        "url": "/2015/06/08/debian-8-nfs-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - NFS サーバのポート固定！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に NFS サーバで使用するポートを固定化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 NFS サーバ構築済み。 （参照：「Debian 8 (Jessie) - NFS サーバ構築！」） ファイアウォール iptables が構築済み。 （参照：「Debian 8 (Jessie) - ファイアウォール設定！」） 以下で設定するポート番号は参考サイトによるもであり、任意に設定可能。 quota は使用していないので、参考サイトにある quota の設定はしない。 1. 前提知識 NFS サーバが使用するポートは以下のとおり。 portmapper =&gt; TCP: 111,...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NFS"],
        "url": "/2015/06/09/debian-8-nfs-port-fixing/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Samba サーバ構築！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に Samba サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 全ユーザ共有ディレクトリは “/home/share” とする。 Web ブラウザで管理できるツール SWAT は導入しない。（一度設定してしまえば、使うことはないので） 1. Samba サーバのインストール # apt-get -y install samba 2. 共有ディレクトリの作成 全ユーザが共有でフルアクセス可能なディレクトリを作成する。 # mkdir /home/share #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Samba"],
        "url": "/2015/06/10/debian-8-samba-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - SMTP サーバ Postfix 構築！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に SMTP サーバ Postfix を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は mail を想定。 1. Postfix のインストール SMTP サーバ Postfix と認証・セキュリティツールを以下のようにしてインストールする。 途中でどの設定を選択するか確認されますが、後で設定を行うので “No Configuration(設定なし)” を選択する。 # apt-get -y install postfix sasl2-bin 2. 設定ファイルの編集 設定ファイル...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix"],
        "url": "/2015/06/12/debian-8-postfix-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - POP/IMAP サーバ Dovecot 構築！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に POP/IMAP サーバ Dovecot を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 IPv6 は使用しないことを想定。 1. Dovecot のインストール POP/IMAP サーバ Dovecot を以下のようにしてインストールする。 # apt-get -y install dovecot-common dovecot-pop3d dovecot-imapd 2. 設定ファイル dovecot.conf の編集...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Dovecot"],
        "url": "/2015/06/13/debian-8-dovecot-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - メールサーバ SSL 設定！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に導入したメールサーバを SSL 設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 SMTP サーバは Postfix, POP/IMAP サーバは Dovecot を想定。 Postfix を「Debian 8 (Jessie) - SMTP サーバ Postfix 構築！」の方法で導入済み。 Dovecot を「Debian 8 (Jessie) - POP/IMAP サーバ Dovecot 構築！」の方法で導入済み。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix","Dovecot","SSL"],
        "url": "/2015/06/14/debian-8-mail-ssl-setting/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Postfix と ClamAV の連携！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に導入した SMTP サーバ Postfix を アンチウイルスソフト ClamAV と連携する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 SMTP サーバ Postfix を「Debian 8 (Jessie) - SMTP サーバ Postfix 構築！」の方法で導入済み。 アンチウイルスソフト ClamAV 導入済み。 スパムフィルタも運用する。 ちなみに、アンチウイルス ClamAV との連携には、 ClamAV daemon を使用する方法の他にClamSMTP を使用する方法もある。 ちなみに、スパムフィルタ SpamAssassin...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix","ウイルス対策"],
        "url": "/2015/06/15/debian-8-postfix-cooperation-with-clamav/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Postfix ログ解析！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に導入した SMTP サーバ Postfix のログを解析する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 SMTP サーバ Postfix を「Debian 8 (Jessie) - SMTP サーバ Postfix 構築！」の方法で導入済み。 ログローテート（logrotate）でメールログがローテーションされていることを想定。（デフォルトでなっているはず） 1. pflogsumm のインストール Postfix のログ解析ツールである pflogsumm を、以下のようにしてインストールする。 # apt-get -y install pflogsumm 2. pflogsumm 実行用スクリプトの作成...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix"],
        "url": "/2015/06/16/debian-8-postfix-log-analysis/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - DB サーバ MariaDB 構築！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に DB サーバ MariaDB を導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 デフォルトのリポジトリを使用してインストールする。（MariaDB 公式リポジトリではない） MariaDB とは言っても中身は MySQL が元になっているので、各所で “mysql” のキーワードが出現する。 ベースディレクトリ、データディレクトリ、ソケット・PID ディレクトリ等は全てデフォルトのままを想定。 レプリケーション機能、GTID(Global Transaction ID) 機能は使用しないことを想定。 1. MariaDB のインストール 以下のようにしてインストールする。（途中で root パスワードの設定がある） # apt-get -y install mariadb-server 2. インストールの確認...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","MariaDB"],
        "url": "/2015/06/18/debian-8-mariadb-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に Web サーバ Nginx を導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0 前提条件 Debian GNU/Linux 8 (Jesie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 Debian 公式リポジトリの Nginx はバージョンが古いため、Nginx リポジトリを使用して 1.8.0（当記事執筆時点最新安定版）をインストールする。 実際に運用する際は、ドキュメントルートを変更する等、設定を編集すること。 1. リポジトリ追加の設定 まず、キー追加。 # wget http://nginx.org/keys/nginx_signing.key # apt-key add nginx_signing.key そして、リポジトリ追加の設定を行う。 実際には、以下を “/etc/apt/sources.list” の最終行に追加するか、以下の内容で “/etc/apt/sources.list.d/Nginx.list” なるファイルを作成する。 File: /etc/apt/sources.list.d/Nginx.list 1 2...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx"],
        "url": "/2015/06/19/debian-8-nginx-installation-by-official-apt/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Web サーバ Nginx で SSL 接続！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に構築した Web サーバ Nginx で SSL 接続するための設定についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 クライアント側は Linux Mint 17.1 を想定。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 Web(HTTP)サーバ Nginx が「Debian 8 (Jessie) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！」の方法で導入済みであることを想定。 当方はメールサーバ構築時に SSL 証明書作成済みであったので、以下の “2” から作業を行なった。 1. SSL 証明書の作成 openssl 未インストールならインストール。 #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx","SSL"],
        "url": "/2015/06/20/debian-8-nginx-ssl-connection-setting/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Ruby 2.2 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に Ruby 2.2 をソースをビルドしてインストール方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 接続元のマシンは Linux Mint 17.1(64bit) を想定。 インストールする Ruby は 2.2.2-p95 作業は全て root ユーザで行なっている。 1. 必要パッケージのインストール Ruby のインストールに必要なパッケージを予めインストールする。（他に必要なものがあればインストールする） # apt-get install libffi-dev zlib1g-dev libssl-dev libreadline-dev libgdbm-dev libbison-dev 2. アーカイブファイルのダウンロード＆展開 アーカイブファイルをダンロードし、展開する。（ダンロード先は “/usr/local/src” としている） # cd /usr/local/src...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Ruby"],
        "url": "/2015/06/22/debian-8-ruby-2-2-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Python 3.4 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に Python 3.4 をソースをビルドしてインストール方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 クライアント側は Linux Mint 17.1(64bit) を想定。 デフォルトでインストールされている Python 2.7.9 はアンインストールせず、Python 3.4.3 をインストールし、 2.7.9 と 3.4.3 を共存させる。 （python コマンドと python3.4 コマンドで使い分ける） 「デフォルトでインストールされている Python をアンインストールすることはサーバ管理上悪影響を与えるので危険である」ということを理解しておく。 1. Python のバージョン確認 インストール済み（現状）の Python のバージョンを確認してみる。 # python -V Python 2.7.9...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Python"],
        "url": "/2015/06/23/debian-8-python-3-4-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Rsync でディレクトリ同期（xinetd 使用）！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) の Rsync サーバでクライアントとディレクトリ同期（xinetd 使用）する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 ローカルマシン（Linux Mint 17.1）からサーバマシン（Debian Jessie）へ同期することを想定。 サーバ側のバックアップ用ディレクトリは “/home/bak” とする。 同期元（クライアントマシン）の IP アドレスは 192.168.11.11 を想定。 同期先（サーバマシン）の IP アドレスは 192.168.11.102 を想定。 ファイアウォールに ufw を使用していることを想定。 記事後半で xinetd を使用する方法を記述。 サーバ(Debian)側では IPv6 は使用しない。（IPv4 を使用） 以下の記事内では、サーバ側の設定とクライアント側の設定を記述しているので混同しないこと。 1. 【サーバ側】Rsync のインストール 同期先のサーバマシン(Debian)へ Rsync...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","rsync"],
        "url": "/2015/06/25/debian-8-rsync-dir-synchronizing-by-xinetd/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - ログ解析ツール logwatch インストール！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) にログ監視ツール LogWatch をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 1. logwatch のインストール # apt-get -y install logwatch 2. logwatch 設定ファイルの編集 まず、デフォルトの設定ファイルを複製する。 # cp /usr/share/logwatch/default.conf/logwatch.conf /etc/logwatch/conf/ デフォルトの設定で充分であるが、必要なら編集する。 メールの送信先等を変更するなら以下のようにする。 File: /etc/logwatch/conf/logwatch.conf 1 2 MailTo = hoge@xxxx.com # &lt; = メール送信先 Detail = High # &lt;...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2015/06/26/debian-8-logwatch-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - 自動バックアップ運用！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) で自動バックアップ運用する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 バックファイルを配置するディレクトリは “/home/backup” とする。 1. バックアップスクリプトの作成 以下のような内容でバックアップスクリプト “backup.sh” を作成する。 File: backup.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2015/06/27/debian-8-automatic-backup-setting/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Git インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に Git サーバをソースをビルドしてインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 apt パッケージでインストールしていた git はアンインストール済みであることを想定。 Git 2.4.0 （当記事執筆時点で最新）をインストールすることを想定。 アーカイブ保存先は “/usr/local/src” を想定。 クライアントからアクセスがあった時だけサーバを起動するために xinetd を使用する。 1. 依存パッケージのインストール # apt-get -y install libcurl4-gnutls-dev libexpat1-dev \\ gettext libz-dev libssl-dev 2. アーカイブファイルの取得 # cd /usr/local/src # wget https://www.kernel.org/pub/software/scm/git/git-2.4.0.tar.gz #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Git"],
        "url": "/2015/06/28/debian-8-git-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - PHP インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に PHP をソースをビルドしてインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は Linux Mint 17.1 を想定。 Web サーバ Nginx, DB サーバ MariaDB(MySQL) と連携することを想定。 DB サーバ MariaDB がインストール済みであることを想定。 Web&amp;ReverseProxy サーバ Nginx がインストール済みであることを想定。 PHP 5.6.8（当記事執筆時点で最新）をインストールする。 1. 依存パッケージのインストール ビルドに必要と思われるパッケージで未インストールのものをインストールしておく。（configure オプションの指定により必要になるパッケージは異なる） # apt-get -y install g++...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","PHP"],
        "url": "/2015/06/29/debian-8-php-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - PHP と Nginx の連携！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) にインストールした PHP を Web サーバ Nginx と連携する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 クライアント側は Linux Mint 17.1 を想定。 「Debian 8 (Jessie) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！」のとおり Nginx のインストールを行なっている。 「Debian 8 (Jessie) - PHP インストール（ソースビルド）！ 」のとおり PHP のインストールを行なっている。 ドキュメントルートは “/var/www/html” を想定。 サービスの起動は SysVinit...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","PHP","Nginx"],
        "url": "/2015/06/30/debian-8-php-cooperation-with-nginx/",
        "teaser": null
      },{
        "title": "2015年6月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"7月になりましたので、先月6月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 40,243 65.7522 Mac OS 14,212 23.2207 Linux 3,228 5.2742 Ubuntu Linux 1,724 2.8168 Android 1,311 2.1420 unknown 279 0.4559 Fedora Linux 103 0.1683 FreeBSD 37 0.0605 RedHat Linux 36 0.0588 OpenBSD 16 0.0261 PlayStation 5 0.0082 Solaris 5 0.0082 Debian GNU/Linux 3 0.0049...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/07/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - サーバ監視ツール munin 導入！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) にサーバ監視ツール munin をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 Web サーバは Nginx を想定。 munin 用ディレクトリは “/var/www/munin” とする。 1. munin のインストール # apt-get -y install munin 2. 設定ファイルの編集 File: /etc/munin/munin.conf 1 2 3 4 5 6 dbdir /var/lib/munin # &lt;= コメント解除 htmldir /var/www/munin #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2015/07/03/debian-8-munin-installation/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - munin 各種監視追加！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) にインストールしたサーバ監視ツール munin に各種監視を追加する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 サーバ監視ツール munin がインストール済み。 ハードディスク温度の監視を追加する。 CPU 温度・電圧・ファン回転数の監視を追加する。 MariaDB(MySQL) の監視を追加する。 Nginx の監視を追加する。 1. ハードディスク温度の監視追加 smartctl コマンドを使用するので、以下のようにしてインストールしておく。 # apt-get -y install smartmontools 以下のように設定ファイル “hddtemp_smartctl” を作成する。（”munin-node” に追記してもよい） File: /etc/munin/plugin-conf.d/hddtemp_smartctl 1 2 3 4 5 [hddtemp_smartctl] user root env.drives...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2015/07/04/debian-8-munin-additional-setting/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Web メールシステム Roundcube Webmail インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 8 (Jessie) に Web メールソフト RoundcubeMail をソースをビルドしてインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 送信メールサーバ Postfix, 受信メールサーバ Dovecot インストール済み。 DB サーバ MariaDB(MySQL) インストール済み。（Debian 8 (Jessie) - DB サーバ MariaDB 構築！） Web サーバは Apache ではなく Nginx を想定。（Debian 8 (Jessie) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！） PHP インスール済みであること。（Debian...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Mail","Postfix","Dovecot"],
        "url": "/2015/07/06/debian-8-roundcube-mail-installation/",
        "teaser": null
      },{
        "title": "Linux - pv コマンドで処理進捗状況表示！",
        "excerpt":"Linux で何か時間のかかる処理を実行中に、処理の進行状況や処理終了までの大まなか残り時間を知りたいことがあります。 以下、 pv コマンド使用してプログレバーを表示させる方法についての備忘録です。（”pv” は Pipe Viewer の略） ちなみに、当方が pv コマンドを導入した主な理由は、 MariaDB(MySQL) の大容量ダンプファイルをインポート（リストア）する際に進捗状況を知りたかったからです。 0. 前提条件 Debian 8.1 Jessie での作業を想定。 （他バージョンも同様。他ディストリビューションもインストール方法以外は同様） 1. pv コマンドのインストール # apt-get install pv 2. 使用方法 （pv コマンドには cat コマンドのような機能があることに留意） 以下は、テキストファイルを gzip 圧縮する例。 （gzip -c hoge.txt.gz | pv &gt; /dev/null でも gzip 圧縮は可能だが、テキストファイルの容量が取得できないため処理終了までの残り時間は分からない） # pv hoge.txt...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2015/07/09/linux-display-progress-of-process-by-pv/",
        "teaser": null
      },{
        "title": "Linux - ionice でディスクI/Oによる負荷を調整！",
        "excerpt":"ご存知のとおり、プロセス実行優先度の管理は nice コマンドで行います。 今回は、ディスク I/O 優先度の管理を行う ionice についての備忘録です。 0. 前提条件 Debian GNU/Linux 8 Jessie での作業を想定。 1. 使用方法 $ ionice --help ionice - sets or gets process io scheduling class and priority. Usage: ionice [OPTION] -p PID [PID...] ionice [OPTION] COMMAND Options: -c, --class &lt;class&gt; scheduling class name or number 0:...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2015/07/12/linux-adjust-disk-io-stress-by-ionice/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - 既存 InnoDB ファイルフォーマットを Antelope から Barracuda に変換！",
        "excerpt":"MariaDB(MySQL) の既存 InnoDB ファイルフォーマットを Antelope から Barracuda に変換する方法についての記録です。 0. 前提条件 当方は MariaDB 10.0.20 で動作確認を行なったが、別のバージョンや MySQL でも同様。 InnoDB ストレージエンジンを使用する設定にしている。（必須） InnoDB データファイルをテーブルごとに作成するシステム変数 innodb_file_per_table を 1（有効） にしている。（必須） 不測の事態に備えてデータのバックアップ（ダンプ）をとって作業を行うこと。（重要） 1. InnoDB ファイルフォーマットについて InnoDB ファイルフォーマットの設定は MariaDB(MySQL) システム変数 innodb_file_format で行うが、設定していなければ Antelope がデフォルトで設定される。 Antelope フォーマット 可変長カラム(VARBINARY, VARCHAR, BLOB, TEXT)の先頭768バイトを B-tree ノードのインデックスレコードに格納し、残りをオーバーフローページに格納する。 REDUNDANT … かつてからの冗長な行フォーマット。 COMPACT … MySQL...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","Linux"],
        "url": "/2015/07/15/mariadb-innodb-file-format-changing-to-barracuda/",
        "teaser": null
      },{
        "title": "MariaDB - レプリケーション設定（GTID 使用）！",
        "excerpt":"従来からあるレプリケーションとは異なる GTID(Global Transaction ID) を使用したレプリケーション設定の記録です。 MySQL とは実装自体が異なるため、MySQL と若干設定の異なる部分もあります。 0. 前提条件 Master 側、Slave 側ともに MariaDB 10.0.20 を想定。 Master 側は既存のサーバ、Slave 側は今回新規に構築したばかりのサーバを想定。 （Slave 側も既存のサーバの場合は、 “ibdata1”, “ib_logfile0”, “ib_logfile1” ファイルを削除(DISCARD)する作業が必要かも） レプリケーション用のユーザは “repl” を想定。 ストレージエンジンは InnoDB を想定。 GTID(Global Transaction ID) がどんなものであるかは、ここでは説明しない。 以下の説明で出現する設定ファイルは、環境によりパスやファイル名が異なるかもしれないので、適宜置き換えること。 1. [Master] 設定ファイルの編集 MariaDB 設定ファイル “/etc/mysql/conf.d/mariadb.cnf” を編集する。 File: /etc/mysql/conf.d/mariadb.cnf 1 2 3 4 5...","categories": ["サーバ構築"],
        "tags": ["MariaDB","Linux"],
        "url": "/2015/07/18/mariadb-replication-by-gtid/",
        "teaser": null
      },{
        "title": "Linux & Ruby - メール受信時の処理！",
        "excerpt":"Linux 上に構築したメールサーバで、メール受信をトリガにして処理を実行する手順等についての記録です。 処理は Ruby で行うことを想定しています。（多くのサイト等では Perl や PHP での処理がよく紹介されてます） 0. 前提条件 Debian GNU/Linux 8.1 での作業を想定。 Ruby 2.2.2-95 での作業を想定。 SMTP サーバ Postfix 構築済み。 参考「Debian 8 (Jessie) - SMTP サーバ Postfix 構築！」 POP/IMAP サーバ Dovecot 構築済み。 参考「Debian 8 (Jessie) - POP/IMAP サーバ Dovecot 構築！」 Postfix の aliases （メール転送機能）と連携をとる方法を想定。 処理対象のユーザ・グループは “test”, “test” を想定。...","categories": ["サーバ構築","プログラミング"],
        "tags": ["Linux","Ruby","Postfix","Dovecot"],
        "url": "/2015/07/21/linux-ruby-process-when-mail-received/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で配列要素にランク付け（同順位考慮）！",
        "excerpt":"Ruby で配列内の数値をランク付け（同順位を考慮）する方法を、 Array クラスを拡張して実装してみました。 0. 前提条件 Ruby 2.2.2-p95 での作業を想定。 配列内の数値が大きい順に順位を付ける。 同順位を考慮する。（例：要素が 3, 1, 3, 2 で、大きい順に順位付ける場合の順位を 1, 4, 1, 3 とする） 1. Ruby スクリプトの作成 実質、配列の順位付を行なっているのは１行のみで、数値が自分より大きい要素の個数 +1 を順位とするアルゴリズム。 File: array_rank.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2015/07/24/ruby-ranking-simultaneous-arrival-by-array-class/",
        "teaser": null
      },{
        "title": "AMaViS - エラー(on Debian 8 Jessie)！",
        "excerpt":"Debian GNU/Linux 8 Jessie で Postfix と AMaViS を連携してメールのウイルスチェックを行うようにしているのですが、メールログにエラーメッセージが出力されていたので、調査して対策を施しました。 0. 前提条件 Debian GNU/Linux 8.1 Jessie での作業を想定。 アンチウィルスソフト ClamAV を「Debian 8 (Jessie) - アンチウィルスソフト導入！」の方法でインストールしていることを想定。 SMTP サーバ Postfix を「Debian 8 (Jessie) - SMTP サーバ Postfix 構築！」の方法でインストールしていることを想定。 Postfix と ClamAV の連携を「Debian 8 (Jessie) - Postfix と ClamAV の連携！」の方法で行なっていることを想定。 1. 現象 メールログに以下のようなエラーメッセージが出力される。 File: /var/log/mail.log...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Mail","Postfix","ウイルス対策"],
        "url": "/2015/07/27/debian-8-amavis-error/",
        "teaser": null
      },{
        "title": "Linux Mint - Gnuplot でグラフ描画！",
        "excerpt":"Linux Mint で、2次元や3次元のグラフを描画するためのコマンドラインツール Gnuplot を使用してみました。 0. 前提条件 Linux Mint 17.1(64bit) での作業を想定。 Apt パッケージを使用して 4.6.4 をインストールする。 1. Gnuplot のインストール $ sudo apt-get install gnuplot-x11 注意するのは gnuplot でなく gnuplot-x11 をインストールするということ。 （こうしないと、 Gnuplot を起動してコマンドを入力してもグラフウィンドウが開かない） ちなみに、最新バージョンの Gnuplot をインストールしたければ、以下のようにしてインストールすればよい。（但し、環境によってはスムーズ（or 綺麗）にインストールできないかもしれない） $ wget http://sourceforge.net/projects/gnuplot/files/gnuplot/5.0.1/gnuplot-5.0.1.tar.gz $ tar zxvf gnuplot-5.0.1.tar.gz $ cd gnuplot-5.0.1 $ ./configure $ make $...","categories": ["PC_Tips"],
        "tags": ["LinuxMint","gnuplot"],
        "url": "/2015/07/30/linux-mint-installation-gnuplot/",
        "teaser": null
      },{
        "title": "2015年7月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"8月になりましたので、先月7月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 36,147 66.7720 Mac OS 11,883 21.9507 Linux 3,068 5.6673 Ubuntu Linux 1,503 2.7764 Android 1,040 1.9211 unknown 205 0.3787 Fedora Linux 164 0.3029 FreeBSD 96 0.1773 Solaris 12 0.0222 RedHat Linux 9 0.0166 Debian GNU/Linux 4 0.0074 NetBSD 3 0.0055 PlayStation 1 0.0018...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/08/01/blog-access/",
        "teaser": null
      },{
        "title": "Linux Mint - tmux 2.1 のインストール（by ソースビルド）！",
        "excerpt":"ターミナルマルチプレクサ（仮想端末マネージャ）である tmux(Terminal MUltipleXer) の最新版を Linux Mint へインストールする方法についての記録です。 これまで Apt パッケージでインストールした tmux 1.8 を使用していました。 しかし、使用したいプラグインが tmux 1.9 未満ではインストールできないため、最新版の 2.1 をソースビルドでインストールすることとしました。 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 Git でソースを取得するため Git がインストール済みであること。 当記事執筆時点で最新の tmux 2.1 をインストールする。 Apt でインストールしていた tmux 1.8 はアンインストールしておく。 1. libevent-dev のインストール libevent-dev 2.x のパッケージが必要なので未インストールならインストールする。 （以前は Apt では 2.x はインストールできずソースをビルドしてインストールする必要があったが、今は Apt...","categories": ["PC_Tips"],
        "tags": ["LinuxMint","tmux"],
        "url": "/2015/08/03/linux-mint-tmux-installation-by-src/",
        "teaser": null
      },{
        "title": "tmux - Window, Pane, Session 自動保存プラグイン！",
        "excerpt":"ターミナルマルチプレクサ（仮想端末マネージャ） tmux の Window, Pane, Session 等を保存（自動保存）するプラグインをインストールする方法についての記録です。 Window, Pane, Session 等を保存するプラグインは tmux-resurrect で、それを自動化するプラグインは tmux-continuum です。 また、プラグインの管理には tpm(Tmux Plugin Manager)を使用します。 （以前は tmux-resurrect を自動化するプラグインは tmux-resurrect-auto でしたが、現在は tmux-continuum に改名されています。tmux-resurrect-auto も使用できますが） 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 tmux 2.1 での作業を想定。 Git がインストール済みであること。 tpm(Tmux Plugin Manager) で tmux プラグインを管理することを想定。 （tpm を使用せず手動でインストールすることも可能） 1. tpm のインストール tmux...","categories": ["PC_Tips"],
        "tags": ["tmux"],
        "url": "/2015/08/06/tmux-automatic-session-preservation/",
        "teaser": null
      },{
        "title": "Linux Mint - Groonga インストール（by ソースビルド）！",
        "excerpt":"オープンソースのカラムストア機能付き全文検索エンジン Groonga を、ソースをビルドしてインストールする方法についての記録です。（最後に簡単な使用例も紹介） 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 当記事執筆時点で最新の Groonga 5.0.5 をインストールする。 トークナイザは、デフォルトの N-gram 方式ではなく形態素解析器 MeCab を使用することを想定。 ここでは、全文検索がどういうものかという説明はしない。 以下の説明内で出力するデータは、可読性を考慮して整形している。 1. 依存パッケージのインストール $ sudo apt-get -y install wget tar build-essential \\ &gt; zlib1g-dev liblzo2-dev libmsgpack-dev \\ &gt; libzmq-dev libevent-dev libmecab-dev 2. アーカーブソースの取得 アーカイブファイルをダウンロード後、展開する。 $ wget http://packages.groonga.org/source/groonga/groonga-5.0.5.tar.gz $ tar zxvf groonga-5.0.5.tar.gz...","categories": ["PC_Tips"],
        "tags": ["LinuxMint","Groonga"],
        "url": "/2015/08/09/linux-mint-groonga-installation-by-src/",
        "teaser": null
      },{
        "title": "Ruby - gnuplot でグラフ描画！",
        "excerpt":"Ruby で容易にグラフを描画できる RubyGems ライブラリ gnuplot を使用してみました。 RubyGems ライブラリ gnuplot は、2次元や3次元のグラフを描画するためのコマンドラインツール Gnuplot を Ruby で使用できるようにラップしたものです。 0. 前提条件 Linux Mint 17.1(64bit) 一般ユーザでの作業を想定。 Ruby 2.2.2-p95 での作業を想定。 Gnuplot インストール済みであること。（Linux Mint - Gnuplot でグラフ描画！） 1. RubyGems パッケージのインストール $ sudo gem install gnuplot 2. 動作確認 2-1. 作成例・１ 単純な\\(sin\\)曲線・\\(cos\\)曲線を描画する例。 File: gnuplot_1.rb 1 2 3 4 5 6...","categories": ["プログラミング"],
        "tags": ["Ruby","gnuplot"],
        "url": "/2015/08/13/ruby-graph-drawing-by-gnuplot/",
        "teaser": null
      },{
        "title": "Ruby - Rroonga で全文検索！",
        "excerpt":"Ruby でカラムストア機能付き全文検索エンジン Groonga の機能を容易に使用できる Rroonga を使用してみました。 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 Ruby 2.2.2-p95 での作業を想定。 カラムストア機能付き全文検索エンジン Groonga がインストール済みであること。 1. Rroonga のインストール 以下のようにしてインストールする。 （ちなみ、 Groonga 未インストールなら、ここでインストールされるはず。（当方 Groonga インストール済みなので、未確認）） $ sudo gem install rroonga 2. データベースの作成 簡単な都道府県名データベースを作成してみる。 取り急ぎ対話形式で作業を行いたいので、 pry(or irb) に入る。（プロンプトを簡易表示。 groonga を require して） $ pry --simple-prompt -r groonga まず、エンコーディングの設定を行う。（今回は Linux...","categories": ["プログラミング"],
        "tags": ["Ruby","Groonga","Rroonga"],
        "url": "/2015/08/17/ruby-rroonga-fulltext-searching/",
        "teaser": null
      },{
        "title": "MariaDB 10.0.x - Mroonga プラグインの有効化！",
        "excerpt":"全文検索エンジン Groonga をベースとした MySQL のストレージエンジン Mroonga を MariaDB で使用する方法についての簡単な記録です。 MariaDB 10.0.x では Mroonga のプラグインがバンドルされているので、 Mroonga を別途インストールする必要はありません。 プラグインを有効にすればすぐに使用できるようになります。（但し、バンドルされている Mroonga はバージョンが少し古いようなので、最新バージョンを使用したければ別途インストールする必要があります） （Groonga, Mroonga については不勉強で疎いため、乱文ご容赦ください） 0. 前提条件 MariaDB 10.0.21 (on Linux Mint 17.2) での作業を想定。 1. プラグインの有効化 以下の SQL を実行して、プラグインを有効にする。 &gt; INSTALL PLUGIN Mroonga SONAME 'ha_mroonga.so'; &gt; CREATE FUNCTION last_insert_grn_id RETURNS INTEGER SONAME 'ha_mroonga.so';...","categories": ["サーバ構築"],
        "tags": ["Groonga","Mroonga","MariaDB"],
        "url": "/2015/08/21/mariadb-mroonga-installation/",
        "teaser": null
      },{
        "title": "Ruby - dRuby で分散処理！",
        "excerpt":"dRuby とは、 Ruby で分散オブジェクトプログラミングするためのライブラリです。 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 Ruby 2.2.3-p173 での作業を想定。 本来は複数のマシンで実行することが多いと思うが、今回は１つのマシンでテストする。 特に別途インストールの必要なライブラリ等はない。 1. サーバ側スクリプトの作成例 日付・時刻の文字列を返すだけの簡単な例。 File: druby_server.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/local/bin/ruby # coding: utf-8 require 'drb/drb' # 通信を待ち受ける...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2015/08/25/ruby-distributed-processing-by-druby/",
        "teaser": null
      },{
        "title": "Ruby - dRuby でジョブキューサーバ構築！",
        "excerpt":"前回に引き続き、Ruby の分散オブジェクトプログラミングするためのライブラリ dRuby についての内容です。 今回は、 dRuby を利用してジョブキューサーバ＆クライアントを構築してみました。 要は、キューに順次プッシュした内容をクライアント側から順次ポップする仕組みのことです。 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 Ruby 2.2.3-p173 での作業を想定。 本来は複数のマシンで実行することが多いと思うが、今回は１つのマシンでテストする。 dRuby の簡単な使用例は「Ruby - dRuby で分散処理！」を参照。 1. サーバ側スクリプトの作成例 Queue オブジェクトを生成して待ち受けるのみの簡単なスクリプト。 File: queue_server.rb 1 2 3 4 5 6 7 #!/usr/local/bin/ruby # codeing: utf-8 require 'drb/drb' q = Queue.new DRb.start_service(\"druby://localhost:8787\", q, safe_level: 1) DRb.thread.join...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2015/08/29/ruby-job-queue-server-construction-by-druby/",
        "teaser": null
      },{
        "title": "2015年8月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"9月になりましたので、先月8月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 33,369 66.2780 Mac OS 11,897 23.6300 Linux 2,344 4.6557 Ubuntu Linux 1,377 2.7350 Android 904 1.7955 unknown 240 0.4767 Fedora Linux 136 0.2701 FreeBSD 56 0.1112 RedHat Linux 10 0.0199 Solaris 5 0.0099 NetBSD 3 0.0060 Debian GNU/Linux 3 0.0060 PlayStation 1 0.0020...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/09/01/blog-access/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - インデックス名一覧取得！",
        "excerpt":"MariaDB(MySQL) で作成済みのインデックスの名称を確認したい場合、 SHOW INDEX FROM table_name を使用することが多いと思います。 しかし、一度に多数のテーブルについて確認したい場合に、テーブル単位で SHOW INDEX FROM table_name を実行するのは大変面倒です。 以下で、指定データベース内の全テーブルに作成済みのインデックスを一覧表示する SQL 等を紹介します。 0. 前提条件 MariaDB 10.0.21 での作業を想定。（MySQL でも同様のはず） 1. SQL 作成 SELECT DISTINCT TABLE_SCHEMA, TABLE_NAME, INDEX_NAME FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = 'scheme_name' -- &lt;= 対象のデータベース名 AND INDEX_NAME &lt;&gt; 'PRIMARY' ORDER BY TABLE_SCHEMA, TABLE_NAME, INDEX_NAME; ちなみに、インデックスに設定されているカラム名やその順番も確認したければ、以下のような SQL...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2015/09/03/mariadb-index-list/",
        "teaser": null
      },{
        "title": "Linux - XML に XSLT を適用して HTML 生成！",
        "excerpt":"以前、 Ruby で XML ファイルに XSL テンプレートを適用して HTML を生成する方法を紹介しました。 Ruby - XML に XSLT を適用して HTML 生成！ ただ、 Linux ディストリビューションによってはデフォルトで XML に XSL テンプレートを適用するコマンドがインストールされています。 わざわざ Ruby を使用しなくてもよいということです。 以下、その使用方法についての備忘録です。 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 XML に XSL テンプレート適用して HTML ファイルを生成するのに xsltproc コマンドを使用する。 1. xsltproc コマンドのインストール xsltproc コマンドが未インストールならインストールしておく。 $ sudo apt-get...","categories": ["PC_Tips"],
        "tags": ["XML","Linux"],
        "url": "/2015/09/07/linux-apply-xslt-to-xml-by-xsltproc/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - XML ダンプ出力から HTML テーブル定義書生成！",
        "excerpt":"MariaDB(MySQL) のテーブル定義書を HTML で生成する方法についての記録です。 実際には、スキーマ（テーブル定義）を XML 出力し、それに XSL テンプレートを適用します。 （テーブル定義を行なってからテーブルを作成するのが本来の手順でしょうが） 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 MariaDB 10.0.21 サーバでの作業を想定。 HTML 生成に xsltproc コマンドを使用するので、未インストールならインストールしておく。 1. XML ダンプ出力 mysqldump コマンドを使用してスキーマ（テーブル定義）のみを XML フォーマットで出力する。 （以下は test というデータベースの towns というテーブルを “test_towns.xml” という XML ファイルに出力する例） $ mysqldump -u username -p --xml --no-data test towns &gt; test_towns.xml...","categories": ["サーバ構築"],
        "tags": ["XML","Linux","MariaDB","MySQL"],
        "url": "/2015/09/12/mariadb-table-definition-from-xmldump-to-html/",
        "teaser": null
      },{
        "title": "Postfix - メールキューの管理！",
        "excerpt":"SMTP サーバ Postfix でのメールキュー管理についての備忘録です。 0. 前提条件 Debian GNU/Linux 8.0(64bit) 上の Postfix 2.11.3-1, CentOS 6.7(32bit) 上の Postfix 2.6.6.-2 での作業を想定。 1. 各種コマンド 1-1. メールキューの確認 配送されずに溜まっているメールキューは “/var/spool/postfix/deferred” ディレクトリ内にある。 それらを確認するには以下のようにする。 $ postqueue -p -Queue ID- --Size-- ----Arrival Time---- -Sender/Recipient------- AF70A2C009D* 1504 Sat Aug 22 23:57:39 hoge@xxxxxxxxxx.com fuga@yyyyyyyyyy.com -- 2 Kbytes in 1 Request. もしくは、...","categories": ["サーバ構築"],
        "tags": ["Linux","Postfix"],
        "url": "/2015/09/17/postfix-management-of-mail-queue/",
        "teaser": null
      },{
        "title": "Ruby - Nokogiri による XML 解析の速度検証！",
        "excerpt":"Ruby で HTML/XML パーサの Nokogiri を使用して XML を解析する際、名前空間(Namespace)が宣言されている場合は厳密に指定する必要があるものだと考えております。 しかし、実際は名前空間を指定せずに解析することも可能です。 （実際、 XML 内の名前空間を削除するメソッドも用意されています。しかし、そのメソッドは名前空間について理解していない人のためのものであり、一般的には使用すべきではありません） 今回は、各種方法で解析し、どの方法が高速であるかを検証してみました。 0. 前提条件 Ruby 2.2.3-p173 での作業を想定。 以下で紹介する検証結果は、使用する XML の構造等により若干異なることもあるかもしれない、ということに留意。 1. 検証に使用する XML ファイル 以下のような XML を使用する。（実際の「気象庁防災情報 XML」通知用 Atom フィードを流用。情報の内容は24時間以内に link タグ内の URL にアクセスして得ることになっている） File: test_nokogiri.xml 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング"],
        "tags": ["Ruby","XML"],
        "url": "/2015/09/22/ruby-verify-xml-parsing-by-nokogiri/",
        "teaser": null
      },{
        "title": "2015年9月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"10月になりましたので、先月9月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,301 64.8719 Mac OS 8,526 24.8015 Linux 1,570 4.5670 Ubuntu Linux 956 2.7809 Android 710 2.0653 unknown 230 0.6691 Fedora Linux 50 0.1454 FreeBSD 18 0.0524 RedHat Linux 12 0.0349 Debian GNU/Linux 2 0.0058 Solaris 2 0.0058 合　計 34,377 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/10/01/blog-access/",
        "teaser": null
      },{
        "title": "Linux - マルチコア CPU で高速圧縮！",
        "excerpt":"通常、 Linux の tar コマンドでファイル等の圧縮を行う場合、 CPU コアを１つしか使用しません。 ２つ以上 CPU コアを搭載していることの多い昨今、 CPU コアを全て使用して圧縮を行うと時間の節約になります。 今回、圧縮・解凍をマルチコアで並列に処理してくれる pigz を使用してみました。 0.前提条件 Linux Mint 17.2(64bit) での作業を想定。 Intel Core2Duo CPU E8500 (3.16GHz x 2) での作業を想定。 1. pigz のインストール Apt パッケージを使用する（但し、最新版ではない可能性が高い） $ sudo apt-get install pigz もしくは、最新版アーカイブを取得＆展開後、 make して適当な位置に配置してもよい。（但し、当方の環境ではビルドエラーになった） $ wget http://zlib.net/pigz/pigz-2.3.3.tar.gz $ tar zxvf pigz-2.3.3.tar.gz $ cd...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2015/10/03/linux-archive-speed-up-on-multi-core-cpu/",
        "teaser": null
      },{
        "title": "Linux - メモリキャッシュのクリア！",
        "excerpt":"Linux でメモリキャッシュをクリアすることについての備忘録です。 0. 前提条件 Linux Kernel 2.6.16 以降であること。 当方は Linux Mint 17.2(64bit), 搭載メモリ:4GB の環境で動作確認。 1. キャッシュの削除方法 以下のコマンドは、 root になって実行するか sudo を使用して実行する。 1-1. ページキャッシュの解放 # sysctl -w vm.drop_caches=1 もしくは、 # echo 1 &gt; /proc/sys/vm/drop_caches 1-2. Slab キャッシュの解放 （Slab キャッシュとは、ディレクトリやファイルのメタデータ情報を格納する dentry や inode のこと） # sysctl -w vm.drop_caches=2 もしくは、 # echo 2...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2015/10/09/linux-release-memory-caches/",
        "teaser": null
      },{
        "title": "Linux Mint - apt-get update で GPG 公開鍵エラー！",
        "excerpt":"Linux Mint で、いつしか Apt パッケージの一覧を更新しようとすると GPG 公開鍵エラーが発生するようになりました。 以下、現象・原因・対策についての備忘録です。 0. 前提条件 Linux Mint 17.2(64bit) を想定。 1. 現象 Apt パッケージ一覧をアップデートした際に以下のようなエラーが発生する。（W なので分類としては「警告」でしょうが） （以下は QGIS というパッケージの部分で発生した例で、実際のメッセージは１行） $ sudo apt-get update ====&lt; 途中省略 &gt;==== W: GPG エラー: http://qgis.org trusty InRelease: 公開鍵を利用できないため、以下の署名は検証できませんでした: NO_PUBKEY 3FF5FFCAD71472C4 ====&lt; 以下省略 &gt;==== 当然ながら、アップデートマネージャでも同じエラーが発生する。 2. 原因 メッセージのとおり、GPG 署名の検証に必要な公開鍵が存在しないため。 3. 対策 キーサーバに問い合わせればよい。（--recv-keys の値は、エラーメッセージ中...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2015/10/14/linux-mint-apt-gpg-pubkey-error/",
        "teaser": null
      },{
        "title": "Linux - スワップ領域の作成！",
        "excerpt":"スワップ領域の容量が不足した際に追加で作成する方法についてです。 本来なら物理メモリを増設すべきでしょうが、それまでの緊急的な措置としてスワップファイルを作成してそれをスワップ領域に割り当てるのです。 0. 前提条件 CentOS 6.6(32bit) での作業を想定。（他のディストリビューションでも同じ） root での作業を想定。 1. スワップファイルの作成 以下は、ブロックサイズ 1MiB で 2GB(1024 x 1024 x 2ブロック) のスワップ領域用のファイルを作成する例。 # dd if=/dev/zero of=/var/tmp/swap bs=1024 count=2097152 2097152+0 records in 2097152+0 records out 2147483648 bytes (2.1 GB) copied, 74.8475 s, 28.7 MB/s 2. 権限付与 root のみが読み書きできるように権限を付与する。 （root でなく、一般ユーザで作業している場合は、所有者・グループを root にする） #...","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2015/10/20/linux-create-swap-area/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - データのみを指定件数ずつ分割ダンプ出力！",
        "excerpt":"MariaDB(MySQL) の指定したデータベースを、テーブル別にデータのみを指定件数ずつ分割してダンプ出力する方法についてです。 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 MariaDB 10.0.21 サーバでの作業を想定。（MySQL や他のバージョンでも同様（のはず）） Bash スクリプトを作成して実現させる。 出力されたダンプファイルはまとめて圧縮保存する。 必要であれば、「MySQL(MariaDB) - スキーマのみ、データのみ、ストアド・トリガーのみのダンプ！」も参考にしてください。 以下で紹介する Bash スクリプトでは、トランザクションの単位がテーブル・ループ単位となるため、データの整合性に注意。 （ダンプ出力時やリストア時に DB への挿入・更新・削除がないことが前提） 1. Bash スクリプトの作成 以下は、当方がデータのみを分割ダンプ出力する際に使用している Bash スクリプトである。（解説はスクリプト内のコメントにて。 (*) はさらなる説明を後述） File: db_dump_only_data_by_split.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["サーバ構築"],
        "tags": ["Linux","MariaDB","MySQL","bash"],
        "url": "/2015/10/26/mariadb-dump-only-data-by-split/",
        "teaser": null
      },{
        "title": "2015年10月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"11月になりましたので、先月10月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 32,553 64.2210 Mac OS 12,548 24.7549 Linux 2,511 4.9537 Ubuntu Linux 1,448 2.8566 Android 1,106 2.1819 unknown 375 0.7398 Fedora Linux 85 0.1677 FreeBSD 46 0.0907 Solaris 5 0.0099 RedHat Linux 4 0.0079 PlayStation 3 0.0059 Debian GNU/Linux 2 0.0039 OpenBSD 2 0.0039...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/11/01/blog-access/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - シャットダウン時間の短縮！",
        "excerpt":"MariaDB や MySQL をシャットダウン（or 再起動）する際に時間がかかりすぎることがあります。 バッファの内容をディスクに書き込むのに時間がかかっているからです。 今回は、そのイライラを軽減するための対処についての記録です。 0. 前提条件 MariaDB 10.0.21 での作業を想定（MySQL でも同様） ハード環境により成果は異なる、ということに留意。 1. シャットダウン時に行われる時間のかかる処理 InnoDB Buffer Pool 全領域のチェックポイント。 チェックポイントとは、ダーティページ（変更されたが、まだデータベースファイルに書き込まれていないページ）をテーブルスペースへ書き込むこと。 2. innodb_max_dirty_pages_pct について InnoDB は、ダーティページの割合（単位：%）が innodb_max_dirty_pages_pct の値を超えないように、バッファープールからデータをフラッシュしようとする。 innodb_max_dirty_pages_pct のデフォルト値は 75 innodb_max_dirty_pages_pct の設定可能値は 0 〜 99.999 (MariaDB 10.0.15 以上), 0 〜 99 (MariaDB 10.0.15 未満). 書き込み回数を減らす（書き込みを遅らせる）ためにはこの値を大きくする。 この値を小さくし過ぎると書き込みが頻発し、innodb_buffer_pool_size を大きく設定していても効果が小さくなる。 3. シャットダウン時間の短縮方法...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2015/11/10/mariadb-speedup-shutdown/",
        "teaser": null
      },{
        "title": "Linux - Disk の IOPS の確認！",
        "excerpt":"今回は、Linux OS でハードディスクが単位時間当たりどれくらい入出力要求をこなしているのか？を確認する方法についての備忘録です。 0. 前提条件 CPU と入出力装置の負荷を確認するための iostat コマンドを使用する。 Linux Mint や Debian 等はデフォルトではインストールされていないかもしれない。 その場合は、 apt-get install sysstat 等でインストールする。 1. IOPS について まず “IOPS” とは、記憶装置がある条件下で1秒間で読み込み・書き込みができる回数のことで、 “Input/Output Per Second” の略である。 2. コマンドの実行 以下のようにコマンドを実行する。 # iostat -dx Linux 2.6.32-504.16.2.el6.i686 (hoge.mk-mode.com) 2015年10月06日 _i686_ (1 CPU) Device: rrqm/s wrqm/s r/s w/s rsec/s wsec/s avgrq-sz...","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2015/11/15/linux-check-disk-iops/",
        "teaser": null
      },{
        "title": "Linux Mint - Apt パッケージリストアップデートで GPG 公開鍵の期限切れエラー！",
        "excerpt":"Linux Mint で apt-get update すると公開鍵期限切れのエラーが発生するようになりました。 （以前「Linux Mint - apt-get update で GPG 公開鍵エラー！」という記事も公開しています。参考までに） 以下、現象・原因・対策についての記録です。 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 1. 現象 sudo apt-get update を実行すると以下のようなエラーが発生する。（アップデートマネージャでも同様） W: GPG エラー: http://cran.ism.ac.jp trusty/ Release: 以下の署名が無効です: KEYEXPIRED 1445181253 KEYEXPIRED 1445181253 KEYEXPIRED 1445181253, （ちなみに、今回の現象は統計解析用プログラミング言語 R のパッケージにに関するもの） 2. 原因 エラーメッセージに記載されているとおり、 1445181253 というキーが KEYEXPIRED（期限切れ）になっているため。 3....","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint"],
        "url": "/2015/11/21/linux-mint-apt-gpg-pubkey-expired-error/",
        "teaser": null
      },{
        "title": "Linux - MTU 最適値の導出！",
        "excerpt":"Linux で最適な MTU 値を導出する方法についての備忘録です。 1. MTU について MTU とは Maximum Transmission Unit の略で、ネットワーク上において１フレーム（１回の転送）で送信可能な IP パケットの最大サイズのこと。 （このサイズは IP ヘッダ ＋ ICMP ヘッダ ＋ データのサイズ） 2. MTU 現在値の確認 $ ifconfig ifconfig eth0 Link encap:イーサネット ハードウェアアドレス XX:XX:XX:XX:XX:XX inetアドレス:192.168.XXX.XXX ブロードキャスト:192.168.XXX.255 マスク:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 メトリック:1 RXパケット:49793411 エラー:0 損失:0 オーバラン:0 フレーム:0 TXパケット:30012458 エラー:0...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2015/11/26/linux-mtu-best-effort/",
        "teaser": null
      },{
        "title": "2015年11月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"12月になりましたので、先月11月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 33,449 64.1277 Mac OS 12,623 24.2005 Linux 2,747 5.2665 Ubuntu Linux 1,571 3.0119 Android 1,339 2.5671 unknown 255 0.4889 Fedora Linux 115 0.2205 FreeBSD 41 0.0786 RedHat Linux 5 0.0096 Solaris 5 0.0096 PlayStation 4 0.0077 Debian GNU/Linux 2 0.0038 SuSE Linux 2...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2015/12/01/blog-access/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - ロールフォワード（ポイント・イン・タイム）リカバリ！",
        "excerpt":"MariaDB(MySQL) で障害発生時に、定期的に取得していたダンプファイルでリストアするだけでは、当然タイミングによっては古い状態になってしまいます。 以下は、定期的に取得していたダンプファイルとそれより後のログファイルで障害発生直前の状態までリカバリする方法についての記録です。 0. 前提条件 MySQL 5.6 系、 MariaDB 10.0 系での作業を想定。 （他のバージョンでもそれほど古くなければ同様） バイナリロギングが有効になっている。 （設定ファイル “my.cnf” で log-bin=... の行がコメント化されていない、もしくはサーバ起動時に --log-bin オプションを使用している） 1. はじめに ロールフォワードリカバリとは、簡単には、 バックアップファイルとジャーナルファイルを用いて、障害発生以前の状態に復元すること。（某国家試験で出題される基本的なこと） 今回の MariaDB(MySQL) での作業では、ダンプファイルとバイナリログファイルがそれにあたる。 ポイント・イン・タイムリカバリ(Point-In-Time Recovery, PITR)とは、簡単には、 指定した時間の状態に戻すこと。 障害が発生する直前の状態まで戻すこと。 Oracle の「完全・不完全リカバリ」にあたるもの。 2. 基本的な作業の流れ ダンプ出力（mysqldump による定期バックアップ） 通常運用 障害発生 ダンプファイルのリストア バイナリログの適用（ダンプリストア後〜障害発生直前） 復元確認 3. 作業例 当然ながら、当作業中は整合性を保つためにデータベースサーバへのアクセスが発生しないようにしておくこと。（アプリの停止、Web サーバの停止等） 3-1. ダンプ出力（mysqldump による定期バックアップ）...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2015/12/03/mariadb-rollforward-recovery/",
        "teaser": null
      },{
        "title": "Linux - マシン起動時にディレクトリ・ファイルを自動作成！",
        "excerpt":"Linux で、マシン起動時に自動でディレクトリやファイルを作成する方法についての備忘録です。 0. 前提条件 CentOS 6.7(i386) での作業を想定。（他の Linux ディストリビューションでも同様のはず） 1. はじめに 今回の作業は、 /etc/tmpfiles.d/*.conf ファイルを作成することで実現する。 （環境によっては、 /run/tmpfiles.d/*.conf, /usr/lib/tmpfiles.d/*.conf ファイル） /etc/tmpfiles.d/*.conf ファイル内の書式は以下のとおり。（詳細は「参考サイト」参照 Type Path Mode UID GID Age Argument 2. 作成例 当方が使用する頻度が高いもののみについて、作成例を挙げる。 2-1. ディレクトリが存在しなければ作成する例 「ディレクトリ：/tmp/test_dir, パーミッション：1777, 所有者：root, グループ：root, 有効期限：５日」でディレクトリを作成する例。 File: /etc/tmpfiles.d/test_1.conf 1 d /tmp/test_dir 1777 root root 5d 2-2. ディレクトリが存在しなければ作成し、存在していれば空にする例 「ディレクトリ：/home/foo/test_dir, パーミッション：0755,...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2015/12/08/linux-dir-file-automatic-creation-on-boot/",
        "teaser": null
      },{
        "title": "CentOS - Web/Proxy サーバ Nginx の最新版を yum インストール！",
        "excerpt":"Debian GNU/Linux や Linux Mint への公式 Apt を使用した Nginx のインストールは記録として残していましたが、 CentOS への公式 yum を使用したインストールについて記録として残してなかったので、今回記録しておくことにしました。 0. 前提条件 CentOS 7.1-1503(x86_64) での作業を想定。（CentOS 6 系、5系でも同様（起動方法、自動起動設定、ファイアウォール設定以外は）） 1. yum リポジトリの登録 # rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 以下のようなリポジトリ設定ファイルが作成される。 （上記を実行せず、直接以下のようなファイルを作成してもよい） File: /etc/yum.repos.d/nginx.repo 1 2 3 4 5 6 7 # nginx.repo [nginx] name=nginx repo baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/ gpgcheck=0 enabled=1 2. Nginx のインストール...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2015/12/12/centos-nginx-installation-by-yum/",
        "teaser": null
      },{
        "title": "CentOS 7.1 - DB サーバ MySQL 5.7 構築（公式リポジトリ使用）！",
        "excerpt":"MySQL 5.7 系の最新版を公式リポジトリを使用して CentOS 7.1 にインストールする方法についてです。 0. 前提条件 CentOS 7.1-1503(x86_64) での作業を想定。（CentOS 6 系、5系でも同様（起動方法、自動起動設定、ファイアウォール設定以外は）） 当記事執筆時点で最新の MySQL 5.7.9 をインストールする。 環境の相違によっては以下のとおりにならないかもしれないので、適宜対応する。 1. Yum リポジトリの追加 # rpm -Uvh http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm 2. リポジトリ有効・無効の設定 まず、どんな種類があるのかを確認してみる。 # yum repolist all | grep mysql mysql-connectors-community/x86_64 MySQL Connectors Community 有効: 13+4 mysql-connectors-community-source MySQL Connectors Community - S 無効 mysql-tools-community/x86_64 MySQL...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","MySQL"],
        "url": "/2015/12/16/centos-mysql-57-installation-by-yum/",
        "teaser": null
      },{
        "title": "CentOS - MySQL 5.7 インストール（ソースビルド）！",
        "excerpt":"MySQL 5.7 系の最新版をソースをビルドして CentOS 6.7 にインストールする方法についてです。 0. 前提条件 CentOS 6.7(32bit) での作業を想定。 搭載メモリは 1GB を想定。 1. 必要パッケージの準備 以下の必要なパッケージが未インストールならインストールしておく。 # yum install wget cmake gcc-c++ ncurses-devel zlib-devel 2. MySQL ユーザ・グループの作成 # groupadd mysql # useradd -r -g mysql -s /bin/false mysql 3. ソースの取得 アーカイブファイルを取得、展開後、ディレクトリを移動しておく。 # cd /usr/local/src/ # wget http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.9.tar.gz # tar...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","MySQL"],
        "url": "/2015/12/20/centos-mysql-57-installation-by-src/",
        "teaser": null
      },{
        "title": "jQuery - 古いブログ記事にメッセージを付加！",
        "excerpt":"ブログ記事が古い場合に、昔執筆した記事で情報が古い可能性があるというメッセージを jQuery を使用して出力するようにします。 0. 前提条件 ブログサイトの HTML 内に記事を執筆か投稿した日時が格納されていること。 jQuery を利用できる環境が整っていること。 jQuery スクリプトは別ファイルに分けることを想定。（当然、分けなくても大丈夫） HTML の構成等は環境（使用しているブログソフトや個人の趣味趣向等）により異なるので、以下の文章は適宜置き換えて考えること。 1. 想定する HTML の構成 JavaScript(jQuery) は別ファイルに分け、 &lt;haed&gt; タグ内から呼び出す。 &lt;body&gt; - &lt;article class='hentry'&gt; - &lt;header&gt; - &lt;time&gt; タグの datetime 属性にブログの投稿日時が格納されていることを想定。 &lt;div class='entry-content'&gt; タグ内がブログ記事の内容。 &lt;head&gt; : &lt;script src=\"/path/to/my_custom.js\" type=\"text/javascript\"&gt;&lt;/script&gt; : &lt;/head&gt; &lt;body&gt; : &lt;article class='hentry'&gt; &lt;header&gt; &lt;time class='entry-date'...","categories": ["ブログ"],
        "tags": ["HTML","JavaScript","jQuery"],
        "url": "/2015/12/24/jquery-remarking-old-blog-post/",
        "teaser": null
      },{
        "title": "CentOS 6.7 - 全文検索ストレージエンジン Mroonga 導入（公式リポジトリ使用）！",
        "excerpt":"Mroonga は、全文検索エンジン Groonga をベースとした MySQL のストレージエンジンです。 インストール済みの MySQL（5.6 系）に Mroonga ストレージエンジンを追加する方法についての記録です。 0. 前提条件 CentOS 6.7(i386) を Minimal で最小インストールしている。 クライントマシンは Linux Mint 17.2(64bit) を想定。 MySQL 5.6.27 での作業を想定。（5.5 系や 5.7 系では多少手順が異なるので注意） 当記事執筆時点で最新版の Mroonga 5.0.9 をインストールする。 MySQL データディレクトリ作成先は “/var/lib/mysql” を想定。 1. Yum リポジトリの追加 # rpm -Uvh http://packages.groonga.org/centos/groonga-release-1.1.0-1.noarch.rpm 2. Yum リポジトリ設定ファイルの編集 今回のインストール先の OS は...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","MySQL","Groonga","Mroonga"],
        "url": "/2015/12/28/centos-mroonga-installation-on-mysql-56-by-yum/",
        "teaser": null
      },{
        "title": "2015年12月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"明けまして、おめでとうございます。 旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 話は変わりまして、先月12月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 33,544 63.3145 Mac OS 12,769 24.1015 Linux 2,862 5.4020 Ubuntu Linux 2,014 3.8014 Android 1,348 2.5444 unknown 234 0.4417 Fedora Linux 106 0.2001 RedHat Linux 47 0.0887 FreeBSD 36 0.0680 Solaris 9 0.0170 PlayStation 5 0.0094 Debian GNU/Linux 2 0.0038...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/01/01/blog-access/",
        "teaser": null
      },{
        "title": "2015年 - ツイート集計！",
        "excerpt":"2015年の Twitter でのツイート（メインで使用しているアカウントのみ）を Ruby で集計してみました。 当方は、ツイートは全て自宅サーバ(CentOS)上のデータベース(MySQL)に保存しています。 （実際には Ruby + Twitter API で本家からデータを取得して保存） ほとんど SQL で集計可能でしたが、品詞・単語別の集計は形態素解析エンジン MeCab を使用しました。 集計内容は以下のとおり。 月別ツイート数 曜日別ツイート数 時間別ツイート数 文字数別ツイート数 １日当たりツイート数別集計 品詞別出現回数 単語別出現回数 1. 月別ツイート数 [ 年 月 ] [件数] [ 比 率 ] 2015年01月 295 ( 7.47%) 2015年02月 271 ( 6.87%) 2015年03月 276 ( 6.99%) 2015年04月 288...","categories": ["SNS"],
        "tags": ["Twitter","Ruby","MySQL","MariaDB"],
        "url": "/2016/01/02/summary-tweet-2015/",
        "teaser": null
      },{
        "title": "CentOS - Groonga インストール（by yum パッケージ）！",
        "excerpt":"カラムストア機能付き全文検索エンジン Groonga を、CentOS 6.7 に Groonga 公式 yum リポジトリを使用してインストールする方法についてです。 0. 前提条件 CentOS 6.7(32bit) での作業を想定。 当記事執筆時点で最新の Groonga 5.1.0 をインストールする。 1. yum リポジトリの導入 # rpm -ivh http://packages.groonga.org/centos/groonga-release-1.1.0-1.noarch.rpm # yum makecache 2. Groonga のインストール # yum -y install groonga 形態素解析エンジン MeCab をトークナイザとして使用するために groonga-tokenizer-mecab をインストールする。 # yum -y install groonga-tokenizer-mecab 3. Groonga インストールの確認 #...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","Groonga"],
        "url": "/2016/01/04/centos-groonga-installation-by-yum/",
        "teaser": null
      },{
        "title": "CentOS - Mroonga インストール（by ソースビルド）！",
        "excerpt":"MySQL 5.7 に全文検索エンジン Groonga の機能を実現するストレージエンジン Mroonga をソースをビルドしてインストールする方法についてです。 0. 前提条件 CentOS 6.7(32bit) での作業を想定。 当記事執筆時点で最新の Mroonga 5.10 をインストールする。 Groonga 5.1.0 がインストール済みであることを想定。 （参照：CentOS - Groonga インストール（by yum パッケージ）！） MySQL 5.7.9 をソースをビルドしてインストールしていること。（Mroonga のビルドに MySQL のソースが必要なため） （参照：CentOS - MySQL 5.7 インストール（ソースビルド）！） MySQL 5.7.9 は “/usr/local/mysql” ディレクトリにインストールされていることを想定。 MySQL 5.7.9 のインストールに使用したソースは “/usr/local/src/mysql-5.7.9” ディレクトリに存在することを想定。 1. 必要ライブラリのインストール # yum...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS","MySQL","Groonga","Mroonga"],
        "url": "/2016/01/08/centos-mroonga-installation-by-src/",
        "teaser": null
      },{
        "title": "Ruby - ３次スプライン補間！",
        "excerpt":"過去に「ラグランジュ補間」や「ニュートン補間」を C++ や Ruby で実装したことがありました。 C++ - ラグランジュ補間！ - mk-mode BLOG Ruby - ラグランジュ補間！ - mk-mode BLOG C++ - ニュートン補間！ - mk-mode BLOG Ruby - ニュートン補間！ - mk-mode BLOG 今回は「３次スプライン補間」を Ruby で実装してみました。 0. 前提条件 Ruby 2.2.3-p173 での作業を想定。 グラフも描画するので、RubyGems ライブラリの gnuplot をインストールしておく。（過去記事参照：「Ruby - gnuplot でグラフ描画！」） 1. ３次スプライン補間について こちらの内容を自分なりに理解して以下のようにまとめた。 （数式が多いので別途 \\(\\LaTeX\\) で記載した文書を貼り付け）...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2016/01/12/ruby-spline-interpolation/",
        "teaser": null
      },{
        "title": "Linux Mint - TeX Live 2015 インストール！",
        "excerpt":"以前、組版処理ソフトの\\(\\TeX Live 2015\\) を CentOS にインストールする方法については記事にしました。 CentOS - TeX Live 2012 インストール！ - mk-mode BLOG 今回は、Linux Mint へインストールする方法についてです。（実際のところ、ほぼ同じですが） 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 パッケージ管理システムを使用したインストールではなく、アーカイブを取得してのインストール。（パッケージ管理システムを使用したインストールがうまく行かなかったため） 1. アーカイブの取得 アーカイブファイルを取得して展開する。 $ wget http://ftp.jaist.ac.jp/pub/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gz $ tar zxvf install-tl-unx.tar.gz 2. インストールの開始 ディレクトリを移動後、ミラーサイト一覧から接続先を選んでインストールを開始する。（途中の問いには I で応答） $ cd install-tl-*/ $ sudo ./install-tl --repository http://ftp.jaist.ac.jp/pub/CTAN/systems/texlive/tlnet/ ====&lt; 途中省略...","categories": ["PC_Tips"],
        "tags": ["TeX"],
        "url": "/2016/01/18/texlive-installation-on-linux-mint/",
        "teaser": null
      },{
        "title": "Pandoc で Markdown 文書を PDF に変換！",
        "excerpt":"Pandoc（あるマークアップ形式で書かれた文書を別の形式へ変換するためのコマンドラインツール）を使用して Markdown 文書を PDF に変換する方法についての記録です。 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 組版処理ソフト\\(\\LaTeX\\)が必要なので、\\(\\TeX Live\\)がインストール済みであること。（以下を参照） Linux Mint - TeX Live 2015 インストール！ TeX Live - TeX Wiki Apt パッケージ版をインストールする。 今回は使用しないが、最新版をインストールしたければ Cabal（Haskell ライブラリやプログラムをビルド・パッケージングするシステム）を使用してソースからインストールする。（但し、パッケージ依存性の問題が発生しやすいとされているため、利用には注意） Pandoc では様々な変換が可能だが、今回は Markdown から PDF への変換を行う。 1. Pandoc のインストール これだけ。 $ sudo apt-get install pandoc ちなみに、 RedHat 系ディストリビューションなら yum install...","categories": ["PC_Tips"],
        "tags": ["TeX","PDF"],
        "url": "/2016/01/22/pandoc-md2pdf-conversion/",
        "teaser": null
      },{
        "title": "Linux Mint - MySQL 5.7 インストール（by ソースビルド）！",
        "excerpt":"MySQL 5.7 系の最新版をソースをビルドして Linux Mint 17.2 にインストールする方法についてです。 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 当記事執筆時点で最新の MySQL 5.7.10 をソースをビルドしてインストールする。 マシン搭載メモリは 4GB を想定。 一般ユーザでの作業を想定。 環境の相違等のために以下の方法ではうまく行かないこともあるだろう。 ログを確認して適宜対処すること。 1. 必要パッケージの準備 以下の必要なパッケージが未インストールならインストールしておく。 $ sudo apt-get install wget cmake g++ bison libncurses5-dev 2. MySQL ユーザ・グループの作成 $ sudo groupadd mysql $ sudo useradd -r -g mysql -s /bin/false...","categories": ["サーバ構築"],
        "tags": ["Linux","LinuxMint","MySQL"],
        "url": "/2016/01/28/linuxmint-mysql-57-installation-by-src/",
        "teaser": null
      },{
        "title": "2016年1月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 33,502 64.8422 Mac OS 12,040 23.3031 Linux 2,665 5.1580 Ubuntu Linux 1,582 3.0619 Android 1,335 2.5839 unknown 355 0.6871 Fedora Linux 84 0.1626 FreeBSD 77 0.1490 RedHat Linux 15 0.0290 Solaris 3 0.0058 Wii 3 0.0058 NetBSD 2 0.0039 Debian GNU/Linux 1 0.0019...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/02/01/blog-access/",
        "teaser": null
      },{
        "title": "Linux Mint - Mroonga インストール（by ソースビルド）！",
        "excerpt":"Linux Mint 上の MySQL 5.7 に全文検索エンジン Groonga の機能を実現するストレージエンジン Mroonga をソースをビルドしてインストールする方法についてです。 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 当記事執筆時点で最新の Mroonga 5.10 をインストールする。 Groonga 5.1.0 がインストール済みであることを想定。 （参照「Linux Mint - Groonga インストール（by ソースビルド）！」） ※ソースビルでなく PPA リポジトリからインストールしてもよいだろう（参照「2.4. Ubuntu — Groonga v5.1.0ドキュメント」） MySQL 5.7.10 をソースをビルドしてインストールしていること。（Mroonga のビルドに MySQL のソースが必要なため） （参照「Linux Mint - MySQL 5.7 インストール（by ソースビルド）！」） MySQL...","categories": ["サーバ構築"],
        "tags": ["Linux","LinuxMint","MySQL","Mroonga"],
        "url": "/2016/02/02/linuxmint-mroonga-installation-by-src/",
        "teaser": null
      },{
        "title": "Ruby - Flightradar24 から空港情報一覧取得！",
        "excerpt":"航空機の運行状況をリアルタイムで確認できる Web サイト Flightradar24.com に登録されている空港情報の一覧を Ruby で取得してみました。（と言っても、 JSON データを取得しているだけですが） 0. 前提条件 Ruby 2.2.4-p230 での作業を想定。 世界中の全空港を網羅している訳ではない。（例えば、島根県の隠岐空港や萩・石見空港のような規模の小さい(?)空港の情報は登録されていない） 1. Ruby スクリプトの作成 難しいことはしていないので、説明は省略する。 ただ、悪質な Bot でないことを主張するために連絡先を User Agent に設定している。（伏字は適宜置き換えること） File: fr24_airports.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2016/02/06/ruby-getting-airport-list-from-fr24/",
        "teaser": null
      },{
        "title": "Ruby - Flightradar24 から航空会社情報一覧取得！",
        "excerpt":"航空機の運行状況をリアルタイムで確認できる Web サイト Flightradar24.com に登録されている航空会社情報の一覧を Ruby で取得してみました。（と言っても、 JSON データを取得しているだけですが） 空港情報一覧の取得については前回の記事をご参照ください。 Ruby - Flightradar24 から空港情報一覧取得！ 0. 前提条件 Ruby 2.2.4-p230 での作業を想定。 世界中の全航空会社を網羅している訳ではないかもしれない。（空港情報一覧と同様に） 1. Ruby スクリプトの作成 難しいことはしていないので、説明は省略する。 ただ、悪質な Bot でないことを主張するため、連絡先を User Agent に設定している。（伏字は適宜置き換えること） File: fr24_airlines.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2016/02/07/ruby-getting-airline-list-from-fr24/",
        "teaser": null
      },{
        "title": "JSON - Flightradar24 から飛行中の航空機情報を取得！",
        "excerpt":"航空機の運行状況をリアルタイムで確認できる Web サイト Flightradar24.com から、現在飛行中の航空機の情報を領域を指定して取得する方法についての備忘録です。 空港情報一覧や航空会社一覧の取得については前々回や前回の記事をご参照ください。 Ruby - Flightradar24 から空港情報一覧取得！ Ruby - Flightradar24 から航空会社情報一覧取得！ 0. 前提条件 取得するデータは JSON 形式なので、JSON の基本的な知識があること。 全ての航空機を取得できる訳ではない。 （受信した ADS-B 等の信号を Flightradar24 へ提供する有志（いわゆる Feeder）が存在しない地域や、航空機から発信される信号が弱い場合などは情報が提供されないこともある。元々信号を発信していない航空機も当然ながら存在する） 以下で紹介するのは、自分で Web ブラウザを使用して取得する方法。 （当方は、実際には Ruby スクリプトを作成して使用している） 1. ロードバランササーバ名の取得 ブラウザで URL http://www.flightradar24.com/balance.json にアクセスして JSON データを取得する。 次のような JSON データが取得できる。 ロードバランサが複数存在すれば、複数取得できる。1000 は優先度のようなもので、複数存在する場合は全部加算して 1000 になるようになっているはず。 {\"data.flightradar24.com\":1000} 2....","categories": ["プログラミング"],
        "tags": ["JSON"],
        "url": "/2016/02/08/fr24-getting-flight-info/",
        "teaser": null
      },{
        "title": "Linux - bash で古いファイルの削除！",
        "excerpt":"サーバを運用していると、日々ログファイルが作成され続けてディレクトリが肥大化することがあります。（ログローテションが使えないような場合等） 以下で、最終更新日から一定の日数を超えたファイルを削除する bash スクリプトを紹介します。（簡単すぎるので、記事にするほどのものでもないかも知れませんが） 0. 前提条件 CentOS 6.7, Linux Mint 17.2 での作業を想定。（他の環境でも問題ないはず） 1. bash スクリプトの作成 File: del_oldlogs.sh 1 2 3 4 5 6 #!/bin/bash DIR=/path/to/target_dir DAYS=7 find $DIR -mtime +$DAYS -a -type f -exec rm -f {} \\; -mtime は更新日時を指定するオプション。（指定する値は「日」ベース） そして、以下に注意。 -mtime 1 で更新日時が1日（24時間以上48時間以下）のファイルを検索。 -mtime +1 で更新日時が1日超（48時間超）のファイルを検索。 -mtime -1 で更新日時が1日未満（24時間未満）のファイルを検索。...","categories": ["サーバ構築"],
        "tags": ["Linux","bash"],
        "url": "/2016/02/12/linux-bash-delete-old-files/",
        "teaser": null
      },{
        "title": "Linux - rdiff-backup コマンドでリモートバックアップ！",
        "excerpt":"手軽にバックアップ作業の行える rdiff-backup コマンドについての記録です。 0. 前提条件 以下の環境を想定。（他の環境でも同様） バックアップ元：Linux Mint 17.2（一般ユーザでの作業） バックアップ先：CentOS 6.7（root ユーザでの作業） （RPMForge リポジトリを使用するので、導入済みであること。参考：CentOS 6.5 - 初期設定！） リモート接続に SSH 鍵認証を使用している。（参考：CentOS 6.5 - SSH サーバ 鍵認証接続！） （SSH 鍵認証でないのなら、以下に登場する --remote-schema オプションを無視して考えればよい） 1. rdiff-backup コマンドのインストール バックアップ元(Linux Mint)側で以下を実行。 $ sudo apt-get install rdiff-backup バックアップ先(CentOS)側で以下を実行。 （標準リポジトリには存在しないので、RPMForge リポジトリを使用） # yum --enablerepo=rpmforge install rdiff-backup 2. バックアップ除外リストの作成 バックアップ対象のディレクトリ内から除外したいファイルやディレクトリがあれば、それ用の一覧ファイルを作成する。（以下は一例）...","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2016/02/16/linux-rdiff-backup-remotely/",
        "teaser": null
      },{
        "title": "Linux - bash スクリプト二重起動チェック！",
        "excerpt":"Linux で bash スクリプトを起動する際に既に起動されていたら起動しないようにするための方法、さらには cron で実行しても二重起動チェックが機能するかについての記録です。 0. 前提条件 CentOS 6.7 での作業を想定。（他の環境でも問題ないはず） 1. 作成例（その１） 自分自身のプロセスIDと起動済みのプロセスID（＝自分自身のプロセス名（相対パス）と同じプロセス名から取得）を比較する方法。 File: test_1.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/bin/sh # 二重起動チェック if [ $$ != `pgrep -fo $0` ]; then echo \"Already running!\" &gt;&amp;2 exit 9 fi # メイン処理...","categories": ["サーバ構築"],
        "tags": ["Linux","bash"],
        "url": "/2016/02/21/linux-bash-check-double-start/",
        "teaser": null
      },{
        "title": "MySQL - コマンドラインでパスワード指定した場合の警告出力を抑止！",
        "excerpt":"最近の MySQL (5.6, 5.7)では、コマンドラインからの実行時にパスワードを指定すると、以下のような警告メッセージが出力されます。 cron で実行した場合は、この警告メッセージがメール送信されてしまったります。 mysql: [Warning] Using a password on the command line interface can be insecure. コマンドラインでパスワードを使用するのは安全でない、という旨のメッセージですが、今回はこの警告メッセージの出力を抑止する方法について記録しておきます。 0. 前提条件 MySQL 5.6.28, 5.7.10 サーバ・クライアントで動作確認。 以下ではリモートで接続することを考慮している。（-h host_name オプションを使用） 1. 事前情報 パスワードを指定して実行したい場合、通常は以下のようにするだろう。 $ mysql -h host_name -u user_name -ppassword db_shceme -e \"SELECT * FROM table_name\" 2. 方法・その１ 環境変数を使用する方法。 $ MYSQL_PWD=password...","categories": ["サーバ構築"],
        "tags": ["Linux","MySQL"],
        "url": "/2016/02/26/mysql-insecure-warning-on-commandline/",
        "teaser": null
      },{
        "title": "2016年2月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 35,061 67.2336 Mac OS 11,351 21.7669 Linux 2,503 4.7998 Ubuntu Linux 1,470 2.8189 Android 1,315 2.5217 unknown 290 0.5561 Fedora Linux 83 0.1592 FreeBSD 57 0.1093 Solaris 7 0.0134 RedHat Linux 5 0.0096 Debian GNU/Linux 2 0.0038 Wii 2 0.0038 NetBSD 1 0.0019...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/03/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - TinyURL で URL 短縮！",
        "excerpt":"過去に Ruby で URL を Bitly 短縮する方法について記事にしました。 Ruby - BitLy API v3 で URL 短縮！ 今回は、Ruby で URL を TinyURL 短縮する方法についてです。 0. 前提条件 Ruby 2.3.0-p0 での作業を想定。 RubyGems ライブラリも公開されているが、今回は使用しない。 Ruby を使用しているとは言っても、やっていることは指定の URL にクエリストリングを付加してアクセスして、レスポンスから短縮された URL を取得しているだけ。 1. Ruby スクリプト作成 File: tinyurl_shoten.rb 1 2 3 4 5 6 7 8 9 10 11...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2016/03/02/ruby-shortening-url-by-tinyurl/",
        "teaser": null
      },{
        "title": "Linux - top, ps コマンドの CPU使用率の違い！",
        "excerpt":"linux の top コマンドと ps コマンドで確認できる CPU 使用率は意味が異なります。   以下、単なる備忘録です。        top コマンドで出力される CPU 使用率            前回の画面更新時からのタスクの所要 CPU 時間の占有率であり、総 CPU 時間のパーセンテージで出力される。           ps コマンドで出力される CPU 使用率            プロセスの生存期間中に実行に利用した時間のパーセンテージで出力される。             以上。   ","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2016/03/06/linux-cpu-usage-top-ps/",
        "teaser": null
      },{
        "title": "Linux - プロセスが掴んでいるファイル一覧を取得！",
        "excerpt":"Linux であるプロセスが掴んでいるファイルの一覧を確認したいことがあります。   以下、単なる備忘録です。     プロセスが掴んでいるファイル一覧の取得   $ lsof -p &lt;PID&gt;   もしくは、   $ ls -l /proc/&lt;PID&gt;/fd     以上。   ","categories": ["サーバ構築"],
        "tags": ["Linux"],
        "url": "/2016/03/10/linux-file-list-of-process-catching/",
        "teaser": null
      },{
        "title": "Linux - OOM Killer の発動を抑制！",
        "excerpt":"Linux で、大事なサービスがメモリ不足で kill されないようにするための方法についてです。 0. 前提条件 CentOS 6.7(32bit) での作業を想定。（他のディストリビューションでも同様のはず） 1. OOM Killer とは？ 物理メモリもスワップメモリも使い尽くし Linux カーネルが新たにメモリを割り当てられなくなったとき、最も悪さをしているプロセスを停止するために発動するのが OOM Killer(Out Of Memory Killer) である。 「悪さ」とは、大まかには「メモリ（物理＆スワップ）を多く使用する」という意味。 各プロセスは oom_score_adj(“/proc/oom_score_adj”) という優先度を表す値を保有している。 oom_score_adj の値の範囲は -1000～1000 で、低い値ほど kill されにくい。 デフォルト値は 0 で、-1000 だと kill されない。 init プロセスやカーネルスレッドなどは OOM Killer 発動対象外。 CAP_SYS_ADMIN というケーパビリティを持っているプロセスは優遇される（oom_score_adj が -30される）。 2. oom_score_adj 値の確認...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2016/03/15/linux-control-oomkiller/",
        "teaser": null
      },{
        "title": "世界の国・地域の一覧！",
        "excerpt":"ISO（国際標準化機構, International Organization for Standardization) が定義する世界の国・地域の一覧を、当方 Web サイトで公開しています。     公開しているページは「mk-mode SITE : 国・地域(ISO 3166-1)一覧」で、公開している項目は以下のとおり。      English short name（英語の短い名称）   Alpha-2 code（アルファベット2桁の国・地域コード）   Alpha-3 code（アルファベット3桁の国・地域コード）   Numeric（数字3桁の国・地域コード）   Full name（英語の正式名称）   日本語名（外務省等の情報を元に当方が付与）   【注意事項】      公開している情報は 2016年2月25日現在 のもの。   English short code の末尾に (the) が付与されているものがあるが、意味がよく分からないので除去して表示している。   Full name は、English short name と同じ場合は設定されていない。   English short code のリンクをクリックすることで ISO の詳細情報ページヘ移動する。   日本語名マウスオーバーで外務省定義の名称等を表示する。   「日本工業標準調査会：国際標準化(ISO/IEC)-国際標準化について」に著作権（引用等）についての記述があるが、引用でも「著作権法上認められる引用の範囲内」なら大丈夫ではないかという個人的認識により一覧を公開している。（※問題があるようなら公開を中止する）     以上。   ","categories": ["Webサイト"],
        "tags": ["ISO"],
        "url": "/2016/03/20/iso-3166-1-country-list/",
        "teaser": null
      },{
        "title": "Ruby - String クラス拡張で２つの文字列の類似度をチェック（N-gram 版）！",
        "excerpt":"2つの文字列がどれくらい類似しているかを N-gram モデルを利用してチェックしてみました。 そのようなライブラリを作成している方もおられますが、ライブラリを使用するほどのことでもないので Ruby の String クラスを拡張して実装しています。 0. 前提条件 Ruby 2.3.0-p0 での作業を想定。 1. N-gram モデルについて N-gram モデルは、簡単に説明すると、N 文字を元に文字列のインデックスを作成する方法のことである。（一般的に N = 3 について考えることが多い） 例えば、「吾輩は猫である。」という文字列を N = 3 の N-gram モデルで考えると、以下のように 6 個のインデックスが作成される。 吾輩は 輩は猫 は猫で 猫であ である ある。 2. 2つの文字列の類似度を測る方法 例えば、「吾輩は猫である。（以下、文１）」と「吾輩は犬である。（以下、文２）」の２つの文字列の類似度を N = 3 の N-gram モデルで測る場合、3 文字インデックスは以下のようになる。 吾輩は &lt;=...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2016/03/25/ruby-check-string-similarity-by-ngram/",
        "teaser": null
      },{
        "title": "消防災害情報の一覧！",
        "excerpt":"当方、全国の消防局・本部が Web 上で公開している災害（消防出動）情報をスクレイピングして、 Twitter で引用ツイートしております。（ここでの「引用」は、Twitter の QT のことではなく、著作権法上の「引用」という意味） Web スクレイピングして取得した情報は事案名・状態・時刻・場所を解析してデータベース(MySQL)サーバに登録した上で、消防局・本部別の Twitter アカウントで引用ツイートしていますが、その数が増えてきた（現時点で約200アカウント）ので当方 Web サイト上で一覧で確認できるようにしました。 1. 消防災害情報一覧ページ 「消防災害情報一覧」ページはこちら。 2. 概要及び注意事項 出典は各消防局・消防本部・市町村の Web サイトである。（一部、地域やケーブルテレビ等の情報提供サイト） 一覧表示は、ツイート日時の新しい順に 100 件に限定している。 消防局・本部で絞り込みも可能である。 災害（消防出動）情報を Web 上で公開していない消防局・本部も多数存在する。 当方システム上でテスト中の消防局・本部もある。 火災出動しか公開していない消防局・本部や、救急車のみの出動も公開している消防局・本部がある。 消防局・本部等によっては、災害（消防出動）情報が公開していても即時性のないものや当方システムでの運用に不向きなものもある。（そのような場合、当方システムは非対応） メール配信システムでメール配信された情報を Web 公開している消防局・本部もある。それらの情報を当方システムで利用することも可能だが、利用規約で二次利用を禁止しているところが多い。（そのような場合、当方システムは非対応） ※但し、「著作権法上認められる範囲内での引用」という個人的見解により引用しているものもある。（問題があるようなら運用を取りやめる） 公開される情報を当方システムで解析しきれず、ツイート文が人知の及ばない文章となることがある。 当 Web ページで公開している一覧は5分間隔で自動更新している。（「一覧更新」ボタンでの一覧更新も可能） アカウント名のリンククリックで、Twitter アカウントのページを開く。 詳細（場所等）のリンククリックで、そのツイートのページを開く。 時刻をマウスオーバーすると、ツイートした日時をツールチップ表示する。 非力なサーバで運用しているため、ページの表示に時間がかかることがあるかもしれない（ありがちである）。（ご容赦を） 消防局・本部別の Twitter アカウントの他にそれら全てを取りまとめた Twitter アカウントも作成している。...","categories": ["Webサイト"],
        "tags": [],
        "url": "/2016/03/30/fire-dept-disaster-list/",
        "teaser": null
      },{
        "title": "2016年3月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 35,952 69.3371 Mac OS 10,320 19.9032 Linux 2,554 4.9257 Android 1,288 2.4840 Ubuntu Linux 1,273 2.4551 unknown 307 0.5921 Fedora Linux 73 0.1408 FreeBSD 37 0.0714 Solaris 34 0.0656 RedHat Linux 4 0.0077 PlayStation 3 0.0058 Debian GNU/Linux 3 0.0058 Wii 2 0.0039...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/04/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - 各種時刻系の換算！",
        "excerpt":"暦計算や天文計算を行う際に必要な各種時刻系について、調査して得た情報を自分なりにまとめてみました。 そして、 Ruby を使用して換算してみました。 【2016-07-27 追記】 以下で紹介の Ruby スクリプトを gem ライブラリにしました。 mk_time - RubyGems.org もご参照ください。 【追記ここまで】 0. 前提条件 Ruby 2.3.0-p0 での作業を想定。 天文学的な計算については疎いため、誤りがあるかもしれない。 1. 各種時刻系について 原子時系（世界時系を含む）、力学時系、座標時系の順に記述。 TAI（国際原子時; International Atomic Time） UTC（協定世界時）を含む他の時刻基準の計算の基となる基礎的な国際時刻基準。 原子時計によって定義される高精度＆安定、地球ジオイド面での時刻系。 1 秒は SI 秒。 UT（世界時; Universal Time） ロンドンの旧グリニッジ天文台を通る子午線上で、平均太陽（平均的な動きの太陽）が南中する瞬間を12時として定義されている。 UT0, UT1, UT2, UTC の種類がある。 単に UT と呼んだ場合は UT1 を指すことが多い。 UT0（世界時0;...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/04/02/ruby-calc-time-series/",
        "teaser": null
      },{
        "title": "天球座標系について！",
        "excerpt":"太陽や月、惑星等の天体の位置を表現する際に使用する各種座標系についてに簡単にまとめてみました。 カレンダーを作成（旧暦等を計算）する際、太陽や月の位置を（場合によっては）正確に計算する必要があるので。 赤道座標（equatorial coordinate system） 地球の自転を基準とした座標系。 経度は「赤経（α または R.A.(= Right Ascension)）」と呼ばれ、春分点を基点（0ﾟ）として東回りにはかり、15ﾟ=1時、15’=1分、15”=1秒として24時までの数値で表される。（0°〜360°の表されることもある） 緯度は「赤緯（δ または Decl.(= Declination)）」と呼ばれ、赤道面を基点（0ﾟ）とし、南（-）北（+）にそれぞれ90ﾟまでの数値で表される。 直交（直角）座標で表す場合は、春分点を x 軸とした右手系で考える。 赤経の基点とした春分点や赤緯の基点とした赤道面は、歳差や章動によってわずかずつ移動している。 そのため、その時点の見かけ上のものを視赤経・視赤緯（視位置）と呼び、変動分をならしたものを平均赤経・平均赤緯と呼ぶ。 平均赤経や平均赤緯は、1992年からは西暦2000.0年に基づいたもの(J2000.0)になっている。 黄道座標（ecliptic coordinate system） 黄道（公転軌道面、太陽の見かけ上の通り道）を基準とした座標系。 経度は「黄経（λ ）」と呼ばれ、春分点を基点（0ﾟ）として東回りに360ﾟまでの数値で表される。 緯度は「黄緯（β ）」と呼ばれ、黄道面を基点（0ﾟ）とし、南（-）北（+）にそれぞれ90ﾟまでの数値で表される。 直交（直角）座標で表す場合は、春分点を x 軸とした右手系で考える。 座標の原点を太陽中心でとったものを日心黄道座標（日心黄経、日心黄緯）、地球中心でとったものを地心黄道座標（地心黄経、地心黄緯）と呼ぶ。 赤道座標同様、基点である春分点の移動によってわずかずつ移動している。 そのため、その時点の見かけ上のものを視黄経・視黄緯（視位置）と呼び、変動分をならしたものを平均黄経・平均黄緯と呼ぶ。 銀河座標（galactic coordinate system） 銀河系内の天体の分布や運動をあらわすときに用いられ、銀河面と呼ばれる基準面を基点とした座標系。 （基準面は天の川の流れのほぼ中心に沿って全天を1周している） 経度は「銀経（l）」と呼ばれ、いて座にある強力な電波源いて座Aと銀河北極とを結ぶ大円と銀河面との交点を基点（0ﾟ）として東回りに360ﾟまでの数値で表される。 緯度は「銀緯（b）」と呼ばれ、銀河面を基点（0ﾟ）とし、南（-）北（+）にそれぞれ90ﾟまでの数値で表される。 ICRS（International Celestial Reference System; 国際天文基準座標系） 1998年から IAU（International Astronomical...","categories": ["暦・カレンダー"],
        "tags": ["カレンダー"],
        "url": "/2016/04/06/about-astro-coordinate-system/",
        "teaser": null
      },{
        "title": "黄道傾斜角について！",
        "excerpt":"黄道傾斜角（黄道面の赤道面に対する傾斜角）の計算式についての備忘録です。 一般に「23.4度」や「約23度26分」などと近似値が紹介されますが、実際は時々刻々と少しずつ変化しています。 以下に記録するのは、任意の時刻の黄道傾斜角を求める計算式です。（但し、ここでの黄道傾斜角は「平均黄道傾斜角」） （当然、赤道傾斜角（赤道面の黄道面に対する傾斜角）も同義） 黄道傾斜角の計算式 国立天文台報第11巻「暦象年表の改訂について」で紹介されている計算式。 \\[\\begin{eqnarray} 黄道傾斜角（秒） &amp;=&amp; 84381.406 \\\\ &amp;-&amp; 46.836769T - 0.0001831T^2 \\\\ &amp;+&amp; 0.00200340T^3 - 5.76 \\times 10^{-7}T^4 \\\\ &amp;-&amp; 4.34 \\times 10^{-8}T^5 \\end{eqnarray}\\] 但し、T は J2000.0（2000年1月1日12:00 TT、ユリウス日 JD = 2451545）からの経過日数を36525日単位で表したユリウス世紀数で、 \\[T = (JD - 2451545)\\,/\\,36525.0\\] である。 その他 以下のように紹介しているページも存在する。 \\[黄道傾斜角（秒） = 84381.406 - 46.836769T - 0.00059T^2...","categories": ["暦・カレンダー"],
        "tags": ["カレンダー"],
        "url": "/2016/04/10/about-ecliptic-obliquity/",
        "teaser": null
      },{
        "title": "月・惑星の暦 JPL DE430 について！",
        "excerpt":"NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 についてです。 二十四節気や旧暦等を自分で正確に計算したいがために調査し、まとめたものです。（今後その目的が果たせるか否かについては、今のところ不明ですが） 1. 概要 この月・惑星の暦のデータファイルには、月・惑星の位置を正確に計算するために必要な係数の一覧が記載されいている。（この係数とは、位置（直交座標系）計算に必要なチェビシェフ多項式近似の係数のこと） 太陽や月の位置を略算式を使用して確認できる Web サイト等は多数存在するが、それでは誤差が発生してしまう。（「略算式」とは言っても、三角関数や高精度の係数を使用した多項式で、計算は容易ではない） “DE” は Development Ephemerides の略で、「（進化版）天文暦」とでも呼べるでしょう。（以下、「天文暦」と呼ぶ） “430” はバージョン番号。 DE430 は 1549年12月21日（ユリウス日：2287184.5）〜 2650年1月25日（ユリウス日2688976.5） に対応している。 当記事執筆時点で DE430 以外に DE431, DE432 も公開されている。 DE431 は DE430 を -13200年8月15日（ユリウス日：-0.3100015.5）〜 17191年3月15日（ユリウス日：8000016.5） に拡張したもの。 DE432 は DE430 をマイナーアップデート（冥王星に注目）したもの。（但し、地球の章動のデータは含まない） 従って、冥王星や極端な過去・未来について扱わないのであれば、DE430 が実用に耐えられるものとなる。（実質の最新バージョン） DE430 とは別に DE430T もあるが、これは地球時(TT)と太陽系力学時(TDB)のデータを含んだもの。...","categories": ["暦・カレンダー"],
        "tags": ["カレンダー"],
        "url": "/2016/04/14/about-jpl-de430/",
        "teaser": null
      },{
        "title": "JPL 天文暦データのバイナリ化！",
        "excerpt":"前回、「月・惑星の暦 JPL DE430 について」という記事を公開しました。（DE430 は、NASA の機関である JPL(Jet Propulsion LaboratoryJPL) が惑星探査用に編纂・発行している月・惑星の暦の最新版） 今回は、複数存在する DE430 のテキスト形式データファイルを１つのバイナリ形式のファイルにコンバートする方法についての記録です。但し、現在はバイナリ形式のデータも公開されているので、今回のようなコンバート作業は不要です。今回は、公開されているコンバート用の FORTRAN77 プログラムの動作確認の意味で作業を行いました。） 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 GNU Fortran (GCC) 4.9.1 でのコンパイル作業を想定。（FORTRAN77 のソースコードがコンパイルできる環境であること） 1. 使用するデータファイル “ftp://ssd.jpl.nasa.gov/pub/eph/planets/ascii/de430/” 内の以下のファイル。 ヘッダファイル： header.430_572 テキスト形式データファイル： ascp1550.430 〜 ascp2550.430 検証用ファイル： testpo.430 2. 使用するプログラム（ソースコード） “ftp://ssd.jpl.nasa.gov/pub/eph/planets/fortran/” 内の以下のファイル。 コンバートプログラム： asc2eph.f データ検証プログラム： testeph.f 3. コンバートプログラムのコンパイル “asc2eph.f”...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Fortran"],
        "url": "/2016/04/18/merging-jpl-data/",
        "teaser": null
      },{
        "title": "JPL 天文暦バイナリデータの仕様！",
        "excerpt":"NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 には、テキスト形式のデータの他にバイナリ形式のデータが存在します。実際には１つにまとめたバイナリ形式のデータファイルを参照することが多いようです。 今回は DE430 のバイナリ形式データの仕様について、 FORTRAN77 プログラムを解析して理解できた内容についての記録です。 1. DE430 バイナリ形式データの仕様 Intel x86, IA64 等の環境では、エンディアンはリトルエンディアンである。 テキスト形式データを JPL 提供の FORTRAN77 プログラム等でマージ＆バイナリ化した場合は KSIZE の値が設定されているが、 JPL が提供するバイナリ形式データでは KSIZE の値が設定されていない。（別途テキスト形式ファイルを参照して KSIZE 値を得る必要がある） ヘッダ部分は 4 * KSIZE バイトのレコード２個で構成されている。 ヘッダ部分の後ろに係数の一覧が格納されている 以下、仕様。（項目名のアルファベットは FORTRAN77 プログラムで使用されている変数。データ型は FORTRAN77 でのもの） オフセット項目名データ型項目数備考 4 * KSIZE * 0...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー"],
        "url": "/2016/04/22/about-jpl-binary-data/",
        "teaser": null
      },{
        "title": "Ruby - JPL 天文暦バイナリデータの読み込み！",
        "excerpt":"NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 のバイナリ形式のデータを Ruby で読み込んでみました。 0. 前提条件 Ruby 2.3.0-p0 での作業を想定。 使用するバイナリ形式データは、テキスト形式データ “ascp1950.430”, “ascp2050.430” を「JPL 天文暦データのバイナリ化！」の方法でバイナリ化したもの。（ファイル名は “JPLEPH” に変更） あらかじめ用意されているバイナリデータを使用する場合は KSIZE 値が組み込まれていないので、別途テキスト形式のヘッダファイルを読み込む必要がある。 バイナリ形式データの仕様については「JPL 天文暦バイナリデータの仕様！」を参照。 1. Ruby スクリプトの作成 （バイナリデータの読み込みには IO.binread メソッドを使用） File: jpl_read_de430.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/04/26/ruby-read-jpl-bin-data/",
        "teaser": null
      },{
        "title": "Ruby - JPL 天文暦データから ICRS 座標を計算！",
        "excerpt":"前回、NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 のバイナリ形式のデータを Ruby で読み込みました。 Ruby - JPL 天文暦バイナリデータの読み込み！ 今回は、読み込んだデータから ICRS 座標を計算してみました。（読み込んだデータとは、 ICRS 座標の計算に必要なチェビシェフ多項式の係数データ） 0. 前提条件、注意事項 Ruby 2.3.0-p0 での作業を想定。 使用するバイナリ形式データは、テキスト形式データを「JPL 天文暦データのバイナリ化！」の方法でバイナリ化したもの。（今回は DE430 用の “ascp1550.430” 〜 “ascp2550.430” 全てをバイナリ化。ファイル名は “JPLEPH” に変更） あらかじめ用意されているバイナリデータを使用する場合は KSIZE 値が組み込まれていないので、別途テキスト形式のヘッダファイルを読み込む必要がある。 テキスト形式データの仕様については「月・惑星の暦 JPL DE430 について！」を参照。 バイナリ形式データの仕様については「JPL 天文暦バイナリデータの仕様！」を参照。 1. Ruby スクリプトの作成 （バイナリデータ読み込みには IO.binread メソッドを使用） File:...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/04/30/ruby-calc-jpl-icrs-coordinate/",
        "teaser": null
      },{
        "title": "2016年4月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 35,455 68.5333 Mac OS 9,808 18.9585 Linux 2,821 5.4529 Ubuntu Linux 1,815 3.5083 Android 1,374 2.6559 unknown 231 0.4465 Fedora Linux 90 0.1740 FreeBSD 51 0.0986 RedHat Linux 41 0.0793 Solaris 38 0.0735 Wii 4 0.0077 NetBSD 2 0.0039 PlayStation 2 0.0039 3DS...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/05/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！",
        "excerpt":"海上保安庁・海洋情報部から「コンピュータによる天体の位置計算式」という標題で、計算方法や計算に必要な係数が公開さいれています。 今回は、この方法を Ruby で実装して太陽や月の視赤経や視黄経等を計算してみました。（任意の日時（日本標準時）をコマンドライン引数で指定して実行すると、各種値を計算しコンソール出力する） 【2016-06-05 追記】 以下で紹介の Ruby スクリプトを gem ライブラリにしました。 eph_jcg - RubyGems.org もご参照ください。 【追記ここまで】 0. 前提条件、注意事項 Ruby 2.3.0-p0 での作業を想定。 1. 計算方法 「コンピュータによる天体の位置計算式」のページにある「平成28年版・解説と計算例」のとおりなので、そちらを参照のこと。 平成20年(2008年)版から資料と係数が公開されています。（Web ページ上は今年・前年分しか存在しないが、 URL の「年」部分を直接編集してアクセスすると取得できる） 2. Ruby スクリプトの作成 プログラムの流れは、解説資料の流れとほぼ同じ。 （プログラム中、”R.A.” は「視赤経」、”DEC.” は「視赤緯」、”DIST.” は「地心距離」、”H.P.” は「視差」、”hG.” は「グリニジ時角」、”S.D.” は「視半径」、”EPS.” は「黄道傾斜角」という意味で使用している） File: eph_sun_moon.rb 1 2 3 4 5 6 7 8...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/05/04/ruby-calc-ephemeris-by-kaiho/",
        "teaser": null
      },{
        "title": "赤道座標と黄道座標、直交座標と極座標の変換！",
        "excerpt":"天体の位置を計算する際によく使用する変換式についての記録です。 1. 赤道直交座標 -&gt; 黄道直交座標 \\(\\varepsilon:\\)黄道傾斜角、とすると、 \\[\\begin{eqnarray*} \\left( \\begin{array}{c} x' \\\\ y' \\\\ z' \\\\ \\end{array} \\right) =\\left( \\begin{array}{ccc} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; \\cos\\varepsilon &amp; \\sin\\varepsilon \\\\ 0 &amp; -\\sin\\varepsilon &amp; \\cos\\varepsilon \\\\ \\end{array} \\right) \\left( \\begin{array}{c} x \\\\ y \\\\ z \\\\ \\end{array} \\right) \\end{eqnarray*}\\]...","categories": ["暦・カレンダー"],
        "tags": ["カレンダー"],
        "url": "/2016/05/08/convert-celestial-coordinates/",
        "teaser": null
      },{
        "title": "Ruby - 太陽・月の視黄経・視黄緯の計算（海保略算式版）！",
        "excerpt":"先日、Ruby で、海上保安庁・海洋情報部の「コンピュータによる天体の位置計算式」を利用して、太陽や月の視赤経や視赤緯等を計算してみました。 Ruby - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！ 今回は、太陽・月の視赤経・視赤緯を視黄経・視黄緯に変換してみました。 【2016-06-05 追記】 以下で紹介の Ruby スクリプトを gem ライブラリにしました。 eph_jcg - RubyGems.org もご参照ください。 【追記ここまで】 0. 前提条件、注意事項 Ruby 2.3.0-p0 での作業を想定。 1. 計算方法 視黄経・視黄緯の変換以外の部分は、「Ruby - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！」のままなので、そちらを参照のこと。 赤経・赤緯から黄経・黄緯への変換については、前回記事の「赤道座標と黄道座標、直交座標と極座標の変換！」を参照のこと。 2. Ruby スクリプトの作成 （プログラム中、”R.A.” は「視赤経」、”DEC.” は「視赤緯」、”DIST.” は「地心距離」、”H.P.” は「視差」、”hG.” は「グリニジ時角」、”S.D.” は「視半径」、”EPS.” は「黄道傾斜角」、”ALPHA” は「視赤経」、”DELTA” は「視赤緯」、”LAMBDA” は「視黄経」、”BETA” は「視黄緯」という意味で使用している） File: eph_sun_moon_ecliptic.rb 1 2 3 4...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/05/12/ruby-calc-ecliptic-ephemeris-by-kaiho/",
        "teaser": null
      },{
        "title": "Ruby - RMagick で画像内に透かしを描画！",
        "excerpt":"以前、RMagick（Ruby で画像処理ライブラリ ImageMagick を扱える RubyGems ライブラリ）で画像内に文字を描画しました。 Ruby - RMagick で画像内に文字を描画！ 今回は、少し異なる方法で既存の画像に透かし文字を描画してみました。(require も RMagick でなく rmagick に変更になっていますし） 0. 前提条件 Linux Mint 17.3(64bit) での作業を想定。 Ruby 2.3.0-p0 で作業・動作確認。 画像編集ソフト ImageMagick(当方は 6.7.7-10) インストール済み。 RubyGems ライブラリ RMagick インストール済み。 1. Ruby スクリプト作成 以下のような画像内にコピーライトの透かしを描画する Ruby スクリプトを作成してみた。 概要はスクリプト内にコメントで記述している。 File: rmagick_watermark.rb 1 2 3 4 5 6 7 8...","categories": ["プログラミング"],
        "tags": ["Ruby","画像"],
        "url": "/2016/05/16/ruby-write-watermark-by-rmagick/",
        "teaser": null
      },{
        "title": "GIS - GMT で標高データを描画（その２）！",
        "excerpt":"こんにちは。 以前、GMT(The Generic Mapping Tools) で地図に標高データを反映させる方法について紹介しました。 GIS - GMT で標高データを描画！ 今回は、もう少し洗練したものに仕上げてみました。 （当方、 GIS についてはそれほど精通している訳でもありません。ご承知おきください） 0. 前提条件 Linux Mint 17.2(64bit) での作業を想定。 GMT 5.1.1 での作業を想定。 （参照：GMT - 5.1 系をソースからインストール！） 日本と周辺の陸地・海底を標高・水深で色分けする。 1. 標高データの準備 過去記事「GIS - GMT で標高データを描画！」を参照。 2. シェルスクリプトの作成 以下は「メルカトル図法」で描画する例。（各種説明は「GIS - GMT で標高データを描画！」を参照） File: JAPAN_ETOPO1.sh 1 2 3 4 5 6 7 8...","categories": ["PC_Tips"],
        "tags": ["GIS","地図","GMT"],
        "url": "/2016/05/20/gmt-paint-map-with-elevation-data-2/",
        "teaser": null
      },{
        "title": "CentOS 6.7 - Groonga インストール（by ソースビルド）！",
        "excerpt":"オープンソースのカラムストア機能付き全文検索エンジン Groonga を、 CentOS にソースをビルドしてインストールする方法についての記録です。 ちなみに、以前、 Linux Mint にソースをビルドしてインストールする方法については紹介しました。 Linux Mint - Groonga インストール（by ソースビルド）！ 0. 前提条件 CentOS 6.7(32bit) での作業を想定。 当記事執筆時点で最新の Groonga 6.0.2 をソースをビルドしてインストールする。 ここでは、全文検索がどういうものかという説明はしない。 1. 依存パッケージのインストール # yum -y install wget tar gcc-c++ make mecab （mecab はトークナイザに MeCab を使用したい場合のみ） 2. ソースコードの取得 アーカイブを取得後、展開する。 # cd /usr/local/src/ # wget http://packages.groonga.org/source/groonga/groonga-6.0.2.tar.gz #...","categories": ["PC_Tips"],
        "tags": ["CentOS","Groonga"],
        "url": "/2016/05/24/centos-groonga-installation-by-src/",
        "teaser": null
      },{
        "title": "Linux - curl コマンドで HTTP ステータスのみを確認！",
        "excerpt":"特定の URL の HTTP ステータスのみを知りたいことがあると思います。（当方はよくあります） 以下、curl コマンドを使用して指定の URL の HTTP ステータスを確認する方法についての記録です。 0. 前提条件 当方、Linux Mint 17.2(64bit) で動作を確認。 curl コマンドが導入済みであること。（大抵は既インストールのはず） 1. コマンドの実行 $ curl -s -o /dev/null -w \"%{http_code}\\n\" http://www.mk-mode.com/octopress/ 200 -s は、進捗状況やエラーを表示しないオプション（--silent と同じ） -o &lt;file&gt; は、取得したデータを に出力する（廃棄する）オプション（`--output ` と同じ） （`-o /dev/null` で、出力を廃棄） -w &lt;format&gt; は、 &lt;format&gt; の書式でカスタム出力するオプション（--write-out &lt;format&gt; と同じ） （-w...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2016/05/28/linux-getting-http-status-by-curl/",
        "teaser": null
      },{
        "title": "2016年5月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 34,501 66.8236 Mac OS 10,432 20.2053 Linux 2,632 5.0978 Ubuntu Linux 2,122 4.1100 Android 1,523 2.9498 unknown 234 0.4532 Fedora Linux 97 0.1879 RedHat Linux 38 0.0736 FreeBSD 25 0.0484 Solaris 17 0.0329 Debian GNU/Linux 8 0.0155 NetBSD 1 0.0019 合　計 51,630 100.0000...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/06/01/blog-access/",
        "teaser": null
      },{
        "title": "Linux - curl コマンドで IP アドレス等を確認！",
        "excerpt":"curl コマンドを使用して、自身（やその他）のグローバル IP アドレスやホスト名等を確認する方法についての備忘録です。 0. 前提条件 当方、Linux Mint 17.2(64bit) で動作を確認。 curl コマンドが導入済みであること。（大抵は既インストールのはず） 1. コマンドの実行 curl コマンドで URL に ipinfo.io を指定するだけ。 $ curl ipinfo.io { \"ip\": \"aaa.bbb.ccc.ddd\", \"hostname\": \"vvvv.wwww.xxxx.yyyy.zzzz.infoweb.ne.jp\", \"city\": \"Tokyo\", \"region\": \"Tokyo\", \"country\": \"JP\", \"loc\": \"35.6850,139.7514\", \"org\": \"AS2510 FUJITSU LIMITED\", \"postal\": \"100-0001\" } キー説明 ipグリーバルIPアドレス hostnameホスト名 city対象組織のある都市の名称 region対称組織のある地域の名称 country対称組織のある国のコード (ISO...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2016/06/02/linux-getting-ip-info-by-curl/",
        "teaser": null
      },{
        "title": "Linux - ゴミ箱をコマンドで操作！",
        "excerpt":"Linux でゴミ箱をコマンド操作する方法についての記録です。 0. 前提条件 当方、Linux Mint 17.2(64bit) で動作を確認。（他のディストリビューションでも同じか同様のはず） 1. ゴミ箱について ゴミ箱の場所は $HOME/.local/share/Trash であることを認識しておくとよい expunged, files, info の３ディレクトリが存在する。 files ディレクトリには、移動させられたファイル・ディレクトリが格納されている。 info ディレクトリのファイルには、ゴミ箱に移動したファイル・ディレクトリの情報が記述されている。（ファイル名：ゴミ箱に移動したファイル・ディレクトリ名＋.trashinfo） expunged ディレクトリについては詳細不明。 2. trash-cli パッケージのインストール $ sudo apt-get install trash-cli 3. ゴミ箱内ファイル・ディレクトリ一覧の確認 ゴミ箱に移動された日時と、移動される前の位置（フルパス）が出力される。 $ trash-list 2016-05-09 18:28:56 /path/to/xxxxx.xxx : 4. ファイル・ディレクトリをゴミ箱へ移動 ファイル・ディレクトリ名（ワイルドカードも使用可）を指定して実行する。 $ trash-put foo.bar 5. ゴミ箱内を空にする $ trash-empty...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2016/06/06/linux-trash-command/",
        "teaser": null
      },{
        "title": "ユリウス年・ユリウス世紀・ユリウス世紀数について！",
        "excerpt":"天体位置や暦の計算で頻繁に使用する「ユリウス年」や「ユリウス世紀」、「ユリウス世紀数」についての備忘録です。 グレゴリオ暦の 1 年はうるう年の関係で 365 日や 366 日とまちまちで不便です。そこで、天文学では長さを一定にしたユリウス年やユリウス世紀をよく使用するのです。 1. J2000.0 まず、 J2000.0 について。 J2000.0 は「2000年1月1日正午 (JD 2451545.0)」であり、さまざまな場面において基準時刻として使用される。 2. ユリウス年 1ユリウス年 (Julian year; jy) = 365.25日 3. ユリウス世紀 1ユリウス世紀 (Julian century; jc) = 36525日 例えば、 J2000.0 から 365.25 日後は J2001.0、 J2000.0 から 36525 日後は J2100.0 ということになる。 4. ユリウス世紀数 J2000.0 からの経過日数をユリウス世紀単位で測った時間をユリウス世紀数と呼び、さまざまな理論で時間展開の引数として用いられる。 ユリウス世紀数...","categories": ["暦・カレンダー"],
        "tags": ["カレンダー"],
        "url": "/2016/06/10/about-julian-year-century/",
        "teaser": null
      },{
        "title": "歳差・章動の変換行列について！",
        "excerpt":"天体の位置やこよみを正確に計算する際に必要になってくる「歳差」と「章動」の変換行列についての調査記録です。 0. 前提条件 ここでは「歳差」や「章動」が何かということは説明しないので、必要であれば各自お調べください。 1. 歳差の変換行列（Fukushima の方法） 歳差の変換行列\\(P\\)は以下のように書ける。 \\[\\begin{eqnarray*} P(\\varepsilon_{A}, \\bar{\\psi}, \\bar{\\phi}, \\bar{\\gamma})&amp;=&amp;R_1(-\\varepsilon_{A})R_3(-\\bar{\\psi})R_1(\\bar{\\phi})R_3(\\bar{\\gamma}) \\\\ &amp;=&amp;\\left( \\begin{array}{ccc} P_{11} &amp; P_{12} &amp; P_{13} \\\\ P_{21} &amp; P_{22} &amp; P_{23} \\\\ P_{31} &amp; P_{32} &amp; P_{33} \\\\ \\end{array} \\right) \\end{eqnarray*}\\] 但し、\\(R_1,R_3\\)は\\(x\\)軸、\\(z\\)軸を軸とした回転で、以下のように表される。 \\[\\begin{eqnarray*} R_1 = \\left( \\begin{array}{ccc} 1 &amp; 0 &amp; 0 \\\\ 0...","categories": ["暦・カレンダー"],
        "tags": ["カレンダー"],
        "url": "/2016/06/14/about-transformation-matrix-of-precession-nutation/",
        "teaser": null
      },{
        "title": "Ruby - 平均黄道傾斜角の計算！",
        "excerpt":"当ブログの以前の記事「黄道傾斜角について！」を元に、平均黄道傾斜角の計算を Ruby で実装してみました。（ただそれだけ） 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 黄道傾斜角については過去記事「黄道傾斜角について！」を参照。 平均黄道傾斜角の計算には、「暦象年表の改訂について（国立天文台）（PDF 1.7MB）」で紹介されている計算式を使用する。 ここで扱う「ユリウス日」は、「世界時(UT)」を換算したものではなく「地球時(TT)」を換算したもの。 1. Ruby スクリプトの作成 File: mean_obliquity_ecliptic.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/06/18/ruby-calc-mean-obliquity-ecliptic/",
        "teaser": null
      },{
        "title": "Ruby - 章動の計算（IAU2000A 理論）！",
        "excerpt":"天体位置の回転に使用する章動を Ruby で実装して計算してみました。（使用するのは IAU2000A 理論） 歳差・章動の変換については、過去記事をご参照ください。 歳差・章動の変換行列について！ 0. 前提条件、事前知識 章動の計算には、 IAU SOFA(International Astronomical Union, Standards of Fundamental Astronomy) の提供する C ソースコードに実装されているアルゴリズム “nut00a.c” を使用する。 IAU SOFA のソースコードには、 MHB2000(Mathews-Herring-Buffett, 2000) の理論や IERS2003(International Earth Rotation &amp; Reference Systems service, 2003) の理論の使用が混在していることに留意。 ここでは「章動（しょうどう）」そのものが何かについては詳細には説明しないが、簡単に説明すると、章動には 黄経における章動(\\(\\Delta\\psi\\)) 黄道傾斜における章動(\\(\\Delta\\varepsilon\\)) があり、それぞれが 日月章動(luni-solar nutation) 惑星章動(planetary nutation) で構成されている。 また、算出アルゴリズムについてもここでは詳細には説明しない。（と言うより、煩雑で自分には説明できない） 参考サイトやソーススクリプトを参照のこと。 今回は...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/06/22/ruby-calc-nutation-by-iau2000a/",
        "teaser": null
      },{
        "title": "Ruby - gem ライブラリの作成(by Bundler, TDD)！",
        "excerpt":"以前も Bundler による Ruby の gem パッケージを作成する方法について記事にしたことがありましたが、新たに記録し直しました。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 TDD（テスト駆動開発）を想定。 テストに RSpec を使用することを想定。 テスト自動化のために Guard を使用することを想定。 作成する gem の名称は “mk_test” を想定。 今回は RubyGems.org への公開は非考慮。 （大量の自作 gem ライブラリのうち、取るに足りないものまで公開する気はないので（公開に値するもののみを公開したいので）） 1. gem の雛形作成 $ bundle gem mk_test -b -t Creating gem 'mk_test'... create mk_test/Gemfile create mk_test/.gitignore create mk_test/lib/mk_test.rb create mk_test/lib/mk_test/version.rb...","categories": ["プログラミング"],
        "tags": ["Ruby","RubyGems"],
        "url": "/2016/06/26/ruby-making-gem-by-bundler-tdd/",
        "teaser": null
      },{
        "title": "CentOS - Yum パッケージのダウングレード！",
        "excerpt":"CentOS で、アップデートされてしまった Yum パッケージをダウングレードする方法についての記録です。 （「アップグレード」の反意ではなく「アップデート」の反意なので「ダウンデート」と呼びたいところ。しかし、「ダウンデート」などという言葉は存在しないので「ダウングレード」と表現しています。（単に「バージョンダウン」でもいいかもしれないが）） 0. 前提条件 当方、 CentOS 6.8(32bit) で動作確認済み。 1. 利用可能なパッケージの一覧 （以下は一例） # yum --showduplicate list groonga ===&lt; 中略 &gt;=== groonga.i686 6.0.0-1.el6 groonga groonga.i686 6.0.2-1.el6 groonga groonga.i686 6.0.3-1.el6 groonga 出力される一覧にあるものにダウングレードすることが可能。 （今回の例では、 “6.0.3-1.el6” がインストール済みの最新） 2. ダウングレードの実行 バージョン番号を指定してダウングレードを行う。（以下は一例） # yum downgrade groonga-6.0.2-1.el6 groonga-libs-6.0.2-1.el6 groonga-plugin-suggest-6.0.2-1.el6 groonga-tokenizer-mecab-6.0.2-1.el6 以下のようにバージョンを指定せずに実行すると１つ前のバージョンにダウングレードされる。 # yum downgrade groonga...","categories": ["サーバ構築"],
        "tags": ["CentOS"],
        "url": "/2016/06/30/cenos-downgrading-yum-package/",
        "teaser": null
      },{
        "title": "2016年6月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"7月になりましたので、先月6月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 38,600 68.3162 Mac OS 10,930 19.3444 Linux 2,668 4.7220 Ubuntu Linux 1,933 3.4211 Android 1,597 2.8264 RedHat Linux 406 0.7186 unknown 190 0.3363 Fedora Linux 90 0.1593 FreeBSD 63 0.1115 Wii 13 0.0230 Debian GNU/Linux 6 0.0106 Solaris 5 0.0088 OpenBSD 1 0.0018...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/07/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - RubyGems API キー取得！",
        "excerpt":"RubyGems ライブラリを RubyGems.org にリリースする際には API キーが必要となります。 以下、 API キーを取得する方法についての備忘録です。 1. RubyGems アカウントの作成 RubyGems.org アカウント未作成なら Sign up - RubyGems.org - your community gem host でアカウントを作成しておく。 2. API キーの取得 ローカル環境で以下を実行する。（RubyGems.org にサインインしていなくても大丈夫） $ curl -u handle_name https://rubygems.org/api/v1/api_key.yaml &gt; ~/.gem/credentials Enter host password for user 'handle_name': $ chmod 0600 ~/.gem/credentials （handle_name は自身のものに置き換えること） ”~/.gem/credentials” が作成され、rubygems_api_key...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2016/07/04/ruby-getting-rubygems-apikey/",
        "teaser": null
      },{
        "title": "Ruby - 太陽・月視位置計算 gem の作成（海保略算式版）！",
        "excerpt":"以前、Ruby で、海上保安庁・海洋情報部の「コンピュータによる天体の位置計算式」を利用して、太陽や月の視黄経や視赤経等を計算しました。 Ruby - 太陽・月の視黄経・視黄緯の計算（海保略算式版）！ 今回、そこで使用したロジックを gem ライブラリにしました。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 自作した gem ライブラリの名称は “eph_jcg” で、計算対象年は 2008 年〜 2016 年。 （2017 年以降も係数データが公開される度に対応する予定） 当ライブラリの計算可能項目 Sun 視赤経, R.A.(= Right Ascension, Alpha) 視黄緯, Dec.(= Declination, Delta) 地心距離, Dist.(= Distance) グリニッジ時角, hG.(= Greenwich hour angle) 視半径, S.D.(= Apparent Semidiameter) 視黄経, Lambda(= Ecliptic...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2016/07/08/ruby-calc-sun-moon-location-by-eph-jcg-gem/",
        "teaser": null
      },{
        "title": "Ruby - カレンダー計算 gem の作成！",
        "excerpt":"当方、 旧暦計算サンプルプログラム を参考にカレンダーを計算する Ruby スクリプトを作成しておりました（実際には多くの部分を微調整した）が、あらゆる面で流用したくなったために、今回 RubyGems ライブラリにし公開することとしました。 但し、微調整はしているもののこのアルゴリズムでは若干の誤差が発生します。また、計算する日によっては月齢が不正になることもあります。 2008年以降でしたら、海上保安庁海洋情報部提供のコンピュータによる天体の位置計算式で計算したほうが精度が高いです。 Ruby - 太陽・月視位置計算 gem の作成（海保略算式版）！ さらには、 NASA の機関 JPL(Jet Propulsion Laboratory) の提供する DE430 などのデータを使用して計算するほうがより高精度です。 Ruby - カレンダー計算 gem の作成（JPL DE430 使用の高精度版）！ 以下では、旧暦計算サンプルプログラムを元に作成した gem の簡単な利用方法をご紹介します。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 自作した gem ライブラリの名称は “mk_calendar” で、計算対象年月日は 0000-01-01 〜 9999-01-01。 （但し、祝日は当記事執筆時点の「国民の祝日に関する法律」によるもの） 当ライブラリの計算可能項目 ユリウス日(UTC), ユリウス日(JST)...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2016/07/12/ruby-calendar-calculation-by-my-gem/",
        "teaser": null
      },{
        "title": "Ruby - 日・月の出・入・南中計算 gem の作成！",
        "excerpt":"当方、 「日の出・日の入りの計算―天体の出没時刻の求め方」を参考に日・月の出・入・南中を計算する Ruby スクリプトを作成しておりましたが、あらゆる面で流用したくなったために、今回 RubyGems ライブラリにし公開することとしました。 以下では、今回作成した gem の簡単な利用方法をご紹介します。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 自作した gem ライブラリの名称は “mk_sunmoon” で、計算対象年月日は 0000-01-01 〜 9999-01-01。 当ライブラリの計算可能項目 日の出（時刻、方位角） 日南中（時刻、高度） 日の入（時刻、方位角） 月の出（時刻、方位角） 月南中（時刻、高度） 月の入（時刻、方位角） 1. インストール $ sudo gem install mk_sunmoon 2. Ruby スクリプトの作成例 File: sun_moon.rb 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2016/07/16/ruby-sun-moon-calculation-by-my-gem/",
        "teaser": null
      },{
        "title": "Ruby - 「グレゴリオ暦 -> ユリウス日」変換の検証！",
        "excerpt":"２種の計算式で「グレゴリオ暦 -&gt; ユリウス日」の変換を行い、結果が同じになるかを検証してみました。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 使用する２種の計算式は「フリーゲルの公式」とその他の計算式。 ここでの「ユリウス日」は JD(Julian Day) であり、JDN(Julian Day Number), CJD(Chronological Julian Day), MJD(Modified Julian Date) ではない。 1. 検証用 Ruby スクリプトの作成 以下のように作成してみた。（うるう年の２月から３月への変わり目、年末から年始への変わり目、うるう年でない年の２月から３月への変わり目をチェックするようにしている） File: verify_gc2jd.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/07/20/ruby-gc2jd-verification/",
        "teaser": null
      },{
        "title": "Ruby - 「ユリウス日 -> グレゴリオ暦」変換の検証！",
        "excerpt":"前回は「グレゴリオ暦 -&gt; ユリウス日」の変換を２種の計算式で行って相違について検証しましたが、今回は「ユリウス日 -&gt; グレゴリオ暦」の変換を２種の計算式で行い、結果が同じになるかを検証してみました。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 使用する２種の計算式は Web 上で見つけたもの。 ここでの「ユリウス日」は JD(Julian Day) であり、JDN(Julian Day Number), CJD(Chronological Julian Day), MJD(Modified Julian Date) ではない。 グレゴリオ暦は1582年10月15日からで、それ以前（1582年10月4日以前）はユリウス暦であるが、今回はそれは考慮しない。（ユリウス暦の1582年10月4日の翌日は、グレゴリオ暦の1582年10月15日） 1. 検証用 Ruby スクリプトの作成 以下のように作成してみた。（一旦フリーゲルの公式でグレゴリオ暦をユリウス日に変換後、そのユリウス日を２種の計算式でグレゴリオ暦に戻して相違をチェックするようにしている。チェックしたのは、年末年始、うるう年の２月末から３月への変わり目や、正午前後） File: verify_jd2gc.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/07/25/ruby-jd2gc-verification/",
        "teaser": null
      },{
        "title": "Ruby - 地球自転速度補正値 ΔT の計算！",
        "excerpt":"地球自転速度補正値 delta T (ΔT) の計算式が NASA - Polynomial Expressions for Delta T に掲載されていますので、 Ruby で実装してみました。(-1900年〜3000年対応） さらに、1972年から2018年までは、うるう秒実施日一覧: NICT - 日本標準時プロジェクトで公開されている「うるう秒」に 32.184(= TT（地球時） - TAI（国際原子時）) を加算した値とも比較できるようにしてみました。 各種時刻系については、当ブログ過去記事等をご参照ください。 Ruby - 各種時刻系の換算！ 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 NASA の計算式で計算できる西暦は -1900年から3000年。 （AD元年の前年はBC元年なので、今回の計算上の 0年 は BC1年、 -1900年 は BC1901年） うるう秒が実際されたのは1972年から2017年（当記事執筆時点）。（うるう秒実施日一覧: NICT - 日本標準時プロジェクト） 次回、いつ「うるう秒」が挿入（or 削除）されるかは不明なので、以下のスクリプト内の NICT...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Ruby"],
        "url": "/2016/07/29/ruby-delta-t-calculation/",
        "teaser": null
      },{
        "title": "2016年7月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"8月になりましたので、先月7月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 37,001 68.3419 Mac OS 10,405 19.2183 Linux 3,312 6.1174 Android 1,607 2.9682 Ubuntu Linux 1,446 2.6708 unknown 197 0.3639 Fedora Linux 73 0.1348 FreeBSD 73 0.1348 RedHat Linux 12 0.0222 Solaris 9 0.0166 Debian GNU/Linux 2 0.0037 Wii 2 0.0037 NetBSD 1 0.0018...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/08/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - JPL 天文暦 gem の作成！",
        "excerpt":"以前、「Ruby - JPL 天文暦データから ICRS 座標を計算！」について紹介しました。 その際に使用した Ruby スクリプトを改変して gem ライブラリ化しました。 対象となる天体の番号・中心となる天体の番号・ユリウス日を指定すると、そのユリウス日の中心天体から見た対象天体の位置（直交座標）と速度を計算して返します。（座標系は ICRS（国際地球基準座標系）） 以下では、今回作成した gem の簡単な利用方法をご紹介します。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 自作した gem ライブラリの名称は eph_jpl で、使用するバイナリデータは DE430. JPL 天文暦とは何か？バイナリデータとは何か？等々は、過去記事「Ruby - JPL 天文暦データから ICRS 座標を計算！」等をご参照ください。 1. インストール $ sudo gem install eph_jpl 2. Ruby スクリプトの作成例 File: ephemeris_jpl.rb 1 2 3 4...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2016/08/02/ruby-ephemeris-calculation-by-my-gem/",
        "teaser": null
      },{
        "title": "Ruby - グリニッジ恒星時の計算（IAU2006 理論）！",
        "excerpt":"グリニッジ視恒星時(GAST; Greenwich Apparent Sidereal Time)、グリニッジ平均恒星時(GMST; Greenwich Mean Sidereal Time)、分点均差(EE; Equation of Equinoxes )の計算を Ruby で実装してみました。（使用するのは IAU2006 理論 etc.） 【2016-09-06 追記】 以下で紹介の Ruby スクリプトを gem ライブラリにしました。 mk_greenwich - RubyGems.org もご参照ください。 【追記ここまで】 0. 前提条件、事前知識 グリニッジ時刻の計算には、 IAU SOFA(International Astronomical Union, Standards of Fundamental Astronomy) の提供する C ソースコードに実装されている数々のアルゴリズムを使用する。 IAU SOFA のソースコードには、 MHB2000(Mathews-Herring-Buffett, 2000) の理論や...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/08/06/ruby-calc-greenwich-sidereal-time/",
        "teaser": null
      },{
        "title": "ICRS からの座標変換について！",
        "excerpt":"ICRS(International Celestial Reference System; 国際天文基準座標系) の座標から GCRS(Geocentric Celestial Reference System; 地球重心天文座標系) や ITRS(International Terrestrial Reference System; 国際地球基準座標系) 等に変換する流れについての個人的備忘録です。 当方、天文計算については長けていないので、誤りもあるかもしれません。 0. 前提条件 IAU SOFA 提供の[ライブラリ群](http://www.iausofa.org/2016_0503_C/CompleteList.html ““)を大いに参考にしている。 ITRS 座標系より後ろの部分（local apparent 以降）については、今回はあまり注目していない。 1. 座標変換の流れ （太字が座標系で、間の【】で括った項目が変換に適用するもの） ICRS(International Celestial Reference System; 国際天文基準座標系) \\(\\alpha, \\delta, \\dot{\\alpha}, \\dot{\\delta}, \\pi, \\dot{r}\\) 1998年から IAU（International Astronomical Union; 国際天文学連合） により採用された現行の標準天球座標系 【space...","categories": ["暦・カレンダー"],
        "tags": ["カレンダー"],
        "url": "/2016/08/10/about-transformation-from-icrs/",
        "teaser": null
      },{
        "title": "Ruby - JPL 天文暦データから惑星質量を計算！",
        "excerpt":"NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 には各種定数値も掲載されています。 その定数値の中に、太陽や惑星の質量に万有引力定数を乗じたものがあります。 その値から太陽や惑星の質量を Ruby で算出して確認してみました。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 1. 事前情報 JPL DE430 の定数データはこちら。 万有引力定数の最新の国際的な定義値はこちら。 JPL DE430 の定数データのうち、 GM1 〜 GMS が「水星」〜「太陽」の質量に万有引力定数を乗じたもので、単位は \\(AU^{3} / day^{2}\\). （但し、GMB は「地球ー月の重心」） JPL DE430 の定数データのうち、 EMRAT は「地球と月の質量比」で、単位は \\(GM(earth) / GM(moon)\\). JPL DE430 の定数データのうち、 AU は「天文単位」で、単位は \\(m\\). 2....","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/08/14/ruby-planetary-mass-calculation-with-jpl/",
        "teaser": null
      },{
        "title": "LMDE2 - R インストール（by Apt パッケージ）！",
        "excerpt":"以前、 Scientific Linux や Linux Mint のデスクトップ環境に統計解析向けプログラミング言語 R をインストールしたことを記事にしました。 Scientific Linux - R 言語環境構築！ Linux Mint - R インストール！ 今回は、 LMDE2(Linux Mint Debian Edition 2) のデスクトップ環境にインストールする方法についての記録です。（Linux Mint にインストールした際と若干異なる部分があったし、本家 Web サイトにはソースからのビルドインストールについての説明しかないので） 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 Apt パッケージの取り扱いは aptitude や apt-get コマンではなく apt コマンドで行っている。 1. ソースリストの作成 File: /etc/apt/sources.list.d/r.list...","categories": ["PC_Tips"],
        "tags": ["LinuxMint","LMDE2","R"],
        "url": "/2016/08/18/lmde2-install-r-by-apt/",
        "teaser": null
      },{
        "title": "RMagick - Fontconfig warning 対策！",
        "excerpt":"RMagick 2.15.4 （ImageMagick 画像処理ライブラリ等を Ruby から呼び出せるようにできるインターフェースの機能を持った RubyGems ライブラリ）を利用した自作の Ruby スクリプトを実行した際に警告メッセージが出力されました。 以下、現象・原因・対策についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) Ruby 2.3.1-p112 RMagick 2.15.4 1. 現象 RMagick を利用した Ruby スクリプトを実行すると以下のような警告メッセージが出力される。 Fontconfig warning: \"/etc/fonts/conf.d/69-language-selector-ja-jp.conf\", line 126: Having multiple values in &lt;test&gt; isn't supported and may not work as expected Fontconfig warning: \"/etc/fonts/conf.d/69-language-selector-ja-jp.conf\", line...","categories": ["プログラミング"],
        "tags": [],
        "url": "/2016/08/22/rmagick-fontconfig-warning/",
        "teaser": null
      },{
        "title": "LMDE2 - TeX Live 2016 のインストール（by ISO イメージ）！",
        "excerpt":"　 \\(\\TeX\\) Live 2016 を、よくあるインストーラアーカイブをダウンロード＆展開後にインストーラを起動してインストールする方法ではなく、 ISO イメージファイルを取得してインストールする方法についての記録です。 （\\(\\TeX\\)とは、組版処理ソフトで、理系の論文作成等によく使用します） 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。（他の Linux ディストリビューションでも同様） 当記事執筆時点で最新の “texlive2016-20160523.iso” を使用する。 1. ISO イメージの取得 こちら から好みのミラーサイトを選択後、 “texlive2016-20160523.iso” をダウンロードし、適当なディレクトリに配置する。 配置後に SHA-2(SHA-512) のハッシュ値を調べる。 $ sha512sum texlive2016-20160523.iso c23f80a7018f99c6a0db1d6e9d2d90ac57a8c457d9767def793e5c266e6505f3f38d7cdc0be91e7959d86ab97abcaa85d5f15be08c0f711a01caff8ae149176c texlive2016-20160523.iso ハッシュ値が “texlive2016-20160523.iso.sha512” に記載のものと相違がないか確認しておく。（SHA-2(SHA-512) 以外に MD5 も用意されている） 2. ISO イメージのマウント ISO イメージなので DVD に焼いてもよいが、当然ながらそんな面倒なことをしなくてもマウントすればよい。 $...","categories": ["PC_Tips"],
        "tags": ["TeX","Linux","LinuxMint","LMDE2"],
        "url": "/2016/08/26/texlive-installation-on-linux-mint/",
        "teaser": null
      },{
        "title": "Ruby - JPL 天文暦データから地球と惑星の距離を計算！",
        "excerpt":"NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している太陽・月・惑星の暦の最新版 DE430 には太陽・月・惑星の位置（ICRS座標系）の情報が格納されています。 それらの値を使用して、地球から太陽・月・その他の惑星との間の距離を Ruby で計算してみました。（JPL DE430 の情報を読み込むには自作の RubyGems ライブラリ “eph_jpl” を使用する） 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 JPL DE430 のバイナリデータをこちらから取得し “JPLEPH” とリネームして適当なディレ取りに配置しておく。 当方作成の RubyGems ライブラリ eph_jpl - RubyGems.org がインストール済みであること。 1. Ruby スクリプトの作成 File: jpl_distance_earth.rb 1 2 3 4 5 6 7 8 9 10 11...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/08/30/ruby-planetary-distance-calculation-with-jpl/",
        "teaser": null
      },{
        "title": "2016年8月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"9月になりましたので、先月8月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 34,970 69.8855 Mac OS 9,181 18.3477 Linux 2,754 5.5037 Android 1,597 3.1915 Ubuntu Linux 1,169 2.3362 unknown 180 0.3597 Fedora Linux 97 0.1938 FreeBSD 75 0.1499 RedHat Linux 5 0.0100 Wii 4 0.0080 Debian GNU/Linux 2 0.0040 PlayStation 2 0.0040 NetBSD 1 0.0020...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/09/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - シュバルツシルト半径の計算！",
        "excerpt":"太陽系の太陽・惑星・月のシュバルツシルト半径(Schwarzschild radius)を計算してみました。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 1. シュバルツシルト半径について 専門ではないので詳細に説明できないが、簡単に言うと、 強い重力による時空の歪みの影響で、一度入ったら光でさえ抜け出せなくなる天体の半径。 ブラックホールなら、その大きさを表すものとして使われる。 シュバルツシルト半径の計算式は、 \\(r = 2 * G * M / c^{2}\\) 但し、 \\[G: 万有引力定数(単位: m^{3} kg^{-1} s^{-2})\\] \\[M: 質量(単位: kg)\\] \\[c: 光速(単位: m/s)\\] ひいては、天体の視位置を正確に計算する際に、質量の大きな天体の重力場による光の曲がりに関わってくる。 2. Ruby スクリプトの作成 単純に計算式に当てはめて計算しているだけ。 但し、 太陽・惑星・月の質量については、過去記事「Ruby - JPL 天文暦データから惑星質量を計算！」を参照のこと。 万有引力定数については、 “CODATA Value: Newtonian constant of...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/09/03/ruby-schwarzschild-radius-calculation/",
        "teaser": null
      },{
        "title": "Ruby - うるう秒実施一覧・DUT1一覧の取得（NICT 版）！",
        "excerpt":"NICT - 日本標準時プロジェクトで公開されている「うるう秒実施一覧」と「DUT1 一覧」を Ruby で取得してみました。 単純に HTML を取得して Nokogiri で解析しているだけです。 うるう秒や DUT1 に変更があった際に自作カレンダー関連のツールに容易に組み込めるように、と作成した次第です。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 DUT1 等の時刻系に関することは、過去記事「Ruby - 各種時刻系の換算！」を参照のこと。 1. Ruby スクリプトの作成 File: get_leapsec_nict.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/09/07/ruby-getting-leap-second-dut1-from-nict/",
        "teaser": null
      },{
        "title": "Ruby - 各種時刻体系の換算（by 自作 gem ライブラリ）！",
        "excerpt":"以前、各種時刻体系や、 JST（日本標準時）から変換する Ruby スクリプトを紹介しました。 Ruby - 各種時刻系の換算！ そこで使用したロジックを RubyGems ライブラリ化したので、そのライブラリを使用して JST から各種時刻体系へ換算してみました。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 自作した RubyGems ライブラリは “mk_time” 各種時刻体系については、過去記事「Ruby - 各種時刻系の換算！」を参照。 ここでは自作ライブラリの詳細については説明しないが、 UTC を与えると以下の値を返すようにしている。 JST （日本標準時） JD （ユリウス日） T （ユリウス世紀数） UTC - TAI （協定世界時と国際原子時の差 = うるう秒の総和） LEAP_SEC （UTC - TAI と同じ） DUT1 （UT1 と UTC の差 =...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2016/09/11/ruby-calc-time-series-by-my-gem/",
        "teaser": null
      },{
        "title": "Nginx - キャッシュの手動削除！",
        "excerpt":"HTTP &amp; リバースプロキシサーバ Nginx の溜まったキャッシュを手動で削除する方法についての備忘録です。 0. 前提条件 CentOS 6.8(32bit) Nginx 1.10.1 1. キャッシュ保存ディレクトリのパス確認 まず、 Nginx の設定ファイルでキャッシュをどのディレクトリに保存するよう設定しているかを確認してみる。 File: /etc/nginx/nginx.conf 1 proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=my-key:8m max_size=50m inactive=120m;$ 項目説明 キャッシュ保存先\"/var/cache/nginx/cache\" キャッシュの階層2層(`1:2` は、1層目が１文字、2層目が２文字の /a/aa/ のような階層) キーゾーン名\"my-key\" キーゾーンのメモリサイズ8MB キャッシュのファイルサイズ上限50MB キャッシュ有効期間120分 2. キャッシュの確認 以下は、当ブログ http://www.mk-mode.com/octopress のキャッシュの存在を確認する例。 # grep -lr \"http://www.mk-mode.com/octopress/*\" /var/cache/nginx/cache/ /var/cache/nginx/cache/f/ee/ea8c92983954d4e0e833580f04e61eef /var/cache/nginx/cache/c/9a/703db7ec8a20d23a018c99052a78b9ac 3. キャッシュの削除 以下は、当ブログ...","categories": ["サーバ構築"],
        "tags": ["Nginx","Linux","CentOS"],
        "url": "/2016/09/15/nginx-deleting-proxy-caches/",
        "teaser": null
      },{
        "title": "Ruby - バイアス・歳差・章動の適用（by 自作 gem ライブラリ）！",
        "excerpt":"赤道直交座標にバイアス・歳差・章動の回転を適用する RubyGems ライブラリを作成しました。 IAU SOFA(International Astronomical Union, Standards of Fundamental Astronomy) の提供するソースコード等を参考にして作成しています。 今回作成したライブラリの詳細については説明しません。使用例を紹介します。（ライブラリの詳細について知りたければ、ライブラリのソースコードをご確認ください） 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 自作した RubyGems ライブラリは “eph_bpn” 「バイアス(frame bias)」とは、「GCRS(Geocentric Celestial Reference System; 地球重心天文座標系)」と「J2000.0 の平均座標系」との間のズレ。 「J2000.0 の平均座標系」に「歳差」を適用すると「瞬時の平均座標系」になる。 「瞬時の平均座標系」に「章動」を適用すると「瞬時の真座標系」になる。 「歳差(precession)」や「章動(nutation)」の詳細については、「歳差・章動と地球の向き - 国立天文台暦計算室」を参照ください。 作成した RubyGems ライブラリ eph_bpn について インスタンス化時に引数として TDB（太陽系力学時）を与える。 インスタンスメソッド apply_bias, apply_prec, apply_nut に座標の配列を引数に指定して実行すると、バイアス・歳差・章動を適用した座標の配列を返す。 その他、インスタンスは TDB（太陽系力学時）, JD（ユリウス日）,...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2016/09/20/ruby-bpn-rotation-by-my-gem/",
        "teaser": null
      },{
        "title": "Ruby - 赤道・黄道座標の変換（by 自作 gem ライブラリ）！",
        "excerpt":"赤道直交座標と黄道直交座標を相互に変換したり、直交座標と極座標を相互に変換したりする RubyGems ライブラリを作成しました。 以下、その簡単な使用例です。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 自作した RubyGems ライブラリは “mk_coord” 当ライブラリには任意の日時の平均黄道傾斜角を計算する機能を持たせていない。 必要であれば、別の自作ライブラリ “eph_bpn” をご使用ください。（過去記事参照：「Ruby - バイアス・歳差・章動の適用（by 自作 gem ライブラリ）！」） 1. Ruby スクリプトの作成例 File: coord_conversion.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2016/09/24/ruby-coordinate-conversion-by-my-gem/",
        "teaser": null
      },{
        "title": "Ruby - グリニッジ恒星時の計算（by 自作 gem ライブラリ）！",
        "excerpt":"以前、 Ruby でグリニッジ恒星時（視恒星時、平均恒星時、分点均差）を計算するプログラムを作りました。 Ruby - グリニッジ恒星時の計算（IAU2006 理論）！ しかし、他のプログラム内でも使用したかったので、今回 RubyGems ライブラリ化しました。 以下、その簡単な使用例です。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 自作した RubyGems ライブラリは “mk_greenwich” バイアス・歳差・章動の計算も必要であるため、当ライブラリでは別の自作ライブラリ “eph_bpn” を使用するようにしている。 バイアス・歳差・章動については、過去記事「Ruby - バイアス・歳差・章動の適用（by 自作 gem ライブラリ）！」を参照のこと。 以下で出現する英略語について ERA: Earth Rotation Angle; 地球回転角 EO: Equation of the Origins; 原点差 GAST: Greenwich Apparent Sidereal Time; グリニッジ視恒星時 GMST: Greenwich Mean...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2016/09/28/ruby-greenwich-time-calculation-by-my-gem/",
        "teaser": null
      },{
        "title": "2016年9月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"10月になりましたので、先月9月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 37,307 69.9812 Mac OS 9,513 17.8447 Linux 3,219 6.0383 Android 1,623 3.0445 Ubuntu Linux 1,263 2.3692 unknown 190 0.3564 FreeBSD 91 0.1707 Fedora Linux 85 0.1594 Debian GNU/Linux 8 0.0150 NetBSD 3 0.0056 PlayStation 3 0.0056 RedHat Linux 2 0.0038 OpenBSD 1 0.0019...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/10/01/blog-access/",
        "teaser": null
      },{
        "title": "MySQL - Mroonga でメモリマッピングエラー！",
        "excerpt":"Mroonga は、全文検索エンジン Groonga をベースとした MySQL のストレージエンジンです。 Mroonga を利用した自作ツールを実行した際に、メモリマッピングに関するエラーが発生するようになったので、その対処方法について記録しておきます。 0. 前提条件 CentOS 6.8(32bit) MySQL 5.7.14 （Mroonga プラグイン有効） データベースの総容量は 42GB 程度 Mroonga にそれほど長けている訳でもないので、以下の記述に誤りがあるかもしれない。 1. 現象 MySQL を使用した自作ツールを実行すると、以下のようなエラーが発生することがある。 mmap(262144,444,66883584)=Cannot allocate memory &lt;306810880&gt; メモリのマッピングに失敗しているようだ。 2. 原因 大きなデータベースを扱うための Groonga のパラメータが適切に設定されていないため。（おそらく） 3. 対策 「7.22. チューニング — Groonga v6.0.7ドキュメント」を参考に、 “/etc/sysctl.conf” に vm.overcommit_memory と vm.max_map_count の設定を記述する。 まず、現在値を確認してみる。 #...","categories": ["サーバ構築"],
        "tags": ["MySQL","Mroonga"],
        "url": "/2016/10/02/mysql-mroonga-memory-mapping-error/",
        "teaser": null
      },{
        "title": "Ruby - JPL DE430 データから太陽・月の視位置を計算！",
        "excerpt":"NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している太陽・月・惑星の暦の最新版 DE430 からデータを取得し、太陽と月の視位置を高精度で計算してみました。 【2016-10-10 追記】 以下で紹介の Ruby スクリプトを gem ライブラリにしました。 mk_apos - RubyGems.org もご参照ください。 【追記ここまで】 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 以下の自作 RubyGems ライブラリをインストールしておく。 ICRS 座標取得には eph_jpl を使用する。 バイアス・歳差・章動適用には eph_bpn を使用する。 時刻系変換には mk_time を使用する。 座標系変換には mk_coord を使用する。 1. 事前準備 JPL DE430 のデータを使用するので、バイナリデータ “linux_p1550p2650.430” をこちらから取得し “JPLEPH” とリネームして適当なディレクトリに配置しておく。...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2016/10/06/ruby-sun-moon-apparent-position-calculation/",
        "teaser": null
      },{
        "title": "Ruby - JPL DE430 データから太陽・月の視位置を計算（by 自作 gem ライブラリ）！",
        "excerpt":"前回、Ruby で NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している太陽・月・惑星の暦の最新版 DE430 からデータを取得し、太陽と月の視位置を高精度で計算してみました。 Ruby - JPL DE430 データから太陽・月の視位置を計算 他のプログラム内でも使用したかったので、今回 RubyGems ライブラリ化しました。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 自作した RubyGems ライブラリは mk_apos （このライブラリ内では、他の自作ライブラリ eph_jpl, eph_bpn, mk_time, mk_coord も使用している） 1. 事前準備 JPL DE430 のデータを使用するので、バイナリデータ “linux_p1550p2650.430” をこちらから取得し “JPLEPH” とリネームして適当なディレクトリに配置しておく。 ただし、このバイナリファイルはサイズが大きいので、必要な年代のテキストデータのみをマージ＆バイナリ化してもよい。（参考：JPL 天文暦データのバイナリ化！） 2. Ruby スクリプトの作成例 FILE_BIN の値は、 “JPLEPH”...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2016/10/10/ruby-sun-moon-apparent-position-calculation-by-my-gem/",
        "teaser": null
      },{
        "title": "Linux - システム稼働開始日時取得（uptime 使用）！",
        "excerpt":"以前、 btime からシステム稼働開始日時を取得する方法を紹介しました。 Linux - システム稼働開始日時取得（btime 使用）！ 今回は uptime から取得する方法についての記録です。 【2017-06-16 追記】 Debian であれば、以下のようにわざわざ計算しなくとも、 uptime -s で容易に取得できる。 【追記ここまで】 0. 前提条件 CentOS 6.8(32bit) での作業を想定。 1. 事前確認 “/proc/uptime” に「システムが起動してから経過した合計秒数」と「各コアがアイドル状態で経過した合計時間の秒数」が記録されているので、それを確認してみる。。 $ cat /proc/uptime 20400382.35 1448976.68 2. コマンド実行例 $ date +\"%Y-%m-%d %I:%M:%S\" --date=@$(expr `date +%s` - `cut -d \".\" -f 1 /proc/uptime`) 2016-01-24 08:39:40...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2016/10/14/linux-get-system-start-time-by-uptime/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 二十四節気（時刻入り）一覧ページ！",
        "excerpt":"これまでコツコツと太陽と月の視位置を正確に計算するプログラムを作成してきました。 この度、高精度で計算できるようになったので、既存の Rails 製の自 Web サイト上「二十四節気一覧」ページに二十四節気の瞬間の時刻を追加しました。（国立天文台の計算と高精度で一致するはず） 0. 前提条件 太陽の視位置を計算するのに、よくある三角関数を多用した略算式では誤差が発生するため、 NASA の機関 JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している太陽・月・惑星の暦の最新版 DE430 を使用している。 太陽の視位置計算アルゴリズムには IAU SOFA(International Astronomical Union, Standards of Fundamental Astronomy) の提供する C ソースコード や、国立天文台も採用している方法(PDF)を使用している。 実際の計算には、別途自作した RubyGems ライブラリ mk_apos ( eph_jpl, eph_bpn, mk_coord, mk_time )を使用している。 自作の RubyGems ライブラリ mk_apos は任意の日時の太陽・月の視位置を JPL DE430 データから高精度で計算するものだが、二十四節気の瞬間の時刻を算出するには二分法を使用している。（ここでは、そのプログラムの紹介はしない） 1. 二十四節気一覧ページの紹介...","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2016/10/18/rails-sekki24-list/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 朔・弦・望（月の満ち欠け）一覧ページ！",
        "excerpt":"これまでコツコツと太陽と月の視位置を正確に計算するプログラムを作成してきました。 この度、高精度で計算できるようになったので、月の満ち欠け（朔・弦・望新＝月・上弦・満月・下弦）の一覧ページを Rails 製の自 Web サイト上に作成＆公開しました。※分単位では国立天文台の計算と一致するはず 0. 前提条件 よくある三角関数を多用した略算式では誤差が発生するため、 NASA の機関 JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 を使用している。 計算アルゴリズムには IAU SOFA(International Astronomical Union, Standards of Fundamental Astronomy) の提供する C ソースコード や、国立天文台も採用している方法(PDF)を使用している。 実際の計算には、別途自作した RubyGems ライブラリ mk_apos ( eph_jpl, eph_bpn, mk_coord, mk_time )を使用している。 自作の RubyGems ライブラリ mk_apos は任意の日時の太陽・月の視位置を JPL DE430 データから高精度で計算するものだが、月の満ち欠け（月と太陽の視黄経差 0, 90,...","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2016/10/22/rails-moon-saku-gen-bou-list/",
        "teaser": null
      },{
        "title": "Ruby - カレンダー計算 gem の作成（JPL DE430 使用の高精度版）！",
        "excerpt":"以前、 旧暦計算サンプルプログラム を参考に作成したカレンダー計算 RubyGems ライブラリを作成しました。（但し、実際には多くの部分で微調整している） Ruby - カレンダー計算 gem の作成！ 但し、微調整はしているものの、このアルゴリズムは略算式を使用しているため、当然ながら若干の誤差が発生します。 そこで、 NASA の機関 JPL(Jet Propulsion Laboratory) の提供する太陽・月・惑星の正確な位置データ DE430 などを使用して計算する RubyGems ライブラリを作成しました。 以下では、作成した RubyGems ライブラリの簡単な利用方法をご紹介します。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 自作した gem ライブラリの名称は “mk_cal_jpl” で、計算対象年月日は 1549-12-21 〜 2650-01-25（但し、使用する JPL DE430 バイナリデータを別途作成し直している場合は、そこで設定した期間）。 但し、祝日は当記事執筆時点の「国民の祝日に関する法律」によるもの。 当ライブラリの計算可能項目 ユリウス日(UTC), ユリウス日(JST) 曜日 祝日 二十四節気 雑節 干支（日）...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2016/10/26/ruby-calendar-calculation-by-my-gem-jpl/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 月別カレンダーページの更新！",
        "excerpt":"これまでコツコツと太陽と月の視位置を正確に計算するプログラムを作成してきました。 この度、高精度で計算できるようになったので、 Rails 製の自 Web サイト上の月別カレンダーページを更新いたしました。 0. 前提条件 よくある三角関数を多用した略算式では誤差が発生するため、 NASA の機関 JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している太陽・月・惑星の暦の最新版 DE430 を使用している。 計算アルゴリズムには IAU SOFA(International Astronomical Union, Standards of Fundamental Astronomy) の提供する C ソースコード や、国立天文台も採用している方法(PDF)を使用している。 実際の計算には、別途自作した RubyGems ライブラリ mk_cal_jpl ( mk_apos, eph_jpl, eph_bpn, mk_coord, mk_time )を使用している。 1. 月別カレンダーのページ 今回は、公開中のページを更新したという紹介をするのみ。 実際に公開しているページは以下。 mk-mode SITE : カレンダー（月間） ちなみに、各種の値を一連で確認しやすくするために、よくある1行で1週間のレイアウトではなく、1行で1日のレイアウトとしている。（過去には、1行で1週間のレイアウトにしておりましたが）...","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2016/10/30/rails-exact-calendar-list/",
        "teaser": null
      },{
        "title": "2016年10月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"11月になりましたので、先月10月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 37,264 68.2041 Mac OS 10,839 19.8386 Linux 3,309 6.0564 Android 1,581 2.8937 Ubuntu Linux 1,292 2.3647 unknown 190 0.3478 Fedora Linux 94 0.1720 FreeBSD 48 0.0879 Solaris 11 0.0201 Debian GNU/Linux 4 0.0073 NetBSD 3 0.0055 Wii 1 0.0018 合　計 54,636 100.0000 2....","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/11/01/blog-access/",
        "teaser": null
      },{
        "title": "CentOS - Monit でプロセス監視！",
        "excerpt":"不意にサーバプロセスが落ちてしまい、さらに、落ちたことにも気付かず何日も経過してしまう、ということがないよう、プロセスを監視するツール Monit を使用します。 以下、使用方法についての簡単な記録です。 0. 前提条件 CentOS 6.8(32bit) での作業を想定。 （Debian 系はディレクトリ構成等が異なるので、適宜置き換えて考える） RPMForge リポジトリが導入済みである。（過去記事参照： CentOS 6.5 - 初期設定！ ） 1. monit のインストール CentOS のデフォルトのリポジトリには存在しないため RPMForge リポジトリを使用してインストールする。 $ yum --enablerepo=rpmforge -y install monit CentOS 7 系なら標準リポジトリでインストールできる（かもしれない）。 2. 設定ファイル編集 設定ファイル “/etc/monit.conf” を編集する。 以下は当方の例。 File: /etc/monit.conf 1 2 3 4 5 6 7 8...","categories": ["サーバ構築"],
        "tags": ["Linux","CentOS"],
        "url": "/2016/11/04/centos-monit-monitoring/",
        "teaser": null
      },{
        "title": "Linux - sed で最終行が特定の文字列の場合のみ行削除！",
        "excerpt":"Linux の sed コマンドで、「特定のディレクトリ内の全てのテキストファイルに対して、最終行に特定の文字列を含んでいる場合のみその行を削除する」方法についてに備忘録です。 0. 前提条件 今回は LMDE2 (Linux Mint Debian Edition 2) での作業を想定。 1. 実行例 以下は、カレントディレクトリ内の拡張子が “md” である全ファイルの最終行が --- である場合にその行を削除する例。 $ find *.md | xargs sed -i '${/^---$/d;}' find *.md は、カレントディレクトリ内の拡張子が “md” のファイルを検索するコマンド。 （find . -name \"*.md\" でもよいだろう。但し、サブディレクトリが存在する場合は、それらの対象となる） | は、前の処理の標準出力を次の処理に引き渡すパイプ処理。 xargs は、前の処理から引き渡された標準出力のそれぞれを次の処理の引数として渡すコマンド。 sed -i は、 sed コマンドで書き換えた内容を元のファイルに上書き保存する。 '${/^---$/d;}' の最初の...","categories": ["PC_Tips"],
        "tags": ["Linux","sed"],
        "url": "/2016/11/08/linux-sed-deleting-last-line-with-specific-strings/",
        "teaser": null
      },{
        "title": "Linux - ディレクトリ内の全ファイルの拡張子を一括変更！",
        "excerpt":"Linux で「特定のディレクトリ内の特定の複数のファイルに対して、その拡張子を一括で変更する」方法についての備忘録です。 0. 前提条件 今回は LMDE2 (Linux Mint Debian Edition 2) での作業を想定。 1. 実行例 以下は、カレントディレクトリ内の拡張子が “markdown” である全ファイルの拡張子を “md” に変更する例。 $ for f in *.markdown; do &gt; mv $f ${f%.markdown}.md; &gt; done for f in *.markdown; do ... done で、カレントディレクトリ内の拡張子が “markdown” の全ファイルをループ処理。 mv A B で、ファイル A の名称を B に変換。 ${f%.markdown}...","categories": ["PC_Tips"],
        "tags": ["Linux","sed"],
        "url": "/2016/11/13/linux-bulk-changing-all-filename-extension/",
        "teaser": null
      },{
        "title": "Ruby - キャメルケース <-> スネークケースの変換！",
        "excerpt":"Ruby で、キャメルケースな class 名をスネークケースに変換してメソッド内で使用したかったので、 String クラスを拡張して実装してみました。（結局、よくある方法ですが） 以下、備忘録です。 0. 前提条件 Ruby 2.3.1-p112 での作業を想定。 1. 実装とスクリプト作成例 File: conv_camel_snake.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class String def to_camel self.split(/_/).map(&amp;:capitalize).join # or #self.split(/_/).map{ |w| w[0] = w[0].upcase; w }.join...","categories": ["プログラミング"],
        "tags": ["Ruby","正規表現"],
        "url": "/2016/11/17/ruby-convert-camelcase-snakecase/",
        "teaser": null
      },{
        "title": "Ruby - 2.3.2 ビルドインストール時のエラー！",
        "excerpt":"Ruby 2.3.2 をソースをビルドしてインストールする際にエラーが出力されるので、調査して対策してみました。 調べてみると、実際は 2.3.1 から同じようなエラーになるようですが、自分が 2.3.1 をソースビルドでインストールした時には気付きませんでした。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 1. 現象 .configure, make 後に sudo make install すると、以下のようなエラーを出力して終了する。 /home/foo/ruby-2.3.2/lib/rubygems/installer.rb:233:in `check_executable_overwrite': no implicit conversion of nil into String (TypeError) from /home/foo/ruby-2.3.2/lib/rubygems/installer.rb:474:in `block in generate_bin' from /home/foo/ruby-2.3.2/lib/rubygems/installer.rb:461:in `each' from /home/foo/ruby-2.3.2/lib/rubygems/installer.rb:461:in `generate_bin' from /home/foo/ruby-2.3.2/lib/rubygems/installer.rb:301:in `install' from...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2016/11/21/ruby-2.3.2-error-on-build-install/",
        "teaser": null
      },{
        "title": "Linux - ファイルの暗号化・復号化（GnuPG, 共通鍵方式）！",
        "excerpt":"The GNU Privacy Guard(= GnuPG) を使用して手軽に（共通鍵方式で）ファイルを暗号化する方法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 使用する GnuPG は 1.4.18 を想定。 今回は「共通鍵方式（対称暗号法」を使用して暗号化・復号化する。 ここでは、共通鍵（公開鍵）の詳細については説明しない。 1. GnuPG による暗号化・復号化について GnuPG による暗号化・復号化には、暗号化時と復号化時に同じ鍵を使用する「共通鍵暗号方式」の他に、暗号化時と復号に異なる鍵（公開鍵と秘密鍵）を使用する「公開鍵暗号方式」がある。 2. 使用する GnuPG の確認 暗号化・復号化の前に、サポートされている暗号化アルゴリズム等を確認してみる。 $ gpg --help gpg (GnuPG) 1.4.18 Copyright (C) 2014 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3...","categories": ["PC_Tips"],
        "tags": ["Linux","GnuPG","暗号"],
        "url": "/2016/11/25/linux-gpg-encryption-by-common-key-cryptosystem/",
        "teaser": null
      },{
        "title": "Linux - ファイル暗号化・復号化用の公開鍵生成(GnuPG)！",
        "excerpt":"The GNU Privacy Guard を使用して公開鍵方式でファイルを暗号化するには、まず公開鍵を生成する必要があります。 以下、公開鍵生成方法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 使用する GnuPG は 1.4.18 を想定。 ここでは、公開鍵（共通鍵）の詳細については説明しない。 1. 公開鍵暗号方式について 公開鍵暗号方式では、ファイルを暗号化する人は復号化する人によって公開されている「公開鍵」を使用してファイルを暗号化する。そして、復号する際には「秘密鍵」を使用する。 2. 公開鍵の生成 公開鍵の生成は、実際には複合する側が行う。 $ gpg --gen-key gpg (GnuPG) 1.4.18; Copyright (C) 2014 Free Software Foundation, Inc. This is free software: you are free to change and redistribute...","categories": ["PC_Tips"],
        "tags": ["Linux","GnuPG","暗号"],
        "url": "/2016/11/29/linux-gpg-generating-public-key/",
        "teaser": null
      },{
        "title": "2016年11月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"12月になりましたので、先月11月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 38,452 67.9040 Mac OS 11,247 19.8616 Linux 3,374 5.9583 Android 1,860 3.2847 Ubuntu Linux 1,308 2.3099 unknown 158 0.2790 Fedora Linux 128 0.2260 FreeBSD 79 0.1395 Solaris 14 0.0247 Debian GNU/Linux 3 0.0053 PlayStation 2 0.0035 NetBSD 1 0.0018 SuSE Linux 1 0.0018...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2016/12/01/blog-access/",
        "teaser": null
      },{
        "title": "Linux - ファイルの暗号化・復号化（GnuPG, 公開鍵方式）！",
        "excerpt":"The GNU Privacy Guard を使用して公開鍵方式でファイルを暗号化・復号化する方法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 使用する GnuPG は 1.4.18 を想定。 ここでは、公開鍵（共通鍵）の詳細については説明しない。 1. 公開鍵のインポート 暗号化する側は、復号化する側が生成した公開鍵をメールなどで受け取った後、以下のようにしてインポートする。 $ gpg --import hoge_fuga.pub gpg: 鍵AA260242:“Hoge Fuga (foo-bar) &lt;hoge_fuga@foo-bar.xxx&gt;” を読み込みました gpg: 処理数の合計: 1 gpg: 読込み: 1 インポートされている鍵の確認は、以下のとおり。 $ gpg --list-keys /home/hoge/.gnupg/pubring.gpg ------------------------------- pub 2048R/AA260242 2016-11-04 uid Hoge Fuga...","categories": ["PC_Tips"],
        "tags": ["Linux","GnuPG","暗号"],
        "url": "/2016/12/03/linux-gpg-encryption-by-public-key-cryptosystem/",
        "teaser": null
      },{
        "title": "Linux - GnuPG 公開鍵の無効化・削除！",
        "excerpt":"The GNU Privacy Guard の公開鍵暗号方式は基本的には安全だが、パスワードを忘れてしまったり、パスワードが外部に漏れてしまった場合は、公開鍵を無効化する必要があるでしょう。 以下、無効化する方法についての記録です。 さらに、不要となった公開鍵を削除する方法についても記録しておく。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 使用する GnuPG は 1.4.18 を想定。 ここでは、公開鍵（共通鍵）の詳細については説明しない。 公開鍵の無効化には公開鍵生成時に使用したパスワードが必要なので、以下の作業は公開鍵生成時に行っておいた方がよい。 1. 失効証明書の生成 $ gpg -o hoge_fuga.revoke --gen-revoke hoge_fuga@foo-bar.xxx sec 2048R/AA260242 2016-11-04 Hoge Fuga (foo-bar) &lt;hoge_fuga@foo-bar.xxx&gt; この鍵にたいする失効証明書を作成しますか? (y/N) y # &lt;= y で応答 失効の理由を選択してください: 0 = 理由は指定されていません 1 =...","categories": ["PC_Tips"],
        "tags": ["Linux","GnuPG","暗号"],
        "url": "/2016/12/07/linux-gpg-disable-public-key/",
        "teaser": null
      },{
        "title": "Linux - ファイルの暗号化・復号化（OpenSSL, 共通鍵方式）！",
        "excerpt":"OpenSSL を使用して共通鍵方式でファイルを暗号化する方法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 使用する OpenSSL は 1.0.1t を想定。 今回は「共通鍵方式（対称暗号法」を使用して暗号化・復号化する。 ここでは、共通鍵（公開鍵）の詳細については説明しない。 1. 指定可能な暗号化アルゴリズムの確認 $ openssl list-cipher-commands aes-128-cbc aes-128-ecb aes-192-cbc aes-192-ecb aes-256-cbc aes-256-ecb base64 bf ===&lt; 中略 &gt;=== rc4 rc4-40 seed seed-cbc seed-cfb seed-ecb seed-ofb ちなみに、サポートされている暗号化スイートの確認は以下のようにする。 $ openss ciphers -v ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH Au=RSA Enc=AESGCM(256)...","categories": ["PC_Tips"],
        "tags": ["Linux","OpenSSL","暗号"],
        "url": "/2016/12/11/linux-openssl-encryption-by-common-key-cryptosystem/",
        "teaser": null
      },{
        "title": "Linux - ファイル暗号化・復号化用の公開鍵生成(OpenSSL)！",
        "excerpt":"OpenSSL を使用して公開鍵方式でファイルを暗号化するには、まず秘密鍵＆公開鍵を生成する必要があります。 以下、秘密鍵＆公開鍵生成方法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 使用する OpenSSL は 1.0.1t を想定。 ここでは、公開鍵（共通鍵）の詳細については説明しない。 1. 秘密鍵の生成 AES-256 アルゴリズムで長さ 2048 ビットの秘密鍵を生成する例。 $ openssl genrsa -aes256 -out private-key.pem 2048 Generating RSA private key, 2048 bit long modulus ...+++ ..................+++ e is 65537 (0x10001) Enter pass phrase for private-key.pem: #...","categories": ["PC_Tips"],
        "tags": ["Linux","OpenSSL","暗号"],
        "url": "/2016/12/15/linux-openssl-generating-public-key/",
        "teaser": null
      },{
        "title": "Linux - ファイルの暗号化・復号化（OpenSSL, 公開鍵方式）！",
        "excerpt":"OpenSSL を使用して公開鍵方式でファイルを暗号化・復号化する方法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 使用する OpenSSL は 1.0.1t を想定。 ここでは、公開鍵（共通鍵）の詳細については説明しない。 1. 暗号化 暗号化する側は、復号化する側が生成した公開鍵を何らかの方法で受け取った後、以下のようにして暗号化する。 （以下は、 test.txt というファイルを公開鍵で暗号化して test.txt.enc を出力する例） $ openssl rsautl -in test.txt -out test.txt.enc -inkey public-key.pem -pubin -encrypt 2. 復号化 以下は、test.txt.enc という暗号化されたファイルを秘密鍵で復号化して test.txt を出力する例。 $ openssl rsautl -in test.txt.enc -out test.txt -inkey private-key.pem...","categories": ["PC_Tips"],
        "tags": ["Linux","OpenSSL","暗号"],
        "url": "/2016/12/19/linux-openssl-encryption-by-public-key-cryptosystem/",
        "teaser": null
      },{
        "title": "Linux - ntpd でのうるう秒対策！",
        "excerpt":"Linux サーバの ntpd でのうるう秒対策についての記録です。 0. 前提条件 CentOS 6.8(32bit), ntp 4.2.6p5-10.el6.centos.1 での作業を想定。 以下の作業は、うるう秒実施（挿入）時刻の24時間前までに行うこと。 （うるう秒実施（挿入）の24時間前に Leap Indicator(LI) が設定されるので） 1. ntpd の STEP モードと SLEW モードについて ntpd の動作モードには STEP と SLEW があり、それぞれ以下のように動作することを認識しておく。 STEPモード 不連続に一度に時刻を調整するため、時刻がずれている場合はすぐに正しい時刻に調整されていく。 そのため、時間の逆行が発生する可能性があり、ソフトウェアに不具合が起きる可能性がある。 SLEWモード 時間を逆行させることはせず、徐々に（1秒あたり0.5ミリ秒ずつ）時間をズラしていく。 2000秒かけて1秒のズレを解消する。 2. ntp のアップデート ntp-4.2.6p5-3 より古いバージョンだと SLEW モードで動作しないバグあるようなので、古い場合はアップデートしておく。 # yum update ntp 3. ntpd の停止 #...","categories": ["サーバ構築"],
        "tags": ["Linux","NTP"],
        "url": "/2016/12/23/linux-ntpd-leap-second-measure/",
        "teaser": null
      },{
        "title": "Linux - chrony でのうるう秒対策！",
        "excerpt":"Linux サーバの chrony でのうるう秒対策についての記録です。 chrony が基本的に SLEW モードで動作しているとは言っても、対策しなければ、うるう秒挿入時に STEP モードのごとくカーネル通知して1秒がそのまま挿入されてしまいます。（「SLEW モードだから問題ない」とよく勘違いされる） 以下で、chrony 推奨の対策方法を紹介します。 0. 前提条件 NTP サーバに ntpd ではなく chrony を使用している。 以下では、 CentOS 7.3 での作業を想定している。 ちなみに、Debian GNU/Linux 8.6 (Jessie) の apt でインストールされる古いバージョン（1.30-2）には対応していない。 1. 設定ファイルの編集 設定ファイルの最終行あたりに以下の記述を追加する。 File: /etc/chrony/chrony.conf 1 2 3 leapsecmode slew maxslewrate 1000 smoothtime 400 0.001 leaponly leapsecmode はうるう秒モード。...","categories": ["サーバ構築"],
        "tags": ["Linux","NTP"],
        "url": "/2016/12/27/linux-chrony-leap-second-measure/",
        "teaser": null
      },{
        "title": "Linux - GNU 版コマンドをシェル組み込み版コマンドより優先させる！",
        "excerpt":"linux の time コマンドなどは、シェル組み込み版と GNU 版があり、シェル上ではシェル組み込み版が優先されてしまう。 以下、「GNU 版コマンドを優先させる方法」についての備忘録です。（「コマンドのエイリアスを一時的に無効化する方法」と置き換えてもよい） 0. 前提条件 LMDE2(Linux Mint Debian Edition 2, 64bit) での作業を想定。 zsh 5.0.7 での作業を想定。（bash でも同様） 以下で登場する半角「バックスラッシュ」は、JIS 環境では半角「円記号」。 1. シェル組み込み版の使用 単に time とした場合は、シェル組み込み版が使用される。 File: シェル組み込み版 1 2 $ time sleep 2 sleep 2 0.00s user 0.00s system 0% cpu 2.044 total zsh では、 time -p...","categories": ["PC_Tips"],
        "tags": ["Linux","シェル","bash","zsh"],
        "url": "/2016/12/31/linux-priorizing-gnu-command-over-built-in-command/",
        "teaser": null
      },{
        "title": "2016年12月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"旧年明けまして、新年おめでとうございます。 旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 話は変わりまして、先月12月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 35,944 66.7484 Mac OS 11,026 20.4754 Linux 3,257 6.0483 Android 1,934 3.5915 Ubuntu Linux 1,349 2.5051 unknown 204 0.3788 Fedora Linux 64 0.1188 FreeBSD 52 0.0966 PlayStation 6 0.0111 Solaris 6 0.0111 NetBSD 3 0.0056 Wii 2 0.0037 RedHat Linux...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/01/01/blog-access/",
        "teaser": null
      },{
        "title": "2016年 - ツイート集計！",
        "excerpt":"改めまして、旧年明けまして、新年おめでとうございます。 2016年の Twitter でのツイート（メインで使用しているアカウントのみ）を Ruby で集計してみました。 当方は、ツイートは全て自宅サーバ(Debian GNU/Linux)上のデータベース(MariaDB)に保存しています。（実際には Ruby + Twitter API で本家からデータを取得して保存） ほとんど SQL で集計可能でしたが、品詞・単語別の集計は形態素解析エンジン MeCab を使用しました。 集計内容は以下のとおり。 月別ツイート数 曜日別ツイート数 時間別ツイート数 文字数別ツイート数 １日当たりツイート数別集計 品詞別出現回数 単語別出現回数 1. 月別ツイート数 [ 年 月 ] [件数] [ 比 率 ] 2016年01月 439 ( 9.03%) 2016年02月 314 ( 6.46%) 2016年03月 310 ( 6.38%) 2016年04月...","categories": ["SNS"],
        "tags": ["Twitter","Ruby","MySQL","MariaDB","MeCab"],
        "url": "/2017/01/02/summary-tweet-2016/",
        "teaser": null
      },{
        "title": "LMDE2 - Groonga インストール（by Groonga 公式リポジトリ）！",
        "excerpt":"オープンソースのカラムストア機能付き全文検索エンジン Groonga を LMDE2 (Linux Mint Debian Edition 2) に公式リポジトリを使用してインストールする方法についての記録です。 0. 前提条件 当記事執筆時点で最新の Groonga 6.1.1 を Groonga 公式リポジトリを使用してインストールする。 LMDE2 は Debian(Jessie) ベースの Linux ディストリビューションなので、 Debian(Jessie) 上でのインストール方法と同じである。 トークナイザとして MeCab を使用することを想定。 トークンフィルタとして TokenFilterStem を使用することを想定。 ノーマライザとして MySQL 互換の groonga-normalizer-mysql を使用することを想定。（将来、 Mroonga を使用することを想定） Apt パッケージのインストールには apt-get や aptitude コマンドでなく apt コマンドを使用する。 1. ソースリストの追加 File:...","categories": ["PC_Tips"],
        "tags": ["LMDE2","Groonga"],
        "url": "/2017/01/06/lmde2-groonga-installation-by-apt/",
        "teaser": null
      },{
        "title": "LMDE2 - DB サーバ MariaDB をソースビルドでインストール！",
        "excerpt":"データベースサーバ MariaDB 10.1 系を LMDE2(Linux Mint Debian Edition 2) に構築する方法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 インストールする MariaDB は、当記事執筆時点で最新の 10.1.19 とする。 データディレクトリは “/var/lib/mysql” ディレクトリ配下とする。 1. 必要パッケージインストール ビルド時に configure ではなく cmake を使用するので、未インストールならインストールしておく。 また、bison, g++, libncurses5-dev 等も未インストールならインストールしておく。（コンパイルオプションによって異なるかもしれないが、実際に cmake してみてエラー・警告メッセージを確認するのもよい） $ sudo apt install -y cmake bison g++ libncurses5-dev 2. アーカイブダウンロード＆展開...","categories": ["サーバ構築"],
        "tags": ["LMDE2","MariaDB"],
        "url": "/2017/01/10/lmde2-mariadb-installation-by-src/",
        "teaser": null
      },{
        "title": "LMDE2 - Mroonga をソースビルドでインストール（on MariaDB）！",
        "excerpt":"LMDE2 (Linux Mint Debian Edition 2) 上の MariaDB 10.1.19 に全文検索エンジン Groonga の機能を実現するストレージエンジン Mroonga をソースをビルドしてインストールする方法についての記録です。 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2)(64bit) での作業を想定。 当記事執筆時点で最新の Mroonga 6.11 をインストールする。 Groonga 6.1.1 がインストール済みであることを想定。 （参照「Linux Mint - Groonga インストール（by ソースビルド）！」） MariaDB 10.1.19 をソースをビルドしてインストールしていること。（Mroonga のビルドに MySQL のソースが必要なため。MariaDB をパッケージでインストールしている場合にも、ソースが必要となる） （参照「2.7. その他 — Mroonga v6.13 documentation」） MariaDB...","categories": ["サーバ構築"],
        "tags": ["LMDE2","MariaDB","Mroonga"],
        "url": "/2017/01/14/lmde2-mroonga-installation-by-src/",
        "teaser": null
      },{
        "title": "MariaDB, MySQL - 複合プライマリキーを持つテーブル一覧！",
        "excerpt":"MariaDB や MySQL 等の RDB で、プライマリキー（主キー）を複数のカラムに設定することはよくあります。 しかし、複合プライマリキーをサポートしていないアプリもあったりします。（自分の知る限りでは、 Rails の ActiveRecord がそう） 以下、複合プライマリキーが設定されているテーブルの一覧を確認する方法についての備忘録です。 0. 前提条件 MariaDB 10.1.19 での作業を想定。(MySQL 5.7 系での動作も確認済み。その他も、問題ないはず（おそらく）） 1. SQL 文 以下のような SQL 文を実行すればよい。それだけ。 （以下の scheme_name を対象のスキーマ名に変更する） SELECT TABLE_NAME, COUNT(*) AS cnt FROM information_schema.KEY_COLUMN_USAGE WHERE CONSTRAINT_SCHEMA = 'scheme_name' AND CONSTRAINT_NAME = 'PRIMARY' GROUP BY TABLE_NAME HAVING cnt &gt; 1;...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL"],
        "url": "/2017/01/18/mariadb-mysql-composite-primary-key-list/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Mroonga インストール（by ソースビルド）！",
        "excerpt":"Debian 8 (Jessie) GNU/Linux 上の MariaDB 10.1.19 に全文検索エンジン Groonga の機能を実現するストレージエンジン Mroonga をソースをビルドしてインストールする方法についての記録です。 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 当記事執筆時点で最新の Mroonga 6.11 をインストールする。 Groonga 6.1.1 が公式リポジトリからインストール済みであることを想定。 （Groonga ソースをビルドしてインストールした場合については、当方は未確認） Groonga ノーマライザとして groonga-normalizer-mysql がインストール済みであることを想定。 MariaDB 10.1.19 をソースをビルドしてインストールしていること。（Mroonga のビルドに MariaDB(MySQL) のソースが必要なため。MariaDB(MySQL) をパッケージでインストールしている場合にも、ソースが必要となる） MariaDB 10.1.19 は “/usr/local/mysql” ディレクトリにインストールされていることを想定。 MariaDB 10.1.19 のインストールに使用したソースは “/usr/local/src/mariadb-10.1.19” ディレクトリに存在することを想定。 一般ユーザでなく...","categories": ["サーバ構築"],
        "tags": ["Debian","MariaDB"],
        "url": "/2017/01/22/debian-mroonga-installation-by-src/",
        "teaser": null
      },{
        "title": "Linux - pwgen でランダム文字列生成！",
        "excerpt":"Linux の pwgen コマンドで、パスワード等のランダムな文字列（半角英数）を生成する方法についての記録です。 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2) での作業を想定。（最低限、 Debian 系では同様のはず） 1. インストール コマンドが未インストールならインストールする。 $ sudo apt install -y pwgen 2. 使用方法 $ pwgen [ OPTIONS ] [ pw_length ] [ num_pw ] オプション等を何も指定しない場合。（8文字のランダムな文字列が 8 * 20 個出力される。 $ pwgen EsoPaij6 na0Ohgie zaeP0que vi2beiLo cheeTh1i aer3ohTh...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2017/01/26/linux-random-strings-generation-by-pwgen/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Monit でプロセス監視！",
        "excerpt":"プロセスを監視するツール Monit を Debian 8 (Jessie) に導入する方法についての簡単な記録です。 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 （RedHat 系はディレクトリ構成等が異なるので、適宜置き換えて考える。もしくは、過去記事「CentOS - Monit でプロセス監視」を参照） 1. monit のインストール # apt install -y monit 2. 設定ファイル編集 設定ファイル “/etc/monit/monitrc” を編集する。 以下は当方の例。 File: /etc/monit/monitrc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian"],
        "url": "/2017/01/30/debian-monit-monitoring/",
        "teaser": null
      },{
        "title": "2017年1月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 36,615 66.6309 Mac OS 11,149 20.2886 Linux 3,341 6.0799 Android 2,040 3.7123 Ubuntu Linux 1,431 2.6041 unknown 188 0.3421 Fedora Linux 104 0.1893 FreeBSD 61 0.1110 Debian GNU/Linux 11 0.0200 Solaris 10 0.0182 NetBSD 1 0.0018 OpenBSD 1 0.0018 合　計 54,952 100.0000 2....","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/02/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - アンチウイルスソフト導入（改訂）！",
        "excerpt":"以前、 Debian GNU/Linux 8 (Jessie) でのアンチウイルスソフトの導入について記事にしました。 Debian 8 (Jessie) - アンチウイルスソフト導入！ しかし、clamscan コマンドの代替として clamdscan を使用することについて詳細に説明していなかったり、ログファイルの所有権限に関するエラーの対策について記述していなかったので、今回改めて記事にしました。 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 Debian GNU/Linux 8 (Jessie) はサーバ用途としてインストールし、GUI 環境は非整備。 Apt でインストールする。（但し、Apt のパッケージはバージョンが古い。最新版が良ければ、[こちら](http://sourceforge.net/projects/clamav/files/clamav/ ““)からダウンロードしてビルドするとよい） 毎日自動でウイルススキャンを実行するようにする。 1. ClamAV のインストール 以下のようにして、アンチウイルスソフト ClamAV, ClamAV Daemon をインストールする。 # apt install -y clamav clamav-daemon 2. ウイルス定義ファイルの最新化 freshclam...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ウイルス対策"],
        "url": "/2017/02/03/debian-8-clamav-installation/",
        "teaser": null
      },{
        "title": "LMDE2 - 起動時の時刻調整について！",
        "excerpt":"LMDE2 (Linux Mint Debian Edition 2) をインストールした直後の状態では、デフォルトの 0.debian.pool.ntp.org 等の NTP サーバを使用して時刻調整するようになっています。 以下、起動時の時刻調整の仕組みと設定変更方法についての記録です。 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2) での作業を想定。 （Debian GNU/Linux 系 Linux ディストリビューションなら同じはず） ntpdate(ntpdate-debian) コマンドが導入済みであること。 OS がデスクトップ用途でインストールされているのなら、このコマンドは利用可能になっているはず。 OS がサーバ用途でインストールされている場合、 ntp サーバを構築してそちらで運用することが多いので、 ntpdate コマンドでの時刻調整はしないだろう。 ntp サーバを構築せず、 ntpdate コマンドを cron で定期実行する方法をとっているのなら、以下の記事のとおりにすればよい。 1. 時刻調整の流れ LMDE2 等のデスクトップ環境の場合、以下の流れで時刻調整が行われる。（設定をカスタマイズしていない場合） マシン起動（ネットワーク確立）時に “/etc/network/if-up.d/ntpdate” により “/usr/sbin/ntpdate-debian”...","categories": ["PC_Tips"],
        "tags": ["LMDE2","NTP"],
        "url": "/2017/02/07/lmde2-time-adjustment-on-boot/",
        "teaser": null
      },{
        "title": "LMDE2 - Ruby で形態素解析 MeCab を使う！",
        "excerpt":"以前、 Linux Mint 上で Ruby を使って形態素解析 MeCab をする方法を紹介しました。 Linux Mint - Ruby で形態素解析 MeCab を使う！ 今回は、 LMDE2 で MeCab, さらには最近の語を網羅している辞書 mecab-ipadic-NEologd をインストールする方法についてです。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。（Ubuntu, Debian でも同様） Ruby 2.3.3-p222 での作業を想定。 RAM 容量が充分にあること。（最低：1.5GB, 推奨：5GB） 1. MeCab と辞書のインストール MeCab と辞書(UTF-8)を Synaptic パッケージマネージャかコマンドでインストールする。 apt でインストールするなら以下のようにする。 $ sudo apt...","categories": ["プログラミング"],
        "tags": ["LMDE2","Ruby","形態素解析","MeCab"],
        "url": "/2017/02/11/lmde2-ruby-mecab-installation/",
        "teaser": null
      },{
        "title": "Tumblr API - Consumer Key, Secret Key の取得！",
        "excerpt":"Tumblr API を使用するのに必要な Consumer Key, Secret Key を取得する方法についての記録です。 0. 前提条件 Tumblr のアカウントが作成済みであること。 さらに、以下の作業を行う前にログイン済みであること。 1. アプリ登録ページヘのアクセス Consumer Key, Secret Key の取得はアプリケーションの登録を通して行うので、 Applications のページへアクセスし、「アプリを登録する」をクリックする。 2. 情報の入力 必須の「アプリケーション名」、「アプリケーションウェブサイト（＊印が付いてないが必須の項目）」、「アプリケーションの説明」、「管理用の連絡先メール」、「デフォルトのコールバックURL」やその他の項目を入力、必要であれば “Icon” 画像も設定する。（「デフォルトのコールバックURL」は、取り急ぎ、自分の Web サイト等にしておけばよい） よければ、 “I’m not a robot” にチェックを入れて「登録」をクリックする。 3. Consumer Key の確認 登録が完了するとページが変わる。 “OAuth Consumer Key:” に続いて表示されるランダムな文字列が Consumer Key である。 4. Secret Key...","categories": ["SNS"],
        "tags": ["Tumblr"],
        "url": "/2017/02/15/tumblr-getting-consumer-secret-key/",
        "teaser": null
      },{
        "title": "Ruby - Tumblr のアクセストークンを取得！",
        "excerpt":"Tumblr API を使用するのに必要な Access Token, Access Token Secret を Ruby で取得する方法についての記録です。 ちなみに、前回は Consumer Key, Consumer Secret Key の取得についてでした。 Tumblr API - Consumer Key, Secret Key の取得！ 0. 前提条件 Tumblr のアカウントが作成済みであること。 さらに、以下の作業を行う前にログイン済みであること。 Tumblr API の Consumer Key, Consumer Secret が取得済みであること。（過去参照： Tumblr API - Consumer Key, Secret Key の取得！） Access Token, Access...","categories": ["プログラミング"],
        "tags": ["Ruby","Tumblr","OAuth"],
        "url": "/2017/02/19/ruby-getting-tumblr-access-token/",
        "teaser": null
      },{
        "title": "Debian 8 (Jessie) - Postfix & Amavisd での \"UNSOLICITED BULK EMAIL\" 対策！",
        "excerpt":"Debian GNU/Linux 8(Jessie) 上のメールサーバ（メール転送エージェント） Postfix に amavisd-new でウィルス対策を施した後に、 “Considered UNSOLICITED BULK EMAIL, apparently from you” というタイトルのメールが届くことがあるので、それを抑止するための設定についての備忘録です。 0. 前提条件 Debian GNU/Linux 8 (Jessie) での作業を想定。 MTA（メール転送エージェント） Postfix 構築済み。 ウイルス対策で Amavisd を導入済み。 当方、詳細については充分には理解していないが、以下のようにすればよいということだけ認識した。 1. 設定ファイルの編集 Amavisd の設定ファイルのうち、 “20-debian_defaults” を以下のように編集する。 File: /etc/amavis/conf.d/20-debian_defaults 1 2 #$final_banned_destiny = D_BOUNCE; # &lt;= コメントアウト $final_banned_destiny = D_PASS; #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ウイルス対策"],
        "url": "/2017/02/23/debian-8-unsolicied-bulk-mail/",
        "teaser": null
      },{
        "title": "Ruby - Tumblr でテキスト投稿！",
        "excerpt":"Ruby で Tumblr へテキスト投稿する方法についての記録です。 0. 前提条件 今回の記事では LMDE2(Linux Mint Debian Edition 2), Ruby 2.3.3-p222 での作業を想定。 Tumblr API の Consumer Key, Consumer Secret が取得済みであること。（過去参照： Tumblr API - Consumer Key, Secret Key の取得！） Tumblr API の Access Token, Access Token Secret が取得済みであること。（過去参照： Ruby - Tumblr のアクセストークンを取得！） Tumblr への投稿には RubyGems ライブラリ tumblr-client を使用する。...","categories": ["プログラミング"],
        "tags": ["Ruby","Tumblr"],
        "url": "/2017/02/27/ruby-tumblr-post-text/",
        "teaser": null
      },{
        "title": "2017年2月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 36,030 68.2917 Mac OS 10,488 19.8791 Linux 2,775 5.2598 Android 1,767 3.3492 Ubuntu Linux 1,391 2.6365 unknown 162 0.3071 Fedora Linux 67 0.1270 FreeBSD 60 0.1137 Debian GNU/Linux 7 0.0133 NetBSD 6 0.0114 PlayStation 2 0.0038 Solaris 2 0.0038 SuSE Linux 1 0.0019...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/03/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - ツイートIDからタイムスタンプ等の取得！",
        "excerpt":"Twitter のツイートIDは snowflake というツールを使って算出されています。 このツールのアルゴリズムを理解すれば、ツイートIDからツイートした日時が取得できます。 以下、そのアルゴリズムについての簡単な説明と、ツイート日時を算出する Ruby スクリプトの紹介です。 0. 前提条件 Ruby 2.3.3-p222 での作業を想定。 ツイートIDだけでなく、アカウントID（ユーザが変更可能な英数字の screen_name ではなく、ユーザが変更不可能な数字のみの羅列）も同様に取得できる模様。（但し、最近の18桁(64bit)のIDのみ） 1. ツイートIDについて snowflake によると、ツイートIDは 63bit（long値 - 1bit)で表現されていて、以下のような構造になっている。 　Tweet ID　 　Machine ID　 　Sequence　 41 bit 10 bit 12 bit さらに、 timestamp の値は 1288834974657（ミリ秒）減算した値となっている。 2. Ruby スクリプトの作成 以下のように Ruby スクリプトを作成してみた。 各項目の値を取得するためにマスク処理を行っているが、タイムスタンプのみであれば、右シフトを行うだけでよい。（スクリプト内のコメント参照） File: analyze_tweetid.rb 1 2 3...","categories": ["プログラミング","SNS"],
        "tags": ["Ruby","Twitter"],
        "url": "/2017/03/03/ruby-getting-tweet-datetime-from-tweet-id/",
        "teaser": null
      },{
        "title": "C++ - 日付妥当性チェック！",
        "excerpt":"日付の妥当性をチェックする C++ コードです。 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2) での作業を想定。 g++ 4.9.2 でのコンパイルを想定。 チェックは8桁数字で行うので、チェック可能範囲は西暦0年1月1日〜西暦9999年12月31日。 当方、 C++ に長けていないので、綺麗なコーディングではないかもしれない。 1. C++ コードの作成 簡単なソースコードなので1ファイルで作成してもよかったが、今後部品として再利用することも考慮してヘッダ・ソース・実行ファイルに分割している。 【ヘッダファイル】 File: validation.hpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24...","categories": ["プログラミング"],
        "tags": ["C++"],
        "url": "/2017/03/07/cpp-date-validation/",
        "teaser": null
      },{
        "title": "C++ - CSV データ読み込み！",
        "excerpt":"CSV データファイルを読み込む C++ コードです。 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2) での作業を想定。 g++ 4.9.2 でのコンパイルを想定。 当方、 C++ に長けていないので、綺麗なコーディングではないかもしれない。 1. C++ コードの作成 簡単なソースコードなので1ファイルで作成してもよかったが、今後部品として再利用することも考慮してヘッダ・ソース・実行ファイルに分割している。 【ヘッダファイル】 File: csv.hpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24...","categories": ["プログラミング"],
        "tags": ["C++"],
        "url": "/2017/03/11/cpp-read-csv-data/",
        "teaser": null
      },{
        "title": "Twitter アカウントのロック解除について！",
        "excerpt":"Twitter アカウントがロックされた場合の解除方法については、Web上でいくらでも発見できます。 今回、当方が経験した不当なロック（通常のロックとは異なるロック）について、現象と対策方法を簡潔にまとめてみました。 （当方はアカウントを250個近く所有しているので、ロック後にそのロックを解除するという作業は数えきれないほど行ってきましたが、最近経験するロックが納得できないものなので、記録しておきます） 0. 前提条件 ロックされる Twitter アカウントには携帯電話番号が登録済みである。 メールアドレスは、実在する正規なものを使用している。 アカウントのほとんどは同じ端末(PC)から作成している。 Twitter API でツイートの自動化を行っている。（Twitter 自動化ルールに違反するような自動化ではない） アカウントを大量に所有している場合、ロックされることは珍しいことではない。 今回の話は、「凍結」ではなく「ロック」についてであることに留意。 当記事執筆時点、当方所有のアカウントでロックされやすいアカウントは５個。 同様の他の約250個のアカウントは何も問題がない。 （ロックされやすいアカウントはいわゆるブラックリストに入れられてる？） 1. 現象 アカウントに携帯電話番号を登録しSMS認証を行っているにも関わらず、アカウントがロックされる。 当方、 Twitter API を使用しているので、最初にロックされたことに気付くのは、自動ツイートがロックによりエラーとなった時。 自作ツールのログには以下のようなメッセージが出力される。 To protect our users from spam and other malicious activity, this account is temporarily locked. Please log in to https://twitter.com to unlock...","categories": ["SNS"],
        "tags": ["Ruby","Twitter"],
        "url": "/2017/03/15/about-twitter-lock/",
        "teaser": null
      },{
        "title": "Ruby - OAuth のみでツイート！",
        "excerpt":"Ruby を使って Twitter でツイートするのに “twitter” という RubyGems ライブラリを使用することが多いと思います。 今回は RubyGems ライブラリ “twitter” を使用せず、 RubyGems ライブラリ “oauth” のみを使用してツイートしてみました。 0. 前提条件 Ruby 2.3.3-p222 での作業を想定。 当然ながら、Consumer Key, Consumer Secret, Access Token, Access Token Secret を取得済みであること。 1. 必要な RubyGems ライブラリのインストール oauth, json ライブラリが未インストールならインストールしておく。（json は、レスポンスを取得するのに必要） $ sudo gem install oauth json 2. Ruby スクリプトの作成 以下は、ごく簡単な作成例。...","categories": ["プログラミング","SNS"],
        "tags": ["Ruby","Twitter"],
        "url": "/2017/03/19/ruby-tweet-with-only-oauth-gem/",
        "teaser": null
      },{
        "title": "Linux - cron １行の長さ制限について！",
        "excerpt":"Linux の cron(crontab) で処理を定時実行しようとした際に、コマンドが長すぎる旨のエラーとなることがあります。 以下、現象・原因・対策についての記録です。 0. 前提条件 Debian GNU/Linux 8.6 での作業を想定。 色々調べても明確な答えを得られなかったため、以下の内容は不正確かもしれない。 （「当方の環境ではこうだった」という記録） 1. 現象 cron の１行に長過ぎるコマンドを記述して実行すると、以下のようなエラーが発生する。 （実際には、 “/etc/cron.d/xxxx” にそれほど長くないコマンドを ; で区切って複数記述し、行頭から行末までの総文字数は559文字(1,345byte)） File: /var/log/syslog 1 Error: command too long; while reading /etc/cron.d/autotweet 2. 原因 エラーメッセージのとおり、コマンドが長すぎることが原因のようだ。 実際、１行の総byte数を色々変更して実行してみた結果、1,013byteを超えるとこのエラーが発生することが分かった。（byte数で制限されるようなので、全角文字が含まれる場合は文字数が1013文字より少なくなる） 3. 対策 前述の原因が正しいか否か確信が持てないが、要は、１行を長くし過ぎないようにすればよいだろう。 １行が 1,013byte を越えないように記述する。 複数のコマンドを連結して 1,013byte を超えるような場合、連結せずに複数行に分ける。 4. その他 cron ファイル内の１行の制限について説明しているものが見つからない。 （Web...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian"],
        "url": "/2017/03/23/linux-cron-one-line-limit/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 郵便番号検索ページについて！",
        "excerpt":"当方 Web サイトには郵便番号検索ページを設けております。   今回は紹介のみ。     公開ページ   「郵便番号データダウンロード - 日本郵便」からダウンロードしたデータをデータベース(MariaDB(MySQL))に登録して検索可能にしたものである。  データは日々自動でチェックし、変更があれば最新の情報に更新するようにしている。   公開しているページは、通常の郵便番号検索と大口事業所用の郵便番号検索。      mk-mode SITE : 郵便番号検索            検索結果で、町域名の先頭に「※」マークが付加されているデータは元データが分割されている可能性が考えられるデータで、日本郵便提供のCSVデータの仕様により自動化が不可能なものである。       「※」マークが付加されているデータで町域名が分割されているように見えるデータはご自身でチェックしてみて下さい。           mk-mode SITE : 郵便番号（大口事業所）検索     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails"],
        "url": "/2017/03/27/postal-code-searching/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 斐伊川水系ダム貯水率一覧ページについて！",
        "excerpt":"当方 Web サイトには島根県・斐伊川水系のダムの貯水率一覧のページを設けております。   ダムにより管理が国、県、市と異なるため、一度に同時に確認したく作成した次第です。     公開ページ   ページ表示時、「国土交通省【川の防災情報】ダム諸量一覧表 (中国地方)」、「島根県-ダム諸量一覧表」、「松江市上下水道局」から情報(HTML)を取得＆解析した上で一覧にしている。      mk-mode SITE : 斐伊川水系ダム貯水率   注意事項      ページ内の「貯水率」は「利水容量」に対するものである。   「有効容量」に対する「貯水率」には対応していない。   「利水容量」とは、総貯水容量から堆砂容量・死水容量を除いた容量である。   「有効容量」とは、利水容量に洪水調節容量を加えた容量である。   以下のダムは除く。            坂根ダム（中四国農政局・奥出雲町管理、室原川、尾原ダム上流）       三成ダム（島根県企業局管理、斐伊川、尾原ダム上流）       稗原ダム（出雲市管理、稗原川）       塩田ダム（雲南市管理、金谷川）       来島ダム（中国電力管理、神戸川、志津見ダム上流）       阿井川ダム（中国電力管理、阿井川）           以前は「柿原貯水池」も松江市上下水道局のページで公開されていたが、最近は公開されていない。     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails"],
        "url": "/2017/03/31/waterstorage-list-hii-river/",
        "teaser": null
      },{
        "title": "2017年3月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 35,312 68.5870 Mac OS 10,113 19.6426 Linux 2,912 5.6560 Android 1,619 3.1446 Ubuntu Linux 1,234 2.3968 unknown 153 0.2972 Fedora Linux 60 0.1165 FreeBSD 53 0.1029 Solaris 13 0.0253 Debian GNU/Linux 5 0.0097 Wii 5 0.0097 NetBSD 3 0.0058 OpenBSD 1 0.0019 PlayStation...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/04/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby, Rails - METAR 気象観測所一覧ページについて！",
        "excerpt":"以前、 METAR の気象観測所一覧を取得する方法について記事にしました。      Ruby - NOAA（アメリカ海洋大気庁）気象観測所一覧！   Bash - NOAA 気象観測所検索！   今回、当方 Web サイト に METAR の気象観測所一覧を確認できるページを設けました。   単なるページのご案内です。     1. 公開ページ   公開しているページは以下。      mk-mode SITE : METAR - 気象観測所一覧   2. 注意事項      当情報は「AWC - ADDS METARs」の “stations.txt” によるもの。   表示順は ICAO コード昇順。   CD はアメリカ、カナダの州のみ。   IATA コード未登録のものが多数。   表示に使用するデータは定期的にチェックし、最新のものに更新している。     よろしければ、参考にしてください。   以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails"],
        "url": "/2017/04/04/metar-station-list/",
        "teaser": null
      },{
        "title": "Ruby, Rails - METAR 気象情報（山陰）ページについて！",
        "excerpt":"前回、当方 Web サイトに設置した METAR 気象観測所一覧ページの紹介をしました。      Ruby, Rails - METAR 気象観測所一覧ページについて！   今回は、 METAR 気象情報（山陰の4空港限定）ページのご紹介です。     1. 公開ページ      mk-mode SITE : METAR - 気象情報（山陰）   2. 注意事項      表示する情報は山陰（鳥取、米子、出雲、石見）に限定している。   表示は直近100件で、日時降順・空港名昇順でソートしている。   情報の出典は ADDS - METARs である。   RJOR は「鳥取空港」、RJOH は「米子空港（美保飛行場）」、RJOC は「出雲空港」、RJOW は「石見空港」である。   隠岐空港は ADDS - METARs で情報が公開されていないので、非対応。  （別のWebサイトから取得することも可能だが、 ADDS - METARs からの取得に統一したいため）     よろしければ、参考にしてください。   以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails"],
        "url": "/2017/04/08/metar-sanin-list/",
        "teaser": null
      },{
        "title": "Ruby, Rails - Flightradar24（松江）ページについて！",
        "excerpt":"Flightradar24.com API で取得した航空機運行情報のうち、松江市上空を通過したものの一覧を確認するためのページを作成しました。 今回はそのページのご紹介です。 1. 公開ページ mk-mode SITE : Flightradar24（通過情報） 2. 注意事項 出典は Flightradar24.com 一覧データは Flightradar24.com API で取得できたもの(ADS-B, MLAT etc.)のみ。 一覧データの取得は30秒間隔であり、取得のタイミングで半径10km圏内に入っていた場合のみ記録している。 出発・到着空港に出雲空港・米子空港が指定されている場合は緑色で、その他個人的に注目したいログはオレンジ色で表示するようにしている。 一覧は5分間隔で自動更新している。 当ページのデータは、当方が別用途で使用するために記録していたものの確認用であり、視認性を考慮せず、そのまま出力している。 項目の意味は以下のとおり。（左から） ID SSR mode S コード 緯度（単位：度(degree)） 経度（単位：度(degree)） 進行方向（単位：度(degree)、0 度が北で時計回りに) 飛行高度（単位：フィート(feet)） スピード（単位：ノット(knot)） squawk（トランスポンダーに設定される識別信号4桁） 受信レーダ 機体種別 便名（ICAO コード） 時刻（Unix 時間） 出発空港（IATA コード） 到着空港（IATA コード） 便名（IATA コード） ?...","categories": ["Webサイト"],
        "tags": ["Ruby","Rails"],
        "url": "/2017/04/12/fr24-matsue-list/",
        "teaser": null
      },{
        "title": "Ruby, Rails - Flightradar24 (SQUAWK) ページについて！",
        "excerpt":"Flightradar24.com API で取得した全世界の SQUAK 7500, 7600, 7700 発信状況を確認するためのページを作成しました。 今回はそのページのご紹介です。 公開ページ mk-mode SITE : Flightradar24 (SQUAWK 75-77) 注意事項 出典は Flightradar24.com 一覧データは Flightradar24.com API で取得できたもの(ADS-B, MLAT etc.)のみ。 システム内部でのデータ取得は60秒間隔で行っている。 SQUAWK 7500 は「ハイジャック」、7600 は「無線機故障」、7700 は「緊急事態」のこと。 当ページのデータは、当方が別用途で使用するために記録していたものの確認用であり、視認性を考慮せず、そのまま出力している。 項目の意味は以下のとおり。（左から） ID SSR mode S コード 緯度（単位：度(degree)） 経度（単位：度(degree)） 進行方向（単位：度(degree)、0 度が北で時計回りに) 飛行高度（単位：フィート(feet)） スピード（単位：ノット(knot)） squawk（トランスポンダーに設定される識別信号4桁） 受信レーダ 機体種別 便名（ICAO コード） 時刻（Unix...","categories": ["Webサイト"],
        "tags": ["Ruby","Rails"],
        "url": "/2017/04/16/fr24-squawk-list/",
        "teaser": null
      },{
        "title": "Linux - XFS ファイルシステムのデフラグ！",
        "excerpt":"XFS ファイルシステムのハードディスクをデフラグする方法についての記録です。 当方、普段はサーバもローカルも EXT4 ファイルシステムの Linux 環境下で作業をしておりますが、家族がテレビ録画に使用しているテレビ付属の USB ハードディスが不調とのことで、調査＆調整してみた次第です。 テレビは東芝レグザで、録画に使用している HDD は I-O DATA 製 2.5 インチ HDD です。 Web で調べてみると、レグザでの録画に使用する HDD は XFS ファイルシステムでフォーマットされている必要があるとのこと。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2) での作業を想定。 HDD は USB 接続のもので、XFS ファイルシステムでフォーマットされていることを想定。 今回使用した USB-HDD は、総容量 320GB のうち 約16% を使用済み。 現象としては、録画した内容を再生中に動画がカクカクと頻繁に停止する。 USB-HDD をテレビから取り外す場合は、正規の手順で。 PC に接続＆マウント済みであること。...","categories": ["PC_Tips"],
        "tags": ["Linux","LMDE2"],
        "url": "/2017/04/20/linux-defrag-xfs/",
        "teaser": null
      },{
        "title": "Linux - ZIP ファイル展開後にファイル名が文字化けする場合！",
        "excerpt":"Windows で ZIP 圧縮されたファイルを受け取り、 Linux で展開すると、ファイル名が文字化けすることがあります。 以下、解消法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 1. unar パッケージのインストール 通常の unzip コマンドで展開するとファイル名が文字化けするので、 unar コマンドを使用する。 $ sudo apt install unar 2. ZIP ファイルの展開 オプションが色々存在するが、基本的にはファイル名を指定して実行するだけ。 $ unar filename.zip unar コマンドでは文字化けしていたファイル名が、文字化けせずに展開される。 3. ファイルマネージャの右クリック対応 ファイルマネージャで右クリックで展開できるようにしたければ、スクリプトを作成して所定の位置に配置すればよい。 Caja なら “~/.config/caja/scripts” ディレクトリ配下、 Nemo なら “~/.local/share/nemo/scripts” ディレクトリ配下に以下のような内容のスクリプトファイルを配置し、 File:...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2017/04/24/linux-character-corruption-after-zip-extraction/",
        "teaser": null
      },{
        "title": "Linux - ファイル名の文字コードを変換！",
        "excerpt":"Windows で使用されていたファイルを Linux 上で扱おうとすると、文字コードの違い（Windows: CP932, Linux: UTF-8)によりファイル名が文字化けします。 以下、 Linux でファイル名の文字コードを変換する方法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 文字コード変換には convmv というパッケージを使用する。 1. パッケージのインストール $ sudo apt install convmv 2. 文字コードの変換 CP932 で文字化けしているカレントディレクトリ内のファイル全てのファイル名を UTF-8 に変換する例。 $ convmv -f utf-8 -t cp932 * --notest -f は変換前の文字コードを指定するオプション。 -t は変換後の文字コードを指定するオプション。 最初は --notest オプションを使用せずに実行して、テスト（変換結果を確認）してもよいだろう。...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2017/04/28/linux-character-code-conversion-of-filename/",
        "teaser": null
      },{
        "title": "2017年4月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 35,477 67.8973 Mac OS 10,150 19.4255 Linux 3,031 5.8008 Android 1,785 3.4162 Ubuntu Linux 1,463 2.7999 unknown 144 0.2756 Fedora Linux 92 0.1761 FreeBSD 52 0.0995 Solaris 51 0.0976 NetBSD 2 0.0038 3DS 1 0.0019 RedHat Linux 1 0.0019 Switch 1 0.0019 Wii...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/05/01/blog-access/",
        "teaser": null
      },{
        "title": "Fortran - 一様乱数（線形合同法）！",
        "excerpt":"以前、線形合同法を使用して一様乱数を生成する C++ コードや Ruby スクリプトを紹介しました。 C++ - 一様乱数（線形合同法）！ Ruby - 一様乱数（線形合同法）！ 今回は、同じアルゴリズムを Fortran90/95 で実装してみました。 アルゴリズムについては、上記 C++ の記事を参照してください。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 GCC 6.3.0 (GFortran) でのコンパイルを想定。 Fortran には長けていないので、コードに誤りがあるかもしれない。 1. Fortran コードの作成 File: rndnum_lcg.f95 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2017/05/02/fortran-calc-random-number-by-lcg/",
        "teaser": null
      },{
        "title": "Fortran - 級数計算！",
        "excerpt":"今回は、 Fortran95 で級数を計算してみただけです。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 GCC 6.3.0 (GFortran) でのコンパイルを想定。 Fortran には長けていないので、コードに誤りがあるかもしれない。 1. Fortran コードの作成 計算する級数は \\(\\displaystyle \\sum_{i=1}^{N}\\frac{1}{i}\\cdot\\frac{2}{i+1}\\cdot\\frac{3}{i+2}\\) で、 \\(N=1000\\)としている。 File: series.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2017/05/06/fortran-calc-series/",
        "teaser": null
      },{
        "title": "Fortran - 倍精度浮動小数点数の指定方法！",
        "excerpt":"今回は、 Fortran95 での倍精度浮動小数点数の指定方法についてです。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 GCC 6.3.0 (GFortran) でのコンパイルを想定。 Fortran には長けていないので、コードに誤りがあるかもしれない。 1. Fortran コードの作成 File: double_precision_real.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 !**************************************************** ! 単精度・倍精度浮動小数点数の確認 ! ! date name version...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2017/05/10/fortran-double-precision/",
        "teaser": null
      },{
        "title": "Fortran - 素数一覧の算出！",
        "excerpt":"今回は、 Fortran95 で素数の一覧を算出する方法についてです。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 GCC 6.3.0 (GFortran) でのコンパイルを想定。 Fortran には長けていないので、コードに誤りがあるかもしれない。 1. Fortran コードの作成 File: prime_numbers.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2017/05/14/fortran-prime-numbers/",
        "teaser": null
      },{
        "title": "Linux - MariaDB バックアップ用 Bash スクリプト！",
        "excerpt":"当方が Debian GNU/Linux 8.6 サーバ上のデータベース MariaDB(MySQL) をバックアップするのに使用している Bash スクリプトの紹介です。 0. 前提条件 Debian GNU/Linux 8.6 での作業を想定。（CentOS でも問題ない（以前、CentOS で使用していたものなので）） バックアップする DB は MariaDB を想定。（MySQL でも問題ない（以前、MySQL で使用していたものなので）） 環境の相違によりうまく動かないことがあるかもしれない。適宜、置き換えること。 今回紹介するスクリプトの概要。 バックアップは DB 別にスキーマとデータを別々にバックアップする。 テーブル作成用 SQL の AUTO_INCREMENT=* は除去する。 （スキーマとデータを別々にバックアップすると、 AUTO_INCREMENT=* が残っていて都合が悪いということがあるため） データはバックアップと同時に GZip 圧縮する。 バックアップファイルの名称には日時を付与する。 バックアップファイルは世代管理する。（8世代） ストアドプロシージャやトリガのバックアップは考慮していない。 （ストアドプロシージャやトリガのみをバックアップしたい場合、 --skip-triggers の代わりに -t オプションを使用する） 1. バックアップ用...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","Debian","bash"],
        "url": "/2017/05/18/linux-mariadb-mysql-backup-script/",
        "teaser": null
      },{
        "title": "Linux - コマンドで Web ページのキャプチャ！",
        "excerpt":"Linux のコマンドラインから Web ページ(HTML)をキャプチャ（PDF, PNG 化等）する方法についての記録です。 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 キャプチャには wkhtmltopdf コマンドを使用する。 1. パッケージのインストール wkhtmltopdf をインストールすると、 wkhtmltopdf コマンド以外に wkhtmltoimage コマンドも使用できるようになる。 $ sudo apt install wkhtmltopdf 2. Web ページの PDF 化 wkhtmltopdf コマンドの引数に対象ページの URL と出力ファイル名を指定して実行。 $ wkhtmltopdf http://example.com/foo.html example_foo.pdf オプション無指定で「A4 縦」とみなされる。 3. Web ページの...","categories": ["PC_Tips"],
        "tags": ["Linux","LMDE2"],
        "url": "/2017/05/22/linux-capturing-html-to-image/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 気象警報・注意報（Ｈ２７）、警報級の可能性！",
        "excerpt":"5月17日から運用が開始された気象庁防災情報 XML の「気象警報・注意報（Ｈ２７）」、「警報級の可能性（明日まで）」、「警報級の可能性（明後日まで）」の配信内容を一覧で確認するためのページを作成しました。（既に公開済みの他の情報と同様に） （ちなみに、当方、気象庁防災情報 XML のデータは Ruby + Rails + MariaDB(MySQL) 等で自作したシステムで受信＆管理しております） 今回はそれらのページの紹介のみです。 （気象庁防災情報 XML に興味がなければ、当記事は無視してください） 1. 概要 （以下、気象庁防災情報 XML のドキュメントより引用） 気象警報・注意報（Ｈ２７） 内容：既存の気象警報・注意報の情報(Control/Title:気象特別警報・警報・注意報)で提供している警報等の発表状況に加え、雨量等や危険度の推移を、警報等の発表単位の区域毎に時系列情報として提供される。 提供のタイミング：既存の警報等の情報と同様、警報等の発表時に提供される。 対象期間：概ね 24 時間先まで。 警報級の可能性（明日まで） 内容：府県天気予報の発表単位の区域毎に、雨、雪、風(風雪)、波について警報級の現象になる可能性(以下「警報級の可能性」という。)を、「高」「中」等として、当日 18 時まで(17 時予報時は省略)、その後翌日 6 時まで、その後翌日24 時までの時系列で提供される。 また、1・3 時間最大雨量、6 時間最大降雪量、最大風速及び波高について、 24 時間先までの 6 時間毎とそれ以降の翌日 24 時までの量的な予想を時系列で提供します。さらに、翌日の 24 時間最大雨量、24 時間最大降雪量の予想を提供される。 提供のタイミング：毎日 5 時、11...","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","Feed","MySQL","XML"],
        "url": "/2017/05/26/ruby-rails-jma-xml-keiho-h27/",
        "teaser": null
      },{
        "title": "Bash - Image Magick で既存の画像に文字を追加！",
        "excerpt":"Image Magick で既存の画像に文字を上書きして保存する Bash スクリプトの紹介です。 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 ImageMagick 6.8.9-9 での作業を想定。（使用するのは convert コマンド） 1. 元画像の準備 文字を描画したい画像を用意しておく。 以下は、当方が今回使用するサンプル画像。（Copywrite は実際には描画されていない） 2. Bash スクリプトの作成 以下は、当方の作成例。（適当に編集すること） 画像上部に “MK”, 下部に “mode” 当文字を縁取りで描画している。 File: im_write_char.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["PC_Tips"],
        "tags": ["Linux","LMDE2","画像","ImageMagick"],
        "url": "/2017/05/30/bash-image-magick-writing-characters/",
        "teaser": null
      },{
        "title": "2017年5月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 37,186 66.3088 Mac OS 11,763 20.9754 Linux 3,295 5.8755 Android 2,107 3.7571 Ubuntu Linux 1,427 2.5446 unknown 151 0.2693 Fedora Linux 90 0.1605 FreeBSD 48 0.0856 Solaris 7 0.0125 NetBSD 2 0.0036 OpenBSD 2 0.0036 Debian GNU/Linux 1 0.0018 Wii 1 0.0018 合　計...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/06/01/blog-access/",
        "teaser": null
      },{
        "title": "Fortran - 英小文字->英大文字変換！",
        "excerpt":"今回は、 Fortran95 で英文の小文字を全て大文字に変換する方法についてです。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 GCC 6.3.0 (GFortran) でのコンパイルを想定。 Fortran には長けていないので、コードに誤りがあるかもしれない。 1. Fortran コードの作成 File: to_uppercase.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 !**************************************************** ! 英小文字-&gt;英大文字 変換...","categories": ["プログラミング"],
        "tags": ["Fortran"],
        "url": "/2017/06/03/fortran-convert-chars-to-uppercase/",
        "teaser": null
      },{
        "title": "Fortran - ポインタを使用した連結リスト！",
        "excerpt":"今回は、 Fortran95 でポインタを使用して連結リストを生成する方法についてです。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 GCC 6.3.0 (GFortran) でのコンパイルを想定。 Fortran には長けていないので、コードに誤りがあるかもしれない。 1. Fortran コードの作成 File: linked_list_by_pointer.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27...","categories": ["プログラミング"],
        "tags": ["Fortran"],
        "url": "/2017/06/07/fortran-linked-list-by-pointer/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 元号一覧ページについて！",
        "excerpt":"日本の元号の一覧ページを作成して、公開しております。 今回はそのページの紹介と、元号を集計してみた結果の紹介です。（最近、天皇退位の特例法案が話題なので） 1. 公開ページ mk-mode SITE : 元号一覧 2. 注意事項 元号の開始日と終了日は、1582年10月4日までは「ユリウス暦」、1582年10月15日以降は「グレゴリオ暦」である。 3. 集計 3.1 件数 総件数: 250 文字数が2個の元号: 243 ※うち、南北朝: 28 （北: 18, 南: 10） 文字数が4個の元号: 5 元号のない期間: 2 3.2 文字出現回数 回数文字 29永 27天、元 21治 20応 19和、長、正、文 17安 16延、暦 15寛、徳、保 14承 13仁 12平、嘉 10宝、康、建 9慶、久 8弘、貞、享 7禄、明 6大 5亀 4寿、万...","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/06/11/rails-gengo-list/",
        "teaser": null
      },{
        "title": "GIS - GMT で正距方位図法！",
        "excerpt":"GMT(The Generic Mapping Tools) で、正距方位図法(Azimuthal Equidistant Projection)で描画する方法についての記録です。（「正距方位図法」は、中心からの距離と方位が正しく表され、地球全体を描画した場合は真円となる投影法です） 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 GMT 5.1.1 での作業を想定。 1. bash スクリプトの作成 以下、2種類の地図を描画するスクリプト。（説明は後述） 指定した中心地点から90度の範囲を全て描画。 描画範囲を指定して描画。 File: gmt_aep.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!...","categories": ["PC_Tips"],
        "tags": ["GIS","GMT","地図"],
        "url": "/2017/06/15/gmt-azimuthal-equidistant-projection/",
        "teaser": null
      },{
        "title": "Linux - ClamAV でウイルス定義ファイル閲覧！",
        "excerpt":"Linux のウイルス対策ソフトの定番 ClamAV のウイルス定義ファイルを閲覧する方法についての記録です。 0. 前提条件 Debian GNU/Linux 8.6(32bit), LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 ClamAV 0.99.2/23421 での作業を想定。 1. 閲覧方法 コマンドラインで以下のように実行すると、ウイルス定義ファイルの内容が表示されるので、閲覧／検索等する。 less コマンドでの閲覧なので、 /pattern で末尾方向への検索、 ?pattern で先頭方向への検索が可能。※但し、膨大な情報量なので、検索に若干時間がかかる。 $ sigtool --list-sig | less 直接検索したければ、以下のようにすればよい。 $ sigtool --list-sig | grep WannaCry Win.Ransomware.WannaCry-6313053-0 Win.Ransomware.WannaCry-6313055-0 Win.Ransomware.WannaCry-6313787-0 もしくは、一旦全てをテキストファイルに出力後に検索をかけてもよい。※但し、膨大な情報量なので、ファイル容量が約150MiBもある。 $ sigtool --list-sig &gt; clamav_cvd.txt $...","categories": ["サーバ構築"],
        "tags": ["Linux","ウイルス対策"],
        "url": "/2017/06/19/linux-clamav-viewing-virus-define/",
        "teaser": null
      },{
        "title": "Linux - 圧縮済みテキストファイルを展開せずに閲覧！",
        "excerpt":"Linux で、圧縮したファイルを展開（解凍）することなく閲覧する方法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 ファイル閲覧には less コマンドを使用。 1. tar.gz ファイルの場合 $ tar zxOf test.tar.gz | less O は英大文字の「オー」 圧縮ファイルが複数のテキストファイルを圧縮したものなら、全てを閲覧可能。 圧縮ファイル中の特定のファイルのみを閲覧したければ、そのファイル名を明示する。 $ tar zxOf test.tar.gz test_1.txt | less 2. gz ファイルの場合 $ gunzip -c test.gz | less 3. zip ファイルの場合 $ unzip -c test.zip...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2017/06/23/linux-viewing-compress-file-without-extract/",
        "teaser": null
      },{
        "title": "Linux - Google 日本語入力 Mozc の tool コマンド！",
        "excerpt":"Google 日本語入力 Mozc の tool コマンドで各種ウィンドウを開く方法についての記録です。 0. 前提条件 LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。 1. Mozc プロパティ $ /usr/lib/mozc/mozc_tool --mode=config_dialog 2. Mozc 辞書ツール $ /usr/lib/mozc/mozc_tool --mode=dictionary_tool 3. Mozc 単語登録 $ /usr/lib/mozc/mozc_tool --mode=word_register_dialog 4. Mozc 手書き文字入力 $ /usr/lib/mozc/mozc_tool --mode=hand_writing 5. 「Mozc 文字パレット」を開く $ /usr/lib/mozc/mozc_tool --mode=character_palette 6. 応用 当方は辞書登録をよく行うが、GUI でメニューから「辞書ツール」経由で「単語登録」ウィンドウを開くのは若干の手間なので、エイリアスの設定をして（常に開いている）ターミナルから mozc-word...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2017/06/27/linux-mozc-tool-command/",
        "teaser": null
      },{
        "title": "2017年6月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"7月になりましたので、先月6月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 40,580 67.7757 Mac OS 12,192 20.3628 Linux 3,380 5.6452 Android 2,150 3.5909 Ubuntu Linux 1,266 2.1144 unknown 136 0.2271 Fedora Linux 100 0.1670 FreeBSD 57 0.0952 Solaris 6 0.0100 PlayStation 4 0.0067 NetBSD 2 0.0033 OpenBSD 1 0.0017 合　計 59,874 100.0000 2. アクセスをOS・バージョン別に集計（上位20件）...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/07/01/blog-access/",
        "teaser": null
      },{
        "title": "LMDE2 - QGIS(Quantum GIS) インストール！",
        "excerpt":"フリーでオープンソースの地理情報システム QGIS(Quantum GIS) を LMDE2 (Linux Mint Debian Edition 2) にインストールする方法についての記録です。 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Long Term Release 版でなく、最新の LTR candidate 版をインストール。 1. リポジトリの設定 File: /etc/apt/sources.list.d/qgis.list 1 2 deb http://qgis.org/debian jessie main deb-src http://qgis.org/debian jessie main 2. パッケージリストの更新 $ sudo apt update 3. GPG...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2017/07/02/lmde2-qgis-installation/",
        "teaser": null
      },{
        "title": "LMDE2 - cron で SSH 越しに rsync 同期できない！",
        "excerpt":"LMDE2(Linux Mint Debian Edition 2) 上の cron で SSH 越しに rsync 同期できない場合についての記録です。 よくある「rsync 時に、 ssh に関する記述（オプション）を追加しろ」という話ではなく、そうした上で、同期できない場合の対処法についてです。（但し、 LMDE2 限定） 0. 前提条件 リモート側は Debian GNU/Linux 8.6(64bit) を想定。 （SSH サーバ構築済みで、ローカルからの SSH 接続（公開鍵認証）も正常に行えること） ローカル側は LMDE2 (Linux Mint Debian Edition 2; 64bit) を想定。 リモート側のディレクトリをローカル側から引っ張る形で同期する。 1. 準備 まず、以下のような bash スクリプトを作成する。 Rsync で、リモートの foo ユーザ “bak” ディレクトリ配下のファイルをローカルの...","categories": ["PC_Tips"],
        "tags": ["LMDE2","LinuxMint","SSH","rsync"],
        "url": "/2017/07/06/lmde2-cron-rsync-ssh/",
        "teaser": null
      },{
        "title": "Linux - HDD の UUID を確認！",
        "excerpt":"Linux で、 HDD を追加接続した際に fstab でのマウントを既存のパーティションと同様に UUID で行いたいということがあります。 以下、 Linux で HDD の UUID を確認する方法についての記録です。 0. 前提条件 Debian GNU/Linux 8.6(64bit), LMDE2(Linux Mint Debian Edition 2; 64bit) での作業を想定。（他の Linux ディストリビューションでも同様のはず） 1. 確認方法・その１ （以下は、パーティション sdb1 の UUID を確認する例） $ sudo blkid -o list device fs_type label mount point UUID -------------------------------------------------------------------------------- /dev/sda1 ext4...","categories": ["PC_Tips"],
        "tags": ["Linux","LinuxMint","LMDE2","Debian"],
        "url": "/2017/07/10/linux-check-hdd-uuid/",
        "teaser": null
      },{
        "title": "LMDE2 - NetworkManager を使用しないネットワーク設定！",
        "excerpt":"通常、 LMDE2 (Linux Mint Debian Edition 2) をインストールすると、 NetworkManager もデフォルトで起動するようになっているはずです。（他の Linux ディストリビューションの GUI 環境も同様のはず） サーバ用途で使用したい場合など、 NetworkManager でなく /etc/network/interfaces でネットワーク設定したいことがあると思います。 以下、その方法についての記録です。 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 1. 設定ファイルの編集 これまでずっと NetworkManager で管理していた場合は “/etc/network/interfaces” ファイルに詳細な設定が記述されてないはずなので、以下のように記述を追加する。（以下は一例） File: /etc/network/interfaces 1 2 3 4 5 6 7 8 9 10 11...","categories": ["PC_Tips"],
        "tags": ["LMDE2","LinuxMint"],
        "url": "/2017/07/14/lmde2-network-setting-without-network-manager/",
        "teaser": null
      },{
        "title": "Linux - iftop コマンドでネットワークトラフィックの監視！",
        "excerpt":"Linux でネットワークトラフィックを監視ツールはたくさんありますが、今回は代表格(?)の iftop コマンドで監視する方法について記録します。 0. 前提条件 Debian GNU/Linux 8.6 (64bit) での作業を想定。（インストール方法に違いがあるだけで、使用方法は他のディストリビューションも同様のはず） 1. iftop コマンドのインストール # apt install iftop RedHat 系なら yum で。（場合によっては、リポジトリの設定が必要） 2. iftop の実行 通常、オプション無しの実行で事足りる。 # iftop 実行には root 権限が必要なので、一般ユーザなら sudo で実行する。 NIC を複数搭載していて、指定したければ、 -i eth0 のようなオプションを使用する。 表示する単位を「ビット」単位でなく「バイト」単位にしたければ、 -B オプションを使用する。 その他のオプションについては、 iftop --help や man iftop を参照のこと。 3. 出力の確認...","categories": ["PC_Tips"],
        "tags": ["Linux","Debian"],
        "url": "/2017/07/18/linux-check-network-traffic-by-iftop/",
        "teaser": null
      },{
        "title": "Linux - comm コマンドでテキストファイルの差異（行単位）の確認！",
        "excerpt":"Linux でソートされた２つのファイルを行単位に比較するのに diff コマンドを使用することもあると思いますが、今回は comm コマンドについての記録です。 0. 前提条件 LMDE2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。（他の Linux ディストリビューションも同様のはず） 1. 準備 比較に使用するサンプルを以下のように作成する。（敢えて、ソートしていない） File: test_1.txt 1 2 3 B A C File: test_2.txt 1 2 3 C D A 2. 使用例 出力される結果には3列あり、左から次のようになっている。 ファイル１にのみ存在する行 ファイル２にのみ存在する行 両方のファイルに存在する行 コマンド実行時に -1, -2, -3 のようにオプションを指定することで、1, 2, 3列目の出力が抑止される。...","categories": ["PC_Tips"],
        "tags": ["Linux","LMDE2"],
        "url": "/2017/07/22/linux-compate-2-textfiles-by-comm/",
        "teaser": null
      },{
        "title": "Debian - LANカード(NIC)の増設＆変更！",
        "excerpt":"Debian GNU/Linux 8 系がインストールされたマシンに LAN カード (NIC) を増設し、これまで使用していたオンボードの LAN カードから変更する方法についてです。 0. 前提条件 Debian GNU/Linux 8.6 Jessie (64bit) での作業を想定。（Debian 系は同様のはず） オンボード LAN 搭載のマザーボードに別の LAN カードを増設済み。 NIC をオンボードから増設済みのものに変更することを想定。 Debian 9 Stretch を新規にインストールした場合は、ネットワークの設定方法や NIC インタフェースの命名仕様が異なるので注意。 （Debian 9 Stretch にアップグレードした場合は、それまでのネットワーク設定方法等が引き継がれる。そして、 Debian 10 ではその方法も廃止される） 1. 設定のバックアップ 必要であれば、既存の設定ファイルをバックアップしておく。 # cp -i /etc/network/interfaces{,.bak} # cp -i /etc/udev/rules.d/70-persistent-net.rules{,.bak}...","categories": ["PC_Tips"],
        "tags": ["Linux","Debian"],
        "url": "/2017/07/26/debian-changing-nic-card/",
        "teaser": null
      },{
        "title": "Octopress - PubSubHubbub でリアルタイムフィード配信",
        "excerpt":"PubSubHubbub というフィードをリアルタイムで配信する Google 提唱のプロトコルを利用し、 Ruby 製ブログシステム Octopress の更新情報配信時に、 Google 等にほぼリアルタイムにインデックスしてもらう方法についての記録です。 1. 設定ファイルの編集 設定ファイル “＿config.yml” に、以下のような記述を追加する。 File: _config.yml 1 2 3 4 5 # PubSubHubbub atom_url: http://www.mk-mode.com/octopress/atom.xml hub_urls: - https://pubsubhubbub.appspot.com - https://push.superfeedr.com フィードの URL を “＿config.yml” 内の site や subscribe_rss を組み合わせて生成するなら、敢えて atom_url を設定しなくてもよいだろう。 hub_urls は、複数の URL に対応できるよう配列化している。 （Web 上には1つの URL しか指定できない例がよく紹介されているが）...","categories": ["ブログ"],
        "tags": ["Feed","XML"],
        "url": "/2017/07/30/octopress-realtime-rss-sending/",
        "teaser": null
      },{
        "title": "2017年7月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"8月になりましたので、先月7月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 37,848 65.0768 Mac OS 13,475 23.1692 Linux 3,042 5.2305 Android 2,161 3.7157 Ubuntu Linux 1,338 2.3006 unknown 137 0.2356 FreeBSD 76 0.1307 Fedora Linux 69 0.1186 Solaris 9 0.0155 PlayStation 2 0.0034 Wii 1 0.0017 3DS 1 0.0017 合　計 58,159 100.0000 2. アクセスをOS・バージョン別に集計（上位20件）...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/08/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - インストール（サーバ用途・最小構成）！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) をサーバ用途・最小構成でインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 インストールするマシンのメモリ容量は 2GB, ディスク容量は 250GB を想定する。 DHCP を使用しない。（ネットワークは手動で設定する） パーティションは手動設定する。 プロキシは使用しない。 ソフトウェアのインストールは行わない。（必要になったときにインストールするので） 1. インストールイメージのダウンロード 以下のサイト、もしくは国内ミラーサイトから ISO イメージをダウンロードする。 今回当方は AMD64 版 NetInstall CD イメージ “debian-9.0.0-amd64-netinst.iso” をダウンロードした。（DVD 版でもよいが、必要なものは必要なときにインストールできればよいので） 以下は、 JAIST のミラーサイト。 http://ftp.jaist.ac.jp/pub/Linux/debian-cd/ 当然、ダウンロード後は CD(DVD) に焼き付ける。（ブート可能オプション必須） 仮想マシンにインストールするならディスクに焼き付けなくてもよい。 2. インストール 以下のような手順でインストールする。 （スクリーンショットは、画像が多くなるため非掲載。以下の文章だけで理解できるはず） Boot Menu “Install” を選択する。（綺麗な画面がよければ “Graphical...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2017/08/02/debian-9-installation-for-small-server/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - サーバ初期設定！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) インストール後の初期設定についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 「Debian 9 (Stretch) - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 一般ユーザ名は “masaru” を想定。 以下の作業は全て root ユーザで行うことを想定。 コマンドラインプロンプト # は root ユーザ、 $ は一般ユーザであることを理解しておく。 コメントしての # と混同しないよう注意する。 ネットワークカードは “enp1s0” を想定。 ちなみに、 “enp1s0” のような NIC 名の意味は以下のとおり。 en … ethernet の略 p1 … バス番号が 1 s0 … スロット番号が 0...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2017/08/04/debian-9-initial-setting/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - SSH サーバ構築！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) 上に SSH サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 「Debian 9 (Stretch) - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 「Debian 9 (Stretch) - サーバ初期設定！」の方法で初期設定が完了していることを想定。 サーバの IP アドレス 192.168.11.3、ホスト名 noah、ユーザ名 masaru を想定。 DNS サーバは未だ設定していない。 （設定済みなら、ローカルから IP アドレスではなくホスト名で SSH 接続可） クライアント側は LMDE2(Linux Mint Debian Edition 2; 64bit) を想定。 SSH 接続は端末コンソールから行う。 ポートは、デフォルトの 22 から 9999 に変更することを想定。（9999...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","SSH"],
        "url": "/2017/08/06/debian-9-ssh-installation/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - セキュリティ・アップデートの自動化！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) のセキュリティ・アップデートを自動化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) サーバでの作業を想定。 cron-apt でもパッケージアップデートの自動化は可能であるが、今回はセキュリティ・アップデートのみなので unattended-upgrades を使用する。 （ちなみに、インストール済みの各種パッケージを自動アップデートするのは（依存パッケージの整合性等の問題があるため）危険であり、当方はセキュリティ・アップデート以外は自動でアップデートしない方針） root ユーザでの作業を想定。 1. unattended-upgrades のインストール unattended-upgrades はデフォルトでインストールされているはずだが、インストールされていなければインストールする。 また、パッケージ変更履歴ツール apt-listchanges もインストールする。 # apt -y install unattended-upgrades apt-listchanges 2. “50unattended-upgrades” の編集 メール送信先を編集（コメント解除）する。（当然、ユーザ名のみならず外部のメールアドレスも設定可） File: /etc/apt/apt.conf.d/50unattended-upgrades 1 Unattended-Upgrade::Mail \"root\"; 3. “20auto-upgrades” の作成 以下のコマンドを実行して自動アップデートに関する質問に「はい」と回答すると、自動アップグレードのための設定ファイル “20auto-upgrades” が作成される。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2017/08/08/debian-9-automation-security-update/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - rootkit 検出ツール chkrootkit インストール！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に rootkit 検出ツール chkrootkit をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 chkrootkit が検知できるのは既知の rootkit のみであり、新規の rootkit は検知できないことを認識しておく。 chkrootkit では誤検知もあるので、検知結果は参考程度に留める。 コマンド自体が改竄されてからでは遅いので、OS インストール直後に行うのがよいらしい。 root ユーザでの作業を想定。 1. chkrootkit のインストール # apt -y install chkrootkit 2. chkrootkit の実行 以下のようにして chkrootkit...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2017/08/10/debian-9-chrootkit-installation/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - アンチウィルスソフト導入！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) にウイルス対策ソフト ClamAV をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 Apt でインストールする。（但し、Apt のパッケージはバージョンが古い。最新版が良ければ、[こちら](http://sourceforge.net/projects/clamav/files/clamav/ ““)からダウンロードしてビルドするとよい） 毎日自動でウィルススキャンを実行するようにする。 root ユーザでの作業を想定。 1. ClamAV のインストール 以下のようにして、アンチウィルスソフト ClamAV, ClamAV Daemon をインストールする。 # apt -y install clamav clamav-daemon 2. ウィルス定義ファイルの最新化 freshclam コマンドでウィルス定義ファイルを最新に更新する。 しかし、デフォルトの状態では以下のようになってしまう。（以前はこのような事態にはならなかったが） # freshclam ERROR: /var/log/clamav/freshclam.log is locked by another...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ウイルス対策"],
        "url": "/2017/08/12/debian-9-anti-virus-installation/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - NTP サーバ Chrony 構築！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に NTP サーバ Chrony を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 従来からの ntpd ではなく chronyd をインストールする。 ntpd と chronyd の違いについては、「第13章 chrony スイートを使用した NTP 設定」を参照。 ローカルネットワークは 192.168.11.0/24 とする。 root ユーザでの作業を想定。 1. Chrony のインストール # apt -y install chrony 2. 設定ファイルの編集 File: /etc/chrony/chrony.conf 1 2...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NTP"],
        "url": "/2017/08/14/debian-9-ntp-chrony-installation/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - ファイアウォール設定！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) でファイアウォールを設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 ufw (= “Uncomplicated Firewall”) という iptables のフロントエンドツールを使用する。 IPv6 は使用しないことを想定。 ファイアウォールのルールは、取り急ぎ最低限の設定のみ。（運用する環境やインストールしたサービスに合わせて適宜行う） root ユーザでの作業を想定。 1. ufw のインストール 依存する iptables 等もインストールされる。 # apt -y install ufw 2. 設定ファイルの編集 IPv6 を使用しない場合は以下のように編集しておく File: /etc/default/ufw...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ファイアウォール"],
        "url": "/2017/08/16/debian-9-firewall-setting/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - サービスの管理！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) でのサービスの管理についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 SystemD の簡単な使用法の説明と SysVinit の導入を行う。 （当方、普段は SystemD でサービスの管理を行うが、有事の際に備えて sysv-rc-conf コマンドも使用できるよう準備しておく（RedHat 系ディストリビューションのサービス管理ツール chkconfig にあたるもの）） root ユーザでの作業を想定。 1. SystemD の使用方法 以下は vsftpd サーバの例。（vsftpd.service が正式なサービス名だが .service は省略可能） $ systemctl start vsftpd # &lt;= vsftpd サービスの起動 $ systemctl stop vsftpd #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2017/08/18/debian-9-service-management/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - DNS サーバ BIND9 構築！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に DNS サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 サーバのローカル IP アドレスは 192.168.11.3、グローバル IP アドレスは xxx.yyy.zzz.aaa を想定。 ドメイン名は mk-mode.com、マシンのホスト名は noah、ネームサーバホスト名は ns を想定。 セカンダリ DNS は用意しない。 IPv6 は使用しない。 root ユーザでの作業を想定。 1. BIND のインストール # apt -y install bind9 dnsutils “dnsutils” は dig コマンド用。 2....","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","DNS"],
        "url": "/2017/08/20/debian-9-bind9-installation/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - DNS サーバ BIND9 の chroot 化！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に構築した DNS サーバを chroot 化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 DNS サーバ BIND が構築済みであることを想定。 chroot ディレクトリは /var/bind9/chroot/ とする。 root ユーザでの作業を想定。 1. BIND の停止 BIND が起動していると設定に失敗するので、BIND が起動している場合は停止する。 # systemctl stop bind9 2. 起動オプションの編集 起動時のオプションを変更するよう “/etc/default/bind9” を編集する。 File: /etc/default/bind9 1 2 #OPTIONS=\"-u bind -4\"...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","DNS"],
        "url": "/2017/08/22/debian-9-bind9-chroot/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - FTP サーバ構築！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に FTP サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 接続テストでは FileZilla という FTP クライアントを使用する。 root ユーザでの作業を想定。 1. vsftpd のインストール # apt -y install vsftpd 2. vsftpd 設定ファイルの編集 File: /etc/vsftpd.conf 1 2 3 4 5 6 7...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","FTP"],
        "url": "/2017/08/24/debian-9-ftp-installation/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - NFS サーバ構築！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に NFS サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretchs) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 NFS 用ディレクトリを新たに作成する。（”/var” 配下に “/exports” ディレクトリを作成する） クライアント側でマウントに使用するディレクトリも “/var/exports” とする。 サーバ側は root で作業することを想定、クライアント側は一般ユーザで作業することを想定している。 1. NFS サーバのインストール # apt -y install nfs-kernel-server 2....","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NFS"],
        "url": "/2017/08/26/debian-9-nfs-installation/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - NFS サーバのポート固定！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に NFS サーバで使用するポートを固定化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 NFS サーバ構築済み。 （参照：「Debian 9 (Stretch) - NFS サーバ構築！」） ファイアウォール iptables が構築済み。 （参照：「Debian 9 (Stretch) - ファイアウォール設定！」） 以下で設定するポート番号は参考サイトによるものであり、実際は任意に設定可能。 quota は使用していないので、参考サイトにある quota の設定はしない。 root ユーザでの作業を想定。 1. 前提知識 NFS サーバが使用するポートは以下のとおり。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NFS"],
        "url": "/2017/08/28/debian-9-nfs-port-fixing/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - SMTP サーバ Postfix 構築！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に SMTP サーバ Postfix を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は mail を想定。 root ユーザでの作業を想定。 1. Postfix のインストール SMTP サーバ Postfix を以下のようにしてインストールする。 途中でどの設定を選択するか確認されますが、後で設定を行うので「設定なし」(No Configuration)を選択する。 # apt -y install postfix sasl2-bin 2....","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix"],
        "url": "/2017/08/30/debian-9-postfix-installation/",
        "teaser": null
      },{
        "title": "2017年8月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"9月になりましたので、先月8月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 37,323 69.5533 Mac OS 10,283 19.1629 Linux 2,900 5.4043 Android 1,676 3.1233 Ubuntu Linux 1,147 2.1375 FreeBSD 128 0.2385 unknown 128 0.2385 Fedora Linux 65 0.1211 Wii 6 0.0112 Solaris 4 0.0075 OpenBSD 1 0.0019 合　計 53,661 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/09/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - POP/IMAP サーバ Dovecot 構築！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に POP/IMAP サーバ Dovecot を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 IPv6 は使用しないことを想定。 root ユーザでの作業を想定。 1. Dovecot のインストール POP/IMAP サーバ Dovecot を以下のようにしてインストールする。 # apt -y install dovecot-common dovecot-pop3d dovecot-imapd...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Dovecot"],
        "url": "/2017/09/02/debian-9-dovecot-installation/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - メールサーバ SSL 設定！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に導入したメールサーバを SSL 設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 SMTP サーバは Postfix, POP/IMAP サーバは Dovecot を想定。 Postfix を「Debian 9 (Stretch) - SMTP サーバ Postfix 構築！」の方法で導入済み。 Dovecot を「Debian 9 (Stretch) - POP/IMAP サーバ Dovecot 構築！」の方法で導入済み。 接続可能なマシンのネットワークは 192.168.11.0/24...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix","Dovecot","SSL"],
        "url": "/2017/09/04/debian-9-mail-ssl-setting/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - Postfix ウィルス・スパム対策(ClamAV + SpamAssassin)！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) にアンチウイルスソフト ClamAV とスパム対策ソフト SpamAssassin をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 SMTP サーバ Postfix を「Debian 9 (Stretch) - SMTP サーバ Postfix 構築！」の方法で導入済み。 アンチウィルスソフト ClamAV 導入済み。 スパムフィルタも運用する。 アンチウィルス ClamAV との連携には、 ClamAV daemon を使用する方法の他に、ClamSMTP を使用する方法もある。 スパムフィルタ SpamAssassin との連携には、...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix","ウイルス対策","スパム対策"],
        "url": "/2017/09/06/debian-9-postfix-anti-virus-with-clamav-spamassassin/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - Postfix ログ解析！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に導入した SMTP サーバ Postfix のログを解析する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 SMTP サーバ Postfix を「Debian 9 (Stretch) - SMTP サーバ Postfix 構築！」の方法で導入済み。 ログローテート（logrotate）でメールログがローテーションされていることを想定。（デフォルトでなっているはず） root ユーザでの作業を想定。 1. pflogsumm のインストール Postfix のログ解析ツールである pflogsumm を、以下のようにしてインストールする。 # apt -y install...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix"],
        "url": "/2017/09/08/debian-9-postfix-log-analysis/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - 全文検索エンジン Groonga インストール（by Groonga 公式リポジトリ）！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) にカラムストア機能付き全文検索エンジン Groonga を Groonga の公式リポジトリを使用して導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 当記事執筆時点で最新の Groonga 7.0.4 をインストールする。 トークナイザとして MeCab を使用することを想定。 トークンフィルタとして TokenFilterStem を使用することを想定。 ノーマライザとして MySQL 互換の groonga-normalizer-mysql を使用することを想定。（将来、 Mroonga を使用することを想定） ここでは、全文検索がどういうものかという説明はしない。 root ユーザでの作業を想定。 以下の説明内で出力するデータは、可読性を考慮して整形している。 1. 日本語形態素解析器 MeCab のインストール トークナイザとして MeCab を使用するので、インストールしておく。 # apt -y install...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Groonga"],
        "url": "/2017/09/10/debian-9-groonga-installation-by-official-apt/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - DB サーバ MariaDB & 全文検索エンジン Mroonga 構築（by Mroonga 公式リポジトリ）！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に DB サーバ MariaDB と全文検索エンジン Mroonga を Mroonga の公式リポジトリを使用して導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 MariaDB とは言っても中身は MySQL が元になっているので、各所で “mysql” のキーワードが出現する。 インストールする Mroonga は、当記事執筆時点で最新の 7.04 とする。 インストールする MariaDB は、 Mroonga 7.04 に対応したバージョン 10.1 系となる。（自動的に選択される。今回の場合 10.1.23 がインストールされた）...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","MariaDB","Mroonga"],
        "url": "/2017/09/12/debian-9-mariadb-mroonga-installation-by-official-apt/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - Ruby 2.4 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に Ruby 2.4 をソースをビルドしてインストール方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 インストールする Ruby は 2.4.1-p111 root ユーザでの作業を想定。 1. 必要パッケージのインストール Ruby のインストールに必要なパッケージを予めインストールする。（他に必要なものがあればインストールする） # apt -y install libffi-dev zlib1g-dev libssl-dev libreadline-dev \\ libgdbm-dev libbison-dev libmariadbclient-dev 2. アーカイブファイルのダウンロード＆展開 アーカイブファイルをダンロードし、展開する。（ダンロード先は “/usr/local/src”...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Ruby"],
        "url": "/2017/09/14/debian-9-ruby-2-4-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に Web サーバ Nginx を Nginx 公式リポジトリを使用して導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 Debian 公式リポジトリの Nginx はバージョンが古いため、Nginx 公式リポジトリを使用して 1.12.1（当記事執筆時点最新安定版）をインストールする。 実際に運用する際は、ドキュメントルートを変更する等、設定を編集すること。 root ユーザでの作業を想定。 1. リポジトリ追加の設定 まず、キー追加。 # wget http://nginx.org/keys/nginx_signing.key # apt-key add nginx_signing.key そして、リポジトリ追加の設定を行う。 実際には、以下を “/etc/apt/sources.list” の最終行に追加するか、以下の内容で...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx"],
        "url": "/2017/09/16/debian-9-nginx-installation-by-official-apt/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - Web サーバ Nginx で SSL 接続！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に構築した Web サーバ Nginx で SSL 接続するための設定についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 クライアント側は LMDE2(Linux Mint Debian Edition 2) を想定。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 Web(HTTP)サーバ Nginx が「Debian 9 (Stretch) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！」の方法で導入済みであることを想定。 今回は自分で SSL サーバ証明書を作成するが、後日、 Let’s Encrypt で無料で証明書を取得するようにする。 当方はメールサーバ構築時に SSL 証明書作成済みであったので、以下の作業は...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx","SSL"],
        "url": "/2017/09/18/debian-9-nginx-ssl-connection-setting/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - Let's Encrypt で常時 SSL 化(with Nginx)！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に構築した Web サーバ Nginx への接続を、 Let’s Encrypt で取得した SSL サーバ証明書で常時 SSL 化するための方法についての記録です。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 クライアント側は LMDE2(Linux Mint Debian Edition 2) を想定。 Web(HTTP)サーバ Nginx が「Debian 9 (Stretch) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！」の方法で導入済みであることを想定。 Nginx 1.12.1 での作業を想定。 Python 2.6/2.7 系がインストール済みであること。（当方は 2.7.13 がインストール済み）...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx","SSL"],
        "url": "/2017/09/20/debian-9-nginx-ssl-by-lets-encrypt/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - ログ解析ツール logwatch インストール！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) にログ監視ツール LogWatch をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 root ユーザでの作業を想定。 1. logwatch のインストール # apt -y install logwatch 2. logwatch 設定ファイルの編集 まず、デフォルトの設定ファイルを複製する。 # cp /usr/share/logwatch/default.conf/logwatch.conf /etc/logwatch/conf/ デフォルトの設定で充分であるが、必要なら編集する。 メールの送信先等を変更するなら以下のようにする。 File: /etc/logwatch/conf/logwatch.conf 1 2 MailTo = hoge@xxxx.com # &lt; = メール送信先 Detail = High...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2017/09/22/debian-9-logwatch-installation/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - 自動バックアップ運用！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) で自動バックアップ運用する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 バックファイルを配置するディレクトリは “/home/bak” とする。 root ユーザでの作業を想定。 1. バックアップスクリプトの作成 以下のような内容でバックアップスクリプト “backup.sh” を作成する。 File: backup.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2017/09/24/debian-9-automatic-backup-setting/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - Git インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に Git サーバをソースをビルドしてインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 apt パッケージでインストールしていた git はアンインストール済みであることを想定。 Git 2.13.3 （当記事執筆時点で最新）を Git サーバとしてインストールすることを想定。 アーカイブ保存先は “/usr/local/src” を想定。 クライアントからアクセスがあった時だけサーバを起動するために xinetd を使用する。 root ユーザでの作業を想定。 1. 依存パッケージのインストール # apt -y install xinetd libcurl4-gnutls-dev libexpat1-dev \\ gettext libz-dev libssl-dev 2. アーカイブファイルの取得＆展開 # cd...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Git"],
        "url": "/2017/09/26/debian-9-git-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - PHP インストール（Nginx と連携）！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) に PHP をソースをビルドしてインストールし、 Web／リバースプロキシサーバ Nginx と連携する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 クライアント側は LMDE2(Linux Mint Debian Edition 2) を想定。 Web サーバとして Apache2 でなく Nginx と連携させることを想定しているので、 Nginx がインストール済みであること。（参照： Debian 9 (Stretch) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！） 標準リポジトリから PHP 7.0.19 をインストールする。 root ユーザでの作業を想定。 1....","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","PHP","Nginx"],
        "url": "/2017/09/28/debian-9-php-installation-by-src-with-nginx-cooperation/",
        "teaser": null
      },{
        "title": "2017年9月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"10月になりましたので、先月9月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 39,047 69.5814 Mac OS 10,493 18.6984 Linux 3,041 5.4190 Android 1,740 3.1007 Ubuntu Linux 1,367 2.4360 unknown 223 0.3974 FreeBSD 104 0.1853 Fedora Linux 87 0.1550 Solaris 11 0.0196 Wii 3 0.0053 PlayStation 1 0.0018 合　計 56,117 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/10/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - サーバ監視ツール munin 導入！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) にサーバ監視ツール munin をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 Web サーバは Nginx を想定。 munin 用ディレクトリは “/var/www/munin” とする。 root ユーザでの作業を想定。 1. munin のインストール # apt -y install munin 2. 設定ファイルの編集 File: /etc/munin/munin.conf 1 2 3 4 5 6 dbdir /var/lib/munin # &lt;= コメント解除 htmldir...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2017/10/02/debian-9-munin-installation/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - munin 各種監視追加！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) にインストールしたサーバ監視ツール munin に各種監視を追加する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 サーバ監視ツール munin がインストール済み。 ハードディスク温度の監視を追加する。 CPU 温度・電圧・ファン回転数の監視を追加する。 MariaDB の監視を追加する。 Nginx の監視を追加する。 root ユーザでの作業を想定。 1. ハードディスク温度の監視追加 smartctl コマンドを使用するので、以下のようにしてインストールしておく。 # apt -y install smartmontools 以下のように設定ファイル “hddtemp_smartctl” を作成する。（”munin-node” に追記してもよい） File: /etc/munin/plugin-conf.d/hddtemp_smartctl 1 2 3 4 5 [hddtemp_smartctl] user...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2017/10/04/debian-9-munin-additional-setting/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - Monit でプロセス監視！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) にプロセスを監視するツール Monit をインストール方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 root ユーザでの作業を想定。 1. monit のインストール # apt -y install monit 2. 設定ファイル編集 設定ファイル “/etc/monit/monitrc” を編集する。 以下は当方の例。 File: /etc/monit/monitrc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian"],
        "url": "/2017/10/06/debian-9-monit-monitoring/",
        "teaser": null
      },{
        "title": "Linux - ImageMagick 7 のインストール（ソースビルド）！",
        "excerpt":"画像操作／表示ツール ImageMagick 7 を Linux へソースをビルドしてインストールする方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2) での作業を想定。 当記事執筆時点で最新の 7.0.6-4 を、ソースをビルドしてインストールする。 ImageMagick 7 系は 6 系とコマンドやオプションの使用方法が異なる部分がある。 しかし、 6 系の使用方法も一応サポートされている。 1. インストール済み ImageMagick のバージョンの確認 $ identify -version Version: ImageMagick 6.8.9-9 Q16 x86_64 2017-07-15 http://www.imagemagick.org Copyright: Copyright (C) 1999-2014 ImageMagick Studio LLC Features: DPC...","categories": ["PC_Tips"],
        "tags": ["Linux","LMDE2","ImageMagick"],
        "url": "/2017/10/10/imagemagick-7-installation-by-src/",
        "teaser": null
      },{
        "title": "LMDE 2 - Python 3.6 インストール（ソースビルド）！",
        "excerpt":"汎用プログラミング言語 Python を LIME 2 へソースをビルドしてインストールする方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 デフォルトでインストールされている Python 2.7.9, 3.4.2 はアンインストールせず、Python 3.6.2 をインストールし、それらと共存させる。 （python, python3.4, python3.6 コマンドで使い分ける） 「デフォルトでインストールされている Python をアンインストールすることはサーバ管理上悪影響を与えるので危険である」ということを理解しておく。 1. Python のバージョン確認 インストール済み（現状）の Python のバージョンを確認してみる。 $ python -V Python 2.7.9 $ python3.4 -V Python 3.4.2 オプションは --version でもよい。...","categories": ["プログラミング"],
        "tags": ["LMDE2","Linux","Python"],
        "url": "/2017/10/14/lmde2-python-installation-by-src/",
        "teaser": null
      },{
        "title": "Linux - UUID の生成！",
        "excerpt":"Linux で UUID （Universally Unique Identifier; 全世界で2つ以上のアイテムが同じ値を持つことがない一意な識別子）を生成する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2) での作業を想定。 （Debian 系なら同じはず。その他のディストリビューションでも、パッケージインストール作業以外は同じはず） 後述の 1. では uuidgen コマンドを使用する。 未インストールなら、 apt install uuid-runtime でインストールしておく。 UUID には Version.1〜5 が存在することを理解しておく。 1. uuidgen コマンドを使用する場合 uuidgen コマンドは Version.4（乱数ベース）と Version.1（日時ベース）の UUID を生成可能。 1-1. UUID Version.4 の生成例 Version.4 の UUID を生成するには、オプション...","categories": ["PC_Tips"],
        "tags": ["Linux","LMDE2"],
        "url": "/2017/10/18/linux-uuid-generation/",
        "teaser": null
      },{
        "title": "Linux - XML の正当性チェック／整形！",
        "excerpt":"Linux でコマンドラインからテキスト(XML)ファイルの正当性をチェックしたり、可読性を高めるために整形したりする方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 xmllint コマンドを使用する。 1. xmllint コマンドのインストール xmllint コマンドが未インストールなら、インストールする。（libxml2-utils パッケージ） $ sudo apt install libxml2-utils 2. XML 正当性チェック（DTD を含まない） $ xmllint --noout file.xml --noout は標準出力しないオプション 3. XML 正当性チェック（DTD を含む） $ xmllint --noout --valid file.xml 4. XML の整形（標準出力） $ xmllint...","categories": ["PC_Tips"],
        "tags": ["Linux","LMDE2","XML"],
        "url": "/2017/10/22/linux-xml-validation/",
        "teaser": null
      },{
        "title": "Linux - tc コマンドで帯域制限！",
        "excerpt":"Linux でアウトバウンド（送信）についての帯域制限を行う方法についての記録です。 0. 前提条件 Debian GNU/Linux 8.6 (64bit) での作業を想定。（他の Linux ディストリビューションも同様のはず） tc コマンドには qdisc, class, filter という概念があるが、その違いについては説明しない。 （今回は qdisc(queue discipline) を使用する） TBF(Token Bucket Filter; Classless な QDISC) を使用する。 1. 帯域制限の設定 （以下は一例） # tc qdisc add dev eth0 root tbf limit 200Kb buffer 100Kb rate 200Kbps limit 500Kb … データキューのサイズを 200KByte...","categories": ["PC_Tips"],
        "tags": ["Linux","Debian"],
        "url": "/2017/10/26/linux-rate-limiting-by-tc/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 気象庁防災情報 XML: Feed受信履歴ページ（絞り込み機能付き）！",
        "excerpt":"当方、気象庁防災情報 XML の情報を受信＆管理し、Web ページ上でも公開しております。   以前から「Feed 受信履歴ページ」は過去24時間分に限って公開しておりましたが、この度、全ての情報を閲覧できるようなページも公開しました。（過去には公開しておりましたが、非力マシンの負荷軽減のために非公開にしておりましたが、改良したので再公開）   今回は、そのページの紹介のみ。     1. 公開ページ      mk-mode SITE : XML Feed 受信履歴（気象庁防災情報XML）   2. 注意事項      当コンテンツは、「気象庁」提供の「気象庁防災情報XML」受信記録・内容確認用。   データの保存・公開は 2012年12月9日 から行なっている。   「気象特別警報」の運用開始は 2013年8月30日。   「竜巻注意情報（目撃情報付き）」の運用開始は 2014年9月3日。   「降灰予報」の運用開始は 2015年6月24日。   「噴火速報」の運用開始は 2015年8月4日。   「特殊気象報（各種現象）（不連続線通過）」、「特殊気象報（風）」、「特殊気象報（気圧）」は、 2017年3月29日 で運用終了。   「気象警報・注意報（Ｈ２７）」、「警報級の可能性（明日まで）」、「警報級の可能性（明後日以降）」の運用開始は 2017年5月17日。   「地方海上警報（Ｈ２８）」、「地方海上予報（Ｈ２８）」の運用開始は 2017年5月17日。     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails"],
        "url": "/2017/10/30/rails-jmaxml-list-with-searching/",
        "teaser": null
      },{
        "title": "Blog Access",
        "excerpt":"title : “2017年10月 - OS・ブラウザ別アクセス状況！【自動集計】” published: true date : 2017-11-01 00:20:00 +0900 comments : true categories: ブログ tags: Octopress 11月になりましたので、先月10月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 43,983 68.0230 Mac OS 12,560 19.4250 Linux 3,690 5.7069 Android 2,563 3.9639 Ubuntu Linux 1,503 2.3245 unknown 175 0.2707 FreeBSD 95 0.1469 Fedora Linux...","categories": [],
        "tags": [],
        "url": "/2017/11/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby, Rails - カレンダー個別計算ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。   今回、任意の日付のカレンダーを個別に計算するページを設置しました。   以下、そのページの紹介です。     1. 公開ページ      mk-mode SITE : カレンダー計算   2. 注意事項      リクエストを jpl_cal.txt とすれば、テキストで結果を返す。  （引数は ?year=2017&amp;month=1&amp;day=2 のように付与。引数なしでシステム日付をJSTとみなす）   あらかじめ計算しておいた情報を表示する一覧ページとは異なり、「計算」ボタン押下後に計算を行うため、結果表示に若干時間がかかる。   計算の根拠となっているデータは NASA JPL DE430 である。   計算結果は、左から  年月日、曜日、ユリウス通日UTC(JST)、日の干支、旧暦年月日、六曜、（二十四節気）、（雑節）、（節句）、太陽の視黄経、月の視黄経、月齢  （カッコの項目は、存在しない場合は省略）   計算方法等については、当ブログ過去記事を参照のこと。            Category: 暦・カレンダー - mk-mode BLOG       Tag: カレンダー - mk-mode BLOG             以上。   ","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/11/04/rails-calendar-calculation/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 時刻系変換ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。 今回、各種時刻系を変換するページを設置しました。 以下、そのページの紹介です。 1. 公開ページ mk-mode SITE : 時刻系変換 2. 注意事項 リクエストを conv_time.txt とすれば、テキストで結果を返す。 （引数は ?year=2017&amp;month=1&amp;day=2&amp;hour=12&amp;min=34&amp;sec=56 のように付与。引数なしでシステム時刻をJSTとみなす） 計算の根拠となっているデータは NASA JPL DE430 である。 出力する項目は以下のとおり。 JST: 日本標準時 (Japan Standard Time) UTC: 協定世界時 (Coordinated Universal Time) JST - UTC: 日本標準時と協定世界時の差（単位：時間） JD: ユリウス通日（Julian Day; 単位：日） T: ユリウス世紀数（Julian Century Number; 単位：世紀） UTC - TAI: 協定世界時と国際原子時の差（=うるう秒の総和;...","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/11/08/rails-time-system-conversion/",
        "teaser": null
      },{
        "title": "Ruby, Rails - ΔT（地球自転速度補正値）計算ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。   今回、任意の年月のΔT（地球自転速度補正値）を個別に計算するページを設置しました。   以下、そのページの紹介です。      【2018-11-11 追記】  ΔT（地球自転速度補正値）計算は「時刻系変換」に含まれているので、ΔT計算ページの運用は終了しました。  【追記ここまで】      1. 公開ページ      mk-mode SITE : ΔT計算 （2018-11-11削除）   2. 注意事項      リクエストを delta_t.txt とすれば、テキストで結果を返す。  （引数は ?year=2017&amp;month=1 のように付与。引数なしでシステム年月を年月(JST)とみなす）   根拠となっている計算式は NASA 提供のものである。   最近の NICT 提供のデータで計算可能なものはカッコ書きしている。   ΔTの計算については「Ruby - 地球自転速度補正値 ΔT の計算！ - mk-mode BLOG」を参照のこと。   計算方法等については、当ブログ過去記事を参照のこと。            Category: 暦・カレンダー - mk-mode BLOG       Tag: カレンダー - mk-mode BLOG             以上。   ","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/11/12/rails-delta-t-calculation/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 天体暦（天体位置表）（JPL版）計算ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。 今回、 ICRS(International Celestial Reference System) 天体暦（天体位置表）（JPL版）を計算するページを設置しました。 以下、そのページの紹介です。 1. 公開ページ mk-mode SITE : 天体暦（天体位置表）（JPL版）計算 2. 注意事項 リクエストを eph_jpl.txt とすれば、テキストで結果を返す。 （引数は ?target=3&amp;center=11&amp;jd=2458041.5 のように付与） 計算根拠となっているデータは NASA 提供の JPL DE430 である。 座標系は ICRS(International Celestial Reference System) 座標系である。 対象天体が「地球の章動」、「月の秤動」の場合、基準天体の選択は無視する。 ユリウス日を省略した場合、現在システム日時を UTC とみなしてユリウス日とする。 Position は基準天体から見た対象天体の位置。 Velocity は基準天体から見た対象天体の移動速度。 詳細は「Ruby - JPL 天文暦データから ICRS 座標を計算！」等を参照のこと。&lt;/li&gt; その他、カレンダー等については、当ブログ過去記事を参照のこと。 Category:...","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/11/16/rails-jpl-ephemeris-calculation/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 天体暦（天体位置表）（海保版）計算ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。 今回、天体暦（天体位置表）（海保版）を計算するページを設置しました。 以下、そのページの紹介です。 1. 公開ページ mk-mode SITE : 天体暦（天体位置表）（海保版）計算 2. 注意事項 リクエストを eph_jcg.txt とすれば、テキストで結果を返す。 （引数は ?year=2017&amp;month=1&amp;day=2&amp;hour=12&amp;min=34&amp;sec=56 のように付与。引数なしでシステム時刻をJSTとみなす） R.A. は「視赤経」 DEC. は「視赤緯」 DIST. は「地心距離」 H.P. は「視差」 hG.“は「グリニジ時角」 S.D. は「視半径」 EPS. は「黄道傾斜角」 ALPHA は「視赤経」 DELTA は「視赤緯」 LAMBDA は「視黄経」 BETA は「視黄緯」 詳細は「Ruby - 太陽・月の視黄経・視黄緯の計算（海保略算式版）！」等を参照のこと。&lt;/li&gt; その他、カレンダー等については、当ブログ過去記事を参照のこと。 Category: 暦・カレンダー - mk-mode BLOG Tag: カレンダー -...","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/11/20/rails-jcg-ephemeris-calculation/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 視位置（太陽／月）計算ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。   今回、太陽／月の視位置を計算するページを設置しました。   以下、そのページの紹介です。     1. 公開ページ      mk-mode SITE : 視位置計算（太陽／月）計算   2. 注意事項      リクエストを apos_sun_moon.txt とすれば、テキストで結果を返す。  （引数は ?year=2017&amp;month=1&amp;day=2&amp;hour=12&amp;min=34&amp;sec=56 のように付与。引数なしでシステム時刻をJSTとみなす）   計算根拠となっているデータは NASA 提供の JPL DE430 である。   詳細は「Ruby - JPL DE430 データから太陽・月の視位置を計算！」等を参照のこと。   その他、カレンダー等については、当ブログ過去記事を参照のこと。            Category: 暦・カレンダー - mk-mode BLOG       Tag: カレンダー - mk-mode BLOG             以上。   ","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/11/24/rails-jpl-apparent-sun-moon-calculation/",
        "teaser": null
      },{
        "title": "Ruby, Rails - グリニッジ恒星時計算ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。 今回、グリニッジ恒星時を計算するページを設置しました。 以下、そのページの紹介です。 1. 公開ページ mk-mode SITE : グリニッジ恒星時計算 2. 注意事項 リクエストを greenwich_time.txt とすれば、テキストで結果を返す。 （引数は ?year=2017&amp;month=1&amp;day=2&amp;hour=12&amp;min=34&amp;sec=56 のように付与。引数なしでシステム時刻をUTCとみなす） 計算根拠となっている理論は IAU2006. 各項目 ERA : Earth Rotation Angle; 地球回転角 EO : Equation of the Origins; 原点差 GAST : Greenwich Apparent Sidereal Time; グリニッジ視恒星時 GMST : Greenwich Mean Sidereal Time; グリニッジ平均恒星時 EE : Equation...","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/11/28/rails-greenwich-time-calculation/",
        "teaser": null
      },{
        "title": "2017年11月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"12月になりましたので、先月11月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 43,670 66.2600 Mac OS 14,114 21.4150 Linux 4,165 6.3195 Android 2,379 3.6096 Ubuntu Linux 1,230 1.8663 unknown 165 0.2504 Fedora Linux 109 0.1654 FreeBSD 49 0.0743 Solaris 13 0.0197 OpenBSD 6 0.0091 PlayStation 4 0.0061 Wii 3 0.0046 合　計 65,907 100.0000 2. アクセスをOS・バージョン別に集計（上位20件）...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2017/12/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 平均黄道傾斜角計算ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。   今回、平均黄道傾斜角\\(\\epsilon_a\\)を計算するページを設置しました。   以下、そのページの紹介です。     1. 公開ページ      mk-mode SITE : 平均黄道傾斜角計算   2. 注意事項      リクエストを eps_a.txt とすれば、テキストで結果を返す。  （引数は ?year=2017&amp;month=1&amp;day=2&amp;hour=12&amp;min=34&amp;sec=56 のように付与。引数なしでシステム時刻を地球時とみなす）   計算根拠となっているのは国立天文台も使用している計算式。   ユリウス日／ユリウス世紀数は、地球時(TT)に対するもの。   詳細は「Ruby - 平均黄道傾斜角の計算！」等を参照のこと。   その他、カレンダー等については、当ブログ過去記事を参照のこと。            Category: 暦・カレンダー - mk-mode BLOG       Tag: カレンダー - mk-mode BLOG             以上。   ","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/12/02/rails-mean-obliquity-ecliptic-calculation/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 章動計算ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。   今回、章動（\\(\\Delta\\psi, \\Delta\\epsilon\\)）を計算するページを設置しました。   以下、そのページの紹介です。     1. 公開ページ      mk-mode SITE : 章動計算   2. 注意事項      リクエストを nutation.txt とすれば、テキストで結果を返す。  （引数は ?year=2017&amp;month=1&amp;day=2&amp;hour=12&amp;min=34&amp;sec=56 のように付与。引数なしでシステム時刻を地球時とみなす）   計算根拠となっているのは IAU2000A という理論。   DeltaPsi（\\(\\Delta\\psi\\)）は黄経における章動。   DeltaEps（\\(\\Delta\\epsilon\\)）は黄経傾斜における章動。   詳細は「Ruby - 章動の計算（IAU2000A 理論）！」等を参照のこと。   その他、カレンダー等については、当ブログ過去記事を参照のこと。            Category: 暦・カレンダー - mk-mode BLOG       Tag: カレンダー - mk-mode BLOG             以上。   ","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/12/06/rails-nutation-calculation/",
        "teaser": null
      },{
        "title": "Ruby, Rails - うるう秒実施一覧ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。   今回、うるう秒実施一覧のページを設置しました。   以下、そのページの紹介です。     1. 公開ページ      mk-mode SITE : うるう秒実施一覧   2. 注意事項      データは「うるう秒実施日一覧 - 日本標準時プロジェクト」や「IERS Bulletins」によるもの。   UTC は「協定世界時」   TAI は「国際原子時」   その他、カレンダー等については、当ブログ過去記事を参照のこと。            Category: 暦・カレンダー - mk-mode BLOG       Tag: カレンダー - mk-mode BLOG             以上。   ","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/12/10/rails-leap-second-list/",
        "teaser": null
      },{
        "title": "Ruby, Rails - DUT1 一覧ページ！",
        "excerpt":"当方、以前からカレンダー関連のページを公開しております。   今回、DUT1 一覧のページを設置しました。   以下、そのページの紹介です。     1. 公開ページ      mk-mode SITE : DUT1 一覧   2. 注意事項      データは「ＤＵＴ１ - 日本標準時プロジェクト」や「IERS Bulletins」によるもの。   DUT1 = UT1（世界時１） - UTC（協定世界時） で、 DUT1 の絶対値が1秒を越えないよう、うるう秒による調整が行われている。   その他、カレンダー等については、当ブログ過去記事を参照のこと。            Category: 暦・カレンダー - mk-mode BLOG       Tag: カレンダー - mk-mode BLOG             以上。   ","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","カレンダー"],
        "url": "/2017/12/14/rails-dut1-list/",
        "teaser": null
      },{
        "title": "Ruby - 全角文字を2バイト換算して指定バイト数で切り捨て！",
        "excerpt":"Ruby で文字列内の全角文字を2バイト換算し、指定バイト数で切り捨てる方法についての記録です。 （正確には、「全角文字」ではなく、2バイト以上の文字） 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Ruby 2.4.3 （エンコード：UTF-8）での作業を想定。 String クラスを拡張して実装する。 1. サンプルスクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 切り捨てたたことが分かるよう文字を設定することも可能にしている。 File: str_trunc.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24...","categories": ["プログラミング"],
        "tags": ["Ruby"],
        "url": "/2017/12/18/ruby-wide-string-truncate/",
        "teaser": null
      },{
        "title": "Debian 9 Stretch - Python 3.6 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 9 Stretch に Python 3.6 をソースをビルドしてインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 クライアント側は LMDE2(Linux Mint Debian Edition 2)(64bit) を想定。 デフォルトでインストールされている Python 2.7.13, 3.5.3 はアンインストールせず、Python 3.6.3 をインストールし、 2.7.13 や 3.5.3 と共存させる。 （python, python3.5, python3.6 コマンドで使い分ける） 「デフォルトでインストールされている Python をアンインストールすることはサーバ管理上悪影響を与えるので危険である」ということを理解しておく。 1. Python のバージョン確認 インストール済み（現状）の Python のバージョンを確認してみる。 # python...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Python"],
        "url": "/2017/12/21/debian-9-python-3-6-installation-by-src/",
        "teaser": null
      },{
        "title": "Ruby - PyCall で Python ライブラリを使用！",
        "excerpt":"Ruby で Python のライブラリを使用したいことがあると思います。 以下、 Ruby で Python ライブラリを使用する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Ruby 2.4.3 での作業を想定。 使用する Python のバージョンは 2.7.9 を想定。 マシンに Python を複数インストールしていて、システム標準以外のバージョンの Python を使用する方法については不明。（要調査） 1. 準備 Python がインストールされていなければインストールしておく。（PyPI も） 2. RubyGem ライブラリ PyCall のインストール $ sudo gem install --pre pycall 3....","categories": ["プログラミング"],
        "tags": ["Ruby","Python"],
        "url": "/2017/12/25/ruby-using-python-with-pycall/",
        "teaser": null
      },{
        "title": "GCC - 最新版をソースビルドでインストール(on LMDE 2)！",
        "excerpt":"LMDE 2 (Linux Mint Debian Edition 2) へ最新版 GCC をソースビルドでインストールする方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定しているが Debian 系はどれも同様と思われる。 パッケージ版 GCC インストール済み。（バージョンは 4.9.2 を想定） 新たにインストールする GCC は 7.2.0 を想定。（当記事執筆時点で最新バージョン） インストール先は “/usr/local/gcc-7.2.0” を想定。 コンパイルできるようにする言語は C, C++, Objective-C, Fortran とする。 インストール済みのパッケージ版 GCC は他のパッケージ管理等で影響が出ると面倒なのでアンインストールしない。 念の為、インストール済みパッケージをアップデートしておく。 1. アーカイブダウンロード ミラーサイト一覧「GCC mirror...","categories": ["プログラミング"],
        "tags": ["GCC","C言語","Fortran","ObjectiveC","LMDE2"],
        "url": "/2017/12/28/lmde2-installation-newest-gcc-by-src/",
        "teaser": null
      },{
        "title": "Python - Twitter ツイート（OAuth のみで）！",
        "excerpt":"Python 3 で OAuth ライブラリのみを使用してツイートする方法についての記録です。 （ツイート自体は単純な処理のため、 Twitter 用ライブラリを使用するほどでもない） 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.3 での作業を想定。 複数の Twitter アカウントを使い分けることを想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. ライブラリのインストール OAuth, YAML を使用するので、対応のライブラリをインストールしておく。 $ sudo pip3.6 install requests_oauthlib $ sudo pip3.6 install PyYAML 2. Twitter キー情報ファイルの作成 Twitter...","categories": ["プログラミング","SNS"],
        "tags": ["Python","Twitter","OAuth"],
        "url": "/2017/12/31/python-tweet-with-oauth/",
        "teaser": null
      },{
        "title": "2017年12月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"旧年明けまして、新年おめでとうございます。 旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 話は変わりまして、先月12月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 41,902 67.3406 Mac OS 11,984 19.2594 Linux 4,166 6.6952 Android 2,291 3.6819 Ubuntu Linux 1,469 2.3608 unknown 200 0.3214 FreeBSD 105 0.1687 Fedora Linux 92 0.1479 Solaris 7 0.0112 NetBSD 3 0.0048 PlayStation 3 0.0048 OpenBSD 1 0.0016 Wii 1...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/01/01/blog-access/",
        "teaser": null
      },{
        "title": "2017年 - ツイート集計！",
        "excerpt":"改めまして、旧年明けまして、新年おめでとうございます。 2017年の Twitter でのツイート（メインで使用しているアカウントのみ）を Ruby で集計してみました。 当方は、ツイートは全て自宅サーバ(Debian GNU/Linux)上のデータベース(MariaDB)に保存しています。（実際には Ruby + Twitter API で本家からデータを取得して保存） ほとんど SQL で集計可能でしたが、品詞・単語別の集計は形態素解析エンジン MeCab を使用しました。 集計内容は以下のとおり。 月別ツイート数 曜日別ツイート数 時間別ツイート数 文字数別ツイート数 １日当たりツイート数別集計 品詞別出現回数 単語別出現回数 1. 月別ツイート数 [ 年 月 ] [件数] [ 比 率 ] 2017年01月 380 ( 7.55%) 2017年02月 330 ( 6.56%) 2017年03月 412 ( 8.19%) 2017年04月...","categories": ["SNS"],
        "tags": ["Twitter","Ruby","MySQL","MariaDB","MeCab"],
        "url": "/2018/01/02/tweet-summary-2017/",
        "teaser": null
      },{
        "title": "Python - 最大公約数の計算（ユークリッドの互除法）！",
        "excerpt":"Python 3 で、ユークリッドの互除法を使用して、2つの自然数の最大公約数を計算する方法についての記録です。（あまりに簡単なアルゴリズムですが） 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++, Ruby - ユークリッドの互除法！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: gcd_euclid.py 1 2 3 4 5 6 7 8 9 10 11 12...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/01/04/python-gcd-calculation-with-euclid/",
        "teaser": null
      },{
        "title": "Python - 素数判定！",
        "excerpt":"Python 3 で、 1 より大きい任意の自然数が素数であるか否かを判定する方法についての記録です。（あまりに簡単なアルゴリズムですが） 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 素数判定！ Ruby - 素数判定！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: prime_number.py 1 2 3 4 5 6 7 8...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/01/07/python-prime-number-judgement/",
        "teaser": null
      },{
        "title": "Python - 素因数分解！",
        "excerpt":"Python 3 で任意の自然数を素因数分解する方法についての記録です。（あまりに簡単なアルゴリズムですが） 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 素因数分解！ Ruby - 素因数分解！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: prime_fractorization.py 1 2 3 4 5 6 7 8 9 10...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/01/10/python-prime-fractorization/",
        "teaser": null
      },{
        "title": "Python - 一様乱数（線形合同法）！",
        "excerpt":"Python 3 で線形合同法を使って一様乱数を生成する方法についての記録です。（簡単なアルゴリズムですが） 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 一様乱数（線形合同法）！ Ruby - 一様乱数（線形合同法）！ Fortran - 一様乱数（線形合同法）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 必要であれば、スクリプト内の定数を変更する。 File: rndnum_lcgs.py 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/01/13/python-random-number-generation-with-lcgs/",
        "teaser": null
      },{
        "title": "Python - 一様乱数の一様性検定（カイ２乗検定）！",
        "excerpt":"Python 3 で、一様乱数の一様性を「カイ２乗検定」で検定する方法についての記録です。（簡単なアルゴリズムですが） 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 一様乱数の一様性検定（カイ２乗検定）！ Ruby - 一様乱数の一様性検定（カイ２乗検定）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 必要であれば、スクリプト内の定数を変更する。 File: chi_2_rndnum.py 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/01/16/python-random-number-uniformity-test-with-chi-square/",
        "teaser": null
      },{
        "title": "Python - 正規乱数（ボックス＝ミューラー法）！",
        "excerpt":"Python 3 で Box-Muller 法を使って正規乱数を生成する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 正規乱数（ボックス＝ミューラー法）！ Ruby - 正規乱数（ボックス＝ミューラー法）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 必要であれば、スクリプト内の定数を変更する。 File: rndnum_box_muller.py 1 2 3 4 5 6 7...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/01/19/python-random-number-generation-with-box-muller/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 気象庁防災情報 XML: 天気図情報ページ！",
        "excerpt":"当方、気象庁防災情報 XML の情報を受信＆管理し、Web ページ上でも公開しております。   先日、一般にも公開が開始された各種天気図情報。その一覧ページも他の一覧ページ同様、当方 Web ページ上で公開を開始しました。   今回は、そのページの紹介のみ。     1. 公開ページ      mk-mode SITE : 一覧 - 天気図情報（気象庁防災情報XML）   2. 注意事項      当コンテンツは、「気象庁」提供の「気象庁防災情報XML」受信記録・内容確認用。   対象の天気図情報は以下のとおり。            地上実況図       地上２４時間予想図       地上４８時間予想図       アジア太平洋地上実況図       アジア太平洋海上悪天２４時間予想図       アジア太平洋海上悪天４８時間予想図           気象庁防災情報 XML での各種天気図情報の配信開始は 2018年1月17日。   「内容」ボタン押下で各情報の詳細な内容を表示。   等圧線等、緯度／経度の羅列を地図上に描画するとよいだろうが、現時点では未対応。     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails"],
        "url": "/2018/01/22/rails-jmx-wx-chart-list/",
        "teaser": null
      },{
        "title": "Python - 数値積分（台形則による定積分）！",
        "excerpt":"Python 3 で台形則により数値積分（定積分）する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 数値積分（台形則による定積分）！ Ruby - 数値積分（台形則による定積分）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 必要に応じて、スクリプト内の定数や被積分関数を変更する。 File: definite_integral_trapezoid.py 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/01/25/python-definite-integral-by-trapizoid/",
        "teaser": null
      },{
        "title": "Python - 数値積分（シンプソン則による定積分）！",
        "excerpt":"Python 3 でシンプソン則により数値積分（定積分）する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 数値積分（シンプソン則による定積分）！ Ruby - 数値積分（シンプソン則による定積分）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 必要であれば、スクリプト内の定数や被積分関数を変更する。 File: definite_integral_simpson.py 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/01/28/python-definite-integral-by-simpson/",
        "teaser": null
      },{
        "title": "Python - テイラー展開 [ exp(x) ]！",
        "excerpt":"Python 3 で\\(e ^ {x}\\)のテイラー展開を計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - テイラー展開 [ exp(x) ]！ Ruby - テイラー展開 [ exp(x) ]！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 必要であれば、スクリプト内の定数や被積分関数を変更する。 File: taylor_expansion.py 1...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/01/31/python-taylor-expansion-exp/",
        "teaser": null
      },{
        "title": "2018年1月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 40,360 66.3652 Mac OS 12,711 20.9011 Linux 3,654 6.0084 Android 2,247 3.6948 Ubuntu Linux 1,475 2.4254 unknown 172 0.2828 FreeBSD 95 0.1562 Fedora Linux 84 0.1381 Solaris 9 0.0148 Wii 5 0.0082 PlayStation 2 0.0033 3DS 1 0.0016 合　計 60,815 100.0000 2. アクセスをOS・バージョン別に集計（上位20件）...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/02/01/blog-access/",
        "teaser": null
      },{
        "title": "Python - テイラー展開 [ cos(x) ]！",
        "excerpt":"Python 3 で\\(\\cos x\\)のテイラー展開を計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - テイラー展開 [ cos(x) ]！ Ruby - テイラー展開 [ cos(x) ]！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 必要であれば、スクリプト内の定数や被積分関数を変更する。 File: taylor_expansion_cos.py 1 2...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/02/04/python-taylor-expansion-cos/",
        "teaser": null
      },{
        "title": "Python - 非線形方程式の解法（２分法）！",
        "excerpt":"Python 3 で非線形方程式を2分法を使用して解く方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 非線形方程式の解法（２分法）！ Ruby - 非線形方程式の解法（２分法）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 関数は \\(f(x) = x^{3} - x + 1 \\ \\ (-2 \\leqq...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/02/07/python-nonlinear-equation-with-bisection/",
        "teaser": null
      },{
        "title": "Python - 非線形方程式の解法（ニュートン法）！",
        "excerpt":"Python 3 で非線形方程式をニュートン法を使用して解く方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 非線形方程式の解法（ニュートン法）！ Ruby - 非線形方程式の解法（ニュートン法）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 必要であれば、スクリプト内の定数や関数を変更する。 File: nonlinear_equation_newton.py 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/02/10/python-nonlinear-equation-with-newton/",
        "teaser": null
      },{
        "title": "Python - ラグランジュ補間！",
        "excerpt":"Python 3 でラグランジュ補間を行う方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - ラグランジュ補間！ Ruby - ラグランジュ補間！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 必要であれば、スクリプト内の定数を変更する。 File: interpolate_lagrange.py 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/02/13/python-interpolation-with-lagrange/",
        "teaser": null
      },{
        "title": "Python - ニュートン補間！",
        "excerpt":"Python 3 でニュートン補間を行う方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - ニュートン補間！ Ruby - ニュートン補間！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 必要であれば、スクリプト内の定数を変更する。 File: interpolate_newton.py 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/02/16/python-interpolation-with-newton/",
        "teaser": null
      },{
        "title": "Python - 多桁計算！",
        "excerpt":"Python 3 で多桁計算を行う方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 多桁計算！ Ruby - 多桁計算！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。 File: calc_big_digits.py 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/02/19/python-big-digits-computation/",
        "teaser": null
      },{
        "title": "Python - 円周率計算（マチンの公式）！",
        "excerpt":"Python 3 でマチンの公式を利用して円周率を計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 円周率計算（by マチンの公式）！ Ruby - 円周率計算（by マチンの公式）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度のリスト計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。 多桁計算のアルゴリズムは自前で実装。 File: calc_pi_machin.py 1 2 3...","categories": ["プログラミング","数学"],
        "tags": ["Python","円周率"],
        "url": "/2018/02/22/python-pi-computation-with-machin/",
        "teaser": null
      },{
        "title": "Python - ネイピア数（自然対数の底）e 計算！",
        "excerpt":"Python 3 でネイピア数（自然対数の底）\\(e\\) を多桁計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - ネイピア数（自然対数の底）e 計算！ Ruby - ネイピア数（自然対数の底）e 計算！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。 多桁計算のアルゴリズムは自前で実装。 File: calc_napier.py 1 2...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/02/25/python-napier-computation/",
        "teaser": null
      },{
        "title": "Python - 階乗の多桁計算！",
        "excerpt":"Python 3 で階乗(n!)を多桁計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 階乗の多桁計算！ Ruby - 階乗の多桁計算！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。 多桁計算のアルゴリズムは自前で実装。 File: calc_factorial.py 1 2 3 4 5...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/02/28/python-factorial-computation/",
        "teaser": null
      },{
        "title": "2018年2月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 39,021 67.7424 Mac OS 11,449 19.8760 Linux 3,199 5.5536 Android 2,005 3.4808 Ubuntu Linux 1,611 2.7968 unknown 210 0.3646 Fedora Linux 60 0.1042 FreeBSD 42 0.0729 NetBSD 1 0.0017 PlayStation 1 0.0017 Solaris 1 0.0017 Switch 1 0.0017 Wii 1 0.0017 合　計 57,602...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/03/01/blog-access/",
        "teaser": null
      },{
        "title": "Python - 円周率計算（Klingenstierna の公式）！",
        "excerpt":"Python 3 で Klingenstierna の公式を利用して円周率を計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 円周率計算（Klingenstierna の公式）！ Ruby - 円周率計算（Klingenstierna の公式）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。 多桁計算のアルゴリズムは自前で実装。 File: calc_pi_klingenstierna.py 1...","categories": ["プログラミング","数学"],
        "tags": ["Python","円周率"],
        "url": "/2018/03/04/python-pi-computation-with-klingenstierna/",
        "teaser": null
      },{
        "title": "Python - 円周率計算（オイラーの公式）！",
        "excerpt":"Python 3 でオイラーの公式を利用して円周率を計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 円周率計算（オイラーの公式）！ Ruby - 円周率計算（オイラーの公式）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。 多桁計算のアルゴリズムは自前で実装。 File: calc_pi_euler.py 1 2 3 4 5...","categories": ["プログラミング","数学"],
        "tags": ["Python","円周率"],
        "url": "/2018/03/07/python-pi-computation-with-euler/",
        "teaser": null
      },{
        "title": "Python - 円周率計算（Arctan 系公式）！",
        "excerpt":"Python 3 で \\(\\arctan\\) 系の公式を利用して円周率を計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 円周率計算（マチンの公式）！ C++ - 円周率計算（Klingenstierna の公式）！ C++ - 円周率計算（オイラーの公式）！ C++ - 円周率計算（オイラーの公式(2)）！ これら以外に「Gauß の公式」、「Störmer の公式」２つ、「高野喜久雄の公式」もある。（アルゴリズムは8つとも同じ。計算する際の係数が異なるだけ） 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習）...","categories": ["プログラミング","数学"],
        "tags": ["Python","円周率"],
        "url": "/2018/03/10/python-pi-computation-with-arctan/",
        "teaser": null
      },{
        "title": "Python - 多桁計算（その２）！",
        "excerpt":"以前、 Python 3 で多桁計算を行う方法を紹介しました。 Python - 多桁計算！ 今回はその改良版です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 多桁計算（その２）！ Ruby - 多桁計算（その２）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。 File: calc_big_digits_2.py 1...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/03/13/python-big-digits-computation-2/",
        "teaser": null
      },{
        "title": "Python - 多桁乗算（標準（筆算）法）！",
        "excerpt":"前回、 Python 3 で多桁計算を行う方法を紹介しました。 Python - 多桁計算（その２）！ ただ、乗算は一方が多桁でもう一方が小さい桁数と限定していました。 今回は、多桁同士の乗算アルゴリズム（標準（筆算）法）を Python 3 で実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 多桁乗算（標準（筆算）法）！ Ruby - 多桁乗算（標準（筆算）法）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため）...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/03/16/python-big-digits-multiplication-normal/",
        "teaser": null
      },{
        "title": "Python - 多桁乗算（Karatsuba 法）！",
        "excerpt":"前回、 Python 3 で「標準（筆算）法」による多桁乗算アルゴリズムを実装する方法を紹介しました。 Python - 多桁乗算（標準（筆算）法）！ 今回は、「標準（筆算）法」より高速に乗算が可能な「Karatsuba 法」アルゴリズムを実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 多桁乗算（Karatsuba 法）！ Ruby - 多桁乗算（Karatsuba 法）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/03/19/python-big-digits-multiplication-karatsuba/",
        "teaser": null
      },{
        "title": "Python - 多桁乗算（Toom-Cook 法 (3-way)）！",
        "excerpt":"これまで、「標準（筆算）法」や「Karatsuba 法」による多桁同士の乗算アルゴリズムの Python への実装方法を紹介しました。 Python - 多桁乗算（標準（筆算）法）！ Python - 多桁乗算（Karatsuba 法）！ 今回は、「Karatsuba 法」の上位にある「Toom-Cook 法」アルゴリズムを実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 多桁乗算（Toom-Cook 法 (3-way)）！ Ruby - 多桁乗算（Toom-Cook 法 (3-way)）！ 2. Python スクリプトの作成...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/03/22/python-big-digits-multiplication-toom-cook-3/",
        "teaser": null
      },{
        "title": "Python - 多倍長整数の大小比較！",
        "excerpt":"Python3 で、多桁（多倍長）整数同士の大小を比較する方法についてです。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 多倍長整数の大小比較！！ Ruby - 多倍長整数の大小比較！！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。 File: compare_big_digits.py 1 2 3 4 5 6 7...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/03/25/python-big-digits-comparison/",
        "teaser": null
      },{
        "title": "Python - 多倍長浮動小数点数の加減算！",
        "excerpt":"Python3 で、多桁（多倍長）の浮動小数点同士で加減算する方法についてです。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 多倍長浮動小数点数の加減算！ Ruby - 多倍長浮動小数点数の加減算！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。 今回、 A - C &lt; 0 (A &lt; C)...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/03/28/python-big-digits-float-addition/",
        "teaser": null
      },{
        "title": "Python - フーリエ級数展開！",
        "excerpt":"Python3 で、フーリエ級数展開を実装する方法についてです。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - フーリエ級数展開！ Ruby - フーリエ級数展開！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。（N は計算項数） File: fourier_series_expansion.py 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/03/31/python-fourier-series-expansion/",
        "teaser": null
      },{
        "title": "2018年3月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 32,587 69.2515 Mac OS 8,851 18.8095 Linux 2,719 5.7782 Android 1,481 3.1473 Ubuntu Linux 1,124 2.3886 unknown 157 0.3336 Fedora Linux 69 0.1466 FreeBSD 37 0.0786 Solaris 16 0.0340 Debian GNU/Linux 5 0.0106 NetBSD 4 0.0085 3DS 3 0.0064 Wii 2 0.0043 PlayStation...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/04/01/blog-access/",
        "teaser": null
      },{
        "title": "Python - （離散）フーリエ変換！",
        "excerpt":"Python3 で、（離散）フーリエ変換を実装する方法についてです。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - （離散）フーリエ変換！ Ruby - （離散）フーリエ変換！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy を使用しない。（この程度の計算では、逆に2倍程度時間がかかってしまうため） 必要であれば、スクリプト内の定数を変更する。（N は分割数） File: discrete_fourier_transform.py 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/04/04/python-discrete-fourier-transform/",
        "teaser": null
      },{
        "title": "Python - 連立方程式解法（ガウス・ジョルダン法）！",
        "excerpt":"Python3 で、「ガウス・ジョルダン法」による連立方程式の解法を実装する方法についてです。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 連立方程式解法（ガウス・ジョルダン法）！ Ruby - 連立方程式解法（ガウス・ジョルダン法）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は List で充分） 必要であれば、スクリプト内の定数を変更する。（解きたい連立方程式に合わせて） File: gauss_jorden.py 1 2 3 4 5...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/04/07/python-simultaneous-equations-with-gauss-jorden/",
        "teaser": null
      },{
        "title": "Python - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！",
        "excerpt":"Python3 で、「ガウス・ジョルダン（ピボット選択）法」による連立方程式の解法を実装する方法についてです。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！ Ruby - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は List で充分） 必要であれば、スクリプト内の定数を変更する。（解きたい連立方程式に合わせて） File: gauss_jorden_pivot.py 1 2 3 4 5...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/04/10/python-simultaneous-equations-with-gauss-jorden-pivot/",
        "teaser": null
      },{
        "title": "Python - 連立方程式解法（ガウスの消去法）！",
        "excerpt":"Python3 で、「ガウスの消去法」による連立方程式の解法を実装する方法についてです。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 連立方程式解法（ガウスの消去法）！ Ruby - 連立方程式解法（ガウスの消去法）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は List で充分） 必要であれば、スクリプト内の定数を変更する。（解きたい連立方程式に合わせて） File: gauss_elimination.py 1 2 3 4 5...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/04/13/python-simultaneous-equations-with-gauss-elimination/",
        "teaser": null
      },{
        "title": "Python - 線形計画法（シンプレックス法）！",
        "excerpt":"今回は、線形計画法を「シンプレックス法」で解くアルゴリズムを Python3 で実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 線形計画法（シンプレックス法）！ Ruby - 線形計画法（シンプレックス法）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は List で充分） 必要であれば、スクリプト内の定数を変更する。（実装したい線形計画法に合わせて） File: linear_programming_simplex.py 1 2 3 4...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/04/16/python-linear-programming-with-simplex/",
        "teaser": null
      },{
        "title": "Python - 最小二乗法！",
        "excerpt":"今回は、近似方程式を「最小二乗法」で解くアルゴリズムを Python3 で実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - 最小二乗法！ Ruby - 最小二乗法！ Fortran - 最小二乗法！ Java - 最小二乗法！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は List で充分） 必要であれば、スクリプト内の定数を変更する。（解きたい近似方程式に合わせて）...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/04/19/python-approximate-equation-with-least-squares-method/",
        "teaser": null
      },{
        "title": "Python - ヒープ生成（上方・下方移動）！",
        "excerpt":"今回は、ヒープ（上方移動・下方移動）のアルゴリズムを Python3 で実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - ヒープ生成（上方移動）！ C++ - ヒープ生成（下方移動）！ Ruby - ヒープ生成（上方・下方移動）！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は List で充分） 必要であれば、スクリプト内の定数を変更する。 File: heap_upward.py 1...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/04/22/python-heap-generation-with-upward-downward-method/",
        "teaser": null
      },{
        "title": "Python - ソート処理各種テスト！",
        "excerpt":"今回は、各種ソート処理のアルゴリズムを Python3 で実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 C++ - ソート処理各種テスト！ Ruby - ソート処理各種テスト！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は List で充分） 必要であれば、スクリプト内の定数を変更する。 File: sort_test.py 1 2 3 4...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/04/25/python-sorting-test/",
        "teaser": null
      },{
        "title": "Python - 2 つの list から相関係数計算！",
        "excerpt":"Python で、数値からなる同サイズの list 2つを2つの確率変数とみなして相関係数を計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 Ruby - Array クラス拡張で相関係数計算！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は list で充分） File: correlation_coefficient.py 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/04/28/python-correlation-coefficient-computation/",
        "teaser": null
      },{
        "title": "2018年4月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 31,993 68.6781 Mac OS 8,896 19.0967 Linux 2,679 5.7509 Android 1,730 3.7137 Ubuntu Linux 1,043 2.2390 unknown 100 0.2147 Fedora Linux 63 0.1352 FreeBSD 53 0.1138 Solaris 24 0.0515 Chrome OS 1 0.0021 Debian GNU/Linux 1 0.0021 Switch 1 0.0021 合　計 46,584 100.0000...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/05/01/blog-access/",
        "teaser": null
      },{
        "title": "Python - 2 つの list から単回帰直線計算！",
        "excerpt":"Python で、数値からなる同サイズの list 2つを説明変数・目的変数とみなして単回帰直線を計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 Ruby - Array クラス拡張で単回帰直線計算！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は list で充分） File: regression_line.py 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/05/02/python-regression-line-computation/",
        "teaser": null
      },{
        "title": "Python - 2 つの list から重回帰式計算！",
        "excerpt":"Python で、説明（独立）変数２個以上、目的（従属）変数１個の「重回帰式」を計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 Ruby - Array クラス拡張で重回帰式計算！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は list で充分） File: regression_multi.py 1 2 3 4 5 6 7 8...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/05/05/python-multiple-regression-equation-computation/",
        "teaser": null
      },{
        "title": "Python - 2 つの list から重回帰式計算（NumPy 版）！",
        "excerpt":"前回、 Python で説明（独立）変数２個以上、目的（従属）変数１個の「重回帰式」を計算する方法についての紹介しました。（連立方程式の解法にはガウスの消去法を使用） Python - 2 つの list から重回帰式計算！ 今回は、重回帰式を数値計算ライブラリ NumPy を使用して計算してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 数値計算ライブラリ NumPy を使用。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 Ruby - Array クラス拡張で重回帰式計算！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: regression_multi_numpy.py...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/05/07/python-multiple-regression-equation-computation-with-numpy/",
        "teaser": null
      },{
        "title": "Python - べき剰余アルゴリズムの実装！",
        "excerpt":"こんにちは。 以前、 C++ や Ruby で「べき剰余」のアルゴリズムを実装しました。 C++ - べき剰余アルゴリズムの実装！ Ruby - べき剰余アルゴリズムの実装！ 今回は Python で実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. べき剰余、べき剰余演算アルゴリズムについて 当ブログ過去記事を参照。 C++ - べき剰余アルゴリズムの実装！ 2. Python スクリプトの作成 まず、非再帰的な記述方法で作成。 File: modular_exponentiation_1.py 1 2 3...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/05/10/python-modular-exponentiation-computation/",
        "teaser": null
      },{
        "title": "Python - ３次スプライン補間！",
        "excerpt":"過去に「３次スプライン補間」を Ruby で実装しました。 Ruby - ３次スプライン補間！ 今回は、 Python3 で実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 グラフ描画に PyPI ライブラリ matplotlib を使用する。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. ３次スプライン補間について 当ブログ過去記事を参照。 Ruby - ３次スプライン補間！ 2. PyPI ライブラリ matplotlib のインストール $ sudo pip install matplotlib...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/05/13/python-spline-interpolation/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線計算！",
        "excerpt":"以前、 Ruby の Array クラスを拡張して単回帰直線を計算してみました。 Ruby - Array クラス拡張で単回帰直線計算！ 今回は、同様に Ruby の Array クラスを拡張して回帰式が2次の単回帰曲線を計算してみました。（「直線」でなく「曲線」 0. 前提条件 Ruby 2.5.0-p0 での作業を想定。 1. 単回帰曲線について 単回帰直線の一般形の部分を2次曲線 \\(y = a + bx + cx^{2}\\) として考えるだけ。 Ruby - Array クラス拡張で単回帰直線計算！ 連立方程式を解くと、\\(a,b,c\\) は最終的に以下のようになる。 \\[\\begin{align} B &amp;= \\frac{S_{xy}S_{x^2x^2} - S_{x^2y}S_{xx^2}}{S_{xx}S_{x^2x^2} - (S_{xx^2})^2} \\\\ C &amp;= \\frac{S_{x^2y}S_{xx} - S_{xy}S_{xx^2}}{S_{xx}S_{x^2x^2}...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2018/05/16/ruby-simple-linear-regression-curve/",
        "teaser": null
      },{
        "title": "Python - 2 つの list から単回帰曲線（二次回帰）計算！",
        "excerpt":"Python で、数値からなる同サイズの list 2つを説明変数・目的変数とみなして単回帰曲線（二次回帰）を計算する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. アルゴリズムについて 当ブログ過去記事を参照。 Ruby - Array クラス拡張で単回帰曲線計算！ 2. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 数値計算ライブラリ NumPy は使用しない。（この程度の行列計算は list で充分） File: regression_curve.py 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/05/18/python-regression-curve-computation/",
        "teaser": null
      },{
        "title": "Python - 円周率計算（Chudnovsky の公式使用）！",
        "excerpt":"こんにちは。 以前、 C++ や Ruby で Chudnovsky の公式を使用して円周率を計算しました。（任意精度算術ライブラリ GMP(The GNU Multi Precision Arithmetic Library) を使用） C++ - 円周率計算（Chudnovsky の公式使用）！ Ruby - 円周率計算（Chudnovsky の公式使用）！ 今回は、同じことを Python で実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 演算には GMP(The GNU Multi Precision Arithmetic Library) 任意精度算術ライブラリを Python 用にラップした...","categories": ["プログラミング","数学"],
        "tags": ["Python","円周率"],
        "url": "/2018/05/21/python-pi-computation-by-chudnovsky-bsa-with-gmp/",
        "teaser": null
      },{
        "title": "Ruby, Python - XML(XPath) 解析速度検証(Nokogiri, lxml)！",
        "excerpt":"Ruby の XML パーサ Nokogiri で XML 解析した場合と、 Python の XML パーサ lxml で XML 解析した場合の実行速度の差を検証してみました。 0. 前提条件 Ruby 2.5.0, Python 3.6.4 での作業を想定。 Ruby 用 XML パーサ Nokogiri がインストール済みであること。 Python 用 XML パーサ lxml がインストール済みであること。 以下で紹介する検証結果は、使用する XML の構造等により若干異なることもあるかもしれない、ということに留意。 1. 検証に使用する XML ファイル 以下のような XML を使用する。（実際の「気象庁防災情報 XML」通知用 Atom フィードを流用） File: test.xml...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2018/05/24/verify-xml-parsing-ruby-nokogiri-python-lxml/",
        "teaser": null
      },{
        "title": "Python - 2 つの list から単回帰（1〜4次）計算＆比較！",
        "excerpt":"先日、 Python で2つの list から単回帰曲線（二次回帰）を計算するアルゴリズムを実装しましたが、今回は、同じ2つの list で、単回帰直線（1次）、単回帰曲線（2〜4次）を計算して、結果を比較してました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 単回帰直線、単回帰曲線の計算には、数値計算ライブラリ NumPy を使用。 グラフ描画に matplotlib を使用。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. Python スクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 毎回同じ結果になるよう random.seed() を指定している。 File: regression_line_curve.py 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Python"],
        "url": "/2018/05/27/python-regression-line-curve-computation/",
        "teaser": null
      },{
        "title": "Python - デーモンの作成！",
        "excerpt":"Python でデーモンスクリプトを作成する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 PyPI ライブラリ python-damon を使用。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. PyPI ライブラリ python-damon のインストール $ pip3.6 install python-daemon 2. Python サンプルスクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: test_daemon.py 1 2 3 4 5 6 7...","categories": ["プログラミング"],
        "tags": ["Python"],
        "url": "/2018/05/30/python-daemon/",
        "teaser": null
      },{
        "title": "2018年5月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 38,787 68.1370 Mac OS 11,376 19.9842 Linux 3,024 5.3123 Android 2,186 3.8401 Ubuntu Linux 1,255 2.2047 unknown 155 0.2723 Fedora Linux 60 0.1054 FreeBSD 47 0.0826 Solaris 27 0.0474 NetBSD 3 0.0053 PlayStation 3 0.0053 Debian GNU/Linux 1 0.0018 Wii 1 0.0018 合　計...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/06/01/blog-access/",
        "teaser": null
      },{
        "title": "Python - 割り込み処理！",
        "excerpt":"Python で、実行中のプロセスを割り込み処理により中断する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. Python サンプルスクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: test_signal.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20...","categories": ["プログラミング"],
        "tags": ["Python"],
        "url": "/2018/06/02/python-interrupt-handling-by-signal/",
        "teaser": null
      },{
        "title": "Python - 外部コマンドの実行(by subprocess)！",
        "excerpt":"Python で外部コマンドを実行する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 公式にサブプロセスを起動する手段として推奨されている標準モジュールライブラリ subprocess を使用する。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） 1. Python サンプルスクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 以下は、 ls -l というオプション付きのコマンドの実行例。 前半は、 run メソッドで単純に実行する例で、標準出力を行い、結果として実行コマンドのリストと終了コードを捕捉する。 後半は、 run メソッドをオプション付きで実行する例で、標準出力は行わず、結果として実行コマンドのリストと終了コードに加え、標準出力も補足する。 File: test_subprocess.py 1 2 3 4 5 6 7...","categories": ["プログラミング"],
        "tags": ["Python"],
        "url": "/2018/06/05/python-external-command-by-subprocess/",
        "teaser": null
      },{
        "title": "Python - URL 短縮 (bitly)！",
        "excerpt":"Python で、 URL 短縮サービス bitly の API を使用して URL を短縮する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） PyPI ライブラリ requests を使用する。 bitly API のアクセストークンが必要なので、取得しておく。 （過去記事参照： bitly - OAuth 認証アクセストークン取得！） 1. PyPI ライブラリ requests のインストール $ sudo pip3.6...","categories": ["プログラミング"],
        "tags": ["Python","bitly"],
        "url": "/2018/06/08/python-url-shorten-with-bitly-api/",
        "teaser": null
      },{
        "title": "Python - URL 短縮 (TinyURL)！",
        "excerpt":"Python で、 URL 短縮サービス TinyURL の API を使用して URL を短縮する方法についての記録です。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 での作業を想定。 当方は他のバージョンとの共存環境であり、 python3.6, pip3.6 で 3.6 系を使用するようにしている。（適宜、置き換えて考えること） PyPI ライブラリ requests を使用する。 1. PyPI ライブラリ requests のインストール $ sudo pip3.6 install requests 2. Python サンプルスクリプトの作成 敢えてオブジェクト指向で作成している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習）...","categories": ["プログラミング"],
        "tags": ["Python","TinyURL"],
        "url": "/2018/06/10/python-url-shorten-with-tinyurl-api/",
        "teaser": null
      },{
        "title": "Python - 全角文字を2バイト換算して指定バイト数で切り捨て！",
        "excerpt":"以前、 Ruby で文字列内の全角文字（正確には、「全角文字」ではなく、2バイト以上の文字）を2バイト換算し、指定バイト数で切り捨てる方法について紹介しました。 Ruby - 全角文字を2バイト換算して指定バイト数で切り捨て！ 今回は、同様のアルゴリズムを Python で実装してみました。 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 （エンコード：UTF-8）での作業を想定。 1. サンプルスクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） 切り捨てたたことが分かるよう文字を設定することも可能にしている。 File: str_trunc.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20...","categories": ["プログラミング"],
        "tags": ["Python"],
        "url": "/2018/06/13/python-wide-string-truncate/",
        "teaser": null
      },{
        "title": "Python - JPL 天文暦バイナリデータの読み込み！",
        "excerpt":"以前、 NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 のバイナリ形式のデータを Ruby で読み込んでみました。 Ruby - JPL 天文暦バイナリデータの読み込み！ 今回は、 Python で同様の実装をしてみました。（Python でのバイナリデータの読み込み方法に関する記録と考えてもよい） 0. 前提条件 LMDE 2 (Linux Mint Debian Edition 2; 64bit) での作業を想定。 Python 3.6.4 （エンコード：UTF-8）での作業を想定。 使用するバイナリ形式データは、テキスト形式データ “ascp1950.430”, “ascp2050.430” を「JPL 天文暦データのバイナリ化！」の方法でバイナリ化したもの。（ファイル名は “JPLEPH” に変更） バイナリ形式データの仕様については「JPL 天文暦バイナリデータの仕様！」を参照。 1. Python スクリプトの作成 File: jpl_read_de430.py 1 2 3...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Python"],
        "url": "/2018/06/16/python-read-jpl-bin-data/",
        "teaser": null
      },{
        "title": "Ruby - ローレンツ・アトラクタ（Euler 法）！",
        "excerpt":"Ruby でローレンツ・アトラクタを描画してみました。 （微分方程式の近似解法には Euler（オイラー）法を使用） 0. 前提条件 Ruby 2.5.0-p0 での作業を想定。 1. ローレンツ方程式／アトラクタとは 「ローレンツ方程式」とは、気象学者「エドワード・Ｎ・ローレンツ(Edward N. Lorenz)」が作成した力学系方程式をより単純化した、次のような非線形微分方程式。 パラメータ p, r, b をほんの少し変えるだけで、これらの方程式から得られる軌跡は大きく異なったものになる。 \\[\\begin{eqnarray} \\frac{dx}{dt} &amp;=&amp; -px+py \\\\ \\frac{dy}{dt} &amp;=&amp; -xz+rx-y \\\\ \\frac{dz}{dt} &amp;=&amp; xy-bz \\end{eqnarray}\\] 「ローレンツ方程式」は、カオス理論を学習する際に序盤で登場する方程式で、カオス研究の先駆的なもの。 「アトラクタ」とは、ある力学系がそこに向かって時間発展する集合のことで、カオス理論における研究課題の一つ。 「ローレンツ・アトラクタ」とは、ストレンジ・アトラクタの一種。 「ローレンツ・アトラクタ」は、言い換えれば、「ローレンツ方程式のカオスのストレンジ・アトラクタ」である。 2. Euler（オイラー）法とは 微分方程式の近似解法の中で計算が比較的簡単なものだが、その分、計算も粗い。 実際の研究等で使用されることはほとんどない。 近似解法の概念を理解するための一助にはなる。 ここでは、 Euler 法の詳細については説明しない。 3. Ruby スクリプト作成 数値演算ライブラリ NArray は使用しない。（使用するほどでもないので）...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2018/06/19/ruby-lorenz-attractor-with-euler-method/",
        "teaser": null
      },{
        "title": "Ruby - ローレンツ・アトラクタ（Runge-Kutta 法）！",
        "excerpt":"前回、微分方程式の近似解法に Euler（オイラー）法を使用して、ローレンツ・アトラクタを計算＆描画してみました。（Ruby で） Ruby - ローレンツ・アトラクタ（Euler 法）！ 今回は、微分方程式の近似解法に Runge-Kutta（ルンゲ＝クッタ）法を使用して、計算＆描画してみました。（Ruby で） 0. 前提条件 Ruby 2.5.0-p0 での作業を想定。 1. ローレンツ方程式／アトラクタとは 「ローレンツ方程式」とは、気象学者「エドワード・Ｎ・ローレンツ(Edward N. Lorenz)」が作成した力学系方程式をより単純化した、次のような非線形微分方程式。 パラメータ p, r, b をほんの少し変えるだけで、これらの方程式から得られる軌跡は大きく異なったものになる。 \\[\\begin{eqnarray} \\frac{dx}{dt} &amp;=&amp; -px+py \\\\ \\frac{dy}{dt} &amp;=&amp; -xz+rx-y \\\\ \\frac{dz}{dt} &amp;=&amp; xy-bz \\end{eqnarray}\\] 「ローレンツ方程式」は、カオス理論を学習する際に序盤で登場する方程式で、カオス研究の先駆的なもの。 「アトラクタ」とは、ある力学系がそこに向かって時間発展する集合のことで、カオス理論における研究課題の一つ。 「ローレンツ・アトラクタ」とは、ストレンジ・アトラクタの一種。 「ローレンツ・アトラクタ」は、言い換えれば、「ローレンツ方程式のカオスのストレンジ・アトラクタ」である。 2. Runge-Kutta（ルンゲ＝クッタ）法とは Euler 法よりは計算に時間がかかるが、その分、精度も高い。 実際の研究等では、 Euler 法ではなく Runge-Kutta...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2018/06/22/ruby-lorenz-attractor-with-runge-kutta-method/",
        "teaser": null
      },{
        "title": "Python - ローレンツ・アトラクタ（Euler 法）！",
        "excerpt":"先日、 Ruby でローレンツ・アトラクタを計算＆描画しました。 Ruby - ローレンツ・アトラクタ（Euler 法）！ Ruby - ローレンツ・アトラクタ（Runge-Kutta 法）！ 今回は、 Python でローレンツ・アトラクタを計算＆描画してみました。（微分方程式の近似解法には、同じく Euler（オイラー）法を使用） 0. 前提条件 Python 3.6.4 （エンコード：UTF-8）での作業を想定。 1. ローレンツ方程式／アトラクタとは 「ローレンツ方程式」とは、気象学者「エドワード・Ｎ・ローレンツ(Edward N. Lorenz)」が作成した力学系方程式をより単純化した、次のような非線形微分方程式。 パラメータ p, r, b をほんの少し変えるだけで、これらの方程式から得られる軌跡は大きく異なったものになる。 \\[\\begin{eqnarray} \\frac{dx}{dt} &amp;=&amp; -px+py \\\\ \\frac{dy}{dt} &amp;=&amp; -xz+rx-y \\\\ \\frac{dz}{dt} &amp;=&amp; xy-bz \\end{eqnarray}\\] 「ローレンツ方程式」は、カオス理論を学習する際に序盤で登場する方程式で、カオス研究の先駆的なもの。 「アトラクタ」とは、ある力学系がそこに向かって時間発展する集合のことで、カオス理論における研究課題の一つ。 「ローレンツ・アトラクタ」とは、ストレンジ・アトラクタの一種。 「ローレンツ・アトラクタ」は、言い換えれば、「ローレンツ方程式のカオスのストレンジ・アトラクタ」である。 2. Euler（オイラー）法とは 微分方程式の近似解法の中で計算が比較的簡単なものだが、その分、計算も粗い。...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2018/06/25/python-lorenz-attractor-with-euler-method/",
        "teaser": null
      },{
        "title": "Python - ローレンツ・アトラクタ（Runge-Kutta 法）！",
        "excerpt":"先日、 Ruby でローレンツ・アトラクタを計算＆描画しました。 Ruby - ローレンツ・アトラクタ（Euler 法）！ Ruby - ローレンツ・アトラクタ（Runge-Kutta 法）！ そして、前回、 Python で微分方程式の近似解法に Euler（オイラー）法を使用して、ローレンツ・アトラクタを計算＆描画しました。 Python - ローレンツ・アトラクタ（Euler 法）！ 今回は、微分方程式の近似解法に Runge-Kutta（ルンゲ＝クッタ）法を使用して、計算＆描画してみました。（Python で） 0. 前提条件 Python 3.6.4 （エンコード：UTF-8）での作業を想定。 1. ローレンツ方程式／アトラクタとは 「ローレンツ方程式」とは、気象学者「エドワード・Ｎ・ローレンツ(Edward N. Lorenz)」が作成した力学系方程式をより単純化した、次のような非線形微分方程式。 パラメータ p, r, b をほんの少し変えるだけで、これらの方程式から得られる軌跡は大きく異なったものになる。 \\[\\begin{eqnarray} \\frac{dx}{dt} &amp;=&amp; -px+py \\\\ \\frac{dy}{dt} &amp;=&amp; -xz+rx-y \\\\ \\frac{dz}{dt} &amp;=&amp; xy-bz \\end{eqnarray}\\]...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2018/06/28/python-lorenz-attractor-with-runge-kutta-method/",
        "teaser": null
      },{
        "title": "2018年6月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"7月になりましたので、先月6月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 37,631 68.9857 Mac OS 10,577 19.3899 Linux 3,067 5.6225 Android 1,885 3.4556 Ubuntu Linux 1,146 2.1009 unknown 159 0.2915 Fedora Linux 45 0.0825 FreeBSD 18 0.0330 Solaris 18 0.0330 NetBSD 1 0.0018 PlayStation 1 0.0018 Wii 1 0.0018 合　計 54,549 100.0000 2. アクセスをOS・バージョン別に集計（上位20件）...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/07/01/blog-access/",
        "teaser": null
      },{
        "title": "Python - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！",
        "excerpt":"海上保安庁・海洋情報部から「コンピュータによる天体の位置計算式」という標題で、計算方法や計算に必要な係数が公開さいれています。 以前、 Ruby で実装しました。 Ruby - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！ Ruby - 太陽・月の視黄経・視黄緯等の計算（海保略算式版）！ 今回は、 Python で実装してみました。（アルゴリズムや実装ロジックは同じ） 0. 前提条件 Python 3.6.4 での作業を想定。 1. 計算方法 「コンピュータによる天体の位置計算式」のページにある「平成30年版・解説と計算例」等のとおりなので、そちらを参照のこと。 2. Python スクリプトの作成 プログラムの流れは、解説資料の流れとほぼ同じ。 （プログラム中、 R.A. は「視赤経」、 DEC. は「視赤緯」、 DIST. は「地心距離」、 H.P. は「視差」、 hG. は「グリニジ時角」、 S.D. は「視半径」、 EPS. は「黄道傾斜角」という意味で使用している） File: eph_sun_moon.py 1 2 3 4 5 6 7 8...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Python"],
        "url": "/2018/07/02/python-calc-ephemeris-by-kaiho/",
        "teaser": null
      },{
        "title": "Python - 太陽・月の視黄経・視黄緯等の計算（海保略算式版）！",
        "excerpt":"前回、 Python で、海上保安庁・海洋情報部の「コンピュータによる天体の位置計算式」を利用して、太陽や月の視赤経や視赤緯等を計算してみました。 Python - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！ 今回は、太陽・月の視赤経・視赤緯を視黄経・視黄緯に変換してみました。 0. 前提条件 Python 3.6.4 での作業を想定。 1. 計算方法 視黄経・視黄緯の変換以外の部分は、「Ruby - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！」のままなので、そちらを参照のこと。 赤経・赤緯から黄経・黄緯への変換については、過去記事の「赤道座標と黄道座標、直交座標と極座標の変換！」を参照のこと。 2. Python スクリプトの作成 （プログラム中、 R.A. は「視赤経」、 DEC. は「視赤緯」、 DIST. は「地心距離」、 H.P. は「視差」、 hG. は「グリニジ時角」、 S.D. は「視半径」、 EPS. は「黄道傾斜角」、 ALPHA は「視赤経」、 DELTA は「視赤緯」、 LAMBDA は「視黄経」、 BETA は「視黄緯」という意味で使用している） File: eph_sun_moon_ecliptic.py 1 2 3 4...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Python"],
        "url": "/2018/07/05/python-calc-ecliptic-ephemeris-by-kaiho/",
        "teaser": null
      },{
        "title": "Python - JPL 天文暦データから ICRS 座標を計算！",
        "excerpt":"以前、 NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 のバイナリ形式のデータを Ruby で読み込み、さらに、読み込んだデータから ICRS 座標を計算する Ruby スクリプトを作成しました。 Ruby - JPL 天文暦データから ICRS 座標を計算！ 今回は、同様のことを Python で実現してみました。 0. 前提条件 Python 3.6.5 での作業を想定。 計算には NASA の機関 JPL の提供するバイナリデータを使用するので、以下で紹介するスクリプトと同じディレクトリ内にファイル名 “JPLEPH” として配置しておく。（バイナリデータの準備については「JPL 天文暦データのバイナリ化！」を参照） 1. 計算方法 計算方法は、過去記事（＆記事内のリンク）を参照。 Ruby - JPL 天文暦データから ICRS 座標を計算！ 2. Python スクリプトの作成 スクリプトは、本体...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Python","カレンダー"],
        "url": "/2018/07/08/python-calc-jpl-icrs-coordinate/",
        "teaser": null
      },{
        "title": "Python - 平均黄道傾斜角の計算！",
        "excerpt":"以前、 Ruby で平均黄道傾斜角の計算を実装しました。 Ruby - 平均黄道傾斜角の計算！ 今回は、同様のことを Python で実現してみました。 0. 前提条件 Python 3.6.5 での作業を想定。 1. 計算方法 計算方法等については、過去記事を参照。 Ruby - 平均黄道傾斜角の計算！ 2. Python スクリプトの作成 File: mean_obliquity_ecliptic.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Python","カレンダー"],
        "url": "/2018/07/11/python-calc-mean-obliquity-ecliptic/",
        "teaser": null
      },{
        "title": "Python - 章動の計算（IAU2000A 理論）！",
        "excerpt":"こんばんは。 以前、天体位置の回転に使用する章動を Ruby で実装して計算してみました。（IAU2000A 理論を使用） Ruby - 章動の計算（IAU2000A 理論）！ 今回は、同じアルゴリズムを Python で実装してみました。 0. 前提条件、事前知識 Python 3.6.5 での作業を想定。 章動の計算には、 IAU SOFA(International Astronomical Union, Standards of Fundamental Astronomy) の提供する C ソースコードに実装されているアルゴリズム “nut00a.c” を使用する。 IAU SOFA のソースコードには、 MHB2000(Mathews-Herring-Buffett, 2000) の理論や IERS2003(International Earth Rotation &amp; Reference Systems service, 2003) の理論の使用が混在していることに留意。 ここでは「章動（しょうどう）」そのものが何かについては詳細には説明しないが、簡単に説明すると、章動には 黄経における章動(\\(\\Delta\\psi\\)) 黄道傾斜における章動(\\(\\Delta\\varepsilon\\)) があり、それぞれが...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Python","カレンダー"],
        "url": "/2018/07/14/python-calc-nutation-by-iau2000a/",
        "teaser": null
      },{
        "title": "Python - 地球自転速度補正値 ΔT の計算！",
        "excerpt":"地球自転速度補正値 delta T (ΔT) の計算式が NASA - Polynomial Expressions for Delta T に掲載されていますので、 Python で実装しました。(-1900年〜3000年対応） さらに、1972年から2018年までは、うるう秒実施日一覧: NICT - 日本標準時プロジェクトで公開されている「うるう秒」に 32.184(= TT（地球時） - TAI（国際原子時）) を加算した値とも比較できるようにしてみました。 各種時刻系については、当ブログ過去記事等をご参照ください。 Ruby - 各種時刻系の換算！ ちなみに、過去に同じことを Ruby で行っています。 Ruby - 地球自転速度補正値 ΔT の計算！ 0. 前提条件 Python 3.6.5 での作業を想定。 NASA の計算式で計算できる西暦は -1900年から3000年。 （AD元年の前年はBC元年なので、今回の計算上の 0年 は BC1年、 -1900年 は...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Python"],
        "url": "/2018/07/17/python-delta-t-calculation/",
        "teaser": null
      },{
        "title": "Python - グリニッジ恒星時の計算（IAU2006 理論）！",
        "excerpt":"グリニッジ視恒星時(GAST; Greenwich Apparent Sidereal Time)、グリニッジ平均恒星時(GMST; Greenwich Mean Sidereal Time)、分点均差(EE; Equation of Equinoxes)の計算を Python で実装してみました。（使用するのは IAU2006 理論 等） 0. 前提条件、事前知識 グリニッジ時刻の計算には、 IAU SOFA(International Astronomical Union, Standards of Fundamental Astronomy) の提供する C ソースコードに実装されている数々のアルゴリズムを使用する。 IAU SOFA のソースコードには、 MHB2000(Mathews-Herring-Buffett, 2000) の理論や IERS2003(International Earth Rotation &amp; Reference Systems service, 2003) の理論の使用が混在していることに留意。 ここでは「グリニッジ時刻」そのものが何かについては詳細には説明しない。 また、算出アルゴリズムについてもここでは詳細には説明しない。（と言うより、煩雑で自分には説明できない） 参考サイトやソーススクリプトを参照のこと。 グリニッジ時刻の計算に使用する章動の計算は、過去記事「Ruby...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Python"],
        "url": "/2018/07/20/python-calc-greenwich-sidereal-time/",
        "teaser": null
      },{
        "title": "Python - 各種時刻系の変換！",
        "excerpt":"以前、 Ruby で各種時刻系を変換するスクリプトを作成しました。 Ruby - 各種時刻系の換算！ 今回は、同様のことを Python で行ってみました。 0. 前提条件 Python 3.6.5 での作業を想定。 天文学的な計算については疎いため、誤りがあるかもしれない。 1. 各種時刻系について 原子時系（世界時系を含む）、力学時系、座標時系の順に記述。 TAI（国際原子時; International Atomic Time） UTC（協定世界時）を含む他の時刻基準の計算の基となる基礎的な国際時刻基準。 原子時計によって定義される高精度＆安定、地球ジオイド面での時刻系。 1 秒は SI 秒。 UT（世界時; Universal Time） ロンドンの旧グリニッジ天文台を通る子午線上で、平均太陽（平均的な動きの太陽）が南中する瞬間を12時として定義されている。 UT0, UT1, UT2, UTC の種類がある。 単に UT と呼んだ場合は UT1 を指すことが多い。 UT0（世界時0; Universal Time 0） 世界各地の恒星や地球外の電波源の日周運動の観測結果を経度の差によって本初子午線における換算し平均して求めた時刻系。 極運動の効果（地球の地理学的極と自転軸の極とのずれ）の補正を含まない。（特定の観測地での地球自転に基づく時刻） UT1（世界時1; Universal...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Python"],
        "url": "/2018/07/23/python-calc-time-series/",
        "teaser": null
      },{
        "title": "Python - 赤道・黄道座標の変換！",
        "excerpt":"以前、赤道直交座標と黄道直交座標を相互に変換したり、直交座標と極座標を相互に変換したりする RubyGems ライブラリを作成しました。 Ruby - 赤道・黄道座標の変換（by 自作 gem ライブラリ）！ 今回は、同様のことを Python で行ってみました。（但し、PyPI ライブラリではない） 0. 前提条件 Python 3.6.5 での作業を想定。 天文学的な計算については疎いため、誤りがあるかもしれない。 1. アルゴリズムについて 過去記事を参照。 赤道座標と黄道座標、直交座標と極座標の変換！ 2. Python スクリプトの作成 ライブラリ内で NumPy の matrix を使用。 次のスクリプトは実行部分。 File: conv_coord.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Python"],
        "url": "/2018/07/26/python-coordinate-conversion/",
        "teaser": null
      },{
        "title": "Python - カレンダ計算ライブラリの作成！",
        "excerpt":"Python でカレンダー（旧暦等）を計算するためのライブラリを作成しました。 過去に Ruby で同様のライブラリを作成したこともありましたが。 Category: 暦・カレンダー - mk-mode BLOG 内容が濃いので、作成したという紹介のみに留める。 0. 前提条件 Python 3.6.5 での動作を想定。 天文学的な計算については疎いため、誤りがあるかもしれない。 数値計算ライブラリ NumPy を使用するのでインストールしておく。 1. ライブラリについて GitHub で公開しているので、以下のリンク先の README.txt を参照。 komasaru/CalendarPy: Python scripts to calculate calendar. README.txt でも説明しているとおり、ライブラリの本質は lib ディレクトリ配下のスクリプトである。 2. その他 うるう秒、 DUT1 の情報は、随時最新のものに更新する予定。（Ruby 版ライブラリ同様に） これまで Rails(Ruby) で公開していたカレンダ関連のツールも Python 版に入れ替えました。（Rails 側から、 Ruby スクリプトでなく...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Python"],
        "url": "/2018/07/29/python-calendar-library/",
        "teaser": null
      },{
        "title": "2018年7月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"8月になりましたので、先月7月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 35,389 69.9567 Mac OS 9,325 18.4336 Linux 2,568 5.0764 Android 1,728 3.4159 Ubuntu Linux 1,250 2.4710 unknown 146 0.2886 Fedora Linux 123 0.2431 FreeBSD 38 0.0751 Solaris 11 0.0217 PlayStation 6 0.0119 NetBSD 3 0.0059 合　計 50,587 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/08/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - JPL DE430 データから太陽・月の視位置を計算（自作 gem ライブラリ）（その２）！",
        "excerpt":"以前、太陽と月の視位置を高精度で計算するための RubyGems ライブラリを作成したことを紹介しました。 Ruby - JPL DE430 データから太陽・月の視位置を計算（by 自作 gem ライブラリ）！ 視半径や（地平）視差の計算はしておりませんでしたが、今回それらも計算するよう処理を追加したので、改めて記録として残しておきます。 0. 前提条件 Ruby 2.5.1-p57 での作業を想定。 自作した RubyGems ライブラリは mk_apos （このライブラリ内では、他の自作ライブラリ eph_jpl, eph_bpn, mk_time, mk_coord も使用している） 1. 事前準備 JPL DE430 のデータを使用するので、バイナリデータ “linux_p1550p2650.430” をこちらから取得し “JPLEPH” とリネームして適当なディレクトリに配置しておく。 ただし、このバイナリファイルはサイズが大きいので、必要な年代のテキストデータのみをマージ＆バイナリ化してもよい。（参考：JPL 天文暦データのバイナリ化！） 2. Ruby スクリプトの作成例 FILE_BIN の値は、 “JPLEPH” の配置場所に合わせて編集すること。 File: apparent_sun_moon_jpl.rb 1 2 3...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby","RubyGems"],
        "url": "/2018/08/02/ruby-sun-moon-apparent-position-calculation-by-my-gem-2/",
        "teaser": null
      },{
        "title": "Ruby - GMST（グリニッジ平均恒星時）の計算（IAU1982理論）！",
        "excerpt":"以前、 Ruby でグリニッジ恒星時（視恒星時、平均恒星時等）を IAU2006 理論を使用して計算しました。 Ruby - グリニッジ恒星時の計算（IAU2006 理論）！ 今回は、グリニッジ平均恒星時(GMST; Greenwich Mean Sidereal Time)を IAU1982 理論（David Vallado 氏による計算式）を使用して計算してみました。（人工衛星の軌道計算に使用する GMST が IAU1982 理論で計算したもののようなので） 0. 前提条件 Ruby 2.5.1-p57 での動作を想定。 ここでは GMST についての説明はしない。 天文学的な計算については疎いため、誤りがあるかもしれない。 1. Ruby スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: calc_gmst_iau_82.rb 1 2 3 4 5 6 7 8 9 10 11 12...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2018/08/05/ruby-gmst-with-iau-1982/",
        "teaser": null
      },{
        "title": "Python - GMST（グリニッジ平均恒星時）の計算（IAU1982理論）！",
        "excerpt":"前回、 Python でグリニッジ平均恒星時等(GMST; Greenwich Mean Sidereal Time)を IAU1982 理論（David Vallado 氏による計算式）を使用して計算しました。 Ruby - GMST（グリニッジ平均恒星時）の計算（IAU1982理論）！ 今回は同じ計算を Python で実装してみました。 0. 前提条件 Python 3.6.5 での動作を想定。 ここでは GMST についての説明はしない。 天文学的な計算については疎いため、誤りがあるかもしれない。 1. Python スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: calc_gmst_iau_82.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Python"],
        "url": "/2018/08/08/python-gmst-with-iau-1982/",
        "teaser": null
      },{
        "title": "Ruby - TLE（2行軌道要素形式）の取得(NASA)！",
        "excerpt":"Ruby で NASA の Web ページから TLE（Two-line elements; 2行軌道要素形式）データを取得してみました。 0. 前提条件 Ruby 2.5.1-p57 での動作を想定。 TLE を取得する Web ページは「こちら」。 TLE の説明は「こちら」。 1. Ruby スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: tle_iss_nasa.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング"],
        "tags": ["Ruby","人工衛星"],
        "url": "/2018/08/11/ruby-tle-getting-from-nasa/",
        "teaser": null
      },{
        "title": "Python - TLE（2行軌道要素形式）の取得(NASA)！",
        "excerpt":"前回、 Ruby で NASA の Web ページから TLE（Two-line elements; 2行軌道要素形式）データを取得しました。 今回は、同じことを Python で実装してみました。 0. 前提条件 Python 3.6.5 での動作を想定。 TLE を取得する Web ページは「こちら」。 TLE の説明は「こちら」。 1. Python スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: tle_iss_nasa.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19...","categories": ["プログラミング"],
        "tags": ["Python","人工衛星"],
        "url": "/2018/08/14/python-tle-getting-from-nasa/",
        "teaser": null
      },{
        "title": "Ruby - 地球自転速度補正値 ΔT の取得（USNO から）！",
        "excerpt":"以前、地球自転速度補正値 ΔT の計算を Ruby で実装しました。 Ruby - 地球自転速度補正値 ΔT の計算！ 今回は、計算して取得するのではなく、 USNO（The United States Naval Observatory; アメリカ海軍天文台）による確定値と推定値を取得する処理を Ruby で実装してみました。 0. 前提条件 Ruby 2.5.1-p57 での動作を想定。 ΔT 一覧を取得するページは「こちら」。 1. Ruby スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） User Agent UA の PG(Bot) 名やメールアドレスは自分のもので置き換えること。 File: get_delta_t_usno.rb 1 2 3 4 5 6 7 8 9 10 11...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Ruby"],
        "url": "/2018/08/17/ruby-delta-t-getting-from-usno/",
        "teaser": null
      },{
        "title": "Python - 地球自転速度補正値 ΔT の取得（USNO から）！",
        "excerpt":"前回、 USNO（The United States Naval Observatory; アメリカ海軍天文台）から地球自転速度補正値 ΔT をする処理を Ruby で実装しました。 Ruby - 地球自転速度補正値 ΔT の取得（USNO から）！ 今回は、同じ処理を Python で実装してみました。 0. 前提条件 Python 3.6.5 での動作を想定。 ΔT 一覧を取得するページは「こちら」。 1. Python スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） User Agent UA の PG(Bot) 名やメールアドレスは自分のもので置き換えること。 （User Agent の設定は Web スクレイプする者のマナーであると個人的に認識している） File: get_delta_t_usno.py 1 2 3 4 5...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Python"],
        "url": "/2018/08/20/python-delta-t-getting-from-usno/",
        "teaser": null
      },{
        "title": "Linux - FTP サーバとローカルでディレクトリ同期！",
        "excerpt":"FTP サーバ上のディレクトリとローカルマシン上のディレクトリを同期する方法についての記録です。 0. 前提条件 LMDE 2(Linux Mint Debian Edition 2), または、 Debian GNU/Linux 9.5 での作業を想定。 FTP サーバとの同期には lftp コマンドを使用する。 インタラクティブな処理ではなく、自動で一括して処理できるようスクリプトファイルを使用する。 1. lftp コマンドのインストール lftp コマンドを使用するので、未インストールならインストールする。 $ sudo apt install lftp 2. FTP スクリプトファイルの作成 FTP 処理を行うスクリプトファイルを作成する。（以下は IERS（国際地球回転観測事業）から EOP データ（地球回転パラメータ）を取得する例） File: lftp_bulletin_b.txt 1 2 3 4 5 6 open ftp://ftp.iers.org/products/eop/bulletinb mirror -e...","categories": ["サーバ構築"],
        "tags": ["Linux","FTP"],
        "url": "/2018/08/23/linux-ftp-sync-by-lftp/",
        "teaser": null
      },{
        "title": "Ruby - 「グレゴリオ暦 -> ユリウス日」変換の検証(vol.2)！",
        "excerpt":"以前、2種の計算式で「グレゴリオ暦 -&gt; ユリウス日」の変換を行い、結果が同じになるかを検証しました。 Ruby - 「グレゴリオ暦 -&gt; ユリウス日」変換の検証！ 今回は、別の計算式による変換も追加し、計3種で検証してみました。 0. 前提条件 Ruby 2.5.1-p57 での作業を想定。 使用する２種の計算式は「フリーゲルの公式」とその他の計算式。 ここでの「ユリウス日」は JD(Julian Day) であり、JDN(Julian Day Number), CJD(Chronological Julian Day), MJD(Modified Julian Date) ではない。 1. 検証用 Ruby スクリプトの作成 以下のように作成してみた。（うるう年の２月から３月への変わり目、年末から年始への変わり目、うるう年でない年の２月から３月への変わり目をチェックするようにしている） File: verify_gc2jd_2.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Ruby"],
        "url": "/2018/08/26/ruby-gc2jd-verification-v2/",
        "teaser": null
      },{
        "title": "Ruby, Python - EOP（地球姿勢パラメータ）CSV 生成！",
        "excerpt":"IERS（International Earth Rotation and Reference systems Service; 国際地球回転観測事業） の EOP（Earth Orientation Parameter; 地球姿勢（回転）パラメータ）から確定／速報／推定値を抽出し、 CSV データを生成するスクリプトを Ruby と Python で作成しました。（今後作成予定の別のツールの事前準備として） 0. 前提条件 Ruby 2.5.1-p57, Python 3.6.5 での動作を想定。 ここでは EOP（Earth Orientation Parameter; 地球姿勢（回転）パラメータ）が何かについての説明はしない。 1. 事前準備 今回使用するデータを用意しておく。 こちら から “/standard/finals2000A.all”, “/daily/finals2000A.daily” をダウンロードし、 “file” ディレクトリ配下に配置する。 2. Ruby スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） スクリプト内の flag_pm, flag_dut, flag_nut...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Ruby","Python"],
        "url": "/2018/08/29/ruby-python-eop-getting-from-iers/",
        "teaser": null
      },{
        "title": "2018年8月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"9月になりましたので、先月8月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 26,591 73.1990 Mac OS 6,052 16.6598 Linux 1,636 4.5035 Android 1,020 2.8078 Ubuntu Linux 779 2.1444 Fedora Linux 117 0.3221 unknown 108 0.2973 FreeBSD 18 0.0495 PlayStation 3 0.0083 Solaris 2 0.0055 NetBSD 1 0.0028 合　計 36,327 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/09/01/blog-access/",
        "teaser": null
      },{
        "title": "Python - WGS84 (BLH) 座標 -> ECEF 座標 変換！",
        "excerpt":"WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)を ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標に変換する処理を Python で実装してみました。 0. 前提条件 Python 3.6.5 での動作を想定。 ここでは、 WGS84(World Geodetic System 1984) 測地系や ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）の詳細についての説明はしない。 1. Python スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: blh2ecef.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Python","ISS","GPS"],
        "url": "/2018/09/02/python-convert-blh-to-ecef/",
        "teaser": null
      },{
        "title": "Python - ECEF 座標 -> WGS84 (BLH) 座標 変換！",
        "excerpt":"先日、 WGS84(World Geodetic System 1984) 測地系の緯度(Beta)／経度(Lambda)／楕円体高(Height)を ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標に変換する方法を Python で実装しました。 Python - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ 今回は、逆に、 ECEF 座標を WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)に変換する方法を Python で実装してみました。 0. 前提条件 Python 3.6.5 での動作を想定。 ここでは、 WGS84(World Geodetic System 1984) 測地系や ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）の詳細についての説明はしない。 1. Python スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習）...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Python","ISS","GPS"],
        "url": "/2018/09/05/python-convert-ecef-to-blh/",
        "teaser": null
      },{
        "title": "Python - ISS 位置／速度計算（SGP4 アルゴリズム）！",
        "excerpt":"Python で、 NASA 提供の最新の TLE（2行軌道要素形式）、IERS 提供の最新の EOP（地球回転パラメータ）、最新のうるう秒総和(DAT = TAI - UTC)等から、 SGP4 アルゴリズムを用いて ISS の位置と移動速度を計算してみました。 0. 前提条件 Python 3.6.5 での動作を想定。 当方、 Python の複数バージョンが共存する環境のため、 3.6 系は python3.6, pip3.6 で使用できるようにしている。 ここでは、各種座標系、 SGP4 アルゴリズム（Simplified General Perturbations Satellite Orbit Model 4; NASA, NORAD が使用している、近地球域の衛星の軌道計算用で、周回周期225分未満の衛星に使用すべきアルゴリズム）等についての詳細は説明しない。 1. 事前準備 まず、計算に使用する TLE データを用意する。 ここでは詳細に説明しないが、「こちらのページ」から TLE データのみを抽出したテキストファイルを “data/tle_iss_nasa.txt” として配置する。（当方、「Python...","categories": ["プログラミング"],
        "tags": ["Python","人工衛星"],
        "url": "/2018/09/08/python-iss-pos-vel-calculation-with-sgp4/",
        "teaser": null
      },{
        "title": "Ruby, Rails - ISS 軌道（位置／速度）計算ページ！",
        "excerpt":"前回、 Python で ISS（きぼう）の軌道（位置／速度）計算をしました。   今回は、当方の Rails 製 Web サイト上で計算できるようにしました。（但し、裏での計算は Python を使用）  また、10秒間隔で48時間分の軌道を確認するための JSON データも公開するようにしました。   そのページの紹介のみです。     0. 公開ページ      mk-mode SITE : ISS（きぼう）軌道計算   JSON データ   1. ページのイメージ       2. 注意事項      軌道計算ページで指定する日時は JST（日本標準時）。   「計算」実行後、裏で Python で計算している。   計算の流れが把握できるよう、途中経過も出力している。   計算に使用する測地系（楕円体）は WGS84 である。   JSON データは、当方サーバでの処理の都合上、日時の指定は不可としている。   JSON データは10秒間隔で48時間分（17,280件）あるので、ブラウザ等で開く際は重さに注意。     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","Python","人工衛星"],
        "url": "/2018/09/11/rails-iss-pos-vel-calc/",
        "teaser": null
      },{
        "title": "Python - Matplotlib Basemap で地図描画！",
        "excerpt":"Python で地図を描画するために Matplotlib の Basemap をインストールしてみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Python 3.6.5 での作業を想定。 当方、 Python の複数バージョンが共存する環境のため、 3.6 系は python3.6, pip3.6 で使用できるようにしている。 1. libgeos-dev のインストール 未インストールならインストールしておく。 $ sudo apt install libgeos-dev 2. matplotlib, numpy のインストール matplotlib(&gt;=1.0.0), numpy(&gt;=1.2.1) が未インストールならインストールしておく。 $ sudo pip3.6 install matplotlib $...","categories": ["プログラミング"],
        "tags": ["Python","GIS","地図"],
        "url": "/2018/09/14/python-map-drawing-with-matplotlib-basemap/",
        "teaser": null
      },{
        "title": "MariaDB(MySQL) - 国土交通省・位置参照情報をデータベース化（その２）！",
        "excerpt":"こんにちは。 国土交通省が公開している「位置参照情報」についてです。 「位置参照情報」には「街区レベル」と「大字・町丁目レベル」の２種類あります。要約すると、「街区レベル」は街区とその代表点座標を、「大字・町丁目レベル」は大字・町丁目とその代表点座標を対応付けた情報のことです。 以下は、「位置参照情報」を MariaDB(MySQL) でデータベース化する手順についての記録です。 （以前、「MySQL(MariaDB) - 国土交通省・位置参照情報をデータベース化！」でも紹介しましたが、今回は、緯度・経度を（double 型ではなく） geometry 型 で登録し直したので、その記録です） 0. 前提条件 MariaDB 10.3.8 での作業を想定。（geometry 型の使用できるバージョンなら、 MySQL でも同様のはず） DB スキーマが作成済みである。（以下では mlit_isj としている） 今回は、全都道府県の全て（「街区レベル」＆「大字・町丁目レベル」）のデータ（データ整備年度が最新のもの）をダウンロードする。 （必要な都道府県や必要なデータ形式のみ選択してもよいが、その場合は展開されるディレクトリ名やファイル名が以下で紹介していものと若干異なるので注意） unzip コマンド nkf コマンドが導入済みであること。 1. データ形式 まず、街区レベル位置参照情報と大字・町丁目レベル位置参照情報のデータ形式について。 1-1. 街区レベル位置参照情報 街区レベル位置参照情報のデータ形式は、CSV(Comma Separated Values)形式です。数字のコードはASCII、文字のコードはSHIFT-JISコードです。 Ｘ・Ｙ座標および緯度経度座標の値は、世界測地系（日本測地系2000）です。現在旧日本測地系に基づくデータは提供しておりません。 平成24年度街区レベル位置参照情報データの項目は以下の通りです。（履歴フラグの部分はデータの作成・更新年度ごとに異なりますが、基本的にはどの年度のデータも同じフォーマットになっています。） （引用元：国土交通省国土政策局GISHP【インターネットサービス】「位置参照情報ダウンロードサービス - 位置参照情報のデータ形式」） 項目備考 都道府県名例：東京都 市区町村名例：千代田区 大字・町丁目名例：霞が関二丁目 街区符号・地番例：1 座標系番号平面直角座標系の座標系番号（1～19）...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","シェル","bash","GIS"],
        "url": "/2018/09/17/mysql-import-mlit-isj-v2/",
        "teaser": null
      },{
        "title": "MaryaDB(MySQL) - geometry 型を利用して2地点間の距離を計算！",
        "excerpt":"こんにちは。 MariaDB(MySQL) の geometry 型を利用して2地点間の距離を計算する方法についての記録です。 0. 前提条件 MariaDB 10.3.8 での作業を想定。（geometry 型の使用できるバージョンなら、 MySQL でも同様のはず） DB スキーマが作成済みである。（「MariaDB(MySQL) - 国土交通省・位置参照情報をデータベース化（その２）！」の mlit_towns テーブルを使用する） 1. SQL 作成例・その１ 次の SQL は距離をそのまま（度単位で）出力する例。 SELECT pref_code, pref_name, city_code, city_name, town_code, town_name, X(loc) AS lon, Y(loc) AS lat, GLength(GeomFromText( CONCAT('LineString(133.048611 35.468056, ', X(loc), ' ', Y(loc), ')') )) AS d...","categories": ["サーバ構築"],
        "tags": ["MariaDB","MySQL","SQL","GIS"],
        "url": "/2018/09/20/mysql-distance-with-geometry/",
        "teaser": null
      },{
        "title": "Linux - root での SSH 接続が制限されているリモートへの rsync 同期方法！",
        "excerpt":"リモート側で root での SSH 接続が制限されている場合、通常、ローカル側から一般ユーザで rsync コマンドで同期することができません。 以下、解決方法についての記録です。 0. 前提条件 リモート側は Debian GNU/Linux 9.5 を想定。 ローカル側は LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 リモート側 SSH 用ポートは、デフォルトの 22 から 9999 に変更している。 当然、ローカル側からリモート側へ一般ユーザで SSH 接続できる状況にあること。（以下では、一般ユーザ名 “foo” を想定） 1. sudo の設定（リモート側） リモート側で sudo でパスワード無しで rsync コマンドが使用できるよう設定する。 File: visudo 1 foo ALL=(ALL)...","categories": ["サーバ構築"],
        "tags": ["Linux","rsync"],
        "url": "/2018/09/23/linux-rsync-to-remote-restriced-by-root/",
        "teaser": null
      },{
        "title": "Linux - JSON データ読み込み！",
        "excerpt":"Linux コンソールもしくはシェルスクリプト内で JSON データを読み込む方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 JSON データのパースには jq コマンドを使用する。 1. jq のインストール jq コマンドを使用するので、未インストールならインストールする。 $ sudo apt install jq 2. JSON データの準備 試験的に使用する JSON データは以下のとおり。 File: data.json 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["PC_Tips"],
        "tags": ["Linux","JSON"],
        "url": "/2018/09/26/linux-json-reading/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 惑星間距離計算ページ！",
        "excerpt":"当方 Ruby on Rails 製 Web サイト内に 2 つの惑星の距離を計算するページを設置しました。（計算自体は Python で）     0. 公開ページ      mk-mode SITE : 惑星間計算   1. ページのイメージ   以下は、火星が地球に再接近する頃の地球と火星の距離を2018年7月31日16時50分57秒の少し前から1秒間隔で計算した例。      2. 注意事項      リクエストを dist_pl.txt とすれば、テキストで結果を返す。  （引数は ?target=4¢er=3&amp;year=2017&amp;month=10&amp;day=14&amp;hour=12&amp;min=34&amp;sec=56&amp;int_sec=10 のように付与。引数なしでシステム日付をJSTとみなす）   計算根拠となっているデータは NASA 提供の JPL DE430 である。   計算結果の出力は 600 件。   距離は重心と重心の間の距離。   距離の単位は km.   都度計算しているので、ページが表示されるまで多少時間がかかる。     以上。   ","categories": ["Webサイト","暦・カレンダー"],
        "tags": ["Ruby","Rails","Python"],
        "url": "/2018/09/29/rails-dist-calc-between-two-planets/",
        "teaser": null
      },{
        "title": "2018年9月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"10月になりましたので、先月9月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 18,884 70.4023 Mac OS 4,549 16.9593 Linux 1,404 5.2343 Android 912 3.4001 Ubuntu Linux 781 2.9117 unknown 206 0.7680 Fedora Linux 72 0.2684 FreeBSD 6 0.0224 OpenBSD 4 0.0149 PlayStation 2 0.0075 Debian GNU/Linux 1 0.0037 NetBSD 1 0.0037 Wii 1 0.0037 合　計...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/10/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 位置参照情報：一覧ページ！",
        "excerpt":"国土交通省・国土政策局提供の位置参照情報（大字・町丁目レベル）を一覧で確認できるページを自 Web サイト内に設置しました。   今回はそのページの紹介のみ。     0. 公開ページ      mk-mode SITE : 位置参照情報 - 一覧   1. ページのイメージ      2. 注意事項      情報の出典：国土交通省・位置参照情報   3. その他   情報のデータベース(MariaDB(MySQL))化については、過去記事を参照のこと。      MariaDB(MySQL) - 国土交通省・位置参照情報をデータベース化（その２）！     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","GIS"],
        "url": "/2018/10/02/rails-isj-reference/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 位置参照情報：住所検索ページ！",
        "excerpt":"国土交通省・国土政策局提供の位置参照情報（大字・町丁目レベル）を住所ベースで検索できるページを自 Web サイト内に設置しました。   今回はそのページの紹介のみ。     0. 公開ページ      mk-mode SITE : 位置参照情報 - 住所検索   1. ページのイメージ      2. 注意事項      「市区町村」と「大字・町丁目」は AND 条件。   「市区町村」や「大字・町丁目」内で複数文字列を半角スペースで区切った場合、 AND 条件。   情報の出典：国土交通省・位置参照情報   3. その他   情報のデータベース(MariaDB(MySQL))化については、過去記事を参照のこと。      MariaDB(MySQL) - 国土交通省・位置参照情報をデータベース化（その２）！     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","GIS"],
        "url": "/2018/10/05/rails-isj-address-search/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 位置参照情報：位置（緯度・経度）検索ページ！",
        "excerpt":"国土交通省・国土政策局提供の位置参照情報（大字・町丁目レベル）を位置（緯度・経度）ベースで検索するページを自 Web サイト内に設置しました。   今回はそのページの紹介のみ。     0. 公開ページ      mk-mode SITE : 位置参照情報 - 位置検索   1. ページのイメージ      2. 注意事項      距離が近い順に最大20件表示する   緯度／経度の無入力なら 0 度とみなす。   情報の出典：国土交通省・位置参照情報   3. その他   情報のデータベース(MariaDB(MySQL))化については、過去記事を参照のこと。      MariaDB(MySQL) - 国土交通省・位置参照情報をデータベース化（その２）！     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","GIS"],
        "url": "/2018/10/08/rails-isj-location-search/",
        "teaser": null
      },{
        "title": "Python - Twitter ツイートで画像添付（OAuth のみで）！",
        "excerpt":"以前、 Python で Twitter 用の PiPI ライブラリを使用せず、 OAuth のみでツイートする方法方法を紹介しました。 Python - Twitter ツイート（OAuth のみで）！ 但し、画像は添付できない仕様でした。 今回は、画像も添付できるよう仕様を変更しました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Python 3.7.0 での作業を想定。 複数の Twitter アカウントを使い分けることを想定。 当方は他のバージョンとの共存環境であり、 python3.7, pip3.7 で 3.7 系を使用するようにしている。（適宜、置き換えて考えること） 1. ライブラリのインストール OAuth, YAML を使用するので、対応のライブラリをインストールしておく。 $ sudo pip3.7 install requests_oauthlib $...","categories": ["プログラミング","SNS"],
        "tags": ["Python","Twitter","OAuth"],
        "url": "/2018/10/11/python-media-tweet-with-oauth/",
        "teaser": null
      },{
        "title": "Linux - rtcwake で指定時刻に自動復帰！",
        "excerpt":"rtcwake コマンドで、電源オフ／休止／サスペンド状態から指定時刻／指定時間後に自動で復帰させる方法についての記録です。 0. 前提条件 LMDE (Linux Mint Debian Edition 2; 64bit) での作業を想定。 /usr/sbin/rtcwake が存在していること。 1. 指定時刻に自動復帰するよう電源オフ／休止／サスペンド $ sudo rtcwake -m off -t $(date +%s -d \"2018-08-01 07:00:00\") $ sudo rtcwake -m disk -t $(date +%s -d \"2018-08-01 07:00:00\") $ sudo rtcwake -m mem -t $(date +%s -d \"2018-08-01 07:00:00\") ハードウェアクロックがローカル時刻に設定されている場合、...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2018/10/14/linux-auto-comeback-with-rtcwake/",
        "teaser": null
      },{
        "title": "Python - MeCab で形態素解析！",
        "excerpt":"以前、 LMDE 2 上で Ruby を使って形態素解析 MeCab をする方法を紹介しました。 LMDE2 - Ruby で形態素解析 MeCab を使う！ 今回は Python で形態素解析 MeCab を使用してみましたので、その記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。（Ubuntu, Debian でも同様） ソースをビルドしてインストールした Python 3.7.0 での作業を想定。 RAM 容量が充分にあること。（最低：1.5GB, 推奨：5GB） 辞書には、最近の語を網羅している mecab-ipadic-NEologd を使用する。 当方、 Python は複数のバージョンの共存環境であり、 python3.7, pip3.7 で 3.7 系を使用するようにしている。（適宜、置き換えて考えること）...","categories": ["プログラミング"],
        "tags": ["Linux","Python","形態素解析","MeCab"],
        "url": "/2018/10/17/linux-python-mecab/",
        "teaser": null
      },{
        "title": "薬効分類一覧の取得！",
        "excerpt":"医薬品の薬効分類（分類コード、項目名）一覧を取得する方法についての記録です。 （薬効分類とは、日本標準商品分類番号に従って分類されているもの） 1. 情報取得元 e-Stat 政府統計の総合窓口 2. 取得手順 「統計分類・調査項目」-「統計に用いる分類・用語」-「日本標準商品分類」を開く。 「8: 生活・文化用品」を開く。 「87: 医薬品及び関連製品」を開く。 検索条件「年度で絞り込み」を「平成2年[1990年]6月改定」、「キーワード検索」を「分類コード検索」に変更後に医薬品の “87” を入力して、検索ボタン（虫メガネマーク）をクリック。 分類コードに “87” が含まれる項目の一覧が表示される。但し、分類コードの先頭以外に “87” の含まれるものも表示される。 取り急ぎ、このままページ下部の「ダウンロード」ボタンをクリックして、 CSV データをダウンロードする。 ダウンロード後の CSV ファイルから、分類コートの先頭が “87” でない行（先頭の数十行と末尾の数行）、「本籍」の列を削除すれる。さらに、分類コード先頭の “87” を削除すれば、薬効分類コード一覧となる。 表計算ソフトでもよいが、当方はテキストエディタで行った。また、ダブルクォーテーションは取り除いても問題ない。項目名に半角 , は使用されていないので。 3. 内容確認 File: 薬効分類一覧_estat.csv 1 2 3 4 5 6 7 8 9 10 11 12...","categories": ["PC_Tips"],
        "tags": ["医療"],
        "url": "/2018/10/20/medicine-class/",
        "teaser": null
      },{
        "title": "Ruby, Rails - 薬価基準一覧、薬価基準検索ページ！",
        "excerpt":"薬効分類別に薬価基準収載医薬品の一覧を表示したり、薬価基準収載医薬品を検索するページを自 Web サイト内に設置しました。 今回はそのページの紹介のみ。 0. 公開ページ mk-mode SITE : 医療 - 薬価基準一覧（薬効分類別） mk-mode SITE : 医療 - 薬価基準検索 1. ページのイメージ 2. 注意事項 【情報出典】厚生労働省「医療保険が適用される医薬品について」 内用薬： 2018-08-29 現在（当記事執筆時点） 注射薬： 2018-08-29 現在（当記事執筆時点） 外用薬： 2018-07-01 現在（当記事執筆時点） 歯科用薬剤： 2018-04-01 現在（当記事執筆時点） 品名先頭の「局）」は、日本薬局方に収載されている医薬品であることを示す。 品名先頭の「麻）」は、麻薬及び向精神薬取締法第二条第一号に規定する麻薬であることを示す。 品名先頭の「※）」は、品名の次に括弧書によって医薬品製造販売業者名の略称を加えたことを示す。 「後／先発品」の「★」は、先発医薬品と同額又は薬価が高い後発医薬品であることを示す。 「後／先発品」の「先発品」または「準先発品」の末尾の「◯」は、同一剤形・規格の後発医薬品がある先発医薬品であることを示す。 「使用期限」は「経過措置による使用期限」のこと。 3. その他 薬価基準収載医薬品の一覧は、厚生労働省「医療保険が適用される医薬品について」から取得した表計算ファイルを CSV 化＆整形して MariaDB に取り込んでいる。（CSV 化する際は、薬価の３桁区切りカンマ等に注意） 薬効分類の取得については、過去記事「薬効分類一覧の取得！」を参照。...","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","医療"],
        "url": "/2018/10/23/ruby-rails-medicine-price/",
        "teaser": null
      },{
        "title": "LMDE 3 - MariaDB 10.3 サーバ構築（ソースビルド）！",
        "excerpt":"データベースサーバ MariaDB 10.3 系を LMDE 3 (Linux Mint Debian Edition 3) に構築する方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 インストールする MariaDB は、当記事執筆時点で最新の 10.3.9 とする。 インストール先は “/usr/local/mysql” ディレクトリ配下とする。 データディレクトリは “/var/lib/mysql” ディレクトリ配下とする。 root ユーザでの作業を想定。 1. 依存パッケージのインストール 「こちら」を参考に、ビルドに必要なパッケージをインストールする。 当方は、未インストールだった以下をインストールした。 $ sudo apt install cmake bison libevent-dev 2. アーカイブの取得 「こちら」から...","categories": ["サーバ構築"],
        "tags": ["LMDE3","MariaDB"],
        "url": "/2018/10/26/lmde3-mariadb-installation-by-src/",
        "teaser": null
      },{
        "title": "LMDE 3 - Mroonga インストール（ソースビルド）！",
        "excerpt":"LMDE 3 (Linux Mint Debian Edition 3) 上の MariaDB 10.3.9 に全文検索エンジン Groonga の機能を実現するストレージエンジン Mroonga をソースをビルドしてインストールする方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 当記事執筆時点で最新の Mroonga 8.06 をインストールする。 ここでは、全文検索がどういうものかという説明はしない。 Apt パッケージのインストールには apt-get や aptitude コマンドでなく apt コマンドを使用する。 1. apt リポジトリの追加 今回はソースをビルドしてインストールするので、本来は apt リポジトリの追加は不要であるが、関連するパッケージのインストールに使用するため、追加しておく。 File: /etc/apt/sources.list.d/groonga.list 1 2 deb...","categories": ["サーバ構築"],
        "tags": ["LMDE3","MariaDB","Mroonga"],
        "url": "/2018/10/29/lmde3-mroonga-installation-by-src/",
        "teaser": null
      },{
        "title": "2018年10月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"11月になりましたので、先月10月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 28,292 70.8079 Mac OS 7,105 17.7821 Linux 1,902 4.7602 Android 1,492 3.7341 Ubuntu Linux 864 2.1624 unknown 179 0.4480 Fedora Linux 102 0.2553 FreeBSD 14 0.0350 OpenBSD 2 0.0050 3DS 1 0.0025 NetBSD 1 0.0025 Solaris 1 0.0025 Wii 1 0.0025 合　計 39,956...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/11/01/blog-access/",
        "teaser": null
      },{
        "title": "LMDE 3 - TeXworks インストール（ソースビルド）！",
        "excerpt":"　\\(\\TeX\\) を扱うための GUI ツール TeXworks を LMDE 3 (Linux Mint Debian Edition 3) に、ソースをビルドしてインストールする方法＆設定についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 TeX Live 2018 がインストール済みであることを想定。（参照：「LMDE2 - TeX Live 2016 のインストール（by ISO イメージ）！」） 1. ライブラリのインストール TeXworks のインストールに必要なライブラリをインストールしておく。 $ sudo apt install libqt4-dev libpoppler-qt4-dev libhunspell-dev 依存するライブラリもインストールされる。 2. TeXworks...","categories": ["PC_Tips"],
        "tags": ["TeX"],
        "url": "/2018/11/02/lmde3-texworks-installation-by-src/",
        "teaser": null
      },{
        "title": "LMDE 3 - Vim 最新版インストール（ソースビルド）！",
        "excerpt":"高機能テキストエディタ Vim の最新版を、 LMDE 3 (Linux Mint Debian Edition 3) にソースをビルドしてインストールする方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 当記事執筆時点で最新の Vim 8.1 をインストールする。 1. 依存パッケージのインストール $ sudo apt install git gettext libtinfo-dev libacl1-dev libgpm-dev $ sudo apt install build-essential $ sudo apt install libxmu-dev libgtk2.0-dev libxpm-dev $...","categories": ["PC_Tips"],
        "tags": ["Vim"],
        "url": "/2018/11/05/lmde3-vim-installation-by-src/",
        "teaser": null
      },{
        "title": "Fortran - 内積の計算！",
        "excerpt":"Fortran 95 でベクトルの内積を計算してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. ソースコードの作成 組み込み関数を使用しない場合は、使用する場合の方をコメントアウト、使用しない場合の方をコメント解除すること。 File: inner_product.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/11/08/fortran95-inner-product-computation/",
        "teaser": null
      },{
        "title": "Fortran - 行列とベクトルの積の計算！",
        "excerpt":"Fortran 95 で行列とベクトルの積を計算してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. ソースコードの作成 組み込み関数を使用しない場合は、使用する場合の方をコメントアウト、使用しない場合の方をコメント解除すること。 File: mv_product.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/11/11/fortran95-matrix-vector-product/",
        "teaser": null
      },{
        "title": "Fortran - 最大公約数の計算！",
        "excerpt":"Fortran 95 で最大公約数の計算をしてみました。（単純なアルゴリズムですが） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. ソースコードの作成 単なる作成例なので、2つの整数はソースコード内に直接記述している。（必要であれば、適宜書き換えること） ここで重要なのは、内部副プログラムの gcd 関数。 File: gcd.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/11/14/fortran95-gcd-calculation/",
        "teaser": null
      },{
        "title": "Fortran - 階乗の計算！",
        "excerpt":"Fortran 95 で階乗の計算をしてみました。（あまりに簡単なアルゴリズムですが） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. ソースコードの作成 File: factorial.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/11/17/fortran95-factorial-calculation/",
        "teaser": null
      },{
        "title": "Fortran - 1次元配列各要素の逆数平均(Rosseland Mean)の計算！",
        "excerpt":"Fortran 95 で1次元配列の各要素の逆数平均(Rosseland Mean)を計算してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. ソースコードの作成 1次元配列はソースコード内で直接設定している。 File: rosseland_mean.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 program rosseland_mean implicit none real(8) ::...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/11/20/fortran95-rosseland-maen-calculation/",
        "teaser": null
      },{
        "title": "Fortran - フィボナッチ数列の計算！",
        "excerpt":"Fortran 95 でフィボナッチ数列の計算をしてみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. ソースコードの作成 今回は、初項 0, 1, 長さ 20 のフィボナッチ数列を計算することを想定。 File: fibonacci.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/11/23/fortran95-fibonacci-calculation/",
        "teaser": null
      },{
        "title": "Fortran - スタックの実装（逆ポーランド記法による電卓）！",
        "excerpt":"Fortran 95 でスタックの実装を試してみました。 （応用で、逆ポーランド記法による電卓も作成） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. テスト用ソースコードの作成 モジュール部分と実行部分を別ファイルに分けている。 まず、モジュール部分。 File: stack.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/11/26/fortran95-stack-computation/",
        "teaser": null
      },{
        "title": "Fortran - セル・オートマトン！",
        "excerpt":"Fortran 95 でセル・オートマトンの実装を試してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. セル・オートマトンとは 格子状のセル上で、周囲のセルとのやりとりを単純なルールで定め、そのルールに則って、次の世代（ステップ）を決めていくような離散的計算モデルのことである。(Cellular Automaton; CA) ライフゲームもセル・オートマトンの一種。 2. ソースコードの作成 File: cell_atm.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/11/29/fortran95-cellular-automaton/",
        "teaser": null
      },{
        "title": "2018年11月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"12月になりましたので、先月11月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 33,153 74.1031 Mac OS 6,997 15.6396 Linux 2,170 4.8504 Android 1,459 3.2611 Ubuntu Linux 775 1.7323 unknown 121 0.2705 Fedora Linux 41 0.0916 FreeBSD 17 0.0380 OpenBSD 2 0.0045 PlayStation 2 0.0045 Solaris 1 0.0022 Wii 1 0.0022 合　計 44,739 100.0000 2. アクセスをOS・バージョン別に集計（上位20件）...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2018/12/01/blog-access/",
        "teaser": null
      },{
        "title": "Fortran - 2D フラクタルの描画！",
        "excerpt":"Fortran 95 で、複素数の収束による方法で 2D フラクタルを描画してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 ここでは 2D フラクタルそのものの説明はしない。 1. ソースコードの作成 PGM 画像の生成には C 言語を使用。 計算式は、複素平面上で 1 の 4 乗根に収束する \\(z_{next}=\\frac{3}{4}z+\\frac{1}{4z^{3}}\\ (z:複素数)\\) を想定。 File: fractal.f95 1 2 3 4 5 6 7 8 9 10...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/12/02/fortran95-2d-fractal/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - 時刻同期設定(systemd-timesyncd)！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) 上で systemd-timesyncd サービスを使用して時刻同期する設定についての記録です。 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 ntpd や chronyd は使用しない。 root ユーザでの作業を想定。 1. ntpd, chronyd の停止 ntpd や chronyd は不要なので、サービスが起動していれば停止し、自動起動もしないように設定しておく。（以下のようなコマンドで） ちなみに、 OS インストール直後は ntpd も chronyd も起動してなく、 systemd-timesyncd が起動しているはず。 # systemctl status chronyd # systemctl stop chronyd # systemctl disable chronyd #...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian"],
        "url": "/2018/12/05/debian-9-systemd-timesyncd/",
        "teaser": null
      },{
        "title": "Debian 9 (Stretch) - MariaDB 10.3 サーバ構築（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 9 (Stretch) 上に DB サーバ MariaDB（10.3系）を構築する方法についての記録です。 0. 前提条件 Debian GNU/Linux 9 (Stretch) での作業を想定。 接続元のマシンは LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 インストールする MariaDB は、当記事執筆（≠公開）時点で最新の 10.3.9 とする。 MariaDB とは言っても中身は MySQL が元になっているので、各所で “mysql” のキーワードが出現する。 データディレクトリは “/var/lib/mysql” ディレクトリ配下とする。 root ユーザでの作業を想定。 1. sources.list ファイルの編集 今回は MariaDB をソースをビルドしてインストールするので、本来は “sources.list” の編集は必要ないが、 MariaDB...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian","MariaDB"],
        "url": "/2018/12/08/debian-9-mariadb-installation-by-src/",
        "teaser": null
      },{
        "title": "Fortran - 非線形方程式の解法（二分法）！",
        "excerpt":"Fortran 95 で、非線形方程式を二分法を使って解いてみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 二分法による非線形方程式の解法とは？ 当ブログ過去記事を参照のこと。 C++ - 非線形方程式の解法（２分法）！ 2. 想定する非線形方程式 想定する非線形方程式は \\(y = x + \\cos(2x) - \\sin(4x)\\) 3. ソースコードの作成 \\(x\\)の範囲内に解が1個だけ存在するケースに限定している。 File: nonlinear_equation_bisection.f95 1 2 3 4 5 6 7 8 9 10...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/12/11/fortran95-nonlinear-equation-by-bisection/",
        "teaser": null
      },{
        "title": "Fortran - 非線形方程式の解法（ニュートン法）！",
        "excerpt":"Fortran 95 で、非線形方程式をニュートン法を使って解いてみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. ニュートン法による非線形方程式の解法とは？ 当ブログ過去記事を参照のこと。 C++ - 非線形方程式の解法（ニュートン法）！ 2. 想定する非線形方程式 想定する非線形方程式は \\(y = x^{3} - x + 1\\) 3. ソースコードの作成 \\(x\\)の範囲内に解が1個だけ存在するケースに限定している。 File: nonlinear_equation_newton.f95 1 2 3 4 5 6 7 8 9 10...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/12/14/fortran95-nonlinear-equation-by-newton/",
        "teaser": null
      },{
        "title": "Linux - HDD 不良セクタのチェック等！",
        "excerpt":"Linux で、 HDD の不良セクタのチェック等を行う方法についての記録です。 0. 前提条件 e2fsck コマンドを実行する際には作業対象のパーティションがアンマウントの状態でなければならない。 インストールCDからシングルユーザ（セーフ、レスキュー）モードで起動し、マウントされていない状態で作業を行うこと。 1. HDD の調査 マシンに装備されている HDD（ストレージ）を確認しておく。 $ sudo fdisk -l 2. HDD モデルの調査 マシンに装備されている HDD（ストレージ）のモデルを確認しておく。 $ sudo hdparm -i /dev/sda7 | fgrep Model 3. 不良セクタの調査 $ sudo badblocks -sv /dev/sda7 -o /tmp/badblocks.txt 又は、 $ sudo badblocks -sv /dev/sda7 | tee /tmp/badblocks.txt 不良セクタがあった場合は...","categories": ["PC_Tips"],
        "tags": ["Linux"],
        "url": "/2018/12/17/linux-check-hdd-bad-sector/",
        "teaser": null
      },{
        "title": "Fortran - 数値積分（台形則／シンプソン則による定積分）！",
        "excerpt":"Fortran 95 で、数値積分（台形則／シンプソン則による定積分）行ってみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 数値積分（台形則／シンプソン則による定積分）とは？ 当ブログ過去記事を参照のこと。 C++ - 数値積分（台形則による定積分）！ C++ - 数値積分（シンプソン則による定積分）！ 2. 想定する被積分関数 想定する被積分関数は \\(f(x) = \\sqrt{4 - x^{2}}\\ \\ (但し、 0.0 \\leq x \\leq 2.0\\)) 3. ソースコードの作成 台形則／シンプソン則計算部分はモジュール化している。 小さなファイルなので、モジュール部分を別ファイルには分けていない。 File: definite_integral.f95 1...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2018/12/20/fortran95-definite-integral-calculation/",
        "teaser": null
      },{
        "title": "JPL 天文暦データのバイナリ化(Fortran 95 Ver.)！",
        "excerpt":"以前、複数存在する DE430 のテキスト形式データファイルを１つのバイナリ形式のファイルにコンバートする方法についての記録しました。 JPL 天文暦データのバイナリ化！ 但し、 FORTRAN 77 のソースコードでした。 今回、 Fortran 95 に移植しました。以下、その記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GNU Fortran (GCC) 6.3.0 でのコンパイル作業を想定。（GCC でなくてもよいだろう） 今回移植するのは、テキストファイルをバイナリ化する asc2eph.f のみ。 1. 使用するデータファイル ftp://ssd.jpl.nasa.gov/pub/eph/planets/ascii/de430/ 内の以下のファイル。 ヘッダファイル： header.430_572 テキスト形式データファイル： ascp1550.430 〜 ascp2550.430 検証用ファイル： testpo.430 2. 元の FORTRAN 77 ソースコード...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["カレンダー","Fortran"],
        "url": "/2018/12/23/merging-jpl-data-by-f95/",
        "teaser": null
      },{
        "title": "Fortran - 各種時刻系の換算！",
        "excerpt":"暦計算や天文計算を行う際に必要な各種時刻系換算を Fortran 95 で行いました。 過去には Ruby や Python でも行いましたが。 Ruby - 各種時刻系の換算！ Python - 各種時刻系の変換！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 各種時刻系について 当ブログ過去記事を参照のこと。 Ruby - 各種時刻系の換算！ Python - 各種時刻系の変換！ また、過去に Ruby や Python で作成したスクリプトでは、ΔTの計算に DUT1 の値を加味していなかった（最大で1秒弱の誤差があった）が、今回は加味するようにした。 2. ソースコードの作成 以下は実行部分。...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","カレンダー"],
        "url": "/2018/12/26/fortran95-convert-time-series/",
        "teaser": null
      },{
        "title": "Fortran - 赤道・黄道座標の変換！",
        "excerpt":"赤道直交座標と黄道直交座標や、直交座標と極座標の相互変換を Fortran 95 で行いました。 過去には Ruby や Python でも行いましたが。 赤道座標と黄道座標、直交座標と極座標の変換！ Ruby - 赤道・黄道座標の変換（by 自作 gem ライブラリ）！ Python - 赤道・黄道座標の変換！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 赤道・黄道座標、直交・極の相互変換について 当ブログ過去記事を参照のこと。 赤道座標と黄道座標、直交座標と極座標の変換！ 2. ソースコードの作成 以下は実行部分。 File: conv_coord.f95 1 2 3 4 5 6...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","カレンダー"],
        "url": "/2018/12/29/fortran95-convert-eq-ec-coordinates/",
        "teaser": null
      },{
        "title": "2018年12月 - OS・ブラウザ別アクセス状況！【自動集計】（＆新年のご挨拶）",
        "excerpt":"旧年明けまして、新年おめでとうございます。 旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 話は変わりまして、先月12月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 21,822 66.5975 Mac OS 6,366 19.4281 Linux 2,395 7.3092 Android 1,117 3.4089 Ubuntu Linux 844 2.5758 unknown 113 0.3449 Fedora Linux 66 0.2014 FreeBSD 39 0.1190 Solaris 4 0.0122 OpenBSD 1 0.0031 合　計 32,767 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Octopress"],
        "url": "/2019/01/01/blog-access/",
        "teaser": null
      },{
        "title": "2018年 - ツイート集計！",
        "excerpt":"改めまして、旧年明けまして、新年おめでとうございます。 2018年の Twitter でのツイート（メインで使用しているアカウントのみ）を Ruby で集計してみました。 当方は、ツイートは全て自宅サーバ(Debian GNU/Linux)上のデータベース(MariaDB)に保存しています。（実際には Ruby + Twitter API で本家からデータを取得して保存） ほとんど SQL で集計可能でしたが、品詞・単語別の集計は形態素解析エンジン MeCab を使用しました。 集計内容は以下のとおり。 月別ツイート数 曜日別ツイート数 時間別ツイート数 文字数別ツイート数 １日当たりツイート数別集計 品詞別出現回数 単語別出現回数 1. 月別ツイート数 [ 年 月 ] [件数] [ 比 率 ] 2018年01月 367 ( 5.85%) 2018年02月 365 ( 5.82%) 2018年03月 444 ( 7.08%) 2018年04月...","categories": ["SNS"],
        "tags": ["Twitter","Ruby","MySQL","MariaDB","MeCab"],
        "url": "/2019/01/02/tweet-summary-2018/",
        "teaser": null
      },{
        "title": "Fortran - 章動の計算（IAU2000A 理論）！",
        "excerpt":"天体の回転に使用する章動の計算を Fortran 95 で行いました。（使用するのは IAU2000A 理論） 過去には Ruby や Python でも行いましたが。 Ruby - 章動の計算（IAU2000A 理論）！ Python - 章動の計算（IAU2000A 理論）！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 章動の計算について 当ブログ過去記事を参照のこと。 Ruby - 章動の計算（IAU2000A 理論）！ Python - 章動の計算（IAU2000A 理論）！ 2. ソースコードの作成 以下は実行部分。 File:...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","カレンダー"],
        "url": "/2019/01/03/fortran95-nutation-model/",
        "teaser": null
      },{
        "title": "Fortran - グリニッジ恒星時の計算（IAU2006 理論）！",
        "excerpt":"グリニッジ視恒星時(GAST; Greenwich Apparent Sidereal Time)、グリニッジ平均恒星時(GMST; Greenwich Mean Sidereal Time)、分点均差(EE; Equation of Equinoxes )の計算を Fortran 95 で行いました。（使用するのは IAU2006 理論） 過去には Ruby や Python でも行いましたが。 Ruby - グリニッジ恒星時の計算（IAU2006 理論）！ Python - グリニッジ恒星時の計算（IAU2006 理論）！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 章動の計算について 当ブログ過去記事を参照のこと。...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","カレンダー"],
        "url": "/2019/01/06/fortran95-greenwich-time/",
        "teaser": null
      },{
        "title": "Fortran - JPL 天文暦バイナリデータの読み込み！",
        "excerpt":"NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 のバイナリ形式のデータを Fortran 95 で読み込んでみました。 過去には Ruby や Python でも行いましたが。 Ruby - JPL 天文暦バイナリデータの読み込み！ Python - JPL 天文暦バイナリデータの読み込み！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 天文暦バイナリデータについて 当ブログ過去記事を参照のこと。 JPL 天文暦データのバイナリ化！ また、天文暦データには各種バージョンが存在するが、日本の国立天文台が現在使用している DE430 を当方も使用する。 2. ソースコードの作成...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","カレンダー"],
        "url": "/2019/01/09/fortran95-jpl-ephemeris-binary-reading/",
        "teaser": null
      },{
        "title": "Fortran - JPL 天文暦データから ICRS 座標を計算！",
        "excerpt":"前回、NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 のバイナリ形式のデータを Fortran 95 で読み込みました。 Fortran - JPL 天文暦バイナリデータの読み込み！ 今回は、読み込んだデータから ICRS 座標を計算してみました。 Fortran 95 で。（読み込んだデータは ICRS 座標の計算に必要なチェビシェフ多項式の係数データ） 過去には Ruby や Python でも行いましたが。 Ruby - JPL 天文暦データから ICRS 座標を計算！ Python - JPL 天文暦データから ICRS 座標を計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit)...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","カレンダー"],
        "url": "/2019/01/12/fortran95-jpl-ephemeris-icrs-coordinate/",
        "teaser": null
      },{
        "title": "Fortran - バイアス・歳差・章動の適用！",
        "excerpt":"赤道直交座標にバイアス・歳差・章動の回転を適用する処理を Fortran 95 で実装してみました。 過去には Ruby のライブラリを作成たことがありましたが。（Python でも作成したことがあるが、ブログ記事にはしていない） Ruby - バイアス・歳差・章動の適用（by 自作 gem ライブラリ）！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 前提知識 当ブログ過去記事を参照のこと。 Ruby - バイアス・歳差・章動の適用（by 自作 gem ライブラリ）！ 2. ソースコードの作成 以下は実行部分。（距離の単位は AU（天文単位）固定としている） File: bpn_rotation.f95 1 2 3 4 5...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","カレンダー"],
        "url": "/2019/01/15/fortran95-jpl-bpn-rotation-apply/",
        "teaser": null
      },{
        "title": "Fortran - JPL DE430 データから太陽・月の視位置を計算！",
        "excerpt":"Fortran 95 で、 NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している太陽・月・惑星の暦の最新版 DE430 からデータを取得し、太陽と月の視位置を高精度で計算してみました。 過去に Ruby で行ったことはありましたが。（Python でも行ったがブログ記事にはしていない） Ruby - JPL DE430 データから太陽・月の視位置を計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. ソースコードの作成 以下は実行部分。 File: apparent_sun_moon_jpl.f95 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","カレンダー"],
        "url": "/2019/01/18/fortran95-jpl-sun-moon-apparent-position/",
        "teaser": null
      },{
        "title": "Fortran - 太陽・月の視位置計算（海保略算式版）！",
        "excerpt":"Fortran 95 で、海上保安庁・海洋情報部の「コンピュータによる天体の位置計算式」を利用して、太陽や月の視位置等を計算してみました。 過去に Ruby や Python で行ったことはありましたが。 Ruby - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！ Ruby - 太陽・月の視黄経・視黄緯の計算（海保略算式版）！ Python - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！ Python - 太陽・月の視黄経・視黄緯等の計算（海保略算式版）！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 海保略算式について 「コンピュータによる天体の位置計算式」内の PDF ドキュメントや、（当記事冒頭に記載の）当ブログ過去記事を参照のこと。 当然ながら、用意されている係数データファイルの年しか値を計算できない。 2. ソースコードの作成 1ファイルで全てをまかなえるようにしている。（モジュール化はしていない） File: apparent_sun_moon_jcg.f95 1 2 3...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","カレンダー"],
        "url": "/2019/01/21/fortran95-jcg-sun-moon-apparent-position/",
        "teaser": null
      },{
        "title": "Fortran - 日・月の出・南中・入時刻の計算！",
        "excerpt":"Fortran 95 で、日・月の出・南中・入時刻を計算してみました。（出・入はその時の方位角、南中はその時の高度も） 過去に Ruby で行ったことはありましたが。 Ruby - 日・月の出・入・南中計算 gem の作成！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 計算方法について 計算アルゴリズムは「日の出・日の入りの計算―天体の出没時刻の求め方」によるもの。 2. ソースコードの作成 以下は実行部分。 File: sun_moon.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","カレンダー"],
        "url": "/2019/01/24/fortran95-sun-moon-rise-set-meridian/",
        "teaser": null
      },{
        "title": "Jekyll 環境の構築（テーマは Gem 化された Minimal Mistakes）！",
        "excerpt":"プレーンテキストから静的な Web/Blog サイトを生成する Ruby 製ツール Jekyll の環境を構築してみました。（使用するテーマは Minimal Mistakes） 以下、作業記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.0-p0 での作業を想定。 作業ディレクトリはホームディレクトリ直下の jekyll を想定。 Jekyll で使用するテーマは Gem 化された Minimal Mistakes とする。（4.15.1 を想定） Jekyll でブログサイトを運用することを想定。（後日、 Octopress からの移行も） GitHub Pages での運用は想定していない。（自前サーバでの運用を想定） Jekyll 3.8.5 での作業を想定。 カスタマイズ量は多め。 1. Jekyll のインストール $...","categories": ["ブログ"],
        "tags": ["Jekyll","Ruby","HTML","Markdown","JavaScript","CSS"],
        "url": "/2019/01/27/jekyll-with-minimal-mistakes/",
        "teaser": null
      },{
        "title": "Jekyll - Octopress から記事ファイルの移行！",
        "excerpt":"Octopress から Jekyll への移行すべく Markdown 形式の記事ファイルを編集しました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.0-p0 での作業を想定。 Jekyll で使用するテーマは Gem 化された Minimal Mistakes を想定。 GitHub Pages での運用は想定していない。（自前サーバでの運用を想定） 以下、この度、当方の環境に合わせて行った作業。（基本的に、コマンドラインから sed コマンドで一括変換） 1. layout 設定値の変更 layout の設定値を post から single に変更する。 $ find ./_posts -name \"*.md\" | xargs sed...","categories": ["ブログ"],
        "tags": ["Jekyll","Ruby","HTML","Markdown","Octopress"],
        "url": "/2019/01/30/jekyll-migration-from-octopress/",
        "teaser": null
      },{
        "title": "2019年1月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 21,128 65.8296 Mac OS 6,413 19.9813 Linux 2,535 7.8984 Android 1,129 3.5177 Ubuntu Linux 721 2.2465 unknown 105 0.3272 Fedora Linux 39 0.1215 FreeBSD 11 0.0343 PlayStation 8 0.0249 OpenBSD 2 0.0062 3DS 1 0.0031 NetBSD 1 0.0031 Solaris 1 0.0031 Wii 1...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2019/02/01/blog-access/",
        "teaser": null
      },{
        "title": "Fortran - 多倍長演算ライブラリ FMLIB のインストール！",
        "excerpt":"Fortran 90/95 で多倍長演算をすべく、ライブラリ FMLIB をインストールしました。 0. 前提条件 LMDE 3 (Linuz Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 でのビルド（コンパイル＆リンク）を想定。 1. FMLIB について FMLIB とは、 Fortran 90/95 用の多倍長演算パッケージである。 2. ファイルの準備 「こちら」のページ内から FM_files.zip というアーカイブファイルをダウンロードし、展開しておく。（必要なファイルを個別にダウンロードしてもよいが、当記事執筆時点では、各ファイルが PDF 化されていて扱いにくい） そして、展開したディレクトリ内から、以下のファイルを適当な（コンパイル用）ディレクトリ内に配置する。 fm.f95 fmzm90.f95 fmsave.f95 TestFM.f95 SampleFM.f95 SampleFM.chk FM_User_Manual.txt 3. モジュール等のコンパイル $ gfortran fmsave.f95 -c -O3 $...","categories": ["プログラミング"],
        "tags": ["Fortran"],
        "url": "/2019/02/02/fortran-fmlib-installation/",
        "teaser": null
      },{
        "title": "Fortran 95 - ネイビア数の計算（多倍長演算ライブラリ FMLIB 使用）！",
        "excerpt":"Fortran 95 で多倍長演算ライブラリ FMLIB を使用してネイピア数を計算してみました。 0. 前提条件 LMDE 3 (Linuz Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 でのビルド（コンパイル＆リンク）を想定。 Fortran 用多倍長演算ライブラリ FMLIB がインストール済みであること。 （参照：「Fortran - 多倍長演算ライブラリ FMLIB のインストール！」） 1. ネイピア数について 当ブログ過去記事を参照のこと。（但し、多倍長演算用のライブラリは使用せず、自前で実装している） C++ - ネイピア数（自然対数の底）e 計算！ Ruby - ネイピア数（自然対数の底）e 計算！ Python - ネイピア数（自然対数の底）e 計算！ 2. ソースコードの作成 File: napier.f95 1 2 3...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/02/05/fortran95-napier-number-computation/",
        "teaser": null
      },{
        "title": "Fortran 95 - 円周率の計算（多倍長演算ライブラリ FMLIB 使用）！",
        "excerpt":"Fortran 95 で多倍長演算ライブラリ FMLIB を使用して円周率を計算してみました。（Chudnovsky の公式、 BSA(Binary Splitting Algorithm) 法を使用） 0. 前提条件 LMDE 3 (Linuz Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 でのビルド（コンパイル＆リンク）を想定。 Fortran 用多倍長演算ライブラリ FMLIB がインストール済みであること。 （参照：「Fortran - 多倍長演算ライブラリ FMLIB のインストール！」） 1. Chudnovsky の公式について 当ブログ過去記事を参照のこと。 C++ - 円周率計算（Chudnovsky の公式使用）！ 2. ソースコードの作成 File: pi_chudnovsky.f95 1 2 3 4 5...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/02/08/fortran95-pi-computation-fmlib-chudnovsky/",
        "teaser": null
      },{
        "title": "Fortran - ISS 位置・速度（TEME 座標）の算出！",
        "excerpt":"Fortran 95 で、 NASA 提供の最新の TLE（2行軌道要素形式）から任意の時刻（UT1; 世界時1）の ISS の位置・速度（TEME 座標）を、 SGP4 アルゴリズムを用いて計算してみました。 0. 前提条件 LMDE 3 (Linuz Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 でのビルド（コンパイル＆リンク）を想定。 ここでは、各種座標系、 SGP4 アルゴリズム（Simplified General Perturbations Satellite Orbit Model 4; NASA, NORAD が使用している、近地球域の衛星の軌道計算用で、周回周期225分未満の衛星に使用すべきアルゴリズム）等についての詳細は説明しない。 1. TEME 座標について TEME 座標とは「真赤道面平均春分点」を基準にした座標のことで、 “True Equator, Mean Equinox” の略。 今回算出する座標が TEME...","categories": ["プログラミング"],
        "tags": ["Fortran"],
        "url": "/2019/02/11/fortran95-iss-position-velocity/",
        "teaser": null
      },{
        "title": "Fortran - ISS 位置・速度（WGS84(BLH) 座標）の算出！",
        "excerpt":"前回、 Fortran 95 で NASA 提供の最新の TLE（2行軌道要素形式）から任意の時刻（UT1; 世界時1）の ISS の位置・速度（TEME 座標）を、 SGP4 アルゴリズムを用いて計算しました。 今回は、これの応用として、取得した TEME 座標を WGS84 座標（いわゆる、緯度・経度・高度(BLH)という座標）に変換します。 0. 前提条件 LMDE 3 (Linuz Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 でのビルド（コンパイル＆リンク）を想定。 ここでは、各種座標系、 SGP4 アルゴリズム（Simplified General Perturbations Satellite Orbit Model 4; NASA, NORAD が使用している、近地球域の衛星の軌道計算用で、周回周期225分未満の衛星に使用すべきアルゴリズム）等についての詳細は説明しない。 1. 各種座標系について TEME 座標とは「真赤道面平均春分点」のことで、 “True Equator,...","categories": ["プログラミング"],
        "tags": ["Fortran"],
        "url": "/2019/02/14/fortran95-iss-position-velocity-blh/",
        "teaser": null
      },{
        "title": "Fortran - 正規乱数（ボックス＝ミューラー法）！",
        "excerpt":"Fortran 95 で、 Box-Muller 法を使って正規乱数を生成してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - 正規乱数（ボックス＝ミューラー法）！ Ruby - 正規乱数（ボックス＝ミューラー法）！ Python - 正規乱数（ボックス＝ミューラー法）！ 2. ソースコードの作成 File: rndnum_bm.f95 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/02/17/fortran95-random-number-by-box-muller/",
        "teaser": null
      },{
        "title": "Fortran - 連立方程式解法（ガウス・ジョルダン法）！",
        "excerpt":"Fortran 95 で「ガウス・ジョルダン法」による連立方程式の解法を実装する方法についてです。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - 連立方程式解法（ガウス・ジョルダン法）！ Ruby - 連立方程式解法（ガウス・ジョルダン法）！ Python - 連立方程式解法（ガウス・ジョルダン法）！ 2. ソースコードの作成 File: gauss_jordan.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/02/20/fortran95-simultaneous-equations-by-gauss-jorden/",
        "teaser": null
      },{
        "title": "Fortran - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！",
        "excerpt":"Fortran 95 で「ガウス・ジョルダン（ピボット選択）法」による連立方程式の解法を実装する方法についてです。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！ Ruby - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！ Python - 連立方程式解法（ガウス・ジョルダン（ピボット選択）法）！ 2. ソースコードの作成 File: gauss_jordan_pivot.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/02/23/fortran95-simultaneous-equations-by-gauss-jorden-pivot/",
        "teaser": null
      },{
        "title": "Fortran - 連立方程式解法（ガウスの消去法）！",
        "excerpt":"Fortran 95 で「ガウスの消去法」による連立方程式の解法を実装する方法についてです。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - 連立方程式解法（ガウスの消去法）！ Ruby - 連立方程式解法（ガウスの消去法）！ Python - 連立方程式解法（ガウスの消去法）！ 2. ソースコードの作成 File: gauss_elimination.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/02/26/fortran95-simultaneous-equations-by-gauss-elimination/",
        "teaser": null
      },{
        "title": "2019年2月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 19,645 69.7200 Mac OS 5,158 18.3057 Linux 1,617 5.7387 Android 938 3.3290 Ubuntu Linux 620 2.2004 unknown 140 0.4969 Fedora Linux 44 0.1562 FreeBSD 13 0.0461 NetBSD 1 0.0035 Solaris 1 0.0035 合　計 28,177 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews 比率(%) Windows 10...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2019/03/01/blog-access/",
        "teaser": null
      },{
        "title": "Fortran - 線形計画法（シンプレックス法）！",
        "excerpt":"Fortran 95 で線形計画法を「シンプレックス法」で解くアルゴリズムを実装してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - 線形計画法（シンプレックス法）！ Ruby - 線形計画法（シンプレックス法）！ Python - 線形計画法（シンプレックス法）！ 2. ソースコードの作成 File: simplex.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/03/02/fortran95-linear-programming-by-simplex/",
        "teaser": null
      },{
        "title": "Fortran - ヒープ生成（上方・下方移動）！",
        "excerpt":"Fortran 95 でヒープ（上方移動・下方移動）のアルゴリズムを実装してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - ヒープ生成（上方移動）！ C++ - ヒープ生成（下方移動）！ Ruby - ヒープ生成（上方・下方移動）！ Python - ヒープ生成（上方・下方移動）！ 2. ソースコードの作成 以下は上方移動。 File: heap_upward.f95 1 2 3 4 5 6 7 8 9 10 11...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/03/05/fortran95-heap-generattion-by-updownward/",
        "teaser": null
      },{
        "title": "Fortran - 各種ソート処理！",
        "excerpt":"Fortran 95 で各種ソート処理のアルゴリズムを実装してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - ソート処理各種テスト！ Ruby - ソート処理各種テスト！ Python - ソート処理各種テスト！ 2. ソースコードの作成 ソート結果も確認したければ、コメントアウトしている結果出力コードをコメント解除する。 File: sort_test.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["プログラミング"],
        "tags": ["Fortran"],
        "url": "/2019/03/08/fortran95-sorting-test/",
        "teaser": null
      },{
        "title": "Fortran - テイラー展開 exp(x)！",
        "excerpt":"Fortran 95 で \\(e^x\\) のテイラー展開を計算する方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - テイラー展開 exp(x)！ Ruby - テイラー展開 exp(x)！ Python - テイラー展開 exp(x)！ 2. ソースコードの作成 File: taylor_expansion_exp.f95 1 2 3 4 5 6 7 8 9 10...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/03/11/fortran95-taylor-expansion-exp/",
        "teaser": null
      },{
        "title": "Fortran - テイラー展開 cos(x)！",
        "excerpt":"Fortran 95 で \\(\\cos(x)\\) のテイラー展開を計算する方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - テイラー展開 cos(x)！ Ruby - テイラー展開 cos(x)！ Python - テイラー展開 cos(x)！ 2. ソースコードの作成 File: taylor_expansion_cos.f95 1 2 3 4 5 6 7 8 9 10...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/03/14/fortran95-taylor-expansion-cos/",
        "teaser": null
      },{
        "title": "Fortran - ラグランジュ補間！",
        "excerpt":"Fortran 95 でラグランジュ補間を行う方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - ラグランジュ補間！ Ruby - ラグランジュ補間！ Python - ラグランジュ補間！ 2. ソースコードの作成 File: lagrange_interpolation.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/03/17/fortran95-interpolation-by-lagrange/",
        "teaser": null
      },{
        "title": "Fortran - ニュートン補間！",
        "excerpt":"Fortran 95 でニュートン補間を行う方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - ニュートン補間！ Ruby - ニュートン補間！ Python - ニュートン補間！ 2. ソースコードの作成 File: newton_interpolation.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/03/20/fortran95-interpolation-by-newton/",
        "teaser": null
      },{
        "title": "Fortran - フーリエ級数展開！",
        "excerpt":"Fortran 95 でフーリエ級数展開を実装する方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - フーリエ級数展開！ Ruby - フーリエ級数展開！ Python - フーリエ級数展開！ 2. ソースコードの作成 計算項数の取得は標準入力から。（コマンドライン引数ではない） File: fourier_series_expansion.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/03/23/fortran95-fourier-series-expansion/",
        "teaser": null
      },{
        "title": "Fortran - （離散）フーリエ変換！",
        "excerpt":"Fortran 95 で（離散）フーリエ変換を実装する方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - （離散）フーリエ変換！ Ruby - （離散）フーリエ変換！ Python - （離散）フーリエ変換！ 2. ソースコードの作成 File: discrete_fourier_transformation.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/03/26/fortran95-discrete-fourier-transformation/",
        "teaser": null
      },{
        "title": "Fortran - 2 つの配列から相関係数計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを2つの確率変数とみなして相関係数を計算する方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 Ruby - Array クラス拡張で相関係数計算！ Python - 2 つの list から相関係数計算！ 2. ソースコードの作成 File: correlation_coefficient.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/03/29/fortran95-correlation-coefficient/",
        "teaser": null
      },{
        "title": "2019年3月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 20,906 68.9148 Mac OS 5,703 18.7994 Linux 1,709 5.6336 Android 1,050 3.4612 Ubuntu Linux 735 2.4229 unknown 154 0.5076 Fedora Linux 36 0.1187 FreeBSD 21 0.0692 Solaris 20 0.0659 NetBSD 1 0.0033 Wii 1 0.0033 合　計 30,336 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2019/04/01/blog-access/",
        "teaser": null
      },{
        "title": "Fortran - 2 つの配列から単回帰直線計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰直線を計算する方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 Ruby - Array クラス拡張で単回帰直線計算！ Python - 2 つの list から単回帰直線計算！ 2. ソースコードの作成 File: regression_line.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/04/02/fortran95-regression-line/",
        "teaser": null
      },{
        "title": "Fortran - 重回帰式計算（説明変数2個）！",
        "excerpt":"Fortran 95 で、説明（独立）変数2個、目的（従属）変数1個の「重回帰式」を計算する方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 Ruby - Array クラス拡張で重回帰式計算！ Python - 2 つの list から重回帰式計算！ Python - 2 つの list から重回帰式計算（NumPy 版）！ 2. ソースコードの作成 連立方程式の解法にはガウスの消去法を使用。 File: regression_multi.f95 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/04/05/fortran95-multiple-regression-equation/",
        "teaser": null
      },{
        "title": "Fortran - べき剰余アルゴリズムの実装！",
        "excerpt":"Fortran 95 で「べき剰余」のアルゴリズムを実装してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 C++ - べき剰余アルゴリズムの実装！ Ruby - べき剰余アルゴリズムの実装！ Python - べき剰余アルゴリズムの実装！ 2. ソースコードの作成 まず、比較のために非再帰的な記述方法で作成。 File: modular_exponentiation_1.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/04/08/fortran95-modular-exponentiation/",
        "teaser": null
      },{
        "title": "Fortran - 3次スプライン補間！",
        "excerpt":"Fortran 95 で「3次スプライン補間」のアルゴリズムを実装してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 Ruby - ３次スプライン補間！ Python - ３次スプライン補間！ 2. ソースコードの作成 File: spline_interpolation.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/04/11/fortran95-spline-interpolation/",
        "teaser": null
      },{
        "title": "LMDE 3 - Redis のインストール（ソースビルド）！",
        "excerpt":"LMDE 3 (Linux Mint Debian Edition 3) にインメモリデータベースシステム Redis をソースをビルドしてインストールする方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Redis 5.0.3 をインストールする。 1. アーカイブの取得 アーカイブを取得して、展開。 $ wget http://download.redis.io/releases/redis-5.0.3.tar.gz $ tar xzf redis-5.0.3.tar.gz 2. ビルド＆インストール $ cd redis-5.0.3 $ make $ make test $ sudo make install インストール前に make...","categories": ["サーバ構築"],
        "tags": ["Linux","LMDE3","Redis"],
        "url": "/2019/04/14/lmde3-redis-installation-by-src/",
        "teaser": null
      },{
        "title": "Python - WGS84(BLH) 座標 -> ENU 座標 変換！",
        "excerpt":"以前、 BLH 座標（WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)）から ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標への変換や、その逆の変換の処理を Python で実装しました。 Python - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ Python - ECEF 座標 -&gt; WGS84 (BLH) 座標 変換！ 今回は BLH 座標から ENU 座標（地平座標; EastNorthUp）への変換処理を Python で実装してみました。 0. 前提条件 Python 3.7.2 での動作を想定。 ここでは、 WGS84(World Geodetic System 1984) 測地系、 ECEF 座標（Earth...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Python","ISS","GPS"],
        "url": "/2019/04/17/python-convert-blh-to-enu/",
        "teaser": null
      },{
        "title": "Linux - inotify-tools でファイル監視！",
        "excerpt":"Linux で指定のディレクトリ内にファイルが作成された際に、そのファイル名を取得して何らかの処理を行う方法についてです。 0. 前提条件 Debian GNU/Linux 9.6, LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 inotify-toos パッケージ（inotifywait コマンド）を使用する。 1. パッケージのインストール $ sudo apt install inotify-tools 2. 基本的な使い方 $ inotifywait -e create -mq dir_name このように実行し、別コンソール等から対象のディレクトリ内にファイルを作成すると、以下のように出力される。（監視終了は CTRL-C） dir_name/ CREATE 1234 dir_name/ CREATE 2345 -e create は、ファイル作成のみを監視するオプション。 他に access, modify, delete 等も指定可能。（複数指定する場合は...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian","LMDE3"],
        "url": "/2019/04/20/linux-file-monitor-with-inotify-tools/",
        "teaser": null
      },{
        "title": "Ruby - Twitter ツイートで画像添付（OAuth のみで）！",
        "excerpt":"以前、 Ruby で Twitter 用の Gem ライブラリを使用せず、 OAuth のみでツイートする方法を紹介しました。 Ruby - OAuth のみでツイート！ 但し、画像は添付できない仕様でした。 今回、画像も添付できるよう仕様を変更しました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 複数の Twitter アカウントを使い分けることを想定。 Twitter API のキー(Consumber Key/Secret, Access Token/Secret)が取得済みであること。 画像ファイルはいくらでも指定できるようにしているが、 Twitter 側の仕様上、最大4つまでしか添付できない。 1. ライブラリのインストール OAuth, YAML を使用するので、対応の RubyGems ライブラリをインストールしておく。 $ sudo...","categories": ["プログラミング","SNS"],
        "tags": ["Ruby","Twitter","OAuth"],
        "url": "/2019/04/23/ruby-media-tweet-with-oauth/",
        "teaser": null
      },{
        "title": "Ruby - WGS84 (BLH) 座標 -> ECEF 座標 変換！",
        "excerpt":"WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)を ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標に変換する処理を Ruby で実装してみました。 過去には Python で実装しています。 Python - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ 0. 前提条件 Ruby 2.6.3 での動作を想定。 ここでは、 WGS84(World Geodetic System 1984) 測地系や ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）の詳細についての説明はしない。 1. Ruby スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: blh2ecef.rb 1 2 3 4 5 6...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Ruby","ISS","GPS"],
        "url": "/2019/04/26/ruby-convert-blh-to-ecef/",
        "teaser": null
      },{
        "title": "Ruby - ECEF 座標 -> WGS84 (BLH) 座標 変換！",
        "excerpt":"先日、 WGS84(World Geodetic System 1984) 測地系の緯度(Beta)／経度(Lambda)／楕円体高(Height)を ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標に変換する方法を Ruby で実装しました。 Ruby - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ 今回は、逆に、 ECEF 座標を WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)に変換する方法を Ruby で実装してみました。 過去には Python で実装しています。 Python - ECEF 座標 -&gt; WGS84 (BLH) 座標 変換！ 0. 前提条件 Ruby 2.6.3 での動作を想定。 ここでは、 WGS84(World Geodetic System...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Ruby","ISS","GPS"],
        "url": "/2019/04/29/ruby-convert-ecef-to-blh/",
        "teaser": null
      },{
        "title": "2019年4月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,972 69.3327 Mac OS 5,864 17.6984 Linux 1,788 5.3964 Android 1,161 3.5041 Ubuntu Linux 778 2.3481 unknown 502 1.5151 Fedora Linux 39 0.1177 FreeBSD 26 0.0785 Solaris 3 0.0091 合　計 33,133 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews 比率(%) Windows 10 14,907 44.9914 Windows...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2019/05/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - WGS84 (BLH) 座標 -> ENU 座標 変換！",
        "excerpt":"少し前に、 BLH 座標（WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)）から ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標への変換や、その逆の変換の処理を Ruby で実装しました。 Ruby - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ Ruby - ECEF 座標 -&gt; WGS84 (BLH) 座標 変換！ 今回は、 BLH 座標から ENU 座標（地平座標; EastNorthUp）への変換処理を Ruby で実装してみました。 0. 前提条件 Ruby 2.6.3 での動作を想定。 ここでは、 WGS84(World Geodetic System 1984) 測地系、 ECEF 座標（Earth...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Ruby","ISS","GPS"],
        "url": "/2019/05/02/ruby-convert-blh-to-enu/",
        "teaser": null
      },{
        "title": "Fortran - WGS84 (BLH) 座標 -> ECEF 座標 変換！",
        "excerpt":"WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)を ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標に変換する処理を Fortran 95 で実装してみました。 過去には Python, Ruby で実装しています。 Python - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ Ruby - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 ここでは、 WGS84(World...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","ISS","GPS"],
        "url": "/2019/05/05/fortran95-convert-blh-to-ecef/",
        "teaser": null
      },{
        "title": "Fortran - ECEF 座標 -> WGS84 (BLH) 座標 変換！",
        "excerpt":"先日、 WGS84(World Geodetic System 1984) 測地系の緯度(Beta)／経度(Lambda)／楕円体高(Height)を ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標に変換する方法を Fortran 95 で実装しました。 Fortran - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ 今回は、逆に、 ECEF 座標を WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)に変換する方法を Fortran 95 で実装してみました。 過去には Python, Ruby で実装しています。 Python - ECEF 座標 -&gt; WGS84 (BLH) 座標 変換！ Ruby - ECEF 座標 -&gt; WGS84...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","ISS","GPS"],
        "url": "/2019/05/08/fortran95-convert-ecef-to-blh/",
        "teaser": null
      },{
        "title": "Fortran - WGS84 (BLH) 座標 -> ENU 座標 変換！",
        "excerpt":"前々回と前回、 BLH 座標（WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)）から ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標への変換や、その逆の変換の処理を Fortran 95 で実装しました。 Fortran - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ Fortran - ECEF 座標 -&gt; WGS84 (BLH) 座標 変換！ 今回は BLH 座標から ENU 座標（地平座標; EastNorthUp）への変換処理を Fortran 95 で実装してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["Fortran","ISS","GPS"],
        "url": "/2019/05/11/fortran95-convert-blh-to-enu/",
        "teaser": null
      },{
        "title": "Ruby - LU 分解（外積形式ガウス法(outer-product form)）！",
        "excerpt":"Ruby で正方行列の LU 分解アルゴリズムを実装してみました。 今回使用する分解法は「外積形式ガウス法(outer-product form)」です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. LU 分解について 分解する方法には以下のようなものがある。（最初の3つがよく知られているもの） 外積形式ガウス法 内積形式ガウス法 クラウト法 ブロック形式ガウス法 縦ブロックガウス法 前進・後退代入 … 2. LU 分解（外積形式ガウス法(outer-product form)）について ガウス消去法と同等の操作で LU 分解する方法。 分解列の右側の領域が更新される方法で、 “right-looking” アルゴリズムと呼ばれる。 処理の中心の更新領域が多く、更新処理が分解行と分解列という少ないデータを所有するだけで要素ごとに独立して行えるため、並列化に向いている。 3. Ruby スクリプトの作成 本来、 L と U の2つの行列に分けるものだが1つの行列にまとめている。（実際に...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/05/14/ruby-lu-decomposition-by-outer-product/",
        "teaser": null
      },{
        "title": "Ruby - LU 分解（内積形式ガウス法(inner-product form)）！",
        "excerpt":"Ruby で正方行列の LU 分解アルゴリズムを実装してみました。 今回使用する分解法は「内積形式ガウス法(inner-product form)」です。 ちなみに、前回は「外積形式ガウス法(outer-product form)」で実装しました。 Ruby - LU 分解（外積形式ガウス法(outer-product form)）！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. LU 分解について 分解する方法には以下のようなものがある。（最初の3つがよく知られているもの） 外積形式ガウス法 内積形式ガウス法 クラウト法 ブロック形式ガウス法 縦ブロックガウス法 前進・後退代入 … 2. LU 分解（内積形式ガウス法(inner-product form)）について LU 分解がなされたと仮定した上で、行列 L の対角要素を 1 として導出した方法。 分解列の左側の領域が主に参照される方法で、 “left-looking”...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/05/17/ruby-lu-decomposition-by-inner-product/",
        "teaser": null
      },{
        "title": "Ruby - LU 分解（クラウト法(Crout method)）！",
        "excerpt":"Ruby で正方行列の LU 分解アルゴリズムを実装してみました。 今回使用する分解法は「クラウト法(Crout method)」です。 ちなみに、前々回は「外積形式ガウス法(outer-product form)」で、前回は「内積形式ガウス法(inner-product form)」で実装しました。 Ruby - LU 分解（外積形式ガウス法(outer-product form)）！ Ruby - LU 分解（内積形式ガウス法(inner-product form)）！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. LU 分解について 分解する方法には以下のようなものがある。（最初の3つがよく知られているもの） 外積形式ガウス法 内積形式ガウス法 クラウト法 ブロック形式ガウス法 縦ブロックガウス法 前進・後退代入 … 2. LU 分解（クラウト法(Crout method)）について LU 分解がなされたと仮定した上で、行列...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/05/20/ruby-lu-decomposition-by-crout/",
        "teaser": null
      },{
        "title": "Fortran - LU 分解（外積形式ガウス法(outer-product form)）！",
        "excerpt":"Fortran 95 で正方行列の LU 分解アルゴリズムを実装してみました。 今回使用する分解法は「外積形式ガウス法(outer-product form)」 過去には Ruby で同じことをしました。 Ruby - LU 分解（外積形式ガウス法(outer-product form)）！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. LU 分解について 分解する方法には以下のようなものがある。（最初の3つがよく知られているもの） 外積形式ガウス法 内積形式ガウス法 クラウト法 ブロック形式ガウス法 縦ブロックガウス法 前進・後退代入 … 2. LU 分解（外積形式ガウス法(outer-product form)）について ガウス消去法と同等の操作で LU 分解する方法。 分解列の右側の領域が更新される方法で、...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/05/23/fortran95-lu-decomposition-by-outer-product/",
        "teaser": null
      },{
        "title": "Fortran - LU 分解（内積形式ガウス法(inner-product form)）！",
        "excerpt":"Fortran 95 で正方行列の LU 分解アルゴリズムを実装してみました。 今回使用する分解法は「内積形式ガウス法(inner-product form)」 過去には Ruby で同じことをしました。 Ruby - LU 分解（内積形式ガウス法(inner-product form)）！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. LU 分解について 分解する方法には以下のようなものがある。（最初の3つがよく知られているもの） 外積形式ガウス法 内積形式ガウス法 クラウト法 ブロック形式ガウス法 縦ブロックガウス法 前進・後退代入 … 2. LU 分解（内積形式ガウス法(inner-product form)）について LU 分解がなされたと仮定した上で、行列 L の対角要素を...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/05/26/fortran95-lu-decomposition-by-inner-product/",
        "teaser": null
      },{
        "title": "Fortran - LU 分解（クラウト法(Crout method)）！",
        "excerpt":"Fortran 95 で正方行列の LU 分解アルゴリズムを実装してみました。 今回使用する分解法は「クラウト法(Crout method)」 過去には Ruby で同じことをしました。 Ruby - LU 分解（クラウト法(Crout method)）！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. LU 分解について 分解する方法には以下のようなものがある。（最初の3つがよく知られているもの） 外積形式ガウス法 内積形式ガウス法 クラウト法 ブロック形式ガウス法 縦ブロックガウス法 前進・後退代入 … 2. LU 分解（クラウト法(Crout method)）について LU 分解がなされたと仮定した上で、行列 U の対角要素を...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/05/29/fortran95-lu-decomposition-by-crout/",
        "teaser": null
      },{
        "title": "2019年5月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 24,010 69.0895 Mac OS 6,369 18.3270 Linux 1,707 4.9119 Android 1,266 3.6430 Ubuntu Linux 803 2.3107 unknown 528 1.5193 Fedora Linux 47 0.1352 FreeBSD 16 0.0460 Solaris 4 0.0115 NetBSD 1 0.0029 Wii 1 0.0029 合　計 34,752 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2019/06/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - LU 分解を用いた連立1次方程式の解法！",
        "excerpt":"連立1次方程式を LU 分解を用いて解くアルゴリズムを Ruby で実装してみました。 （使用する LU 分解法は「外積形式ガウス法(outer-product form)」） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. LU 分解（外積形式ガウス法）について 当ブログ過去記事を参照。 Ruby - LU 分解（外積形式ガウス法(outer-product form)）！ 2. Ruby スクリプトの作成 本来、 L と U の2つの行列に分けるものだが1つの行列にまとめている。（実際に LU 分解を使用する際に L と U を意識して取り扱えばよいだけなので） また、 行列 L の対角成分が...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/06/02/ruby-simultaneous-equations-by-lu-decomposition/",
        "teaser": null
      },{
        "title": "Fortran - LU 分解を用いた連立1次方程式の解法！",
        "excerpt":"連立1次方程式を LU 分解を用いて解くアルゴリズムを Fortran 95 で実装してみました。 （使用する LU 分解法は「外積形式ガウス法(outer-product form)」） 前回 Ruby で同じことをしました。 Ruby - LU 分解を用いた連立1次方程式の解法！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. LU 分解（外積形式ガウス法）について 当ブログ過去記事を参照。 Ruby - LU 分解（外積形式ガウス法(outer-product form)）！ 2. Fortran ソースコードの作成 本来、 L と U の2つの行列に分けるものだが1つの行列にまとめている。（実際に...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/06/05/fortran95-simultaneous-equations-by-lu-decomposition/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰直線計算(Ver.2)！",
        "excerpt":"Ruby で Array クラスを拡張して単回帰直線の切片と傾きを計算してみました。 ※今回は連立1次方程式を解くのに「ガウスの消去法」を使用。 過去にも行いましたが、その際は連立1次方程式を解くのに分散／共分散を使用する方法（実際にはその変形版）を使用しました。 Ruby - Array クラス拡張で単回帰直線計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. ガウスの消去法による連立1次方程式の解法について 当ブログ過去記事を参照。 Ruby - 連立方程式解法（ガウスの消去法）！ 2. Ruby スクリプトの作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: regression_line_2.rb 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/06/08/ruby-simple-linear-regression-line-v2/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線計算(Ver.2)！",
        "excerpt":"Ruby で Array クラスを拡張して回帰式が2次の単回帰曲線を計算してみました。 ※今回は連立1次方程式を解くのに「ガウスの消去法」を使用。 過去にも行いましたが、その際は連立1次方程式を解くのに分散／共分散を使用する方法（実際にはその変形版）を使用しました。 Ruby - Array クラス拡張で単回帰曲線計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 単回帰曲線（2次回帰）について 求める曲線を \\(y=a+bx+cx^2\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - bx_i - cx_i^2)^2 \\end{eqnarray*}\\] となる。 \\(a,b,c\\) それぞれで偏微分すると、 \\[\\begin{eqnarray*} \\frac{\\partial S}{\\partial a} =&amp;...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/06/11/ruby-simple-linear-regression-curve-v2/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰直線計算(Ver.2)！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰直線を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去」を使用します。 過去にも行いましたが、その際は連立1次方程式を解くのに分散／共分散を使用する方法（実際にはその変形版）を使用しました。 Fortran - 2 つの配列から単回帰直線計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. ガウスの消去法による連立1次方程式の解法について 当ブログ過去記事を参照。 C++ - 連立方程式解法（ガウスの消去法）！ Ruby - 連立方程式解法（ガウスの消去法）！ Python - 連立方程式解法（ガウスの消去法）！ Fortran - 連立方程式解法（ガウスの消去法）！ 2. ソースコードの作成 File: regression_line_2.f95 1 2 3 4 5 6...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/06/14/fortran95-simple-linear-regression-line-v2/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰曲線（2次回帰）計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（2次回帰）を計算する方法についての記録です。 過去には、単回帰直線（1次回帰）を計算する方法についての紹介しまいた。 Fortran - 2 つの配列から単回帰直線計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 Ruby - Array クラス拡張で単回帰曲線計算！ Python - 2 つの list から単回帰曲線（二次回帰）計算！ 2. ソースコードの作成 File: regression_curve.f95 1 2 3 4 5 6 7 8 9...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/06/17/fortran95-regression-curve/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰曲線（2次回帰）計算(Ver.2)！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（2次回帰）を計算する方法についての記録です。 ※今回は連立1次方程式を解くのに「ガウスの消去」を使用。 前回は連立1次方程式を解くのに分散／共分散を使用する方法（実際にはその変形版）を使用しました。 Fortran - 2つの配列から単回帰曲線（2次回帰）計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 Ruby - Array クラス拡張で単回帰曲線計算(Ver.2)！ 2. ソースコードの作成 File: regression_curve_2.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/06/20/fortran95-regression-curve-v2/",
        "teaser": null
      },{
        "title": "Ruby - 単回帰分析（線形回帰）の決定係数計算！",
        "excerpt":"Ruby で2つの単回帰分析（線形回帰; 単回帰直線）の決定係数を計算してみました。 単回帰直線や相関係数の計算は Array クラスを拡張して行なっています。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 決定係数について 回帰分析において、目的変数の標本値（実測値）に対する目的変数の推測値（予測値）の説明力を表す指標（言い換えれば、説明変数（独立変数）が目的変数（従属変数）をどれくらい説明できているかを表す統計量）が \\[\\begin{eqnarray*} 決定係数 R^2 \\end{eqnarray*}\\] である。（「\\(R\\)の\\(2\\)乗」で表現するが、必ずしも何かの値の \\(2\\) 乗になるという意味ではない） 決定係数 \\(R^2\\) は次のように定義する。（定義の仕方は複数あるが、次の定義が最も一般的） \\[\\begin{eqnarray*} 決定係数 R^2 = \\frac{推定値の変動}{標本値の変動} = \\frac{S_R}{S_{y^2}} \\end{eqnarray*}\\] 但し、 \\[\\begin{eqnarray*} 標本値の変動 &amp;=&amp; \\sum_{i=1}^{N}(y_i - \\bar{y})^2 = S_{y^2}...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/06/23/ruby-regression-coefficient-of-determination/",
        "teaser": null
      },{
        "title": "Ruby - 単回帰分析（2次曲線回帰）の決定係数計算！",
        "excerpt":"Ruby で2つの単回帰分析（2次曲線回帰）の決定係数を計算してみました。 単回帰曲線（2次）の計算は Array クラスを拡張して行なっています。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 決定係数について 前回記事を参照。 Ruby - 単回帰分析（線形回帰）の決定係数計算！ 2. Ruby スクリプトの作成 以下のスクリプトでは2種の方法で決定係数を計算している。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: coefficient_of_determination_2d.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/06/26/ruby-regression-coefficient-of-determination-2d/",
        "teaser": null
      },{
        "title": "Fortran - 単回帰分析（線形回帰）の決定係数計算！",
        "excerpt":"Fortran 95 で2つの単回帰分析（線形回帰; 単回帰直線）の決定係数を計算してみました。 過去には Ruby で Array クラスを拡張して行なっています。 Ruby - 単回帰分析（線形回帰）の決定係数計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 決定係数について 当ブログ過去記事を参照のこと。 Ruby - 単回帰分析（線形回帰）の決定係数計算！ 2. ソースコードの作成 以下のソースコードでは4種の方法で決定係数を計算している。 File: coefficient_of_determination_line.f95 1 2 3 4 5 6 7 8 9 10 11...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/06/29/fortran95-regression-coefficient-of-determination/",
        "teaser": null
      },{
        "title": "2019年6月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"7月になりましたので、先月6月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 29,572 69.1048 Mac OS 8,591 20.0757 Linux 1,863 4.3535 Android 1,636 3.8231 Ubuntu Linux 913 2.1335 unknown 154 0.3599 Fedora Linux 47 0.1098 FreeBSD 11 0.0257 PlayStation 6 0.0140 合　計 42,793 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews 比率(%) Windows 10 18,969 44.3273 Windows...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2019/07/01/blog-access/",
        "teaser": null
      },{
        "title": "Fortran - 単回帰分析（2次曲線回帰）の決定係数計算！",
        "excerpt":"Fortran 95 で2つの単回帰分析（2次曲線回帰）の決定係数を計算してみました。 過去には Ruby で Array クラスを拡張して行なっています。 Ruby - 単回帰分析（2次曲線回帰）の決定係数計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 決定係数について 当ブログ過去記事を参照のこと。 Ruby - 単回帰分析（線形回帰）の決定係数計算！ 2. ソースコードの作成 以下のソースコードでは2種の方法で決定係数を計算している。 File: coefficient_of_determination_2d.f95 1 2 3 4 5 6 7 8 9 10 11 12...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/07/02/fortran95-regression-coefficient-of-determination-2d/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - ２週間気温予報！",
        "excerpt":"6月27日から気象庁防災情報 XML でも運用が開始された「全般季節予報（２週間気温予報）」、「地方季節予報（２週間気温予報）」の配信内容を一覧で確認するためのページを作成しました。（既に公開済みの他の情報と同様に）   （ちなみに、当方、気象庁防災情報 XML のデータは Ruby + Rails + MariaDB(MySQL) 等で自作したシステムで受信＆管理しております）   今回はそのページの紹介のみです。  （気象庁防災情報 XML に興味がなければ、当記事は無視してください）     1. 概要      ２週間気温予報とは、発表日より2週目の各地域・地点の5日間平均最高・最低気温に関する情報である。   ２週間気温予報の情報を元に、早期に警戒が必要な状況にあると判断された場合、これまでの異常天候早期警戒情報を踏襲した早期天候情報も発表される。   2. 公開ページ   以下が今回公開を開始したページ。      mk-mode SITE : 気象庁防災情報 XML - 一覧 - ２週間気温予報   3. 注意      この一覧ページでは「全般季節予報（２週間気温予報）」と「地方季節予報（２週間気温予報）」の区域予報・地点予報を同じページで確認できるようにしている。   メニューからだけでなく、「気象庁防災情報 XML - Feed 受信履歴」のページからも一覧ページへ遷移できる。   4. その他   気象庁防災情報 XML の概要や受信方法等については、「気象庁防災情報 XML」のページか、当ブログ過去記事等をご覧ください。     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","Feed","MySQL","XML"],
        "url": "/2019/07/05/ruby-rails-jma-xml-yoho-temp-2w/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 早期天候情報！",
        "excerpt":"6月27日から気象庁防災情報 XML でも運用が開始された「早期天候情報」（「異常天候早期警戒情報」の後継）の配信内容を一覧で確認するためのページを作成しました。（既に公開済みの他の情報と同様に）   （ちなみに、当方、気象庁防災情報 XML のデータは Ruby + Rails + MariaDB(MySQL) 等で自作したシステムで受信＆管理しております）   今回はそのページの紹介のみです。  （気象庁防災情報 XML に興味がなければ、当記事は無視してください）     1. 概要      早期天候情報 は、これまでの異常天候早期警戒情報を踏襲したもので、早期に警戒が必要な状況にあると判断された場合に発表される情報。   2. 公開ページ   以下が今回公開を開始したページ。      mk-mode SITE : 気象庁防災情報 XML - 一覧 - 早期天候情報   3. 注意      メニューからだけでなく、「気象庁防災情報 XML - Feed 受信履歴」のページからも一覧ページへ遷移できる。   4. その他   気象庁防災情報 XML の概要や受信方法等については、「気象庁防災情報 XML」のページか、当ブログ過去記事等をご覧ください。     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","Feed","MySQL","XML"],
        "url": "/2019/07/08/ruby-rails-jma-xml-sokitenko/",
        "teaser": null
      },{
        "title": "気象庁防災情報 XML - 大雨危険度通知！",
        "excerpt":"7月10日から気象庁防災情報 XML で運用が開始された「大雨危険度通知」の配信内容を一覧で確認するためのページを作成しました。（既に公開済みの他の情報と同様に）   （ちなみに、当方、気象庁防災情報 XML のデータは Ruby + Rails + MariaDB(MySQL) 等で自作したシステムで受信＆管理しております）   今回はそのページの紹介のみです。  （気象庁防災情報 XML に興味がなければ、当記事は無視してください）     1. 概要      大雨危険度通知 は、大雨／洪水警報のメッシュ単位の危険度の変化状況や、気象庁の発表する大雨警報等の発表状況を利用して、二次細分区域等の単位で10分毎に判定した結果の情報。   2. 公開ページ   以下が今回公開を開始したページ。      mk-mode SITE : 気象庁防災情報 XML - 一覧 - 大雨危険度通知   3. 注意      全件だと容量が大きくなるため、「今後の情報等に留意」でない、または、「継続」でないもののみに限定している。   メニューからだけでなく、「気象庁防災情報 XML - Feed 受信履歴」のページからも一覧ページへ遷移できる。   4. その他   気象庁防災情報 XML の概要や受信方法等については、「気象庁防災情報 XML」のページか、当ブログ過去記事等をご覧ください。     以上。   ","categories": ["Webサイト"],
        "tags": ["Ruby","Rails","Feed","MySQL","XML"],
        "url": "/2019/07/11/ruby-rails-jma-xml-oame-kikendo/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線（3次回帰モデル）計算！",
        "excerpt":"Ruby で Array クラスを拡張して回帰式が3次の単回帰曲線を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 過去には2次回帰モデルについて行なっています。 Ruby - Array クラス拡張で単回帰曲線計算！ Ruby - Array クラス拡張で単回帰曲線計算(Ver.2)！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 単回帰曲線（3次回帰モデル）の求め方 求める曲線を \\(y=a+bx+cx^2+dx^3\\) とすると、残差の二乗和 \\(S\\) は \\[S = \\sum_{i=1}^{N}(y_i - a - bx_i - cx_i^2 - dx^3)^2\\] となる。 \\(a,b,c,d\\) それぞれで偏微分したものを \\(0\\) とする。...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/07/14/ruby-simple-regression-curve-3d/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線（4次回帰モデル）計算！",
        "excerpt":"Ruby で Array クラスを拡張して回帰式が4次の単回帰曲線を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 前回は3次回帰モデルについて行なっています。 Ruby - Array クラス拡張で単回帰曲線（3次回帰モデル）計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 単回帰曲線（4次回帰モデル）の求め方 求める曲線を \\(y=a+bx+cx^2+dx^3+ex^4\\) とすると、残差の二乗和 \\(S\\) は \\[S = \\sum_{i=1}^{N}(y_i - a - bx_i - cx_i^2 - dx^3 - ex^4)^2\\] となる。 \\(a,b,c,d,e\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/07/17/ruby-simple-regression-curve-4d/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線（ルート回帰モデル）計算！",
        "excerpt":"Ruby で Array クラスを拡張して単回帰曲線（ルート回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 単回帰曲線（ルート回帰モデル）の求め方 求める曲線を \\(y=a+b\\sqrt{x}\\) とすると、残差の二乗和 \\(S\\) は \\[S = \\sum_{i=1}^{N}(y_i - a - b\\sqrt{x})^2\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial S}{\\partial a} &amp;=&amp; 2\\sum_{i=1}^{N}(a+b\\sqrt{x_i} - y_i)= 0 \\\\ \\frac{\\partial S}{\\partial b}...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/07/20/ruby-simple-regression-curve-sqrt/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線（自然対数回帰モデル）計算！",
        "excerpt":"Ruby で Array クラスを拡張して単回帰曲線（自然対数回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 単回帰曲線（自然対数回帰モデル）の求め方 求める曲線を \\(y=a+b\\log_e{x}\\) とすると、残差の二乗和 \\(S\\) は \\[S = \\sum_{i=1}^{N}(y_i - a - b\\log_e{x})^2\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial S}{\\partial a} &amp;=&amp; 2\\sum_{i=1}^{N}(a+b\\log_e{x_i} - y_i)= 0 \\\\ \\frac{\\partial S}{\\partial b}...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/07/23/ruby-simple-regression-curve-ln/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線（分数（逆数）回帰モデル）計算！",
        "excerpt":"Ruby で Array クラスを拡張して単回帰曲線（分数（逆数）回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 単回帰曲線（分数（逆数）回帰モデル）の求め方 求める曲線を \\(\\displaystyle y=a+\\frac{b}{x}\\) とすると、残差の二乗和 \\(S\\) は \\[S = \\sum_{i=1}^{N}(y_i - a - \\frac{b}{x})^2\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial S}{\\partial a} &amp;=&amp; 2\\sum_{i=1}^{N}(a+\\frac{b}{x_i} - y_i)= 0 \\\\ \\frac{\\partial S}{\\partial...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/07/26/ruby-simple-regression-curve-frac/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線（べき乗回帰モデル）計算！",
        "excerpt":"Ruby で Array クラスを拡張して単回帰曲線（べき乗回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 単回帰曲線（べき乗回帰モデル）の求め方 求める曲線を \\(y=ax^b\\) とする。両辺自然対数をとると \\(\\log{y} = \\log{ax^b}\\) で、さらに \\(\\log{y}=\\log{a} + b\\log{x}\\) と変形できる。 （ここでの \\(\\log\\) は自然対数 \\(\\log_e\\) のことである） そして、残差の二乗和 \\(S\\) は \\[S = \\sum_{i=1}^{N}(\\log{y_i} - \\log{a} - \\log{x_i})^2\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\)...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/07/29/ruby-simple-regression-curve-power/",
        "teaser": null
      },{
        "title": "2019年7月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"8月になりましたので、先月7月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 35,827 71.5467 Mac OS 9,550 19.0714 Linux 1,888 3.7703 Android 1,621 3.2371 Ubuntu Linux 898 1.7933 unknown 151 0.3015 FreeBSD 80 0.1598 Fedora Linux 47 0.0939 Solaris 6 0.0120 PlayStation 5 0.0100 NetBSD 1 0.0020 Wii 1 0.0020 合　計 50,075 100.0000 2. アクセスをOS・バージョン別に集計（上位20件）...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2019/08/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線（指数（ab指数）回帰モデル）計算！",
        "excerpt":"Ruby で Array クラスを拡張して単回帰曲線（指数（ab指数）回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 単回帰曲線（指数（ab指数）回帰モデル）の求め方 求める曲線を \\(y=ab^x\\) とする。両辺自然対数をとると \\(\\log{y} = \\log{ab^x}\\) で、さらに \\(\\log{y}=\\log{a} + x\\log{b}\\) と変形できる。 （ここでの \\(\\log\\) は自然対数 \\(\\log_e\\) のことである） そして、残差の二乗和 \\(S\\) は \\[S = \\sum_{i=1}^{N}(\\log{y_i} - \\log{a} - x_{i}\\log{b})^2\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\)...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/08/02/ruby-simple-regression-curve-exp/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線（e指数回帰モデル）計算！",
        "excerpt":"Ruby で Array クラスを拡張して単回帰曲線（e指数回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 単回帰曲線（e指数回帰モデル）の求め方 求める曲線を \\(y=ae^{bx}\\) とする。両辺自然対数をとると \\(\\log{y} = \\log{ae^{bx}}\\) で、さらに \\(\\log{y}=\\log{a} + bx\\) と変形できる。 （ここでの \\(\\log\\) は自然対数 \\(\\log_e\\) のことである） そして、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(\\log{y_i} - \\log{a} - bx_{i})^2 \\end{eqnarray*}\\] となる。 \\(a,b\\)...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/08/05/ruby-simple-regression-curve-expe/",
        "teaser": null
      },{
        "title": "単回帰分析 - 各種モデル（直線／曲線回帰）の比較！",
        "excerpt":"これまで Ruby で Array クラスを拡張して単回帰直線や各種単回帰曲線を計算してみました。 今回、それぞれの回帰モデル間にどのような違いがあるのか、グラフを並べて比較してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.3 での作業を想定。 1. 各種単回帰モデルについて 過去記事を参照。 Ruby - Array クラス拡張で単回帰直線計算(Ver.2)！ Ruby - Array クラス拡張で単回帰曲線計算(Ver.2)！ Ruby - Array クラス拡張で単回帰曲線（3次回帰モデル）計算！ Ruby - Array クラス拡張で単回帰曲線（4次回帰モデル）計算！ Ruby - Array クラス拡張で単回帰曲線（ルート回帰モデル）計算！ Ruby - Array クラス拡張で単回帰曲線（自然対数回帰モデル）計算！ Ruby - Array...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/08/08/ruby-simple-regression-compare/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰曲線（3次回帰モデル）計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして3次の単回帰曲線を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 過去には2次回帰モデルについて行なっています。 Fortran - 2つの配列から単回帰曲線（2次回帰）計算！ Fortran - 2つの配列から単回帰曲線（2次回帰）計算(Ver.2)！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 単回帰曲線（3次回帰モデル）の求め方 求める曲線を \\(y=a+bx+cx^2+dx^3\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - bx_i - cx_i^2 - dx_i^3)^2 \\end{eqnarray*}\\] となる。 \\(a,b,c,d\\) それぞれで偏微分したものを \\(0\\)...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/08/11/fortran95-simple-regression-curve-3d/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰曲線（4次回帰モデル）計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして4次の単回帰曲線を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 前回は3次回帰モデルについて行なっています。 Fortran - 2つの配列から単回帰曲線（3次回帰モデル）計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 単回帰曲線（4次回帰モデル）の求め方 求める曲線を \\(y=a+bx+cx^2+dx^3+ex^4\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - bx_i - cx_i^2 - dx^3 - ex^4)^2 \\end{eqnarray*}\\] となる。 \\(a,b,c,d,e\\) それぞれで偏微分したものを \\(0\\) とする。...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/08/14/fortran95-simple-regression-curve-4d/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰曲線（ルート回帰モデル）計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（ルート回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 単回帰曲線（ルート回帰モデル）の求め方 求める曲線を \\(y=a+b\\sqrt{x}\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - b\\sqrt{x})^2 \\end{eqnarray*}\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial S}{\\partial a} &amp;=&amp; 2\\sum_{i=1}^{N}(a+b\\sqrt{x_i} - y_i)= 0 \\\\...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/08/17/fortran95-simple-regression-curve-sqrt/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰曲線（自然対数回帰モデル）計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（自然対数回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 単回帰曲線（自然対数回帰モデル）の求め方 求める曲線を \\(y=a+b\\log_e{x}\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - b\\log_e{x})^2 \\end{eqnarray*}\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial S}{\\partial a} &amp;=&amp; 2\\sum_{i=1}^{N}(a+b\\log_e{x_i} - y_i)= 0 \\\\...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/08/20/fortran95-simple-regression-curve-ln/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰曲線（分数（逆数）回帰モデル）計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（分数（逆数）回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 単回帰曲線（分数（逆数）回帰モデル）の求め方 求める曲線を \\(\\displaystyle y=a+\\frac{b}{x}\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - \\frac{b}{x})^2 \\end{eqnarray*}\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial S}{\\partial a} &amp;=&amp; 2\\sum_{i=1}^{N}(a+\\frac{b}{x_i} - y_i)= 0...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/08/23/fortran95-simple-regression-curve-frac/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰曲線（べき乗回帰モデル）計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（べき乗回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 単回帰曲線（べき乗回帰モデル）の求め方 求める曲線を \\(y=ax^b\\) とする。両辺自然対数をとると \\(\\log{y} = \\log{ax^b}\\) で、さらに \\(\\log{y}=\\log{a} + b\\log{x}\\) と変形できる。 （ここでの \\(\\log\\) は自然対数 \\(\\log_e\\) のことである） そして、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(\\log{y_i} - \\log{a} - \\log{x_i})^2 \\end{eqnarray*}\\] となる。...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/08/26/fortran95-simple-regression-curve-power/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰曲線（指数（ab指数）回帰モデル）計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（指数（ab指数）回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 単回帰曲線（指数（ab指数）回帰モデル）の求め方 求める曲線を \\(y=ab^x\\) とする。両辺自然対数をとると \\(\\log{y} = \\log{ab^x}\\) で、さらに \\(\\log{y}=\\log{a} + x\\log{b}\\) と変形できる。 （ここでの \\(\\log\\) は自然対数 \\(\\log_e\\) のことである） そして、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(\\log{y_i} - \\log{a} - x_{i}\\log{b})^2 \\end{eqnarray*}\\] となる。...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/08/29/fortran95-simple-regression-curve-exp/",
        "teaser": null
      },{
        "title": "2019年8月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"9月になりましたので、先月8月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 29,601 73.0925 Mac OS 6,933 17.1194 Linux 1,642 4.0545 Android 1,383 3.4150 Ubuntu Linux 740 1.8273 unknown 127 0.3136 Fedora Linux 47 0.1161 FreeBSD 15 0.0370 PlayStation 4 0.0099 3DS 3 0.0074 Solaris 2 0.0049 Wii 1 0.0025 合　計 40,498 100.0000 2. アクセスをOS・バージョン別に集計（上位20件）...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2019/09/01/blog-access/",
        "teaser": null
      },{
        "title": "Fortran - 2つの配列から単回帰曲線（e指数回帰モデル）計算！",
        "excerpt":"Fortran 95 で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（e指数回帰モデル）を計算してみました。（連立方程式の解法にはガウスの消去法を使用） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 単回帰曲線（e指数回帰モデル）の求め方 求める曲線を \\(y=ae^{bx}\\) とする。両辺自然対数をとると \\(\\log{y} = \\log{ae^{bx}}\\) で、さらに \\(\\log{y}=\\log{a} + bx\\) と変形できる。 （ここでの \\(\\log\\) は自然対数 \\(\\log_e\\) のことである） そして、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(\\log{y_i} - \\log{a} - bx_{i})^2 \\end{eqnarray*}\\] となる。...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/09/02/fortran95-simple-regression-curve-expe/",
        "teaser": null
      },{
        "title": "Linux - ハードウェア情報の確認！",
        "excerpt":"Linux でハードウェア情報を確認する方法についての備忘録です。 0. 前提条件 Debian GNU/Linux 9.9, LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 dmidecode コマンドを使用する。 一般ユーザでの実行想定。（sudo 使用） 1. 使用例1（全てのハードウェア情報を確認） $ sudo dmidecode # dmidecode 3.0 Getting SMBIOS data from sysfs. SMBIOS 2.6 present. 35 structures occupying 1301 bytes. Table at 0x000FC350. Handle 0x0000, DMI type 218, 29...","categories": ["サーバ構築","PC_Tips"],
        "tags": ["Linux","Debian","LMDE3"],
        "url": "/2019/09/05/linux-check-hardware-info/",
        "teaser": null
      },{
        "title": "Image Magick - 画像に透かし文字(watermark)を追加",
        "excerpt":"過去に Image Magick で既存画像に文字を追加する方法を紹介しました。 Bash - Image Magick で既存の画像に文字を追加！ 今回は、少し異なった方法で透かし文字(watermark)を追加する方法を紹介します。 0. 前提条件 Debian GNU/Linux 9.9, LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Image Magick 6.9.7 での作業を想定。（Image Magick 7 系では、コマンドの使い方に異なる部分があるので注意） 元の画像は PNG でも JPEG でもよい。（他フォーマットについては確認していない） 1. Bash スクリプトの作成 （以下、当方が普段使用している Bash スクリプト） 透かし文字だけの透過画像を作成し、コマンドライン引数で指定した既存の画像に上書きする方法。 文字列、透過画像やフォントのサイズは固定で指定している。必要であれば、調整すること。 （当スクリプトはフレキシブルに対応できるものではないので） 透過画像のサイズより小さい画像を指定するとはみ出るので、要調整。 （当スクリプトはフレキシブルに対応できるものではないので） 生成後の画像はファイル名の最後に .wm を付与するようにしている。...","categories": ["PC_Tips"],
        "tags": ["Linux","Debian","LMDE3","画像"],
        "url": "/2019/09/08/image-magick-write-watermark/",
        "teaser": null
      },{
        "title": "Fortran - 重回帰式計算（説明変数2個）（その2）！",
        "excerpt":"以前、 Fortran 95 で、説明（独立）変数2個、目的（従属）変数1個の「重回帰式」を計算する方法を紹介しました。但し、平方和／積和の行列を作成してからその行列（連立方程式）を解く方法でした。 Fortran - 重回帰式計算（説明変数2個）！ 今回は、直接、行列（偏微分後の連立方程式）を解く方法について紹介します。 （今回は、説明変数が2個のケースの他に、説明変数が3個のケースも） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. アルゴリズム 求める重回帰式を \\(y=b_0+b_1x_1+b_2x_2\\) （説明変数が2個の場合）とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - b_0 - b_1x_{1i} - b_2x_{2i})^2 \\end{eqnarray*}\\] となる。 \\(b_0,b_1,b_2\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/09/11/fortran95-multiple-regression-equation-v2/",
        "teaser": null
      },{
        "title": "Ruby - Array クラスを拡張して重回帰分析（2次多項式モデル）！",
        "excerpt":"過去に、説明（独立）変数2個、目的（従属）変数１個の「重回帰式」の計算を Ruby の Array クラスを拡張する方法で実装しました。 Ruby - Array クラス拡張で重回帰式計算！ 今回は、重回帰式を2次多項式にしてみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.4 での作業を想定。 1. 重回帰式（2次多項式モデル）の求め方 求める重回帰式を \\(y=b_0+b_1x_1+b_2x_2+b_3x_1x_2+b_4{x_1}^2+b_5{x_2}^2\\) （説明変数が2個）とする場合、 \\(x_3=x_1x_2,\\ x_4={x_1}^2,\\ x_5={x_2}^2\\) と置くと、 \\(y=b_0+b_1x_1+b_2x_2+b_3x_3+b_4x_4+b_5x_5\\) （説明変数が5個）となるので、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum(y_i - b_0 - b_1x_{1i} - b_2x_{2i} - b_3x_{3i} -...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2019/09/14/ruby-multiple-regression-function-2d/",
        "teaser": null
      },{
        "title": "Fortran - 2 つの配列から重回帰分析（2次多項式モデル）！",
        "excerpt":"過去に、説明（独立）変数2個、目的（従属）変数１個の「重回帰式」の計算を Fortran 95 で実装しました。 Fortran - 2 つの配列から重回帰式計算！ 今回は、重回帰式を2次多項式にしてみました。 前回、同じことを Ruby で Array クラスを拡張する方法で実装しています。 Ruby - Array クラスを拡張して重回帰分析（2次多項式モデル）！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. 重回帰式（2次多項式モデル）の求め方 求める重回帰式を \\(y=b_0+b_1x_1+b_2x_2+b_3x_1x_2+b_4{x_1}^2+b_5{x_2}^2\\) （説明変数が2個）とする場合、 \\(x_3=x_1x_2,\\ x_4={x_1}^2,\\ x_5={x_2}^2\\) と置くと、 \\(y=b_0+b_1x_1+b_2x_2+b_3x_3+b_4x_4+b_5x_5\\) （説明変数が5個）となるので、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S =...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/09/17/fortran95-multiple-regression-function-2d/",
        "teaser": null
      },{
        "title": "Fortran 2003 - オブジェクト指向のソース作成例！",
        "excerpt":"Fortran の 2003 以降ではオブジェクト指向のプログラミンが可能となっております。 ソースの作成方法について記録しておきます。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 オブジェクト指向プログラミングの基礎的な知識があることを想定。 1. サンプルの仕様 直角三角形の底辺 A と高さ B を与えると、斜辺 C を計算して返すクラスを想定。 2. ソースコードの作成 クラスも module として記述する。 クラスの宣言に type を使用する。 変数やメソッド等は type 内で、 private（隠蔽）, public（公開） を意識しながら定義する。 クラス内の sburoutine の第1引数にインスタンスを意味する self を指定する。...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2019/09/20/fortran95-sample-object-oriented/",
        "teaser": null
      },{
        "title": "Linux - CSV データのソート！",
        "excerpt":"Linux で CSV データをソートする方法についての記録です。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。（他の Linux ディストリビューションでも同様のはず） 1. CSV ファイルの準備 ソートに使用する CSV データ（ファイル）は、以下のような内容とする。 （この例では、データは全て2019年6月22日分。但し、文字列としてソートされているため、時・分・秒・ナノ秒の並びが気に入らない） File: test.csv 年,月,日,時,分,秒,秒以下[ナノ秒],緯度,経度 2019,6,22,0,0,52,742255119,36.2951,133.5592 2019,6,22,0,1,10,360919063,35.9735,133.1688 2019,6,22,0,1,33,131445817,36.2947,133.5410 2019,6,22,0,1,33,131621079,36.3374,133.5314 2019,6,22,0,1,33,131730443,36.2996,133.3779 2019,6,22,0,1,33,304507343,36.3103,133.5052 2019,6,22,0,10,3,442331076,36.3377,133.6185 2019,6,22,0,10,3,444310399,36.3687,133.6207 2019,6,22,0,10,42,594407302,36.0316,133.3392 2019,6,22,0,11,10,905628211,36.0301,133.3683 : ===&lt; 中略 &gt;=== : 2019,6,22,0,19,33,509865021,36.0341,133.4350 2019,6,22,0,19,33,568154738,36.0283,133.4362 2019,6,22,0,19,33,659982903,36.0282,133.4363 2019,6,22,0,19,48,332025744,36.0642,133.4004 2019,6,22,0,2,19,140519626,36.0323,133.3255 2019,6,22,0,2,19,185271431,35.9970,133.3679 2019,6,22,0,2,19,186265484,36.0245,133.3413 2019,6,22,0,2,19,387917907,36.0011,133.3676...","categories": ["PC_Tips"],
        "tags": ["Linux","LMDE3"],
        "url": "/2019/09/23/linux-csv-sorting/",
        "teaser": null
      },{
        "title": "Ruby - Vincenty 法による地球楕円体上の距離／位置計算！",
        "excerpt":"地球楕円体上の任意の2地点間の距離やそれぞれから見た方位角、また、1地点から見た方位角・距離にある地点の位置等を計算するために Vincenty 法なるアルゴリズムが存在します。 今回、 Ruby で実装してみました。 ちなみに、過去には2地点間の距離を「ヒュベニの公式」を使って計算しています。（精度は Vincenty 法で計算した方が高い） Ruby - 地球上の2点間の距離をほぼ正確に計算！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.4 での作業を想定。 1. Vincenty法 (Vincenty’s formulae) について 1-1. Introduction（紹介） Vincenty 法(Vincenty’s formulae)とは、T.Vincenty が考案した、楕円体上の2点間の距離を計算したり、1点から指定の方角・距離にある点を求めたりするのに使用する反復計算アルゴリズムである、 1-2. Notation（表記法） 以下のように定義する。 \\[\\begin{eqnarray*} a &amp;:&amp; 赤道半径（長半径） \\\\ b &amp;:&amp; 極半径（短半径） \\\\ f...","categories": ["プログラミング","数学"],
        "tags": ["Ruby","GIS"],
        "url": "/2019/09/26/ruby-geodesical-calculation-by-vincenty/",
        "teaser": null
      },{
        "title": "Fortran 2003 - Vincenty 法による地球楕円体上の距離／位置計算！",
        "excerpt":"地球楕円体上の任意の2地点間の距離やそれぞれから見た方位角、また、1地点から見た方位角・距離にある地点の位置等を計算するために Vincenty 法なるアルゴリズムが存在します。 前回、 Ruby で実装してみました。 Ruby - Vincenty 法による地球楕円体上の距離／位置計算！ 今回は、 Fortran 2003 で実装してみました。 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 6.3.0 (GFortran 6.3.0) でのコンパイルを想定。 1. Vincenty法 (Vincenty’s formulae) について 1-1. Introduction（紹介） Vincenty 法(Vincenty’s formulae)とは、T.Vincenty が考案した、楕円体上の2点間の距離を計算したり、1点から指定の方角・距離にある点を求めたりするのに使用する反復計算アルゴリズムである、 1-2. Notation（表記法） 以下のように定義する。 \\[\\begin{eqnarray*} a &amp;:&amp; 赤道半径（長半径） \\\\ b...","categories": ["プログラミング","数学"],
        "tags": ["Fortran","GIS"],
        "url": "/2019/09/29/fortran03-geodesical-calculation-by-vincenty/",
        "teaser": null
      },{
        "title": "2019年9月 - OS・ブラウザ別アクセス状況！【自動集計】",
        "excerpt":"10月になりましたので、先月9月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 27,940 73.1605 Mac OS 6,414 16.7950 Linux 1,611 4.2184 Android 1,322 3.4616 Ubuntu Linux 740 1.9377 unknown 80 0.2095 FreeBSD 40 0.1047 Fedora Linux 29 0.0759 PlayStation 10 0.0262 Solaris 4 0.0105 合　計 38,190 100.0000 2. アクセスをOS・バージョン別に集計（上位20件） OS Version PageViews 比率(%) Windows 10...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2019/10/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - 地球楕円体上の2地点間中心角の計算！",
        "excerpt":"地球楕円体上の2地点と地球中心がなす中心角を Ruby で計算してみました。 単純に2点の直交座標を計算後、2ベクトルのなす角を計算するだけ。（他にも算出方法はありますが） 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 Ruby 2.6.4 での作業を想定。 1. 計算手順 地点1の緯度・経度を \\(\\phi_1, \\lambda_1\\), 地点2の緯度・経度を \\(\\phi_2, \\lambda_2\\) とする。 地点1の緯度 \\(\\phi_1\\),経度 \\(\\lambda_1\\), 地点2の緯度 \\(\\phi_2\\),経度 \\(\\lambda_2\\) を直交座標（ECEF(Earth Centerd Earth Fixed)座標） \\((x_1, y_1, z_1), (x_2, y_2, z_2)\\) に変換する。 地球中心から地点1, 地球中心から地点2という2つのベクトルとみなし、2ベクトルのなす角 \\(\\psi\\) を計算する。 \\(\\displaystyle \\psi...","categories": ["プログラミング","数学"],
        "tags": ["Ruby","GIS"],
        "url": "/2019/10/02/ruby-central-angle-between-2-points-on-earth/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - インストール（サーバ用途・最小構成）！",
        "excerpt":"Debian GNU/Linux 10 (buster) をサーバ用途・最小構成でインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 当記事執筆時点で最新の Debian GNU/Linux 10.0.0 をインストールする。 Oracle VM VirtualBox で仮想マシンにインストールする。 仮想マシンのメモリ容量は 2GB, ディスク容量は 300GB を想定する。 ネットワークはホストOSからゲストOSへアクセスしたいので「ブリッジ」とする。 DHCP を使用しない。（ネットワークは手動で設定する） パーティションは手動設定する。 プロキシは使用しない。 ソフトウェアのインストールは行わない。（ソフトウェアを必要になったときにインストールするので） 1. インストールイメージのダウンロード 以下のサイト、もしくは国内ミラーサイトから ISO イメージをダウンロードする。 今回当方は AMD64 版 NetInstall CD イメージ “debian-10.0.0-amd64-netinst.iso” をダウンロードした。（DVD 版でもよいが、必要なものは必要なときにインストールできればよいので） 以下は、 JAIST のミラーサイト。 http://ftp.jaist.ac.jp/debian-cd/ 当然、ダウンロード後は CD(DVD) に焼き付ける。（ブート可能オプション必須）...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2019/10/05/debian-10-installation-for-small-server/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - サーバ初期設定！",
        "excerpt":"Debian GNU/Linux 10 (buster) インストール後の初期設定についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 「Debian 10 (buster) - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 一般ユーザ名は “masaru” を想定。 以下の作業は全て root ユーザで行うことを想定。 コマンドラインプロンプト # は root ユーザ、 $ は一般ユーザであることを理解しておく。 コメントしての # と混同しないよう注意する。 ネットワークカードは “eth0” を想定。 IP アドレスは固定する。 IPv6 は使用しない。 ドメインは “mk-mode” を想定。 ネットワークの MTU 最適値は 1454 を想定。 （デフォルトは 1500 だが、環境により最適値は異なるので、算出して設定するとよい。参照： Linux -...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2019/10/08/debian-10-initial-setting/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - SSH サーバ構築！",
        "excerpt":"Debian GNU/Linux 10 (buster) 上に SSH サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) サーバでの作業を想定。 サーバの IP アドレス 192.168.11.101、ホスト名 vbox、ユーザ名 masaru を想定。 DNS サーバは未だ設定していない。 （設定済みなら、ローカルから IP アドレスではなくホスト名で SSH 接続可） クライアント側は LMDE 3(Linux Mint Debian Edition 3)(64bit) を想定。 SSH 接続は端末コンソールから行う。 ポートは、デフォルトの 22 から 9999 に変更することを想定。（9999 は架空） root ユーザでの作業を想定。 1. SSH...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","SSH"],
        "url": "/2019/10/11/debian-10-ssh-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - セキュリティ・アップデートの自動化！",
        "excerpt":"Debian GNU/Linux 10 (buster) のセキュリティ・アップデートを自動化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) サーバでの作業を想定。 cron-apt でもパッケージアップデートの自動化は可能であるが、今回はセキュリティ・アップデートのみなので unattended-upgrades を使用する。 （ちなみに、インストール済みの各種パッケージを自動アップデートするのは（依存パッケージの整合性等の問題があるため）危険であり、当方はセキュリティ・アップデート以外は自動でアップデートしない方針） root ユーザでの作業を想定。 1. unattended-upgrades のインストール unattended-upgrades はデフォルトでインストールされているはずだが、インストールされていなければインストールする。 また、パッケージ変更履歴ツール apt-listchanges もインストールする。 # apt -y install unattended-upgrades apt-listchanges 2. “50unattended-upgrades” の編集 メール送信先を編集（コメント解除＆変更）する。（当然、ユーザ名のみならず外部のメールアドレスも設定可） File: /etc/apt/apt.conf.d/50unattended-upgrades Unattended-Upgrade::Mail \"root\"; 3. “20auto-upgrades” の作成 以下のコマンドを実行して自動アップデートに関する質問に「はい」と回答すると、自動アップグレードのための設定ファイル 20auto-upgrades が作成される。 #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2019/10/14/debian-10-automation-security-update/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - rootkit 検出ツール chkrootkit インストール！",
        "excerpt":"Debian GNU/Linux 10 (buster) に rootkit 検出ツール chkrootkit をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3(Linux Mint Debian Edition 3; 64bit) を想定。 chkrootkit が検知できるのは既知の rootkit のみであり、新規の rootkit は検知できないことを認識しておく。 chkrootkit では誤検知もあるので、検知結果は参考程度に留める。 コマンド自体が改竄されてからでは遅いので、OS インストール直後に行うのがよいらしい。 root ユーザでの作業を想定。 1. chkrootkit のインストール # apt -y install chkrootkit 2. chkrootkit の実行...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2019/10/17/debian-10-chrootkit-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - アンチウィルスソフト導入！",
        "excerpt":"Debian GNU/Linux 10 (buster) にウイルス対策ソフト ClamAV をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 Apt でインストールする。 毎日自動でウィルススキャンを実行するようにする。 root ユーザでの作業を想定。 1. ClamAV のインストール 以下のようにして、アンチウィルスソフト ClamAV, ClamAV Daemon をインストールする。 # apt -y install clamav clamav-daemon 2. ウィルス定義ファイルの最新化 freshclam コマンドでウィルス定義ファイルを最新に更新する。 しかし、デフォルトの状態では以下のようになってしまう。（以前はこのような事態にはならなかったが） # freshclam ERROR: /var/log/clamav/freshclam.log is locked by another process ERROR:...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ウイルス対策"],
        "url": "/2019/10/20/debian-10-anti-virus-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - 時刻同期設定(systemd-timesyncd)！",
        "excerpt":"Debian GNU/Linux 10 (buster) 上で systemd-timesyncd サービスを使用して時刻同期する設定についての記録です。 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 ntpd や chronyd は使用しない。 root ユーザでの作業を想定。 1. ntpd, chronyd の停止 ntpd や chronyd は不要なので、サービスが起動していれば停止し、自動起動もしないように設定しておく。（以下のようなコマンドで） ちなみに、 OS インストール直後は ntpd も chronyd も起動してなく、 systemd-timesyncd が起動しているはず。（chronyd 自体、インストールされていないはず） # systemctl status chronyd # systemctl stop chronyd # systemctl disable chronyd...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian"],
        "url": "/2019/10/23/debian-10-systemd-timesyncd/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - ファイアウォール設定！",
        "excerpt":"Debian GNU/Linux 10 (buster) でファイアウォールを設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 ufw (= “Uncomplicated Firewall”) という iptables のフロントエンドツールを使用する。 ファイアウォールのルールは、取り急ぎ最低限の設定のみ。（運用する環境やインストールしたサービスに合わせて適宜行う） root ユーザでの作業を想定。 1. ufw のインストール 依存する iptables 等もインストールされる。 # apt -y install ufw 2. 設定ファイルの編集 IPv6 を使用しない場合は以下のように編集しておく File:...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ファイアウォール"],
        "url": "/2019/10/26/debian-10-firewall-setting/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - サービスの管理！",
        "excerpt":"Debian GNU/Linux 10 (buster) でのサービスの管理についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 SystemD の簡単な使用法と SysVinit の導入を行う。 （当方、普段は SystemD でサービスの管理を行うが、有事の際に備えて sysv-rc-conf コマンドも使用できるよう準備しておく（RedHat 系ディストリビューションのサービス管理ツール chkconfig にあたるもの）） root ユーザでの作業を想定。 1. SystemD の使用方法 以下は vsftpd サーバの例。（vsftpd.service が正式なサービス名だが .service は省略可能） $ systemctl start vsftpd # &lt;= vsftpd サービスの起動 $ systemctl stop vsftpd #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2019/10/29/debian-10-service-management/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - DNS サーバ BIND9 構築！",
        "excerpt":"Debian GNU/Linux 10 (buster) に DNS サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 サーバのローカル IP アドレスは 192.168.11.101、グローバル IP アドレスは xxx.yyy.zzz.aaa を想定。 ドメイン名は mk-mode.com、マシンのホスト名は vbox、ネームサーバホスト名は ns を想定。 セカンダリ DNS は用意しない。 root ユーザでの作業を想定。 1. BIND のインストール （”dnsutils” は dig コマンド用） # apt -y install bind9 dnsutils 2. BIND 設定ファイルの編集...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","DNS"],
        "url": "/2019/11/10/debian-10-bind9-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - DNS サーバ BIND9 の chroot 化！",
        "excerpt":"Debian GNU/Linux 10 (buster) に構築した DNS サーバを chroot 化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 DNS サーバ BIND が構築済みであることを想定。 chroot ディレクトリは /var/bind9/chroot/ とする。 root ユーザでの作業を想定。 1. BIND の停止 BIND が起動していると設定に失敗するので、BIND が起動している場合は停止する。 # systemctl stop bind9 2. 起動オプションの編集 起動時のオプションを変更するよう “/etc/default/bind9” を編集する。 File: /etc/default/bind9 #OPTIONS=\"-u bind -4\" OPTIONS=\"-u bind...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","DNS"],
        "url": "/2019/11/13/debian-10-bind9-chroot/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - FTP サーバ構築！",
        "excerpt":"Debian GNU/Linux 10 (buster) に FTP サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3(Linux Mint Debian Edition3)(64bit) を想定。 接続テストでは FileZilla という FTP クライアントを使用する。 root ユーザでの作業を想定。 1. vsftpd のインストール # apt -y install vsftpd 2. vsftpd 設定ファイルの編集 File: /etc/vsftpd.conf # anonymous によるログインを無効化 anonymous_enable=NO # ローカルアクセスの許可 local_enable=YES...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","FTP"],
        "url": "/2019/11/16/debian-10-ftp-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - NFS サーバ構築！",
        "excerpt":"Debian GNU/Linux 10 (buster) に NFS サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (busters) での作業を想定。 接続元のマシンは LMDE 3(Linux Mint Debian Edition3)(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 NFS 用ディレクトリを新たに作成する。（/var 配下に /exports ディレクトリを作成する） クライアント側でマウントに使用するディレクトリも /var/exports とする。 サーバ側は root で作業することを想定、クライアント側は一般ユーザで作業することを想定している。 root ユーザでの作業を想定。 1. NFS サーバのインストール # apt -y install...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NFS"],
        "url": "/2019/11/19/debian-10-nfs-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - NFS サーバのポート固定！",
        "excerpt":"Debian GNU/Linux 10 (buster) に NFS サーバで使用するポートを固定化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3(Linux Mint Debian Edition 3; 64bit) を想定。 NFS サーバ構築済み。 （参照：「Debian 10 (buster) - NFS サーバ構築！」） ファイアウォール ufw(iptables) が構築済み。 （参照：「Debian 10 (buster) - ファイアウォール設定！」） 以下で設定するポート番号は参考サイトによるもであり、任意に設定可能。 quota は使用していないので、参考サイトにある quota の設定はしない。 root ユーザでの作業を想定。 1. 前提知識...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NFS"],
        "url": "/2019/11/22/debian-10-nfs-port-fixing/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - SMTP サーバ Postfix 構築！",
        "excerpt":"Debian GNU/Linux 10 (buster) に SMTP サーバ Postfix を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3(Linux Mint Debian Edition3)(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は mail を想定。 root ユーザでの作業を想定。 1. Postfix のインストール SMTP サーバ Postfix を以下のようにしてインストールする。 途中でどの設定を選択するか確認されますが、後で設定を行うので「設定なし」(No Configuration)を選択する。 # apt -y install postfix sasl2-bin 2....","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix"],
        "url": "/2019/11/25/debian-10-postfix-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - POP/IMAP サーバ Dovecot 構築！",
        "excerpt":"Debian GNU/Linux 10 (buster) に POP/IMAP サーバ Dovecot を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3(Linux Mint Debian Edition3)(64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 root ユーザでの作業を想定。 1. Dovecot のインストール POP/IMAP サーバ Dovecot を以下のようにしてインストールする。 # apt -y install dovecot-common dovecot-pop3d dovecot-imapd 2. 設定ファイル...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Dovecot"],
        "url": "/2019/11/28/debian-10-dovecot-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - メールサーバ SSL 設定！",
        "excerpt":"Debian GNU/Linux 10 (buster) に導入したメールサーバを SSL 設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 SMTP サーバは Postfix, POP/IMAP サーバは Dovecot を想定。 Postfix を「Debian 10 (buster) - SMTP サーバ Postfix 構築！」の方法で導入済み。 Dovecot を「Debian 10 (buster) - POP/IMAP サーバ Dovecot...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix","Dovecot","SSL"],
        "url": "/2019/12/01/debian-10-mail-ssl-setting/",
        "teaser": null
      },{
        "title": "2019年10月・11月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"10月末から11月上旬にかけて、ある重大な事情により当方システムが正常に運用できておりませんでした。 従いまして、今回は10月分と11月分の当ブログアクセス状況を公開します。（※自分用の記録） まず、10月分。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 27,700 68.0807 Mac OS 7,902 19.4214 Android 2,370 5.8250 Linux 1,773 4.3577 Ubuntu Linux 757 1.8605 unknown 132 0.3244 Fedora Linux 31 0.0762 FreeBSD 15 0.0369 PlayStation 3 0.0074 OpenBSD 2 0.0049 NetBSD 1 0.0025 Solaris 1 0.0025 合　計 40,687 100.0000...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2019/12/02/blog-access/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - Postfix ウィルス・スパム対策(ClamAV + SpamAssassin)！",
        "excerpt":"Debian GNU/Linux 10 (buster) にアンチウイルスソフト ClamAV とスパム対策ソフト SpamAssassin をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 SMTP サーバ Postfix を「Debian 10 (buster) - SMTP サーバ Postfix 構築！」の方法で導入済み。 アンチウィルスソフト ClamAV 導入済み。 スパムフィルタも運用する。 アンチウィルス ClamAV との連携には、 ClamAV daemon を使用する方法の他に、ClamSMTP を使用する方法もある。 スパムフィルタ SpamAssassin との連携には、 amavisd-new を使用する方法の他に SpamPD を使用する方法もある。 root ユーザでの作業を想定。 1....","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix","ウイルス対策","スパム対策"],
        "url": "/2019/12/05/debian-10-postfix-anti-virus-with-clamav-spamassassin/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - Postfix ログ解析！",
        "excerpt":"Debian GNU/Linux 10 (buster) に導入した SMTP サーバ Postfix のログを解析する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 SMTP サーバ Postfix を「Debian 10 (buster) - SMTP サーバ Postfix 構築！」の方法で導入済み。 ログローテート（logrotate）でメールログがローテーションされていることを想定。（デフォルトでなっているはず） root ユーザでの作業を想定。 1. pflogsumm のインストール Postfix のログ解析ツールである pflogsumm を、以下のようにしてインストールする。 #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix"],
        "url": "/2019/12/08/debian-10-postfix-log-analysis/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - 全文検索エンジン Groonga インストール（by Groonga 公式リポジトリ）！",
        "excerpt":"Debian GNU/Linux 10 (buster) にカラムストア機能付き全文検索エンジン Groonga を Groonga の公式リポジトリを使用して導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 当記事執筆時点で最新の Groonga 9.0.7 をインストールする。 トークナイザとして MeCab を使用することを想定。 トークンフィルタとして TokenFilterStem を使用することを想定。 ノーマライザとして MySQL 互換の groonga-normalizer-mysql を使用することを想定。（将来、 Mroonga を使用することを想定） ここでは、全文検索がどういうものかという説明はしない。 root ユーザでの作業を想定。 以下の説明内で出力するデータは、可読性を考慮して整形している。 1. 日本語形態素解析器 MeCab のインストール トークナイザとして MeCab を使用する予定なので、インストールしておく。 # apt -y install...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Groonga"],
        "url": "/2019/12/11/debian-10-groonga-installation-by-official-apt/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - MariaDB 10.4 サーバ構築（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 10 (buster) 上に DB サーバ MariaDB（10.4系）を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 インストールする MariaDB は、当記事執筆時点で最新の 10.4.8 とする。 MariaDB とは言っても中身は MySQL が元になっているので、各所で mysql のキーワードが出現する。 データディレクトリは /var/lib/mysql ディレクトリ配下とする。 root ユーザでの作業を想定。 1. sources.list ファイルの編集 今回は MariaDB をソースをビルドしてインストールするので、本来は sources.list...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian","MariaDB"],
        "url": "/2019/12/14/debian-10-mariadb-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - Mroonga インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 10 (buster) 上に全文検索エンジン Mroonga をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 当記事執筆時点で最新の Mroonga 9.07 をインストールする。 Groonga 9.0.7 がインストール済みであることを想定。 （参照「Debian 10 (buster) - 全文検索エンジン Groonga インストール（by Groonga 公式リポジトリ）！ 」） MariaDB 10.4.8 をソースをビルドしてインストールしていること。（Mroonga のビルドに MySQL のソースが必要なため。MariaDB をパッケージでインストールしている場合にも、ソースが必要となる） （参照「Debian 10 (buster) - MariaDB 10.4 サーバ構築（ソースビルド）！」） MariaDB 10.4.8 は...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian","MariaDB","Mroonga"],
        "url": "/2019/12/17/debian-10-mroonga-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！",
        "excerpt":"Debian GNU/Linux 10 (buster) に Web サーバ Nginx を Nginx 公式リポジトリを使用して導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 Debian 公式リポジトリの Nginx はバージョンが古いため、Nginx リポジトリを使用して 1.16.1（当記事執筆時点最新安定版）をインストールする。 実際に運用する際は、ドキュメントルートを変更する等、設定を編集すること。 root ユーザでの作業を想定。 1. リポジトリ追加の設定 まず、キー追加。 # wget http://nginx.org/keys/nginx_signing.key # apt-key add nginx_signing.key そして、リポジトリ追加の設定を行う。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx"],
        "url": "/2019/12/20/debian-10-nginx-installation-by-official-apt/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - Web サーバ Nginx で SSL 接続！",
        "excerpt":"Debian GNU/Linux 10 (buster) に構築した Web サーバ Nginx で SSL 接続するための設定についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 クライアント側は LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 Web(HTTP)サーバ Nginx が「Debian 10 (buster) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！」の方法で導入済みであることを想定。 今回は SSL サーバ証明書は自分で作成するが、後日、Let’s Encrypt で無料で証明書を取得するようにする。 root...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx","SSL"],
        "url": "/2019/12/23/debian-10-nginx-ssl-connection-setting/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - Let's Encrypt で常時 SSL 化(with Nginx)！",
        "excerpt":"Debian GNU/Linux 10 (buster) に構築した Web サーバ Nginx への接続を、 Let’s Encrypt で取得した SSL サーバ証明書で常時 SSL 化するための方法についての記録です。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster; 64bit) での作業を想定。 クライアント側も Debian GNU/Linux 10 (buster; 64bit) を想定。 Web(HTTP)サーバ Nginx が「Debian 10 (buster) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！」の方法で導入済みであることを想定。 Nginx 1.16.1 での作業を想定。 Python 2.7 系がインストール済みであること。（当方は 2.7.16...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx","SSL"],
        "url": "/2019/12/26/debian-10-nginx-ssl-by-lets-encrypt/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - Ruby 2.6 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 10 (buster) に Ruby 2.6 をソースをビルドしてインストール方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 接続元のマシンは LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 インストールする Ruby は 2.6.4 である。 root ユーザでの作業を想定。 1. 必要パッケージのインストール Ruby のインストールに必要なパッケージを予めインストールする。（他に必要なものがあればインストールする） # apt -y install libffi-dev zlib1g-dev libssl-dev libreadline-dev \\ libgdbm-dev libbison-dev libmariadbclient-dev...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Ruby"],
        "url": "/2019/12/29/debian-10-ruby-2-6-installation-by-src/",
        "teaser": null
      },{
        "title": "2019年12月 - OS・ブラウザ別アクセス状況！（＆新年のご挨拶）",
        "excerpt":"旧年明けまして、新年おめでとうございます。 旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 話は変わりまして、先月12月分の当ブログアクセス状況を公開します。 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 24,960 68.8818 Mac OS 6,888 19.0087 Linux 1,807 4.9868 Android 1,439 3.9712 Ubuntu Linux 830 2.2905 unknown 237 0.6540 Fedora Linux 32 0.0883 FreeBSD 30 0.0828 PlayStation 7 0.0193 Solaris 4 0.0110 Chrome OS 1 0.0028 OpenBSD 1 0.0028 合　計...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/01/01/blog-access/",
        "teaser": null
      },{
        "title": "2019年 - ツイート集計！",
        "excerpt":"改めまして、旧年明けまして、新年おめでとうございます。 2019年の Twitter でのツイート（私用で主として使用しているアカウントのみ）を Ruby で集計してみました。（今回から投稿元別のツイート数も集計しております） 当方は、ツイートは全て自宅サーバ(Debian GNU/Linux)上のデータベース(MariaDB)に保存しています。（実際には Ruby + Twitter API で本家からデータを取得して保存） ほとんど SQL で集計可能でしたが、品詞・単語別の集計は形態素解析エンジン MeCab を使用しました。 集計内容は以下のとおり。 月別ツイート数 曜日別ツイート数 時間別ツイート数 投稿元別ツイート数 文字数別ツイート数 1日当たりツイート数別集計 品詞別出現回数 単語別出現回数 1. 月別ツイート数 [ 年 月 ] [件数] [ 比 率 ] 2019年01月 496 ( 6.99%) 2019年02月 408 ( 5.75%) 2019年03月 628 ( 8.85%)...","categories": ["SNS"],
        "tags": ["Twitter","Ruby","MySQL","MariaDB","MeCab"],
        "url": "/2020/01/02/tweet-summary-2019/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - Python 3.7 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 10 (buster) に Python 3.7 をソースをビルドしてインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 クライアント側は LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 デフォルトでインストールされている Python 2.7.16, 3.7.3 のうち 3.7.3 をアンインストールし、 2.7.16 と 3.7.4 を共存させる。 （python, python3.7 コマンドで使い分ける） 1. Python のバージョン確認 インストール済み（現状）の Python のバージョンを確認してみる。 # python -V...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Python"],
        "url": "/2020/01/05/debian-10-python-3-7-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - ログ解析ツール logwatch インストール！",
        "excerpt":"Debian GNU/Linux 10 (buster) にログ監視ツール LogWatch をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 root ユーザでの作業を想定。 1. logwatch のインストール # apt -y install logwatch 2. logwatch 設定ファイルの編集 まず、デフォルトの設定ファイルを複製する。 # cp /usr/share/logwatch/default.conf/logwatch.conf /etc/logwatch/conf/ デフォルトの設定で充分であるが、必要なら編集する。 メールの送信先等を変更するなら以下のようにする。 File: /etc/logwatch/conf/logwatch.conf MailTo = hoge@xxxx.com # &lt; = メール送信先 Detail = High # &lt;...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2020/01/08/debian-10-logwatch-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - 自動バックアップ運用！",
        "excerpt":"Debian GNU/Linux 10 (buster) で自動バックアップ運用する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 バックファイルを配置するディレクトリは /home/bak とする。 root ユーザでの作業を想定。 1. バックアップスクリプトの作成 以下のような内容でバックアップスクリプトを作成する。 File: backup.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2020/01/11/debian-10-automatic-backup-setting/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - Git インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 10 (buster) に Git サーバをソースをビルドしてインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 Git 2.23.0 （当記事執筆時点で最新）を Git サーバとしてインストールすることを想定。 アーカイブ保存先は /usr/local/src を想定。 クライアントからアクセスがあった時だけサーバを起動するために xinetd を使用する。 root ユーザでの作業を想定。 1. 依存パッケージのインストール # apt -y install xinetd libcurl4-gnutls-dev libexpat1-dev \\ gettext libz-dev libssl-dev 2. アーカイブファイルの取得＆展開 # cd /usr/local/src # wget https://www.kernel.org/pub/software/scm/git/git-2.23.0.tar.gz...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Git"],
        "url": "/2020/01/14/debian-10-git-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - PHP インストール（Nginx と連携）！",
        "excerpt":"Debian GNU/Linux 10 (buster) に PHP をソースをビルドしてインストールし、 Web／リバースプロキシサーバ Nginx と連携する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側は LMDE 3 (Linux Mint Debian Edition 3; 64bit) を想定。 Web サーバとして Apache2 でなく Nginx と連携させることを想定しているので、 Nginx がインストール済みであること。（参照： Debian 10 (buster) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！） 標準リポジトリから...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","PHP","Nginx"],
        "url": "/2020/01/17/debian-10-php-installation-by-src-with-nginx-cooperation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - サーバ監視ツール munin 導入！",
        "excerpt":"Debian GNU/Linux 10 (buster) にサーバ監視ツール munin をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 Web サーバは Nginx を想定。 munin 用ディレクトリは /var/www/munin とする。 root ユーザでの作業を想定。 1. munin のインストール # apt -y install munin 2. 設定ファイルの編集 File: /etc/munin/munin.conf dbdir /var/lib/munin # &lt;= コメント解除 htmldir /var/www/munin # &lt;= コメント解除＆変更 logdir /var/log/munin...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2020/01/20/debian-10-munin-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - munin 各種監視追加！",
        "excerpt":"Debian GNU/Linux 10 (buster) にインストールしたサーバ監視ツール munin に各種監視を追加する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 サーバ監視ツール munin がインストール済み。 ハードディスク温度の監視を追加する。 CPU 温度・電圧・ファン回転数の監視を追加する。 MariaDB の監視を追加する。 Nginx の監視を追加する。 root ユーザでの作業を想定。 仮想マシンの場合、センサーがないため、センサー部分が正常に機能しない（設定できない）ということに留意。 1. ハードディスク温度の監視追加 smartctl コマンドを使用するので、以下のようにしてインストールしておく。 # apt -y install smartmontools 以下のように設定ファイル hddtemp_smartctl を作成する。（munin-node に追記してもよい） File: /etc/munin/plugin-conf.d/hddtemp_smartctl [hddtemp_smartctl] user root env.drives sda #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2020/01/23/debian-10-munin-additional-setting/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - Monit でプロセス監視（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 10 (buster) にプロセス監視ツール monit をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 root ユーザでの作業を想定。 Debian 9 (stretch) にはパッケージが存在したが、 10 (buster) には存在しないため、ソースをビルドしてインストール必要がある。 当記事執筆時点で最新の 5.26.0 をインストールする。 1. アーカイブファイルのダウンロード＆展開 # cd /usr/local/src # wget https://mmonit.com/monit/dist/monit-5.26.0.tar.gz # tar zxvf monit-5.26.0.tar.gz 2. ビルド＆インストール # cd monit-5.26.0 # ./configure # make #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2020/01/26/debian-10-monit-installation/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - 地図描画ツール GMT インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 10 (buster) に地図描画ツール GMT(Generic Mapping Tool) をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 10 (buster) での作業を想定。 当記事執筆時点で最新の安定版 6.0.0 をインストールする。 root での作業を想定。 Github からソースを取得するので、 git がインストール済みであること。 1. 依存パッケージのインストール # apt install subversion build-essential cmake \\ libcurl4-gnutls-dev libnetcdf-dev libgdal-dev \\ libfftw3-dev libpcre3-dev liblapack-dev libblas-dev 「BuildingGMT - GMT - GMT -...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2020/01/29/debian-10-gmt-installation/",
        "teaser": null
      },{
        "title": "2020年1月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 25,531 67.9124 Mac OS 7,651 20.3517 Linux 1,695 4.5087 Android 1,537 4.0884 Ubuntu Linux 897 2.3860 unknown 231 0.6145 Fedora Linux 35 0.0931 FreeBSD 12 0.0319 Solaris 2 0.0053 Wii 2 0.0053 3DS 1 0.0027 合　計 37,594 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/02/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - 仮想化ソフト VirtualBox のインストール！",
        "excerpt":"Debian GNU/Linux 10 (buster) に仮想化ソフト VirtualBox をインストールする方法についての記録です。 0. 前提条件 Debian GNU/Linux 10 (buster) へのインストールを想定。 サーバ CUI 環境ではなく、ローカルな GUI 環境を想定。 当記事執筆時点で最新の 6.1.2 をインストール。 1. sources.list の編集 /etc/apt/sources.list に直接記述してもよいが、当方は /etc/apt/sources.list.d/virtualbox.list を作成した。 File: /etc/apt/sources.list.d/virtualbox.list deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian buster contrib 2. 署名キーの導入 署名キーの取得＆導入。 $ wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - $...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2020/02/02/debian-10-virtualbox-installation/",
        "teaser": null
      },{
        "title": "Ruby - 二項係数の計算！",
        "excerpt":"Ruby で二項係数の計算をしてみました。（各種計算式を使用して） 0. 前提条件 Debian GNU/Linux 10.2 (64bit) での作業を想定。 Ruby 2.7.0 での作業を想定。 1. 二項係数について \\(n\\) 個の物から \\(r\\) 個のものを選ぶ組み合わせは \\(_nC_r\\) 通りあり、 \\(\\displaystyle \\binom{n}{r}\\) とも表す。また、二項級数（二項定理）の係数であることから、 \\(\\textbf{二項係数}\\) とも呼ばれる。 以下、二項係数の主な重要性質。 \\[\\begin{eqnarray} \\binom{n}{r} &amp;=&amp; _nC_r = \\frac{_nP_r}{r!} = \\frac{n!}{r!(n - r)!} \\tag{1} \\\\ \\binom{n}{r} &amp;=&amp; \\binom{n}{n-r} \\\\ \\binom{n}{0} &amp;=&amp; 1 \\\\ \\binom{n}{r} &amp;=&amp; \\binom{n-1}{r} +...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/02/05/ruby-binomial-coefficients/",
        "teaser": null
      },{
        "title": "Fortran - 二項係数の計算！",
        "excerpt":"Fortran 95 で二項係数の計算をしてみました。（各種計算式を使用して） また、計算結果が多倍長になることを考慮し、多倍長演算ライブラリ FMLIB を使用しています。 0. 前提条件 Debian GNU/Linux 10.2 (64bit) での作業を想定。 GCC 9.2.0 (GFortran 9.2.0) でのコンパイルを想定。 多倍長演算（多桁計算）には、 FMLIB を使用する。（後述 3 ） 1. 二項係数について \\(n\\) 個の物から \\(r\\) 個のものを選ぶ組み合わせは \\(_nC_r\\) 通りあり、 \\(\\displaystyle \\binom{n}{r}\\) とも表す。また、二項級数（二項定理）の係数であることから、 \\(\\textbf{二項係数}\\)とも呼ばれる。 以下、二項係数の主な重要性質。 \\[\\begin{eqnarray} \\binom{n}{r} &amp;=&amp; _nC_r = \\frac{_nP_r}{r!} = \\frac{n!}{r!(n - r)!} \\tag{1} \\\\ \\binom{n}{r} &amp;=&amp;...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/02/08/fortran95-binomial-coefficients/",
        "teaser": null
      },{
        "title": "Ruby - スピアマン順位相関係数の計算！",
        "excerpt":"Ruby でスピアマンの順位相関係数(Spearman’s Rank Correlation Coefficient)の計算をしてみました。 0. 前提条件 Debian GNU/Linux 10.2 (64bit) での作業を想定。 Ruby 2.7.0 での作業を想定。 1. スピアマンの順位相関係数について 各変量を順位に変換してピアソンの積率相関係数（いわゆる相関係数）を求めたものを スピアマンの順位相関係数(Spearman’s Rank Correlation Coefficient) と呼ぶ。 実際にはまず、 \\(n\\) 対の変数 \\(X, Y\\) のそれぞれに順位をつける。但し、同順位（タイ）がある場合は中央（平均）順位(mid-rank) で順位をつける。 （e.g. 2位が3個ある場合、 \\((2+3+4)/3=3\\)。3位が2個ある場合、 \\((3+4)/2=3.5\\)） そして、次の式によりスピアマンの順位相関係数 \\(r_s\\)（または \\(\\rho\\)）を求める。 (1) 同順位（タイ）が存在しない場合、 \\(\\begin{eqnarray*} r_s = 1 - \\frac{6}{n(n^{2} - 1)} \\displaystyle \\sum^{n}_{i=1}(X_i -...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/02/11/ruby-rcc-spearman/",
        "teaser": null
      },{
        "title": "Ruby - ケンドール順位相関係数の計算！",
        "excerpt":"Ruby でケンドールの順位相関係数(Kendall’s Rank Correlation Coefficient)の計算をしてみました。 0. 前提条件 Debian GNU/Linux 10.2 buster (64bit) での作業を想定。 Ruby 2.7.0 での作業を想定。 1. ケンドールの順位相関係数について \\(n\\) 対の順位データ \\((x_i, y_i) (i=1,2,\\cdots,n)\\) があるとき、それの中から取り出した \\((x_s, y_s),\\ (x_t, y_t)\\ (1 \\leq s \\lt t \\leq n)\\) において、 \\[\\begin{eqnarray*} P&amp;:&amp; x_s と x_t,\\ y_s と y_t の大小関係が一致する組の数 \\\\ Q&amp;:&amp; x_s と x_t,\\...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/02/14/ruby-rcc-kendall/",
        "teaser": null
      },{
        "title": "Fortran - スピアマン順位相関係数の計算！",
        "excerpt":"Fortran 95 でスピアマンの順位相関係数(Spearman’s Rank Correlation Coefficient)の計算をしてみました。 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (GFortran 9.2.0) でのコンパイルを想定。 1. スピアマンの順位相関係数について 各変量を順位に変換してピアソンの積率相関係数（いわゆる相関係数）を求めたものを スピアマンの順位相関係数(Spearman’s Rank Correlation Coefficient) と呼ぶ。 実際にはまず、 \\(n\\) 対の変数 \\(X, Y\\) のそれぞれに順位をつける。但し、同順位（タイ）がある場合は中央（平均）順位(mid-rank) で順位をつける。 （e.g. 2位が3個ある場合、 \\((2+3+4)/3=3\\)。3位が2個ある場合、 \\((3+4)/2=3.5\\)） そして、次の式によりスピアマンの順位相関係数 \\(r_s\\)（または \\(\\rho\\)）を求める。 (1) 同順位（タイ）が存在しない場合、 \\(\\begin{eqnarray*} r_s = 1 - \\frac{6}{n(n^{2} - 1)}...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2020/02/17/fortran95-rcc-spearman/",
        "teaser": null
      },{
        "title": "Fortran - ケンドール順位相関係数の計算！",
        "excerpt":"Fortran 95 でケンドールの順位相関係数(Kendall’s Rank Correlation Coefficient)の計算をしてみました。 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (GFortran 9.2.0) でのコンパイルを想定。 1. ケンドールの順位相関係数について \\(n\\) 対の順位データ \\((x_i, y_i) (i=1,2,\\cdots,n)\\) があるとき、それの中から取り出した \\((x_s, y_s),\\ (x_t, y_t)\\ (1 \\leq s \\lt t \\leq n)\\) において、 \\[\\begin{eqnarray*} P&amp;:&amp; x_s と x_t,\\ y_s と y_t の大小関係が一致する組の数 \\\\ Q&amp;:&amp; x_s...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2020/02/20/fortran95-rcc-kendall/",
        "teaser": null
      },{
        "title": "Ruby - Array クラスを拡張して重回帰分析（説明変数3個）！",
        "excerpt":"以前、 Ruby で、説明（独立）変数2個、目的（従属）変数1個の「重回帰式」を計算する方法を紹介しました。 Ruby - Array クラス拡張で重回帰式計算！ Ruby - Array クラスを拡張して重回帰分析（2次多項式モデル）！ 今回は、説明（独立）変数3個の場合の重回帰式を計算してみました。 0. 前提条件 Debian GNU/Linux 10.3 buster (64bit) での作業を想定。 Ruby 2.7.0 での作業を想定。 1. アルゴリズム 求める重回帰式を \\(y=b_0+b_1x_1+b_2x_2+b_3x_3\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - b_0 - b_1x_{1i} - b_2x_{2i} - b_3x_{3i})^2 \\end{eqnarray*}\\] となる。 \\(b_0,\\ b_1,\\ b_2,\\ b_3\\) それぞれで偏微分したものを \\(0\\)...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/02/23/ruby-multiple-regression-function-3exp/",
        "teaser": null
      },{
        "title": "Fortran - 重回帰式計算（説明変数3個）！",
        "excerpt":"以前、 Fortran 95 で、説明（独立）変数2個、目的（従属）変数1個の「重回帰式」を計算する方法を紹介しました。 Fortran - 重回帰式計算（説明変数2個）！ Fortran - 重回帰式計算（説明変数2個）（その2）！ 今回は、説明（独立）変数3個の場合の重回帰式を計算してみました。 前回、同じことを Ruby で Array クラスを拡張する方法で実装しています。 Ruby - Array クラスを拡張して重回帰分析（説明変数3個）！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (GFortran 9.2.0) でのコンパイルを想定。 1. アルゴリズム 求める重回帰式を \\(y=b_0+b_1x_1+b_2x_2+b_3x_3\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - b_0 - b_1x_{1i} - b_2x_{2i} -...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2020/02/26/fortran95-multiple-regression-function-3exp/",
        "teaser": null
      },{
        "title": "Ruby - 重回帰分析・自由度調整済み決定係数の計算！",
        "excerpt":"重回帰分析における自由度調整済み決定係数の計算を Ruby で行ってみました。 0. 前提条件 Debian GNU/Linux 10.3 buster (64bit) での作業を想定。 Ruby 2.7.0 での作業を想定。 1. 自由度調整済み決定係数について 決定係数は説明変数（独立変数）の数が増えるほど 1 に近づくという性質を持っている。そのため、説明変数の数が多い（重回帰分析）場合には、補正した自由度調整済み決定係数（自由度修正済み決定係数）を使う。 計算式は次のとおり。 \\[\\begin{eqnarray*} 自由度調整済み決定係数\\ R^2_f = 1 - \\frac{\\frac{S_E}{N-p-1}}{\\frac{S_{y^2}}{N-1}} \\end{eqnarray*}\\] 但し、 \\[\\begin{eqnarray*} 標本値の変動 &amp;=&amp; \\sum_{i=1}^{N}(y_i - \\bar{y})^2 = S_{y^2} \\\\ 残差の変動 &amp;=&amp; \\sum_{i=1}^{N}(y_i - Y_i)^2 = S_E \\\\ p &amp;:&amp; 説明（独立）変数の個数 \\\\...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/02/29/ruby-adjusted-coefficient-of-determination/",
        "teaser": null
      },{
        "title": "2020年2月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,654 70.1037 Mac OS 6,142 19.0067 Linux 1,401 4.3354 Android 1,124 3.4783 Ubuntu Linux 715 2.2126 unknown 229 0.7086 Fedora Linux 29 0.0897 FreeBSD 16 0.0495 OpenBSD 2 0.0062 Solaris 2 0.0062 PlayStation 1 0.0031 合　計 32,315 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/03/01/blog-access/",
        "teaser": null
      },{
        "title": "Fortran - 重回帰分析・自由度調整済み決定係数の計算！",
        "excerpt":"重回帰分析における自由度調整済み決定係数の計算を Fortran 95 で行ってみました。 前回、同じことを Ruby で Array クラスを拡張する方法で実装しています。 Ruby - 重回帰分析・自由度調整済み決定係数の計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (GFortran 9.2.0) でのコンパイルを想定。 1. 自由度調整済み決定係数について 決定係数は説明変数（独立変数）の数が増えるほど 1 に近づくという性質を持っている。そのため、説明変数の数が多い（重回帰分析）場合には、補正した自由度調整済み決定係数（自由度修正済み決定係数）を使う。 計算式は次のとおり。 \\[\\begin{eqnarray*} 自由度調整済み決定係数 R^2_f = 1 - \\frac{\\frac{S_E}{N-p-1}}{\\frac{S_{y^2}}{N-1}} \\end{eqnarray*}\\] 但し、 \\[\\begin{eqnarray*} 標本値の変動 &amp;=&amp; \\sum_{i=1}^{N}(y_i - \\bar{y})^2 = S_{y^2} \\\\ 残差の変動 &amp;=&amp;...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2020/03/03/fortran95-adjusted-coefficient-of-determination/",
        "teaser": null
      },{
        "title": "Ruby - 行列式の計算（余因子展開による）！",
        "excerpt":"Ruby で余因子展開による行列式の計算を行ってみました。 0. 前提条件 Debian GNU/Linux 10.3 buster (64bit) での作業を想定。 Ruby 2.7.0 での作業を想定。 1. 行列式の余因子展開について \\(n(&gt;1)\\) 次正方行列 \\(A=(a _ {ij})\\) から第 \\(i\\) 行と第 \\(j\\) 列の成分をすべて取り除いて得られる \\(n-1\\) 次行列の行列式に、 \\((-1)^{i+j}\\) を掛けたものを \\(a _ {ij}\\) の 余因子 といい、 \\(\\tilde{A} _ {ij}\\) で表す。すなわち、 \\[\\begin{eqnarray} \\tilde{A}_{ij}=(-1)^{i+j}\\left| \\begin{array}{cccccc} a_{11} &amp; \\cdots &amp; a_{1\\ j-1} &amp; a_{1\\...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/03/06/ruby-determinant-by-cofactor-expansion/",
        "teaser": null
      },{
        "title": "Ruby - 逆行列の計算（余因子行列を使用）！",
        "excerpt":"前回、 Ruby で余因子展開による行列式の計算を行いましたが、今回は、それを応用して、逆行列の計算を行ってみました。 Ruby - 行列式の計算（余因子展開による）！ 0. 前提条件 Debian GNU/Linux 10.3 buster (64bit) での作業を想定。 Ruby 2.7.0 での作業を想定。 1. 行列式の余因子展開について \\(n(&gt;1)\\) 次正方行列 \\(A=(a _ {ij})\\) から第 \\(i\\) 行と第 \\(j\\) 列の成分をすべて取り除いて得られる \\(n-1\\) 次行列の行列式に、 \\((-1)^{i+j}\\) を掛けたものを \\(a _ {ij}\\) の 余因子 といい、 \\(\\tilde{A} _ {ij}\\) で表す。すなわち、 \\[\\begin{eqnarray} \\tilde{A}_{ij}=(-1)^{i+j}\\left| \\begin{array}{cccccc} a_{11} &amp; \\cdots &amp;...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/03/09/ruby-inverse-matrix-by-cofactor-matrix/",
        "teaser": null
      },{
        "title": "Fortran - 行列式の計算（余因子展開による）！",
        "excerpt":"Fortran 95 で余因子展開による行列式の計算を行ってみました。 少し前に、同じことを Ruby で Array クラスを拡張する方法で実装しています。 Ruby - 行列式の計算（余因子展開による）！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (GFortran 9.2.0) でのコンパイルを想定。 1. 行列式の余因子展開について \\(n(&gt;1)\\) 次正方行列 \\(A=(a _ {ij})\\) から第 \\(i\\) 行と第 \\(j\\) 列の成分をすべて取り除いて得られる \\(n-1\\) 次行列の行列式に、 \\((-1)^{i+j}\\) を掛けたものを \\(a _ {ij}\\) の 余因子 といい、 \\(\\tilde{A} _ {ij}\\) で表す。すなわち、 \\[\\begin{eqnarray}...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2020/03/23/fortran95-determinant-by-cofactor-expansion/",
        "teaser": null
      },{
        "title": "Fortran - 逆行列の計算（余因子行列を使用）！",
        "excerpt":"前回、 Fortran 95 で余因子展開による行列式の計算を行いましたが、今回は、それを応用して、逆行列の計算を行ってみました。 少し前に、同じことを Ruby で Array クラスを拡張する方法で実装しています。 Ruby - 逆行列の計算（余因子行列を使用）！！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (GFortran 9.2.0) でのコンパイルを想定。 1. 行列式の余因子展開について \\(n(&gt;1)\\) 次正方行列 \\(A=(a _ {ij})\\) から第 \\(i\\) 行と第 \\(j\\) 列の成分をすべて取り除いて得られる \\(n-1\\) 次行列の行列式に、 \\((-1)^{i+j}\\) を掛けたものを \\(a _ {ij}\\) の 余因子 といい、 \\(\\tilde{A} _ {ij}\\) で表す。すなわち、...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2020/03/28/fortran95-inverse-matrix-by-cofactor-matrix/",
        "teaser": null
      },{
        "title": "2020年3月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 26,075 72.8088 Mac OS 6,007 16.7732 Linux 1,682 4.6966 Android 993 2.7727 Ubuntu Linux 812 2.2673 unknown 156 0.4356 Fedora Linux 74 0.2066 FreeBSD 8 0.0223 OpenBSD 2 0.0056 PlayStation 2 0.0056 NetBSD 1 0.0028 Solaris 1 0.0028 合　計 35,813 100.0000 2. アクセスをOS・バージョン別に集計...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/04/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - CSV データ読み込み！",
        "excerpt":"かつて、 C++ で CSV データを読み込む方法について記録しました。 C++ - CSV データ読み込み！ 今回も同様のことをしてみましたが、ある（古めの）書籍に掲載されていたものをほぼそのまま実装してみました。 プログラミング作法 - Amazon.co.jp 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 カンマ前後のスペースは除去しない。 1. C++ コードの作成 File: csv.hpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18...","categories": ["プログラミング"],
        "tags": ["C++"],
        "url": "/2020/04/07/cpp-read-csv-data/",
        "teaser": null
      },{
        "title": "Ruby - 3桁区切りの数字に変換（その2）！",
        "excerpt":"以前、 Ruby で正規表現を利用して数値を3桁区切りの数字に変換する方法（3種）を紹介しました。      Ruby - 3桁区切りの数字に変換！   今回、1種追加します。     方法-4   12345678.to_s.reverse.scan(/.{1,3}/).join(',').reverse   まず数字を逆順に並べ替える。先頭から3文字ずつ分割し、 , で結合。そして最後に数字を逆順に並べ替える。（方法-2の簡略版）     個人的には、今回の「方法-4」が一番分かりやすいように思います。   以上。   ","categories": ["プログラミング"],
        "tags": ["Ruby","正規表現"],
        "url": "/2020/04/19/ruby-convert-val-to-3-digit/",
        "teaser": null
      },{
        "title": "2020年4月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,867 68.6676 Mac OS 6,730 20.2096 Linux 1,505 4.5194 Android 1,132 3.3993 Ubuntu Linux 857 2.5735 unknown 167 0.5015 Fedora Linux 30 0.0901 FreeBSD 8 0.0240 OpenBSD 2 0.0060 PlayStation 2 0.0060 NetBSD 1 0.0030 合　計 33,301 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/05/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - 単回帰直線の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰直線を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。（分散／共分散を使用する方法（実際にはその変形版）もある） 過去には Fortran 等で実装しています。 Fortran - 2つの配列から単回帰直線計算(Ver.2)！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズムについて 当ブログ過去記事を参照のこと。 Ruby - Array クラス拡張で単回帰直線計算！ Python - 2 つの list から単回帰直線計算！ 2. ガウスの消去法による連立1次方程式の解法について 当ブログ過去記事を参照。 C++ - 連立方程式解法（ガウスの消去法）！ Ruby - 連立方程式解法（ガウスの消去法）！ Python - 連立方程式解法（ガウスの消去法）！ Fortran - 連立方程式解法（ガウスの消去法）！...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/05/08/cpp-simple-linear-regression-line/",
        "teaser": null
      },{
        "title": "C++ - 単回帰曲線（2次回帰モデル）の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（2次回帰モデル）を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 2つの配列から単回帰曲線（2次回帰）計算(Ver.2)！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズムについて 求める曲線を \\(y = a + bx + cx ^2\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - bx_i - cx_i^2)^2 \\end{eqnarray*}\\] となる。 \\(a,b,c\\) それぞれで偏微分すると、...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/05/13/cpp-simple-regression-curve-2d/",
        "teaser": null
      },{
        "title": "C++ - 単回帰曲線（3次回帰モデル）の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（3次回帰モデル）を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 2つの配列から単回帰曲線（3次回帰モデル）計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズムについて 求める曲線を \\(y = a + bx + cx ^2 + dx ^3\\) とすると、残差の二乗和 \\(S\\) は \\[S = \\sum_{i=1}^{N}(y_i - a - bx_i - cx_i^2 - dx^3)^2\\]...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/05/18/cpp-simple-regression-curve-3d/",
        "teaser": null
      },{
        "title": "C++ - 単回帰曲線（4次回帰モデル）の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（4次回帰モデル）を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 2つの配列から単回帰曲線（4次回帰モデル）計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズムについて 求める曲線を \\(y = a + bx + cx ^2 + dx ^3 + ex ^4\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - bx_i...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/05/23/cpp-simple-regression-curve-4d/",
        "teaser": null
      },{
        "title": "C++ - 単回帰曲線（ルート回帰モデル）の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（ルート回帰モデル）を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 2つの配列から単回帰曲線（ルート回帰モデル）計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズムについて 求める曲線を \\(y = a + b\\sqrt{x}\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - b\\sqrt{x})^2 \\end{eqnarray*}\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial S}{\\partial...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/05/28/cpp-simple-regression-curve-sqrt/",
        "teaser": null
      },{
        "title": "2020年5月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 27,620 65.7009 Mac OS 9,761 23.2189 Linux 1,867 4.4411 Android 1,615 3.8417 Ubuntu Linux 882 2.0981 unknown 234 0.5566 Fedora Linux 42 0.0999 FreeBSD 16 0.0381 PlayStation 2 0.0048 合　計 42,039 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 22,726 54.0593 Mac...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/06/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - 単回帰曲線（自然対数回帰モデル）の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（自然対数回帰モデル）を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 2つの配列から単回帰曲線（自然対数回帰モデル）計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズムについて 求める曲線を \\(y = a + b \\log_e{x}\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - b\\log_e{x})^2 \\end{eqnarray*}\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/06/02/cpp-simple-regression-curve-ln/",
        "teaser": null
      },{
        "title": "C++ - 単回帰曲線（分数（逆数）回帰モデル）の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（分数（逆数）回帰モデル）を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 2つの配列から単回帰曲線（分数（逆数）回帰モデル）計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズムについて 求める曲線を \\(\\displaystyle y = a + \\frac{b}{x}\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - a - \\frac{b}{x})^2 \\end{eqnarray*}\\] となる。 \\(a,b\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/06/07/cpp-simple-regression-curve-frac/",
        "teaser": null
      },{
        "title": "C++ - 単回帰曲線（べき乗回帰モデル）の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（べき乗回帰モデル）を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 2つの配列から単回帰曲線（べき乗回帰モデル）計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズムについて 求める曲線を \\(y = a x^b\\) とする。両辺自然対数をとると \\(\\log{y} = \\log{ax^b}\\) で、さらに \\(\\log{y}=\\log{a} + b\\log{x}\\) と変形できる。 （ここでの \\(\\log\\) は自然対数 \\(\\log_e\\) のことである） そして、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(\\log{y_i}...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/06/12/cpp-simple-regression-curve-pow/",
        "teaser": null
      },{
        "title": "C++ - 単回帰曲線（指数（ab指数）回帰モデル）の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（指数（ab指数）回帰モデル）を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 2つの配列から単回帰曲線（指数（ab指数）回帰モデル）計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズムについて 求める曲線を \\(y = ab^x\\) とする。両辺自然対数をとると \\(\\log{y} = \\log{ab^x}\\) で、さらに \\(\\log{y}=\\log{a} + x\\log{b}\\) と変形できる。 （ここでの \\(\\log\\) は自然対数 \\(\\log_e\\) のことである） そして、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(\\log{y_i} -...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/06/17/cpp-simple-regression-curve-exp/",
        "teaser": null
      },{
        "title": "C++ - 単回帰曲線（e指数回帰モデル）の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（e指数回帰モデル）を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 2つの配列から単回帰曲線（e指数回帰モデル）計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズムについて 求める曲線を \\(y=ae^{bx}\\) とする。両辺自然対数をとると \\(\\log{y} = \\log{ae^{bx}}\\) で、さらに \\(\\log{y}=\\log{a} + bx\\) と変形できる。 （ここでの \\(\\log\\) は自然対数 \\(\\log_e\\) のことである） そして、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(\\log{y_i} - \\log{a} -...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/06/22/cpp-simple-regression-curve-expe/",
        "teaser": null
      },{
        "title": "C++ - 単回帰分析（線形回帰）の決定係数計算！",
        "excerpt":"C++ で2つの単回帰分析（線形回帰; 単回帰直線）の決定係数を計算してみました。 過去には Fortran 等で実装しています。 Ruby - 単回帰分析（線形回帰）の決定係数計算！ Fortran - 単回帰分析（線形回帰）の決定係数計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. 決定係数について 回帰分析において、目的変数の標本値（実測値）に対する目的変数の推測値（予測値）の説明力を表す指標（言い換えれば、説明変数（独立変数）が目的変数（従属変数）をどれくらい説明できているかを表す統計量）が \\[\\begin{eqnarray*} 決定係数 R^2 \\end{eqnarray*}\\] である。（「\\(R\\)の\\(2\\)乗」で表現するが、必ずしも何かの値の \\(2\\) 乗になるという意味ではない） 決定係数 \\(R^2\\) は次のように定義する。（定義の仕方は複数あるが、次の定義が最も一般的） \\[\\begin{eqnarray*} 決定係数 R^2 = \\frac{推定値の変動}{標本値の変動} = \\frac{S_R}{S_{y^2}} \\end{eqnarray*}\\] 但し、 \\[\\begin{eqnarray*} 標本値の変動 &amp;=&amp;...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/06/27/cpp-regression-coefficient-of-determination/",
        "teaser": null
      },{
        "title": "2020年6月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"7月になりましたので、先月6月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 30,793 66.8890 Mac OS 10,772 23.3991 Android 1,884 4.0924 Linux 1,548 3.3626 Ubuntu Linux 780 1.6943 unknown 227 0.4931 Fedora Linux 19 0.0413 FreeBSD 8 0.0174 PlayStation 3 0.0065 OpenBSD 1 0.0022 Solaris 1 0.0022 合　計 46,036 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/07/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - 単回帰分析（2次曲線回帰）の決定係数計算！",
        "excerpt":"C++ で単回帰分析（2次曲線回帰）の決定係数を計算してみました。 過去には Fortran 等で実装しています。 Ruby - 単回帰分析（2次曲線回帰）の決定係数計算！ Fortran - 単回帰分析（2次曲線回帰）の決定係数計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. 決定係数について 回帰分析において、目的変数の標本値（実測値）に対する目的変数の推測値（予測値）の説明力を表す指標（言い換えれば、説明変数（独立変数）が目的変数（従属変数）をどれくらい説明できているかを表す統計量）が \\[\\begin{eqnarray*} 決定係数 R^2 \\end{eqnarray*}\\] である。（「\\(R\\)の\\(2\\)乗」で表現するが、必ずしも何かの値の \\(2\\) 乗になるという意味ではない） 決定係数 \\(R^2\\) は次のように定義する。（定義の仕方は複数あるが、次の定義が最も一般的） \\[\\begin{eqnarray*} 決定係数 R^2 = \\frac{推定値の変動}{標本値の変動} = \\frac{S_R}{S_{y^2}} \\end{eqnarray*}\\] 但し、 \\[\\begin{eqnarray*} 標本値の変動 &amp;=&amp; \\sum_{i=1}^{N}(y_i...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/07/03/cpp-regression-coefficient-of-determination-2d/",
        "teaser": null
      },{
        "title": "C++ - 重回帰式計算（説明変数2個）！",
        "excerpt":"C++ で、数値からなる同サイズの配列3個を説明変数2個・目的変数1個とみなして重回帰式を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 重回帰式計算（説明変数2個）（その2）！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズム 求める重回帰式を \\(y=b_0+b_1x_1+b_2x_2\\) （説明変数が2個の場合）とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - b_0 - b_1x_{1i} - b_2x_{2i})^2 \\end{eqnarray*}\\] となる。 \\(b_0,b_1,b_2\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial S}{\\partial b_0} &amp;=&amp;...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/07/08/cpp-multiple-regression-equation/",
        "teaser": null
      },{
        "title": "C++ - 重回帰式計算（説明変数3個）！",
        "excerpt":"C++ で、数値からなる同サイズの配列4個を説明変数3個・目的変数1個とみなして重回帰式を計算する方法についての記録です。 連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 重回帰式計算（説明変数2個）（その2）！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズム 求める重回帰式を \\(y=b_0+b_1x_1+b_2x_2+b_3x_3\\) とすると、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum_{i=1}^{N}(y_i - b_0 - b_1x_{1i} - b_2x_{2i} - b_3x_{3i})^2 \\end{eqnarray*}\\] となる。 \\(b_0,\\ b_1,\\ b_2,\\ b_3\\) それぞれで偏微分したものを \\(0\\) とする。...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/07/13/cpp-multiple-regression-equation-3e/",
        "teaser": null
      },{
        "title": "C++ - 重回帰分析（2次多項式モデル）！",
        "excerpt":"C++ で、数値からなる同サイズの配列3個を説明変数2個・目的変数1個とみなして重回帰式を計算する方法についての記録です。（今回は2次多項式モデル） 連立1次方程式を解くのに「ガウスの消去法」を使用します。 過去には Fortran 等で実装しています。 Fortran - 2 つの配列から重回帰分析（2次多項式モデル）！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズム 求める重回帰式を \\(y=b_0+b_1x_1+b_2x_2+b_3x_1x_2+b_4{x_1}^2+b_5{x_2}^2\\) （説明変数が2個）とする場合、 \\(x_3=x_1x_2,\\ x_4={x_1}^2,\\ x_5={x_2}^2\\) と置くと、 \\(y=b_0+b_1x_1+b_2x_2+b_3x_3+b_4x_4+b_5x_5\\) （説明変数が5個）となるので、残差の二乗和 \\(S\\) は \\[\\begin{eqnarray*} S = \\sum(y_i - b_0 - b_1x_{1i} - b_2x_{2i} - b_3x_{3i} - b_4x_{4i}...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/07/18/cpp-multiple-regression-function-2d/",
        "teaser": null
      },{
        "title": "C++ - 重回帰分析・自由度調整済み決定係数の計算！",
        "excerpt":"重回帰分析における自由度調整済み決定係数の計算を C++ で行ってみました。 過去には Fortran 等で実装しています。 Fortran - 重回帰分析・自由度調整済み決定係数の計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. アルゴリズム 決定係数は説明変数（独立変数）の数が増えるほど 1 に近づくという性質を持っている。そのため、説明変数の数が多い（重回帰分析）場合には、補正した自由度調整済み決定係数（自由度修正済み決定係数）を使う。 計算式は次のとおり。 \\[\\begin{eqnarray*} 自由度調整済み決定係数 R^2_f = 1 - \\frac{\\frac{S_E}{N-p-1}}{\\frac{S_{y^2}}{N-1}} \\end{eqnarray*}\\] 但し、 \\[\\begin{eqnarray*} 標本値の変動 &amp;=&amp; \\sum_{i=1}^{N}(y_i - \\bar{y})^2 = S_{y^2} \\\\ 残差の変動 &amp;=&amp; \\sum_{i=1}^{N}(y_i -...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/07/23/cpp-adjusted-coefficient-of-determination/",
        "teaser": null
      },{
        "title": "C++ - LU 分解（外積形式ガウス法(outer-product form)）！",
        "excerpt":"C++ で正方行列の LU 分解アルゴリズムを実装してみました。 今回使用する分解法は「外積形式ガウス法(outer-product form)」です。 過去には Ruby, Fortran で実装しています。 Ruby - LU 分解（外積形式ガウス法(outer-product form)）！ Fortran - LU 分解（外積形式ガウス法(outer-product form)）！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. LU 分解について 分解する方法には以下のようなものがある。（最初の3つがよく知られているもの） 外積形式ガウス法 内積形式ガウス法 クラウト法 ブロック形式ガウス法 縦ブロックガウス法 前進・後退代入 … 2. LU 分解（外積形式ガウス法(outer-product form)）について ガウス消去法と同等の操作で LU...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/07/28/cpp-lu-decomposition-by-outer-product/",
        "teaser": null
      },{
        "title": "2020年7月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"8月になりましたので、先月7月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 33,510 71.4606 Mac OS 9,529 20.3207 Android 1,530 3.2627 Linux 1,406 2.9983 Ubuntu Linux 707 1.5077 unknown 178 0.3796 Fedora Linux 26 0.0554 FreeBSD 5 0.0107 3DS 1 0.0021 PlayStation 1 0.0021 合　計 46,893 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/08/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - LU 分解（内積形式ガウス法(inner-product form)）！",
        "excerpt":"C++ で正方行列の LU 分解アルゴリズムを実装してみました。 今回使用する分解法は「内積形式ガウス法(inner-product form)」です。 過去には Ruby, Fortran で実装しています。 Ruby - LU 分解（内積形式ガウス法(inner-product form)）！ Fortran - LU 分解（内積形式ガウス法(inner-product form)）！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. LU 分解について 分解する方法には以下のようなものがある。（最初の3つがよく知られているもの） 外積形式ガウス法 内積形式ガウス法 クラウト法 ブロック形式ガウス法 縦ブロックガウス法 前進・後退代入 … 2. LU 分解（内積形式ガウス法(inner-product form)）について LU 分解がなされたと仮定した上で、行列...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/08/02/cpp-lu-decomposition-by-inner-product/",
        "teaser": null
      },{
        "title": "C++ - LU 分解（クラウト法(Crout method)）！",
        "excerpt":"C++ で正方行列の LU 分解アルゴリズムを実装してみました。 今回使用する分解法は「クラウト法(Crout method)」です。 過去には Ruby, Fortran で実装しています。 Ruby - LU 分解（クラウト法(Crout method)）！ Fortran - LU 分解（クラウト法(Crout method)）！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. LU 分解について 分解する方法には以下のようなものがある。（最初の3つがよく知られているもの） 外積形式ガウス法 内積形式ガウス法 クラウト法 ブロック形式ガウス法 縦ブロックガウス法 前進・後退代入 … 2. LU 分解（クラウト法(Crout method)）について LU 分解がなされたと仮定した上で、行列...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/08/07/cpp-lu-decomposition-by-crout/",
        "teaser": null
      },{
        "title": "C++ - 3次スプライン補間！",
        "excerpt":"C++ で3次スプライン補間のアルゴリズムを実装してみました。 過去には Ruby, Python, Fortran で実装しています。 Ruby - ３次スプライン補間！ Python - ３次スプライン補間！ Fortran - ３次スプライン補間！ 0. 前提条件 LMDE 3 (Linux Mint Debian Edition 3; 64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. 3次スプライン補間について 過去記事を参照のこと。 Ruby - ３次スプライン補間！ Python - ３次スプライン補間！ Fortran - ３次スプライン補間！ 2. ソースコードの作成 ファイル読み込み部分、計算部分、実行部分とソースファイルを分けている。 File: file.hpp...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/08/12/cpp-spline-interpolation/",
        "teaser": null
      },{
        "title": "C++ - 階乗計算(with GMP)！",
        "excerpt":"C++ で任意精度算術ライブラリ GMP(The GNU Multi Precision Arithmetic Library) を使って、階乗の計算をしてみました。 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 GMP 6.2.0 でのコンパイルを想定。 （GMP がインストール済みであること。インストール方法： GMP - ソースビルドでインストール (on Linux Mint)！） 1. ソースコードの作成 File: factorial.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/08/19/cpp-factorial-calculation/",
        "teaser": null
      },{
        "title": "C++ - 整数判定（正規表現）！",
        "excerpt":"C++ で文字列が整数か否かを正規表現を使用して判定する方法についてです。 （別途作成予定のツールで部品として使用するための事前準備） 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. ソースコードの作成 正規表現を使用して判定する。 stoi 等を利用した判定方法もあるが、期待しない例外が発生したり、場合分けが面倒になる。 File: is_integer.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27...","categories": ["プログラミング"],
        "tags": ["C++","正規表現"],
        "url": "/2020/08/26/cpp-integer-judgment/",
        "teaser": null
      },{
        "title": "2020年8月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"9月になりましたので、先月8月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 23,981 68.7391 Mac OS 7,399 21.2085 Linux 1,491 4.2738 Android 1,245 3.5687 Ubuntu Linux 543 1.5565 unknown 182 0.5217 Fedora Linux 29 0.0831 FreeBSD 14 0.0401 NetBSD 2 0.0057 PlayStation 1 0.0029 合　計 34,887 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/09/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - 実数判定（正規表現）！",
        "excerpt":"C++ で文字列が実数か否かを正規表現を使用して判定する方法についてです。 （別途作成予定のツールで部品として使用するための事前準備） 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. ソースコードの作成 正規表現を使用して判定する。 stof 等を利用した判定方法もあるが、期待しない例外が発生したり、場合分けが面倒になる。 File: is_real.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27...","categories": ["プログラミング"],
        "tags": ["C++","正規表現"],
        "url": "/2020/09/02/cpp-real-number-judgment/",
        "teaser": null
      },{
        "title": "C++ - 二項係数の計算！",
        "excerpt":"C++ で二項係数の計算をしてみました。（各種計算式を使用して） 過去には Ruby や Fortran で計算しています。 Ruby - 二項係数の計算！ Fortran - 二項係数の計算！ 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 任意精度算術ライブラリ GMP(The GNU Multi Precision Arithmetic Library) を利用する。 1. 二項係数について \\(n\\) 個の物から \\(r\\) 個のものを選ぶ組み合わせは \\(_nC_r\\) 通りあり、 \\(\\displaystyle \\binom{n}{r}\\) とも表す。また、二項級数（二項定理）の係数であることから、 \\(\\textbf{二項係数}\\) とも呼ばれる。 以下、二項係数の主な重要性質。 \\[\\begin{eqnarray} \\binom{n}{r}...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/09/09/cpp-binomial-coefficients/",
        "teaser": null
      },{
        "title": "C++ - ランク付け（同順位考慮）！",
        "excerpt":"C++ で複数の整数入力値にランクを付ける処理（同順位考慮）を実装してみました。 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. ソースコードの作成 整数限定。（微改修で小数点数対応化） 数値が大きい順に順位を付ける。 同順位を考慮する。（例：要素が 3, 1, 3, 2 で、大きい順に順位付ける場合の順位を 1, 4, 1, 3 とする） 入力値全てを vector に格納し、自身より大きい要素の個数 +1 をその要素の順位とするアルゴリズム。 File: rank.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング"],
        "tags": ["C++"],
        "url": "/2020/09/16/cpp-ranking-with-same-rank/",
        "teaser": null
      },{
        "title": "C++ - ランク付け（同順位は中央順位法で）！",
        "excerpt":"前回、 C++ で複数の整数入力値にランクを付ける処理（同順位考慮）を実装してみましたが、今回はその発展形として、同順位（タイ）がある場合は中央（平均）順位(mid-rank)法で順位を付けるようにしてみました。 0. 前提条件 Debian GNU/Linux 10.3 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. ソースコードの作成 整数限定。（微改修で小数点数対応化） 数値が大きい順に順位を付ける。 同順位を考慮する。（例：要素が 2, 1, 3, 2 で、大きい順に順位付ける場合の順位を 2.5, 4, 1, 2.5 とする） File: rank_2.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...","categories": ["プログラミング"],
        "tags": ["C++"],
        "url": "/2020/09/23/cpp-ranking-with-same-rank-2/",
        "teaser": null
      },{
        "title": "C++ - スピアマン順位相関係数の計算！",
        "excerpt":"C++ でスピアマンの順位相関係数(Spearman’s Rank Correlation Coefficient)の計算をしてみました。 過去には Ruby や Fortran で行っています。 Ruby - スピアマン順位相関係数の計算！ Fortran - スピアマン順位相関係数の計算！ 0. 前提条件 Debian GNU/Linux 10.5 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. スピアマンの順位相関係数について 各変量を順位に変換してピアソンの積率相関係数（いわゆる相関係数）を求めたものを スピアマンの順位相関係数(Spearman’s Rank Correlation Coefficient) と呼ぶ。 実際にはまず、 \\(n\\) 対の変数 \\(X, Y\\) のそれぞれに順位をつける。但し、同順位（タイ）がある場合は中央（平均）順位(mid-rank) で順位をつける。 （e.g. 2位が3個ある場合、 \\((2+3+4)/3=3\\)。3位が2個ある場合、 \\((3+4)/2=3.5\\)） そして、次の式によりスピアマンの順位相関係数 \\(r_s\\)（または...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/09/30/cpp-rcc-spearman/",
        "teaser": null
      },{
        "title": "2020年9月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"10月になりましたので、先月9月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 25,160 71.2002 Mac OS 6,784 19.1980 Linux 1,441 4.0779 Android 1,215 3.4383 Ubuntu Linux 518 1.4659 unknown 181 0.5122 Fedora Linux 32 0.0906 FreeBSD 5 0.0141 PlayStation 1 0.0028 合　計 35,337 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 19,517 55.2311 Mac...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/10/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - ケンドール順位相関係数の計算！",
        "excerpt":"C++ でケンドールの順位相関係数(Kendall’s Rank Correlation Coefficient)の計算をしてみました。 過去には Ruby や Fortran で行っています。 Ruby - ケンドール順位相関係数の計算！ Fortran - ケンドール順位相関係数の計算！ 0. 前提条件 Debian GNU/Linux 10.5 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. ケンドールの順位相関係数について \\(n\\) 対の順位データ \\((x_i, y_i) (i=1,2,\\cdots,n)\\) があるとき、それの中から取り出した \\((x_s, y_s),\\ (x_t, y_t)\\ (1 \\leq s \\lt t \\leq n)\\) において、 \\[\\begin{eqnarray*}...","categories": ["数学","プログラミング"],
        "tags": ["C++"],
        "url": "/2020/10/07/cpp-rcc-kendall/",
        "teaser": null
      },{
        "title": "C++ - Vincenty 法による地球楕円体上の距離計算！",
        "excerpt":"地球楕円体上の任意の2地点間の距離やそれぞれから見た方位角、また、1地点から見た方位角・距離にある地点の位置等を計算するために Vincenty 法なるアルゴリズムが存在します。 今回、 C++ で「地球楕円体上の任意の2地点間の距離やそれぞれから見た方位角」の計算処理を実装してみました。 過去には、 Ruby や Fortran で実装しています。 Ruby - Vincenty 法による地球楕円体上の距離／位置計算！ Fortran 2003 - Vincenty 法による地球楕円体上の距離／位置計算！ 0. 前提条件 Debian GNU/Linux 10.5 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. Vincenty法 (Vincenty’s formulae) について 1-1. Introduction（紹介） Vincenty 法(Vincenty’s formulae)とは、T.Vincenty が考案した、楕円体上の2点間の距離を計算したり、1点から指定の方角・距離にある点を求めたりするのに使用する反復計算アルゴリズムである、 1-2. Notation（表記法） 以下のように定義する。 \\[\\begin{eqnarray*} a &amp;:&amp;...","categories": ["プログラミング","数学"],
        "tags": ["C++","GIS"],
        "url": "/2020/10/14/cpp-geodesical-calculation-by-vincenty-1/",
        "teaser": null
      },{
        "title": "C++ - Vincenty 法による地球楕円体上の位置計算！",
        "excerpt":"地球楕円体上の任意の2地点間の距離やそれぞれから見た方位角、また、1地点から見た方位角・距離にある地点の位置等を計算するために Vincenty 法なるアルゴリズムが存在します。 前回、 C++ で「地球楕円体上の任意の2地点間の距離やそれぞれから見た方位角」の計算処理を実装してみました。 今回は、 C++ で「地球楕円体上の1地点から見た方位角・距離にある地点の位置等」の計算処理を実装してみました。 過去には、 Ruby や Fortran で実装しています。 Ruby - Vincenty 法による地球楕円体上の距離／位置計算！ Fortran 2003 - Vincenty 法による地球楕円体上の距離／位置計算！ 0. 前提条件 Debian GNU/Linux 10.5 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. Vincenty法 (Vincenty’s formulae) について 1-1. Introduction（紹介） Vincenty 法(Vincenty’s formulae)とは、T.Vincenty が考案した、楕円体上の2点間の距離を計算したり、1点から指定の方角・距離にある点を求めたりするのに使用する反復計算アルゴリズムである、 1-2. Notation（表記法） 以下のように定義する。...","categories": ["プログラミング","数学"],
        "tags": ["C++","GIS"],
        "url": "/2020/10/21/cpp-geodesical-calculation-by-vincenty-2/",
        "teaser": null
      },{
        "title": "Ruby - 数式文字列 => 逆ポーランド記法 変換（スタック使用）！",
        "excerpt":"Ruby で、入力した数式の文字列を逆ポーランド記法（RPN; 後置記法）に変換する処理を実装してみました。 今回はスタックを使用した処理です。（後日、二分木を使用した処理についても紹介予定） 逆ポーランド記法の数式文字列から値を計算する処理（逆ポーランド計算機）については、次回紹介予定です。 ちなみに、過去には Fortran95 で実装しています。 Fortran - スタックの実装（逆ポーランド記法による電卓）！ 0. 前提条件 Debian GNU/Linux 10.5 buster (64bit) での作業を想定。 Ruby 2.7.2 での作業を想定。 演算子は *, /, +, - を想定。（単項演算子は非対応） 括弧は (, ) のみに対応。 1. アルゴリズム（そのままロジック化） 数式文字列をトークン分割（配列化） 配列の先頭から順次読み込んで判定（ループ処理） a. 数値の場合 =&gt; そのまま、出力 b. 括弧・開き ( の場合 =&gt; そのまま、スタックへ push c. 括弧・閉じ )...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/10/28/ruby-convert-infix-to-rpn-with-stack/",
        "teaser": null
      },{
        "title": "2020年10月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"11月になりましたので、先月10月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 27,874 69.2006 Mac OS 8,647 21.4672 Linux 1,479 3.6718 Android 1,460 3.6246 Ubuntu Linux 619 1.5367 unknown 176 0.4369 Fedora Linux 14 0.0348 FreeBSD 7 0.0174 PlayStation 4 0.0099 合　計 40,280 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 23,264 57.7557 Mac...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/11/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - 逆ポーランド記法の評価（計算）！",
        "excerpt":"前回、 Ruby で、入力した数式の文字列を逆ポーランド記法（RPN; 後置記法）に変換する処理を実装してみました。（スタック使用） Ruby - 数式文字列 =&gt; 逆ポーランド記法 変換！ 今回は、出力された逆ポーランド記法での表現を読み込んで計算する処理を実装してみました。 0. 前提条件 Debian GNU/Linux 10.5 buster (64bit) での作業を想定。 Ruby 2.7.2 での作業を想定。 演算子は *, /, +, - を想定。（単項演算子は非対応） 1. アルゴリズム（そのままロジック化） RPN 文字列をトークン分割（配列化） 配列の先頭から順次読み込んで判定（ループ処理） a. 数値の場合 　=&gt; そのまま、スタックへ push b. その他（演算子）の場合 　=&gt; スタックから2個 pop （最初を右側、次を左側のオペランドとする） 　　 左右のオペランドを演算子で計算し、結果を再度スタックへ push 最後にスタックに残った値を pop して出力...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/11/04/ruby-calc-with-rpn-stack/",
        "teaser": null
      },{
        "title": "Ruby - 数式文字列 => 逆ポーランド記法 変換＆計算（二分木使用）！",
        "excerpt":"Ruby で、入力した数式の文字列を逆ポーランド記法（RPN; 後置記法）に変換する処理を実装してみました。（ついでに、後置・中置・前置記法での計算も） 前回・前々回はスタックを使用した処理についてでした。 Ruby - 数式文字列 =&gt; 逆ポーランド記法 変換（スタック使用）！ Ruby - 逆ポーランド記法の評価（計算）！ 今回は二分木を使用した処理についてです。 0. 前提条件 Debian GNU/Linux 10.5 buster (64bit) での作業を想定。 Ruby 2.7.2 での作業を想定。 演算子は *, /, +, - を想定。（単項演算子は非対応） 括弧は (, ) のみに対応。 1. アルゴリズム 次のリンク先（分かりやすく、きれいにまとまっている）のとおり。（自分で説明しようとすると、煩雑化しそう） 二分木を使った数式の逆ポーランド記法化と計算 - Programming/Tips - 総武ソフトウェア推進所 2. Ruby スクリプトの作成 括弧の開きと閉じの対応のチェックも行なう。 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File:...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2020/11/11/ruby-convert-infix-to-rpn-by-binary-tree/",
        "teaser": null
      },{
        "title": "C++ - 数式文字列 => 逆ポーランド記法 変換（スタック使用）！",
        "excerpt":"C++ で、入力した数式の文字列を逆ポーランド記法（RPN; 後置記法）に変換する処理を実装してみました。 今回はスタックを使用した処理です。（後日、二分木を使用した処理についても紹介予定） 逆ポーランド記法の数式文字列から値を計算する処理（逆ポーランド計算機）については、次回紹介予定です。 ちなみに、過去には Fortran95 や Ruby で実装しています。 Fortran - スタックの実装（逆ポーランド記法による電卓）！ Ruby - 数式文字列 =&gt; 逆ポーランド記法 変換（スタック使用）！ 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 演算子は *, /, +, - を想定。（単項演算子は非対応） 括弧は (, ) のみに対応。 1. アルゴリズム（そのままロジック化） 数式文字列をトークン分割（配列化） 配列の先頭から順次読み込んで判定（ループ処理） a. 数値の場合 =&gt; そのまま、出力...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/11/18/cpp-convert-infix-to-rpn-with-stack/",
        "teaser": null
      },{
        "title": "C++ - 逆ポーランド記法の評価（計算）！",
        "excerpt":"前回、 C++ で、入力した数式の文字列を逆ポーランド記法（RPN; 後置記法）に変換する処理を実装してみました。（スタック使用） C++ - 数式文字列 =&gt; 逆ポーランド記法 変換！ 今回は、出力された逆ポーランド記法での表現を読み込んで計算する処理を実装してみました。 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 演算子は *, /, +, - を想定。（単項演算子は非対応） 1. アルゴリズム（そのままロジック化） RPN 文字列をトークン分割（配列化） 配列の先頭から順次読み込んで判定（ループ処理） a. 数値の場合 =&gt; そのまま、スタックへ push b. その他（演算子）の場合 =&gt; スタックから2個 pop （最初を右側、次を左側のオペランドとする） 左右のオペランドを演算子で計算し、結果を再度スタックへ push 最後にスタックに残った値を pop...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/11/25/cpp-calc-with-rpn-stack/",
        "teaser": null
      },{
        "title": "2020年11月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"12月になりましたので、先月11月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 26,065 69.9825 Mac OS 7,578 20.3464 Android 1,462 3.9254 Linux 1,274 3.4206 Ubuntu Linux 627 1.6834 unknown 205 0.5504 Fedora Linux 23 0.0618 Solaris 8 0.0215 FreeBSD 3 0.0081 合　計 37,245 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 21,220 56.9741 Mac...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2020/12/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - 数式文字列 => 逆ポーランド記法 変換＆計算（二分木使用）！",
        "excerpt":"C++ で、入力した数式の文字列を逆ポーランド記法（RPN; 後置記法）に変換する処理を実装してみました。（ついでに、後置・中置・前置記法での計算も） 前回・前々回はスタックを使用した処理についてでした。 C++ - 数式文字列 =&gt; 逆ポーランド記法 変換！ C++ - 逆ポーランド記法の評価（計算）！ 今回は二分木を使用した処理についてです。 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 演算子は *, /, +, - を想定。（単項演算子は非対応） 括弧は (, ) のみに対応。 1. アルゴリズム 次のリンク先（分かりやすく、きれいにまとまっている）のとおり。（自分で説明しようとすると、煩雑化しそう） 二分木を使った数式の逆ポーランド記法化と計算 - Programming/Tips - 総武ソフトウェア推進所 2. C++ ソースコードの作成 File: infix2rpn_bt.cpp...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/12/02/cpp-convert-infix-to-rpn-by-binary-tree/",
        "teaser": null
      },{
        "title": "C++ - ローレンツ・アトラクタ（Euler 法）",
        "excerpt":"C++ でローレンツ・アトラクタの計算をしてみました。 今回は、微分方程式の近似解法に Euler（オイラー）法を使用します。 過去には Ruby や Python で同様のことをしています。 Ruby - ローレンツ・アトラクタ（Euler 法）！ Python - ローレンツ・アトラクタ（Euler 法）！ 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. ローレンツ方程式／アトラクタとは 「ローレンツ方程式」とは、気象学者「エドワード・Ｎ・ローレンツ(Edward N. Lorenz)」が作成した力学系方程式をより単純化した、次のような非線形微分方程式。 パラメータ p, r, b をほんの少し変えるだけで、これらの方程式から得られる軌跡は大きく異なったものになる。 \\[\\begin{eqnarray} \\frac{dx}{dt} &amp;=&amp; -px+py \\\\ \\frac{dy}{dt} &amp;=&amp; -xz+rx-y \\\\ \\frac{dz}{dt}...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/12/09/cpp-lorenz-attractor-by-euler-method/",
        "teaser": null
      },{
        "title": "C++ - ローレンツ・アトラクタ（Runge-Kutta 法）",
        "excerpt":"C++ でローレンツ・アトラクタの計算をしてみました。 今回は、微分方程式の近似解法に Runge-Kutta（ルンゲ＝クッタ）法を使用します。 前回は、微分方程式の近似解法に Euler（オイラー）法を使用しています。 C++ - ローレンツ・アトラクタ（Euler 法） 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. ローレンツ方程式／アトラクタとは 「ローレンツ方程式」とは、気象学者「エドワード・Ｎ・ローレンツ(Edward N. Lorenz)」が作成した力学系方程式をより単純化した、次のような非線形微分方程式。 パラメータ p, r, b をほんの少し変えるだけで、これらの方程式から得られる軌跡は大きく異なったものになる。 \\[\\begin{eqnarray} \\frac{dx}{dt} &amp;=&amp; -px+py \\\\ \\frac{dy}{dt} &amp;=&amp; -xz+rx-y \\\\ \\frac{dz}{dt} &amp;=&amp; xy-bz \\end{eqnarray}\\] 「ローレンツ方程式」は、カオス理論を学習する際に序盤で登場する方程式で、カオス研究の先駆的なもの。 「アトラクタ」とは、ある力学系がそこに向かって時間発展する集合のことで、カオス理論における研究課題の一つ。 「ローレンツ・アトラクタ」とは、ストレンジ・アトラクタの一種。 「ローレンツ・アトラクタ」は、言い換えれば、「ローレンツ方程式のカオスのストレンジ・アトラクタ」である。...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2020/12/16/cpp-lorenz-attractor-by-runge-kutta-method/",
        "teaser": null
      },{
        "title": "2020年12月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 話は変わりまして、先月12月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,809 69.0450 Mac OS 6,658 20.1544 Android 1,360 4.1168 Linux 1,321 3.9988 Ubuntu Linux 610 1.8465 unknown 217 0.6569 Fedora Linux 24 0.0727 OpenBSD 18 0.0545 FreeBSD 11 0.0333 NetBSD 5 0.0151 Solaris 2 0.0061 合　計 33,035 100.0000 2. アクセスをOS・バージョン別に集計 OS...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/01/01/blog-access/",
        "teaser": null
      },{
        "title": "2020年 - ツイート集計！",
        "excerpt":"改めまして、旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 2020年の Twitter でのツイート（私用で主として使用しているアカウントのみ）を Ruby で集計してみました。（前回から投稿元別のツイート数も集計しております） 当方は、ツイートは全て自宅サーバ(Debian GNU/Linux)上のデータベース(MariaDB)に保存しています。（実際には Ruby + Twitter API で本家からデータを取得して保存） ほとんど SQL で集計可能でしたが、品詞・単語別の集計は形態素解析エンジン MeCab を使用しました。 集計内容は以下のとおり。 月別ツイート数 曜日別ツイート数 時間別ツイート数 投稿元別ツイート数 文字数別ツイート数 1日当たりツイート数別集計 品詞別出現回数 単語別出現回数 1. 月別ツイート数 [ 年 月 ] [件数] [ 比 率 ] 2020年01月 499 ( 7.69%) 2020年02月 523 ( 8.06%) 2020年03月 450 (...","categories": ["SNS"],
        "tags": ["Twitter","Ruby","MySQL","MariaDB","MeCab"],
        "url": "/2021/01/02/tweet-summary-2020/",
        "teaser": null
      },{
        "title": "C++ - 各種時刻系の換算！",
        "excerpt":"暦計算や天文計算を行う際に必要な各種時刻系換算を C++ で行いました。 過去には Ruby, Python, Fortran95 で行っています。 Ruby - 各種時刻系の換算！ Python - 各種時刻系の変換！ Fortran - 各種時刻系の換算！ 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイルを想定。 1. 各種時刻系について 原子時系（世界時系を含む）、力学時系、座標時系の順に記述。 TAI（国際原子時; International Atomic Time） UTC（協定世界時）を含む他の時刻基準の計算の基となる基礎的な国際時刻基準。 原子時計によって定義される高精度＆安定、地球ジオイド面での時刻系。 1 秒は SI 秒。 UT（世界時; Universal Time） ロンドンの旧グリニッジ天文台を通る子午線上で、平均太陽（平均的な動きの太陽）が南中する瞬間を12時として定義されている。 UT0, UT1, UT2,...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/01/06/cpp-time-series-conversion/",
        "teaser": null
      },{
        "title": "C++ - 平均黄道傾斜角の計算！",
        "excerpt":"平均黄道傾斜角（地球自転軸の傾き、地球公転面と赤道のなす角）の計算を C++ で行いました。 23.4度等と簡単に表すことが多いですが、実際は時々刻々と変化しております。 天文や暦等を正確に計算する際に必要になってきます。 過去には Ruby, Python で行っています。 Ruby - 平均黄道傾斜角の計算！ Python - 平均黄道傾斜角の計算！ 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. 平均黄道傾斜角について 計算には、「暦象年表の改訂について（国立天文台）（PDF 1.7MB）」で紹介されている計算式を使用する。 2. C++ ソースコードの作成 ここでは、実行部分のみ掲載。（全てのコードは GitHub リポジトリとして公開している） File: calc_obliquity.cpp 1 2 3 4 5 6 7 8 9 10...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/01/13/cpp-calc-mean-obliquity-ecliptic/",
        "teaser": null
      },{
        "title": "C++ - 赤道・黄道座標の変換！",
        "excerpt":"赤道直交座標と黄道直交座標や、直交座標と極座標の相互変換を C++ で行いました。 過去には Ruby, Python, Fortran95 で行っています。 Ruby - 赤道・黄道座標の変換（by 自作 gem ライブラリ）！ Python - 赤道・黄道座標の変換！ Fortran - 赤道・黄道座標の変換！ 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイルを想定。 1. 赤道座標と黄道座標の相互変換について 当ブログ過去記事を参照。 赤道座標と黄道座標、直交座標と極座標の変換！ また、計算に使用する平均黄道傾斜角は実際には時々刻々と変化しているので、当ソースコードでも、指定時刻の値を計算するようにしている。（上記で紹介の Ruby, Python, Fortran95 版では値を固定しているが） 2. C++ ソースコードの作成 ここでは、実行部分のみ掲載。（全てのコードは GitHub リポジトリとして公開している） File: conv_coord.cpp...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/01/20/cpp-eq-ec-coordinate-conversion/",
        "teaser": null
      },{
        "title": "C++ - 章動の計算（IAU2000A 理論）！",
        "excerpt":"天体の回転に使用する章動の計算を C++ で行いました。（使用するのは IAU2000A 理論） 過去には Ruby, Python, Fortran95 で行っています。 Ruby - 章動の計算（IAU2000A 理論）！ Python - 章動の計算（IAU2000A 理論）！ Fortran - 章動の計算（IAU2000A 理論）！ 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイルを想定。 1. 章動（IAU2000A 理論）について 章動の計算には、 IAU SOFA(International Astronomical Union, Standards of Fundamental Astronomy) の提供する C ソースコードに実装されているアルゴリズム...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/01/27/cpp-nutation-model-iau2000a/",
        "teaser": null
      },{
        "title": "2021年1月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 21,401 68.8999 Mac OS 6,336 20.3986 Linux 1,296 4.1724 Android 1,203 3.8730 Ubuntu Linux 608 1.9574 unknown 175 0.5634 Fedora Linux 27 0.0869 FreeBSD 7 0.0225 3DS 3 0.0097 PlayStation 2 0.0064 Linux Mint 1 0.0032 Solaris 1 0.0032 Wii 1 0.0032 合　計...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/02/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - バイアス・歳差・章動の適用！",
        "excerpt":"赤道直交座標にバイアス・歳差・章動の回転を適用する処理を C++ で実装してみました。 過去には Ruby, Fortran95 で実装したことがあります。（Python でも作成したことがあるが、ブログ記事にはしていない） Ruby - バイアス・歳差・章動の適用（by 自作 gem ライブラリ）！ Fortran - バイアス・歳差・章動の適用！ 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイルを想定。 1. バイアス・歳差・章動について 「バイアス(frame bias)」とは、「GCRS(Geocentric Celestial Reference System; 地球重心天文座標系)」と「J2000.0 の平均座標系」との間のズレ。 「J2000.0 の平均座標系」に「歳差」を適用すると「瞬時の平均座標系」になる。 「瞬時の平均座標系」に「章動」を適用すると「瞬時の真座標系」になる。 「歳差(precession)」や「章動(nutation)」の詳細については、「歳差・章動と地球の向き - 国立天文台暦計算室」を参照のこと。 2. 章動係数データの準備 章動(Nutation)計算に使用する係数データを用意する。 IERS のページから「日月章動用の係数データ...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/02/03/cpp-applying-bias-precession-nutation/",
        "teaser": null
      },{
        "title": "C++ - 2つの時刻の平均！",
        "excerpt":"2つの timespec 型の時刻の平均を求める処理を実装してみました。 と言っても、単純な四則演算（＆剰余）です。 0. 前提条件 Debian GNU/Linux 10.6 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. C++ ソースコードの作成 ここでは、実行部分のみ掲載。（全てのコードは GitHub リポジトリとして公開している） timespec 型なので、ナノ秒(1.0e9)単位で計算可。 timespec を 2 で除算する際の作業用変数（秒部分、ナノ秒部分）に long int 型を使用している。（環境や場合によっては不具合があるかもしれない。適宜変更すること） File: mean_time.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/02/10/cpp-mean-of-2-timespecs/",
        "teaser": null
      },{
        "title": "C++ - グリニッジ恒星時の計算（IAU2006 理論）！",
        "excerpt":"グリニッジ視恒星時(GAST; Greenwich Apparent Sidereal Time)、グリニッジ平均恒星時(GMST; Greenwich Mean Sidereal Time)、分点均差(EE; Equation of Equinoxes )の計算を C++ で行いました。（使用するのは IAU2006 理論） 過去には Ruby, Python, Fortran95 で行っています。 Ruby - グリニッジ恒星時の計算（IAU2006 理論）！ Python - グリニッジ恒星時の計算（IAU2006 理論）！ Fortran - グリニッジ恒星時の計算（IAU2006 理論）！ 0. 前提条件 Debian GNU/Linux 10.8 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイルを想定。 1. 章動の計算について 当ブログ過去記事を参照のこと。...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/02/17/cpp-calc-greenwich-time/",
        "teaser": null
      },{
        "title": "C++ - 太陽・月の視位置計算（海保略算式版）！",
        "excerpt":"C++ で、海上保安庁・海洋情報部の「コンピュータによる天体の位置計算式」を利用して、太陽や月の視位置等を計算してみました。 過去には Ruby, Python, Fortran95 で行っています。 Ruby - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！ Ruby - 太陽・月の視黄経・視黄緯の計算（海保略算式版）！ Python - 太陽・月の視赤経・視赤緯等の計算（海保略算式版）！ Python - 太陽・月の視黄経・視黄緯等の計算（海保略算式版）！ Fortran - 太陽・月の視位置計算（海保略算式版）！ 0. 前提条件 Debian GNU/Linux 10.8 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. 海保略算式について 「コンピュータによる天体の位置計算式」内の PDF ドキュメントや、（当記事冒頭に記載の）当ブログ過去記事を参照のこと。 当然ながら、用意されている係数データファイルの年しか値を計算できない。 2. ソースコードの作成 ここでは、実行部分のみ掲載。（全てのコードは GitHub リポジトリとして公開している） File: ephemeris_jcg.cpp 1 2...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/02/25/cpp-jcg-sun-moon-apparent-position/",
        "teaser": null
      },{
        "title": "2021年2月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 20,012 69.4499 Mac OS 5,739 19.9167 Linux 1,325 4.5983 Android 1,065 3.6960 Ubuntu Linux 479 1.6623 unknown 162 0.5622 Fedora Linux 24 0.0833 FreeBSD 9 0.0312 合　計 28,815 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 16,637 57.7373 Mac OS X 5,739...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/03/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - JPL 天文暦バイナリデータの読み込み！",
        "excerpt":"NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 のバイナリ形式のデータを C++ で読み込んでみました。 過去には Ruby, Python, Fortran95 で行っています。 Ruby - JPL 天文暦バイナリデータの読み込み！ Python - JPL 天文暦バイナリデータの読み込み！ Fortran - JPL 天文暦バイナリデータの読み込み！ 0. 前提条件 Debian GNU/Linux 10.8 (64bit) での作業を想定。 GCC 9.2.0 (G++ 9.2.0) (C++17) でのコンパイルを想定。 1. 天文暦バイナリデータについて 当ブログ過去記事を参照のこと。 JPL 天文暦データのバイナリ化！ また、天文暦データには各種バージョンが存在するが、日本の国立天文台が現在使用している DE430 を当方も採用する。 2. ソースコードの作成...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/03/03/cpp-jpl-ephemeris-binary-reading/",
        "teaser": null
      },{
        "title": "C++ - JPL 天文暦データから ICRS 座標を計算！",
        "excerpt":"前回、 NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している月・惑星の暦の最新版 DE430 のバイナリ形式のデータを C++ で読み込んでみました。 C++ - JPL 天文暦バイナリデータの読み込み！ 今回は、読み込んだデータから ICRS 座標を計算してみました。 C++ で。 過去には Ruby, Python, Fortran95 で行っています。 Ruby - JPL 天文暦データから ICRS 座標を計算！ Python - JPL 天文暦データから ICRS 座標を計算！ Fortran - JPL 天文暦データから ICRS 座標を計算！ 0. 前提条件 Debian GNU/Linux 10.8 (64bit) での作業を想定。...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/03/10/cpp-jpl-ephemeris-icrs-coordinate/",
        "teaser": null
      },{
        "title": "C++ - JPL DE430 データから太陽・月の視位置を計算！",
        "excerpt":"C++ で、 NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している太陽・月・惑星の暦の最新版 DE430 からデータを取得し、太陽と月の視位置を高精度で計算してみました 過去には Ruby, Fortran95 で行っています。 Ruby - JPL DE430 データから太陽・月の視位置を計算！ Fortran - JPL DE430 データから太陽・月の視位置を計算！ 0. 前提条件 Debian GNU/Linux 10.8 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイルを想定。 1. 天文暦バイナリデータについて 当ブログ過去記事を参照のこと。 JPL 天文暦データのバイナリ化！ C++ - JPL 天文暦バイナリデータの読み込み！ C++ - JPL 天文暦データから...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/03/17/cpp-sun-moon-apparent-position/",
        "teaser": null
      },{
        "title": "2021年3月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 21,592 70.1472 Mac OS 5,930 19.2651 Linux 1,384 4.4963 Android 1,133 3.6808 Ubuntu Linux 514 1.6699 unknown 170 0.5523 Fedora Linux 37 0.1202 FreeBSD 20 0.0650 3DS 1 0.0032 合　計 30,781 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 18,529 60.1962 Mac...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/04/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 10 (buster) - GCC 10.2.0 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 10.9.0 へ最新版 GCC をソースビルドでインストールする方法についての記録です。 0. 前提条件 Debian GNU/Linux 10.9.0 (buster; 64bit) での作業を想定。 一般ユーザでの作業を想定。 パッケージ版 GCC インストール済み。（バージョンは 8.3.0 を想定） 新たにインストールする GCC は 10.2.0 を想定。（当記事執筆時点で最新バージョン） インストール先は “/usr/local/gcc-10.2.0” を想定。 コンパイルできるようにする言語は C, C++, Objective-C, Fortran とする。 インストール済みのパッケージ版 GCC は他のパッケージ管理等で影響が出ると面倒なのでアンインストールしない。 念の為、インストール済みパッケージをアップデートしておく。 1. アーカイブダウンロード ミラーサイト一覧「GCC mirror sites - GNU Project - Free Software Foundation...","categories": ["プログラミング"],
        "tags": ["GCC","C言語","Fortran","ObjectiveC","Debian"],
        "url": "/2021/04/14/debian-installation-newest-gcc-by-src/",
        "teaser": null
      },{
        "title": "C++ - JPL 天文暦データから惑星間の距離を計算！",
        "excerpt":"NASA の機関である JPL(Jet Propulsion Laboratory) が惑星探査用に編纂・発行している太陽・月・惑星の暦の最新版 DE430 には太陽・月・惑星の位置（ICRS座標系）の情報が格納されています。 それらの値を使用して、太陽・月・その他惑星の任意の2天体間の距離を C++ で計算してみました。 過去には Ruby で行っています。 Ruby - JPL 天文暦データから地球と惑星の距離を計算！ 0. 前提条件 Debian GNU/Linux 10.8 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイルを想定。 1. 天文暦バイナリデータについて 当ブログ過去記事を参照のこと。 JPL 天文暦データのバイナリ化！ C++ - JPL 天文暦バイナリデータの読み込み！ C++ - JPL 天文暦データから ICRS 座標を計算！ また、天文暦データには各種バージョンが存在するが、日本の国立天文台が現在使用している DE430 を当方も採用する。 2....","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/04/21/cpp-distance-between-2-celestial-bodies/",
        "teaser": null
      },{
        "title": "C++ - 日・月の出・南中・入時刻の計算！",
        "excerpt":"C++ で、日・月の出・南中・入時刻を計算してみました。（出・入はその時の方位角、南中はその時の高度も） 過去には Ruby, Fortran95 で行っています。 Ruby - 日・月の出・入・南中計算 gem の作成！ Fortran - 日・月の出・南中・入時刻の計算！ 0. 前提条件 Debian GNU/Linux 10.8 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイルを想定。 1. 計算方法について 計算アルゴリズムは、主に「日の出・日の入りの計算―天体の出没時刻の求め方」によるもの。（随所で改良している） 2. ソースコードの作成 ここでは、実行部分のみ掲載。（全てのコードは GitHub リポジトリとして公開している） File: sun_moon.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","カレンダー"],
        "url": "/2021/04/28/cpp-sun-moon-rise-set-meridian/",
        "teaser": null
      },{
        "title": "2021年4月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 20,962 70.2810 Mac OS 5,870 19.6808 Linux 1,272 4.2647 Android 1,077 3.6109 Ubuntu Linux 458 1.5356 unknown 145 0.4862 Fedora Linux 35 0.1173 FreeBSD 4 0.0134 PlayStation 3 0.0101 合　計 29,826 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 17,293 57.9796 Mac...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/05/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - WGS84 (BLH) 座標 -> ECEF 座標 変換！",
        "excerpt":"WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)を ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標に変換する処理を C++ で実装してみました。 過去には Python, Ruby, Fortran で実装しています。 Python - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ Ruby - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ Fortran - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ 0. 前提条件 Debian GNU/Linux 10.8 (64bit) での作業を想定。 GCC 10.2.0...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","ISS","GPS"],
        "url": "/2021/05/05/cpp-convert-blh-to-ecef/",
        "teaser": null
      },{
        "title": "C++ - ECEF 座標 -> WGS84 (BLH) 座標 変換！",
        "excerpt":"先日、 WGS84(World Geodetic System 1984) 測地系の緯度(Beta)／経度(Lambda)／楕円体高(Height)を ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標に変換する方法を C++ で実装しました。 C++ - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ 今回は、逆に、 ECEF 座標を WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)に変換する方法を C++ で実装してみました。 過去には Python, Ruby, Fortran で実装しています。 Python - ECEF 座標 -&gt; WGS84 (BLH) 座標 変換！ Ruby - ECEF 座標 -&gt; WGS84 (BLH)...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","ISS","GPS"],
        "url": "/2021/05/12/cpp-convert-ecef-to-blh/",
        "teaser": null
      },{
        "title": "C++ - WGS84 (BLH) 座標 -> ENU 座標 変換！",
        "excerpt":"前々回と前回、 BLH 座標（WGS84 の緯度(Beta)／経度(Lambda)／楕円体高(Height)）から ECEF（Earth Centered Earth Fixed; 地球中心・地球固定直交座標系）座標への変換や、その逆の変換の処理を C++ で実装しました。 C++ - WGS84 (BLH) 座標 -&gt; ECEF 座標 変換！ C++ - ECEF 座標 -&gt; WGS84 (BLH) 座標 変換！ 今回は BLH 座標から ENU 座標（地平座標; EastNorthUp）への変換処理を C++ で実装してみました。 0. 前提条件 Debian GNU/Linux 10.8 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイルを想定。...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","ISS","GPS"],
        "url": "/2021/05/19/cpp-convert-blh-to-enu/",
        "teaser": null
      },{
        "title": "2021年5月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,409 68.3994 Mac OS 7,270 22.1903 Linux 1,264 3.8581 Android 1,126 3.4369 Ubuntu Linux 492 1.5017 unknown 171 0.5219 Fedora Linux 22 0.0672 FreeBSD 8 0.0244 合　計 32,762 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 19,036 58.1039 Mac OS X 7,270...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/06/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - EOP（地球姿勢パラメータ）データファイル 生成！",
        "excerpt":"IERS（International Earth Rotation and Reference systems Service; 国際地球回転観測事業） の EOP（Earth Orientation Parameter; 地球姿勢（回転）パラメータ）から確定／速報／推定値を抽出し、テキストファイルを生成するスクリプトを C++ で作成しました。（人工衛星の位置を正確に計算するために使用するデータ） 過去には Ruby や Python で生成しました。（但し、 CSV ファイル） Ruby, Python - EOP（地球姿勢パラメータ）CSV 生成！ 0. 前提条件 Debian GNU/Linux 10.8 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイルを想定。 ここでは EOP（Earth Orientation Parameter; 地球姿勢（回転）パラメータ）が何かについての説明はしない。 1. 事前準備 今回使用するデータを用意しておく。 こちら から...","categories": ["プログラミング","暦・カレンダー"],
        "tags": ["C++","ISS"],
        "url": "/2021/06/02/cpp-eop-getting-from-iers/",
        "teaser": null
      },{
        "title": "C++ - ISS 位置・速度（TEME 座標）の算出！",
        "excerpt":"C++ で、 NASA 提供の最新の TLE（2行軌道要素形式）から任意の時刻（UT1; 世界時1）の ISS の位置・速度（TEME 座標）を、 SGP4 アルゴリズムを用いて計算してみました。 過去には Ruby, Python, Fortran で実装しています。（但し、 Ruby, Python 版はブログ記事にはしていない） Fortran - ISS 位置・速度（TEME 座標）の算出！ 0. 前提条件 Debian GNU/Linux 10.9 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイル＆ビルドを想定。 ここでは、各種座標系、 SGP4 アルゴリズム（Simplified General Perturbations Satellite Orbit Model 4; NASA, NORAD が使用している、近地球域の衛星の軌道計算用で、周回周期225分未満の衛星に使用すべきアルゴリズム）等についての詳細は説明しない。（TEME 座標については、次項で概要のみ説明）...","categories": ["プログラミング"],
        "tags": ["C++","ISS"],
        "url": "/2021/06/16/cpp-iss-position-velocity/",
        "teaser": null
      },{
        "title": "C++ - ISS 位置・速度（BLH(WGS84)座標）の算出！",
        "excerpt":"前回、 C++ で NASA 提供の最新の TLE（2行軌道要素形式）から任意の時刻（UT1; 世界時1）の ISS の位置・速度（TEME 座標）を、 SGP4 アルゴリズムを用いて計算しました。 今回は、これの応用で、取得した TEME 座標を WGS84 座標（いわゆる、緯度・経度・高度(BLH)という座標）に変換します。 過去には Ruby, Python, Fortran で実装しています。（但し、 Ruby 版はブログ記事にはしていない） Fortran - ISS 位置・速度（WGS84(BLH) 座標）の算出！ Python - ISS 位置／速度計算（SGP4 アルゴリズム）！ 0. 前提条件 Debian GNU/Linux 10.9 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイル＆ビルドを想定。 ここでは、各種座標系、 SGP4 アルゴリズム（Simplified...","categories": ["プログラミング"],
        "tags": ["C++","ISS"],
        "url": "/2021/06/30/cpp-iss-position-velocity-blh/",
        "teaser": null
      },{
        "title": "2021年6月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"7月になりましたので、先月6月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,793 68.6929 Mac OS 7,388 22.2658 Android 1,207 3.6376 Linux 1,105 3.3302 Ubuntu Linux 527 1.5883 unknown 117 0.3526 Fedora Linux 28 0.0844 FreeBSD 9 0.0271 NetBSD 6 0.0181 Solaris 1 0.0030 合　計 33,181 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/07/01/blog-access/",
        "teaser": null
      },{
        "title": "C++ - ISS 位置・速度（BLH(WGS84)座標）一覧 JSON 生成！",
        "excerpt":"前回、 C++ で NASA 提供の最新の TLE（2行軌道要素形式）から任意の時刻（JST; 日本標準時）の ISS の位置・速度（WGS84 座標; いわゆる、緯度・経度・高度(BLH)という座標）を、 SGP4 アルゴリズムを用いて計算しました。 今回は、応用として、10秒間隔で2日分の JSON データを生成します。 0. 前提条件 Debian GNU/Linux 10.10 (64bit) での作業を想定。 GCC 10.2.0 (G++ 10.2.0) (C++17) でのコンパイル＆ビルドを想定。 ここでは、各種座標系、 SGP4 アルゴリズム（Simplified General Perturbations Satellite Orbit Model 4; NASA, NORAD が使用している、近地球域の衛星の軌道計算用で、周回周期225分未満の衛星に使用すべきアルゴリズム）等についての詳細は説明しない。（各種座標系については次項で概要のみ説明） 1. 各種座標系について（概要） TEME 座標とは「真赤道面平均春分点」のことで、 “True Equator, Mean Equinox” の略。...","categories": ["プログラミング"],
        "tags": ["C++","ISS"],
        "url": "/2021/07/14/cpp-iss-position-velocity-blh-json/",
        "teaser": null
      },{
        "title": "Bash - 年月日ループ！",
        "excerpt":"シェルスクリプト(Bash)で年月日でループ処理を行ってみました。（日付の妥当性をチェックしなくてもよい方法） 0. 前提条件 Debian GNU/Linux 10.10 (64bit) での作業を想定。 GNU bash 5.0.3 での作業を想定。 1. Bash スクリプトの作成 以下は、作成例。（Example-1 or Example-2 どちらか） date コマンドで「1日後」を指定しながらループしているので、日付の妥当性をチェックしなくてもよい。 File: date_loop.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/bin/bash DATE_S=\"20201226\" DATE_E=\"20210105\" # Example-1 for (( dt=$DATE_S ; $dt...","categories": ["PC_Tips"],
        "tags": ["Linux","Debian","bash"],
        "url": "/2021/07/28/bash-date-loop/",
        "teaser": null
      },{
        "title": "2021年7月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"8月になりましたので、先月7月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 26,262 69.7067 Mac OS 8,135 21.5926 Linux 1,271 3.3736 Android 1,188 3.1533 Ubuntu Linux 590 1.5660 unknown 176 0.4672 Fedora Linux 41 0.1088 FreeBSD 9 0.0239 OpenBSD 3 0.0080 合　計 37,675 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 21,596 57.3218 Mac...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/08/01/blog-access/",
        "teaser": null
      },{
        "title": "2021年8月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"9月になりましたので、先月8月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 23,003 65.0887 Mac OS 9,181 25.9783 Linux 1,373 3.8850 Android 1,121 3.1720 Ubuntu Linux 484 1.3695 unknown 149 0.4216 Fedora Linux 23 0.0651 FreeBSD 6 0.0170 NetBSD 1 0.0028 合　計 35,341 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 19,373 54.8174 Mac...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/09/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - インストール（サーバ用途・最小構成）！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) をサーバ用途・最小構成でインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 当記事執筆時点で最新の Debian GNU/Linux 11.0.0 をインストールする。 インストールするマシンのメモリ容量は 1GB, ディスク容量は 300GB を想定する。 サーバ用途を想定。（デスクトップ環境の構築は想定していない） DHCP を使用しない。（ネットワークは手動で設定する） パーティションは手動設定する。 プロキシは使用しない。 各種ソフトウェアのインストールは行わない。（ソフトウェアを必要になったときにインストールするので） 1. インストールイメージのダウンロード 国内ミラーサイトから ISO イメージをダウンロードする。 今回当方は AMD64 版 NetInstall CD イメージ debian-11.0.0-amd64-netinst.iso をダウンロードした。（DVD 版でもよいが、必要なものは必要なときにインストールできればよいので） 当然、ダウンロード後は CD(DVD) に焼き付ける。（ブート可能オプション必須） 仮想マシンにインストールするならディスクに焼き付けなくてもよい。 2. インストール 以下のような手順でインストールする。 （スクリーンショットは、画像が多くなるため非掲載。以下の文章だけで理解できるはず） Boot Menu Install...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2021/09/02/debian-11-installation-for-small-server/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - サーバ初期設定！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) インストール後の初期設定についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 「Debian 11 (bullseye) - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 一般ユーザ名は foo を想定。 以下の作業は全て root ユーザで行うことを想定。 コマンドラインプロンプト # は root ユーザ、 $ は一般ユーザであることを理解しておく。 コメントしての # と混同しないよう注意する。 ネットワークカードは enp0s3 を想定。 IP アドレスは固定する。 IPv6 は使用しない。 ドメインは xxxxxxxx.com を想定。 ネットワークの MTU 最適値は 1454 を想定。 （デフォルトは 1500 だが、環境により最適値は異なるので、算出して設定するとよい。参照： Linux -...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2021/09/08/debian-11-initial-setting/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - SSH サーバ構築！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) 上に SSH サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 「Debian 11 (bullseye) - インストール（サーバ用途・最小構成）！」の方法でインストールが完了していることを想定。 「Debian 11 (bullseye) - サーバ初期設定！」の方法で初期設定が完了していることを想定。 サーバの IP アドレス 192.168.11.101、ホスト名 vbox、ユーザ名 foo を想定。 DNS サーバは未だ設定していない。 （設定済みなら、ローカルから IP アドレスではなくホスト名で SSH 接続可） クライアント側は Debian 10 (64bit) を想定。 SSH 接続は端末コンソールから行う。 ポートは、デフォルトの 22 から 9999 に変更することを想定。（9999 は架空） root ユーザでの作業を想定。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","SSH"],
        "url": "/2021/09/15/debian-11-ssh-installation/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - セキュリティ・アップデートの自動化！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) のセキュリティ・アップデートを自動化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11 (bullseye) サーバでの作業を想定。 cron-apt でもパッケージアップデートの自動化は可能であるが、今回はセキュリティ・アップデートのみなので unattended-upgrades を使用する。 （ちなみに、インストール済みの各種パッケージを自動アップデートするのは（依存パッケージの整合性等の問題があるため）危険であり、当方はセキュリティ・アップデート以外は自動でアップデートしない方針） root ユーザでの作業を想定。 1. unattended-upgrades のインストール unattended-upgrades とパッケージ変更履歴ツール apt-listchanges をインストールする。 # apt -y install unattended-upgrades apt-listchanges 2. “50unattended-upgrades” の編集 メール送信先を編集（コメント解除＆変更）する。（当然、ユーザ名のみならず外部のメールアドレスも設定可） File: /etc/apt/apt.conf.d/50unattended-upgrades Unattended-Upgrade::Mail \"root\"; 3. “20auto-upgrades” の作成 以下のコマンドを実行して自動アップデートに関する質問に Yes 応答すると、自動アップグレードのための設定ファイル 20auto-upgrades が作成される。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2021/09/22/debian-11-automation-security-update/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - rootkit 検出ツール chkrootkit インストール！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に rootkit 検出ツール chkrootkit をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11 (bullseye) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 chkrootkit が検知できるのは既知の rootkit のみであり、新規の rootkit は検知できないことを認識しておく。 chkrootkit では誤検知もあるので、検知結果は参考程度に留める。 コマンド自体が改竄されてからでは遅いので、 OS インストール直後に行うのがよいらしい。 root ユーザでの作業を想定。 1. chkrootkit のインストール # apt -y install chkrootkit 2. chkrootkit の実行 以下のようにして...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2021/09/29/debian-11-chrootkit-installation/",
        "teaser": null
      },{
        "title": "2021年9月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"10月になりましたので、先月9月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 24,170 66.7716 Mac OS 8,770 24.2279 Linux 1,410 3.8952 Android 1,149 3.1742 Ubuntu Linux 506 1.3979 unknown 156 0.4310 Fedora Linux 28 0.0774 FreeBSD 6 0.0166 NetBSD 3 0.0083 合　計 36,198 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 19,652 54.2903 Mac...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/10/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - アンチウィルスソフト導入！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) にウイルス対策ソフト ClamAV をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11 (bullseye) での作業を想定。 Apt でインストールする。（但し、Apt のパッケージはバージョンが古い。最新版が良ければ、こちらからダウンロードしてビルドするとよい） 毎日自動でウィルススキャンを実行するようにする。 root ユーザでの作業を想定。 1. ClamAV のインストール 以下のようにして、アンチウィルスソフト ClamAV, ClamAV Daemon をインストールする。 # apt -y install clamav clamav-daemon 2. ウィルス定義ファイルの最新化 freshclam コマンドでウィルス定義ファイルを最新に更新する。 しかし、デフォルトの状態では以下のようになってしまう。（以前はこのような事態にはならなかったが） # freshclam ERROR: /var/log/clamav/freshclam.log is locked by another process...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ウイルス対策"],
        "url": "/2021/10/06/debian-11-anti-virus-installation/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - 時刻同期設定(systemd-timesyncd)！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) 上で systemd-timesyncd サービスを使用して時刻同期する設定についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11 (bullseye) での作業を想定。 従来からの ntpd ではなく chronyd をインストールする。 ntpd と chronyd の違いについて、ここでは説明しない。 ローカルネットワークは 192.168.11.0/24 とする。 root ユーザでの作業を想定。 1. Chrony のインストール # apt -y install chrony 2. 設定ファイルの編集 File: /etc/chrony/chrony.conf server ntp.nict.jp iburst # &lt;= 追加 server ntp1.jst.mfeed.ad.jp...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian"],
        "url": "/2021/10/13/debian-11-systemd-timesyncd/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - ファイアウォール設定！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) でファイアウォールを設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11 (bullseye) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 ufw (= Uncomplicated Firewall) という iptables のフロントエンドツールを使用する。 ファイアウォールのルールは、取り急ぎ最低限の設定のみ。（運用する環境やインストールしたサービスに合わせて適宜行う） root ユーザでの作業を想定。 1. ufw のインストール 依存する iptables 等もインストールされる。 # apt -y install ufw 2. 設定ファイルの編集 IPv6 を使用しない場合は以下のように編集しておく File: /etc/default/ufw IPV6=no 3....","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","ファイアウォール"],
        "url": "/2021/10/20/debian-11-firewall-setting/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - サービスの管理！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) でのサービスの管理についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11 (bullseye) での作業を想定。 SystemD の簡単な使用法の説明と SysVinit の導入を行う。 （当方、普段は SystemD でサービスの管理を行うが、有事の際に備えて sysv-rc-conf コマンドも使用できるよう準備しておく（RedHat 系ディストリビューションのサービス管理ツール chkconfig にあたるもの）） root ユーザでの作業を想定。 1. SystemD の使用方法 以下は vsftpd サーバの例。（vsftpd.service が正式なサービス名だが .service は省略可能） $ systemctl start vsftpd # &lt;= vsftpd サービスの起動 $ systemctl stop vsftpd #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2021/10/27/debian-11-service-management/",
        "teaser": null
      },{
        "title": "2021年10月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"11月になりましたので、先月10月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 28,077 66.4403 Mac OS 10,216 24.1747 Android 1,622 3.8382 Linux 1,480 3.5022 Ubuntu Linux 634 1.5003 unknown 166 0.3928 Fedora Linux 46 0.1089 FreeBSD 8 0.0189 NetBSD 8 0.0189 OpenBSD 2 0.0047 合　計 42,259 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/11/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - DNS サーバ BIND9 構築！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に DNS サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 サーバのローカル IP アドレスは 192.168.11.101、グローバル IP アドレスは xxx.yyy.zzz.aaa を想定。 ドメイン名は xxxxxxxx.com、マシンのホスト名は foo、ネームサーバホスト名は ns を想定。 セカンダリ DNS は用意しない。 root ユーザでの作業を想定。 1. BIND のインストール （dnsutils は dig コマンド用） # apt -y install bind9 dnsutils 2. BIND...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","DNS"],
        "url": "/2021/11/03/debian-11-bind-installation/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - DNS サーバ BIND9 の chroot 化！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に構築した DNS サーバを chroot 化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 DNS サーバ BIND が構築済みであることを想定。 chroot ディレクトリは /var/named/chroot/ とする。 root ユーザでの作業を想定。 1. BIND の停止 BIND が起動していると設定に失敗するので、BIND が起動している場合は停止する。 # systemctl stop named 2. 起動オプションの編集 起動時のオプションを変更するよう /etc/default/named を編集する。 File: /etc/default/named #OPTIONS=\"-u bind -4\" OPTIONS=\"-u...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","DNS"],
        "url": "/2021/11/10/debian-11-bind-chroot/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - FTP サーバ構築！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に FTP サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 接続テストでは FileZilla という FTP クライアントを使用する。 root ユーザでの作業を想定。 1. vsftpd のインストール # apt -y install vsftpd 2. vsftpd 設定ファイルの編集 File: /etc/vsftpd.conf # anonymous によるログインを無効化 anonymous_enable=NO # ローカルアクセスの許可...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","FTP"],
        "url": "/2021/11/17/debian-11-ftp-installation/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - NFS サーバ構築！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に NFS サーバを構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseyes) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は mk-mode.com、サーバホスト名は vbox を想定。 NFS 用ディレクトリを新たに作成する。（/var 配下に /exports ディレクトリを作成する） クライアント側でマウントに使用するディレクトリも /var/exports とする。 サーバ側は root で作業することを想定、クライアント側は一般ユーザで作業することを想定している。 root ユーザでの作業を想定。 1. NFS サーバのインストール # apt -y install...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NFS"],
        "url": "/2021/11/24/debian-11-nfs-installation/",
        "teaser": null
      },{
        "title": "2021年11月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"12月になりましたので、先月11月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 25,379 65.4891 Mac OS 9,941 25.6522 Linux 1,384 3.5713 Android 1,300 3.3546 Ubuntu Linux 518 1.3367 unknown 194 0.5006 Fedora Linux 29 0.0748 FreeBSD 4 0.0103 NetBSD 2 0.0052 OpenBSD 1 0.0026 PlayStation 1 0.0026 合　計 38,753 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2021/12/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - NFS サーバのポート固定！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に NFS サーバで使用するポートを固定化する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 NFS サーバ構築済み。 （参照：「Debian 11 (bullseye) - NFS サーバ構築！」） ファイアウォール iptables が構築済み。 （参照：「Debian 11 (bullseye) - ファイアウォール設定！」） 以下で設定するポート番号は参考サイトによるもであり、任意に設定可能。 quota は使用していないので、参考サイトにある quota の設定はしない。 root ユーザでの作業を想定。 1. 前提知識 NFS...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","NFS"],
        "url": "/2021/12/02/debian-11-nfs-port-fixing/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - SMTP サーバ Postfix 構築！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に SMTP サーバ Postfix を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 ドメイン名は xxxxxxxx.com、サーバホスト名は mail を想定。 root ユーザでの作業を想定。 1. Postfix のインストール SMTP サーバ Postfix を以下のようにしてインストールする。 途中でどの設定を選択するか確認されるが、後で設定を行うので No Configuration（設定なし）を選択する。 # apt -y install postfix...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix"],
        "url": "/2021/12/08/debian-11-postfix-installation/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - POP/IMAP サーバ Dovecot 構築！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に POP/IMAP サーバ Dovecot を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 接続可能なマシンのネットワークは 192.168.11.0/24 を想定。 root ユーザでの作業を想定。 1. Dovecot のインストール POP/IMAP サーバ Dovecot を以下のようにしてインストールする。 # apt -y install dovecot-common dovecot-pop3d dovecot-imapd 2. 設定ファイル dovecot.conf の編集 File:...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Dovecot"],
        "url": "/2021/12/15/debian-11-dovecot-installation/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - メールサーバ SSL 設定！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に導入したメールサーバを SSL 設定する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.1.0 (bullseye; 64bit) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 SMTP サーバは Postfix, POP/IMAP サーバは Dovecot を想定。 Postfix を「Debian 11 (bullseye) - SMTP サーバ Postfix 構築！」の方法で導入済み。 Dovecot を「Debian 11 (bullseye) - POP/IMAP サーバ Dovecot 構築！」の方法で導入済み。 接続可能なマシンのネットワークは...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix","Dovecot","SSL"],
        "url": "/2021/12/22/debian-11-mail-ssl-setting/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - Postfix ウィルス・スパム対策(ClamAV + SpamAssassin)！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) にアンチウイルスソフト ClamAV とスパム対策ソフト SpamAssassin をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 SMTP サーバ Postfix を「Debian 11 (bullseye) - SMTP サーバ Postfix 構築！」の方法で導入済み。 アンチウィルスソフト ClamAV 導入済み。 スパムフィルタも運用する。 アンチウィルス ClamAV との連携には、 ClamAV daemon を使用する方法の他に、ClamSMTP を使用する方法もある。 スパムフィルタ SpamAssassin との連携には、 amavisd-new を使用する方法の他に SpamPD を使用する方法もある。 root ユーザでの作業を想定。...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix","ウイルス対策","スパム対策"],
        "url": "/2021/12/29/debian-11-postfix-anti-virus-with-clamav-spamassassin/",
        "teaser": null
      },{
        "title": "2021年12月 - OS・ブラウザ別アクセス状況！（＆新年のご挨拶）",
        "excerpt":"旧年明けまして、新年おめでとうございます。 旧年中はお世話になりました。 本年もどうぞよろしくお願いします。 話は変わりまして、先月12月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 22,278 65.3678 Mac OS 8,894 26.0967 Android 1,177 3.4535 Linux 1,168 3.4271 Ubuntu Linux 400 1.1737 unknown 129 0.3785 Fedora Linux 21 0.0616 FreeBSD 12 0.0352 NetBSD 1 0.0029 Debian GNU/Linux 1 0.0029 合　計 34,081 100.0000 2. アクセスをOS・バージョン別に集計 OS Version...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2022/01/01/blog-access/",
        "teaser": null
      },{
        "title": "2021年 - ツイート集計！",
        "excerpt":"改めまして、旧年明けまして、新年おめでとうございます。 2021年の Twitter でのツイート（私用で主として使用しているアカウントのみ）を Ruby で集計してみました。 当方は、ツイートは全て自宅サーバ(Debian GNU/Linux)上のデータベース(MariaDB)に保存しています。（実際には Ruby + Twitter API で本家からデータを取得して保存） ほとんど SQL で集計可能でしたが、品詞・単語別の集計は形態素解析エンジン MeCab を使用しました。 集計内容は以下のとおり。 月別ツイート数 曜日別ツイート数 時間別ツイート数 投稿元別ツイート数 文字数別ツイート数 1日当たりツイート数別集計 品詞別出現回数 単語別出現回数 1. 月別ツイート数 [ 年 月 ] [件数] [ 比 率 ] 2021年01月 524 ( 7.48%) 2021年02月 442 ( 6.31%) 2021年03月 493 ( 7.04%)...","categories": ["SNS"],
        "tags": ["Twitter","Ruby","MySQL","MariaDB","MeCab"],
        "url": "/2022/01/02/tweet-summary-2021/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - Postfix ログ解析！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に導入した SMTP サーバ Postfix のログを解析する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 SMTP サーバ Postfix を「Debian 11 (bullseye) - SMTP サーバ Postfix 構築！」の方法で導入済み。 ログローテート（logrotate）でメールログがローテーションされていることを想定。（デフォルトでなっているはず） root ユーザでの作業を想定。 1. pflogsumm のインストール Postfix のログ解析ツールである pflogsumm を、以下のようにしてインストールする。 # apt -y...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Postfix"],
        "url": "/2022/01/05/debian-11-postfix-log-analysis/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - 全文検索エンジン Groonga インストール（by Groonga 公式リポジトリ）！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) にカラムストア機能付き全文検索エンジン Groonga を Groonga の公式リポジトリを使用して導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 当記事執筆時点で最新の Groonga 11.0.6 をインストールする。 トークナイザとして MeCab を使用することを想定。 トークンフィルタとして TokenFilterStem を使用することを想定。 ノーマライザとして MySQL 互換の groonga-normalizer-mysql を使用することを想定。（将来、 Mroonga を使用することを想定） ここでは、全文検索がどういうものかという説明はしない。 root ユーザでの作業を想定。 以下の説明内で出力するデータは、可読性を考慮して整形している。 1. 日本語形態素解析器 MeCab のインストール トークナイザとして MeCab を使用する予定なので、インストールしておく。 # apt -y...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Groonga"],
        "url": "/2022/01/12/debian-11-groonga-installation-by-official-apt/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - MariaDB 10.5 サーバ構築（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) 上に DB サーバ MariaDB（10.5系）を構築する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 インストールする MariaDB は、当記事執筆時点で 10.5 系最新の 10.5.12 とする。 （当記事執筆時点、 10.6 系は全文検索エンジン Mroonga 最新版が未対応） MariaDB とは言っても中身は MySQL が元になっているので、各所で mysql のキーワードが出現する。 データディレクトリは /var/lib/mysql ディレクトリ配下とする。 root ユーザでの作業を想定。 1. sources.list...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian","MariaDB"],
        "url": "/2022/01/19/debian-11-mariadb-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - Mroonga インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) 上に全文検索エンジン Mroonga をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 当記事執筆時点で最新の Mroonga 11.06 をインストールする。 Groonga 11.0.6 がインストール済みであることを想定。 （参照「Debian 11 (bullseye) - 全文検索エンジン Groonga インストール（by Groonga 公式リポジトリ）！」） MariaDB 10.5.12 をソースをビルドしてインストールしていること。（Mroonga のビルドに MySQL のソースが必要なため。MariaDB をパッケージでインストールしている場合にも、ソースが必要となる） （参照「Debian 11 (bullseye) - MariaDB 10.5 サーバ構築（ソースビルド）！」） MariaDB 10.5.12 は...","categories": ["サーバ構築"],
        "tags": ["Linux","Debian","MariaDB","Mroonga"],
        "url": "/2022/01/26/debian-11-mroonga-installation-by-src/",
        "teaser": null
      },{
        "title": "2022年1月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"2月になりましたので、先月1月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 21,787 66.5211 Mac OS 7,677 23.4398 Linux 1,424 4.3478 Android 1,197 3.6547 Ubuntu Linux 393 1.1999 unknown 215 0.6564 Fedora Linux 41 0.1252 FreeBSD 16 0.0489 NetBSD 2 0.0061 合　計 32,752 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10 16,759 51.1694 Mac...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2022/02/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に Web サーバ Nginx を Nginx 公式リポジトリを使用して導入する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 Debian 公式リポジトリの Nginx はバージョンが古いため、Nginx リポジトリを使用して 1.21.3（当記事執筆時点最新安定版）をインストールする。 実際に運用する際は、ドキュメントルートを変更する等、設定を編集すること。 root ユーザでの作業を想定。 1. 依存パッケージのインストール # apt -y install curl gnupg2 ca-certificates lsb-release debian-archive-keyring 2. 署名鍵のインポート...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx"],
        "url": "/2022/02/02/debian-11-nginx-installation-by-official-apt/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - Web サーバ Nginx で SSL 接続！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に構築した Web サーバ Nginx で SSL 接続するための設定についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 クライアント側も Debian GNU/Linux 11 (bullseye; 64bit) を想定。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 Web(HTTP)サーバ Nginx が「Debian 11 (bullseye) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！」の方法で導入済みであることを想定。 今回は SSL サーバ証明書は自分で作成するが、後日、Let’s Encrypt で無料で証明書を取得するようにする。 当方はメールサーバ構築時に SSL 証明書作成済みであったので、以下の...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx","SSL"],
        "url": "/2022/02/09/debian-11-nginx-ssl-connection-setting/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - Let's Encrypt で常時 SSL 化(on Nginx)！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に構築した Web サーバ Nginx への接続を、 Let’s Encrypt で取得した SSL サーバ証明書で常時 SSL 化するための方法についての記録です。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11 (bullseye; 64bit) での作業を想定。 クライアント側も Debian GNU/Linux 11 (bullseye; 64bit) を想定。 Web(HTTP)サーバ Nginx が「Debian 11 (bullseye) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！」の方法で導入済みであることを想定。 Nginx 1.21.3 での作業を想定。（稼働していること。稼働していない場合は方法が若干異なる） ACME(Automatic Certificate Management Environment)...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Nginx","SSL"],
        "url": "/2022/02/16/debian-11-nginx-ssl-by-lets-encrypt/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - Ruby 3.0 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に Ruby 3.0 をソースをビルドしてインストール方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.1.0 (bullseye; 64bit) での作業を想定。 接続元のマシンも Debian GNU/Linux 11 (bullseye; 64bit) を想定。 インストールするは当記事執筆時点で最新の Ruby は 3.0.2. root ユーザでの作業を想定。 1. 必要パッケージのインストール Ruby のインストールに必要なパッケージを予めインストールする。（他に必要なものがあればインストールする） # apt -y install libffi-dev zlib1g-dev libssl-dev libreadline-dev \\ libgdbm-dev libbison-dev libmariadb-dev 2. アーカイブファイルのダウンロード＆展開 アーカイブファイルをダンロードし、展開する。（ダンロード先は...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Ruby"],
        "url": "/2022/02/23/debian-11-ruby-3-0-installation-by-src/",
        "teaser": null
      },{
        "title": "2022年2月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"3月になりましたので、先月2月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 20,005 67.4796 Mac OS 6,967 23.5006 Linux 1,221 4.1186 Android 974 3.2854 Ubuntu Linux 294 0.9917 unknown 147 0.4959 Fedora Linux 28 0.0944 FreeBSD 6 0.0202 PlayStation 3 0.0101 OpenBSD 1 0.0034 合　計 29,646 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2022/03/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - Python 3.9 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に Python 3.9 をソースをビルドしてインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.0.0 (bullseye; 64bit) での作業を想定。 クライアント側も Debian GNU/Linux 11 (bullseye; 64bit) を想定。 当作業時で最新の 3.9.7 をソースをビルドしてインストールする。 デフォルトでインストールされている 3.9.2 はアンインストールしない。 （既にインストール・設定済みのパッケージに影響がでないよう） 1. Python のバージョン確認 インストール済み（現状）の Python のバージョンを確認してみる。 # python3 -V Python 3.9.2 --version オプションでもよい。 python3 は python3.9 でもよい。 （python3...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Python"],
        "url": "/2022/03/02/debian-11-python-3-9-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - ログ解析ツール logwatch インストール！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) にログ監視ツール LogWatch をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11 (bullseye; 64bit) での作業を想定。 root ユーザでの作業を想定。 1. logwatch のインストール # apt -y install logwatch 2. logwatch 設定ファイルの編集 まず、デフォルトの設定ファイルを複製する。 # cp /usr/share/logwatch/default.conf/logwatch.conf /etc/logwatch/conf/ デフォルトの設定で充分であるが、必要なら編集する。 メールの送信先等を変更するなら以下のようにする。 File: /etc/logwatch/conf/logwatch.conf MailTo = hoge@xxxx.com # &lt; = メール送信先 Detail = High #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2022/03/12/debian-11-logwatch-installation/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - 自動バックアップ運用！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) で自動バックアップ運用する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.2.0 (bullseye; 64bit) での作業を想定。 バックファイルを配置するディレクトリは /home/foo/bak （foo ユーザのホーム内の bak ディレクトリ）とする。 root ユーザでの作業を想定。 1. バックアップスクリプトの作成 以下のような内容でバックアップスクリプトを作成する。 File: /root/backup.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux"],
        "url": "/2022/03/16/debian-11-automatic-backup-setting/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - Git インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に Git サーバをソースをビルドしてインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.2.0 (bullseye; 64bit) での作業を想定。 Git 2.33.0 （当記事執筆時点で最新）を Git サーバとしてインストールすることを想定。 アーカイブ保存先は /usr/local/src を想定。 インストール先は /usr/local を想定。 クライアントからアクセスがあった時だけサーバを起動するために xinetd を使用する。 ドキュメント(doc, html, info)はインストールしない。 root ユーザでの作業を想定。 1. 依存パッケージのインストール # apt -y install xinetd libcurl4-gnutls-dev libexpat1-dev \\ gettext libz-dev libssl-dev 2....","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","Git"],
        "url": "/2022/03/23/debian-11-git-installation-by-src/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - PHP インストール（Nginx と連携）！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に PHP をソースをビルドしてインストールし、 Web／リバースプロキシサーバ Nginx と連携する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.2.0 (bullseye; 64bit) での作業を想定。 サーバ用途なので、作業は基本的に全て一般ユーザから root になって行う。 クライアント側も Debian GNU/Linux 11 (bullseye; 64bit) を想定。 Web サーバとして Apache2 でなく Nginx と連携させることを想定しているので、 Nginx がインストール済みであること。（参照： Debian 11 (bullseye) - Web サーバ Nginx 構築（Nginx 公式リポジトリ使用）！） 標準リポジトリから PHP 7.4...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","PHP","Nginx"],
        "url": "/2022/03/30/debian-11-php-installation-by-src-with-nginx-cooperation/",
        "teaser": null
      },{
        "title": "2022年3月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"4月になりましたので、先月3月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 20,632 67.9534 Mac OS 6,864 22.6072 Linux 1,367 4.5023 Android 986 3.2475 Ubuntu Linux 310 1.0210 unknown 155 0.5105 Fedora Linux 36 0.1186 FreeBSD 10 0.0329 OpenBSD 1 0.0033 Wii 1 0.0033 合　計 30,362 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2022/04/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - サーバ監視ツール munin 導入！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) にサーバ監視ツール munin をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.2.0 (bullseye; 64bit) での作業を想定。 Web サーバは Nginx を想定。 munin 用ディレクトリは /var/www/munin とする。 root ユーザでの作業を想定。 1. munin のインストール # apt -y install munin 2. 設定ファイルの編集 File: /etc/munin/munin.conf dbdir /var/lib/munin # &lt;= コメント解除 htmldir /var/www/munin # &lt;= コメント解除＆変更 logdir...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2022/04/06/debian-11-munin-installation/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - munin 各種監視追加！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) にインストールしたサーバ監視ツール munin に各種監視を追加する方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.2.0 (bullseye; 64bit) での作業を想定。 サーバ監視ツール munin がインストール済み。 ハードディスク温度の監視を追加する。 CPU 温度・電圧・ファン回転数の監視を追加する。 MariaDB の監視を追加する。 Nginx の監視を追加する。 root ユーザでの作業を想定。 1. ハードディスク温度の監視追加 smartctl コマンドを使用するので、以下のようにしてインストールしておく。 # apt -y install smartmontools 以下のように設定ファイル hddtemp_smartctl を作成する。（munin-node に追記してもよい） File: /etc/munin/plugin-conf.d/hddtemp_smartctl [hddtemp_smartctl] user root env.drives sda #...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2022/04/13/debian-11-munin-additional-setting/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - Monit でプロセス監視！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) にプロセス監視ツール monit をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.2.0 (bullseye; 64bit) での作業を想定。 root ユーザでの作業を想定。 1. monit のインストール # apt -y install monit 2. 設定ファイル編集 設定ファイル /etc/monit/monitrc を編集する。 以下は当方の例。 File: /etc/monit/monitrc set daemon 120 # 監視間隔（秒） set log /var/log/monit.log # ログファイル set idfile /var/lib/monit/id # Monit...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2022/04/20/debian-11-monit-installation/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - 地図描画ツール GMT インストール！",
        "excerpt":"Debian GNU/Linux 11 (bullseye) に地図描画ツール GMT(Generic Mapping Tool) をインストールする方法についての記録です。 以前古いバージョンでの作業時に残していた記録を参考に作業を行い、今回更新した作業記録を貼付する形式の内容となっています。 （当然ながら、興味がなければスルーしてください） 0. 前提条件 Debian GNU/Linux 11.2.0 (bullseye; 64bit) での作業を想定。 root ユーザでの作業を想定。 以前は海岸線データやポリゴンデータとともにソースをビルドしてインストールしていたが、今回は全て apt インストールする。 root での作業を想定。 GMT 4 系や 5 系とスクリプトの書き方（モジュールの仕様）が多々異なるので、注意！ 1. GMT のインストール GMT(6.1.1), DCW(1.1.4), GSHHG(2.3.7) をインストールする。 # apt -y install gmt gmt-dcw gmt-gshhg 2. 必要パッケージのインストール 他の必要なパッケージもインストールする。 # apt...","categories": ["サーバ構築"],
        "tags": ["Debian","Linux","munin"],
        "url": "/2022/04/27/debian-11-gmt-installation/",
        "teaser": null
      },{
        "title": "2022年4月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"5月になりましたので、先月4月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 21,100 64.4629 Mac OS 7,344 22.4368 Linux 2,721 8.3130 Android 1,043 3.1865 Ubuntu Linux 305 0.9318 unknown 185 0.5652 Fedora Linux 23 0.0703 FreeBSD 9 0.0275 Debian GNU/Linux 1 0.0031 OpenBSD 1 0.0031 合　計 32,732 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2022/05/01/blog-access/",
        "teaser": null
      },{
        "title": "Debian 11 (bullseye) - GCC 11.2 インストール（ソースビルド）！",
        "excerpt":"Debian GNU/Linux 11 へ最新版 GCC をソースビルドでインストールする方法についての記録です。 0. 前提条件 Debian GNU/Linux 11.2.0 (bullseye; 64bit) での作業を想定。 root ユーザでの作業を想定。 パッケージ版 GCC インストール済み。（バージョンは 8.3.0 を想定） 新たにインストールする GCC は 11.2.0 を想定。（当記事執筆時点で最新バージョン） インストール先は /usr/local/gcc-11.2.0 を想定。 コンパイルできるようにする言語は C, C++, Objective-C, Fortran とする。 インストール済みのパッケージ版 GCC は他のパッケージ管理等で影響が出ると面倒なのでアンインストールしない。（GCC 8.3.0 と 11.2.0 を共存させる） 念の為、インストール済みパッケージをアップデートしておく。 1. アーカイブダウンロード ミラーサイト一覧「GCC mirror sites - GNU...","categories": ["プログラミング"],
        "tags": ["GCC","C言語","Fortran","ObjectiveC","Debian"],
        "url": "/2022/05/04/debian-11-gcc-installation/",
        "teaser": null
      },{
        "title": "Ruby - 連立方程式解法（ガウスの消去法（ピボット選択））！",
        "excerpt":"かつて、連立方程式を「ガウスの消去法」で解くアルゴリズムを Ruby で実装したことを紹介しました。 Ruby - 連立方程式解法（ガウスの消去法）！ しかし、計算途中で対角成分がゼロになるケースでは計算ができませんでした。 今回はその問題を解決すべく、「ガウスの消去法（ピボット選択）」で解くアルゴリズムを実装してみました。（実際、連立方程式を使うような自作ツールではこのピボット選択のガウスの消去法を使用しているが、ブログでは紹介していなかった） 0. 前提条件 Debian GNU/Linux 11.3 での作業を想定。 Ruby 3.1.1 での実行を想定。 連立方程式の解法（ガウスの消去法（ピボット選択））についての説明は割愛。（Web 上等で容易に確認可能） 1. Ruby スクリプト作成 Shebang ストリング（1行目）では、フルパスでコマンド指定している。（当方の慣習） File: gauss_elimination_pivot.rb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2022/05/11/ruby-simultaneous-equation-by-gauss-elimination-pivot/",
        "teaser": null
      },{
        "title": "Fortran - 連立方程式解法（ガウスの消去法（ピボット選択））！",
        "excerpt":"かつて、連立方程式を「ガウスの消去法」で解くアルゴリズムを Fortran95 で実装したことを紹介しました。 Fortran - 連立方程式解法（ガウスの消去法）！ しかし、計算途中で対角成分がゼロになるケースでは計算ができませんでした。 今回はその問題を解決すべく、「ガウスの消去法（ピボット選択）」で解くアルゴリズムを実装してみました。 ちなみに、前回は Ruby で実装しました。 Ruby - 連立方程式解法（ガウスの消去法（ピボット選択））！ 0. 前提条件 Debian GNU/Linux 11.3 での作業を想定。 GCC 11.2.0 (GFortran 11.2.0) でのコンパイルを想定。 連立方程式の解法（ガウスの消去法（ピボット選択））についての説明は割愛。（Web 上等で容易に確認可能） 1. ソースコードの作成 File: gauss_elimination_pivot.f95 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2022/05/18/fortran-simultaneous-equation-by-gauss-elimination-pivot/",
        "teaser": null
      },{
        "title": "C++ - 連立方程式解法（ガウスの消去法（ピボット選択））！",
        "excerpt":"かつて、連立方程式を「ガウスの消去法」で解くアルゴリズムを C++ で実装したことを紹介しました。 C++ - 連立方程式解法（ガウスの消去法）！ しかし、計算途中で対角成分がゼロになるケースでは計算ができませんでした。 今回はその問題を解決すべく、「ガウスの消去法（ピボット選択）」で解くアルゴリズムを実装してみました。（少し前に作成していたが、ブログ記事として記録していなかった） ちなみに、前々回、前回は Ruby, Fortran95 で実装しました。 Ruby - 連立方程式解法（ガウスの消去法（ピボット選択））！ Fortran - 連立方程式解法（ガウスの消去法（ピボット選択））！ 0. 前提条件 Debian GNU/Linux 11.3 での作業を想定。 GCC 11.2.0 (G++ 11.2.0) (C++17) でのコンパイルを想定。 連立方程式の解法（ガウスの消去法（ピボット選択））についての説明は割愛。（Web 上等で容易に確認可能） 1. ソースコードの作成 File: gauss_elimination_pivot.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14...","categories": ["プログラミング","数学"],
        "tags": ["Fortran"],
        "url": "/2022/05/25/cpp-simultaneous-equation-by-gauss-elimination-pivot/",
        "teaser": null
      },{
        "title": "2022年5月 - OS・ブラウザ別アクセス状況！",
        "excerpt":"6月になりましたので、先月5月分の当ブログアクセス状況を公開します。（※自分用の記録） 1. アクセスをOS別に集計 OS PageViews 比率(%) Windows 20,932 66.2972 Mac OS 6,709 21.2492 Linux 2,211 7.0028 Android 1,153 3.6519 Ubuntu Linux 283 0.8963 unknown 255 0.8077 Fedora Linux 16 0.0507 FreeBSD 11 0.0348 NetBSD 2 0.0063 PlayStation 1 0.0032 合　計 31,573 100.0000 2. アクセスをOS・バージョン別に集計 OS Version PageViews 比率(%) Windows 10...","categories": ["ブログ"],
        "tags": ["Jekyll"],
        "url": "/2022/06/01/blog-access/",
        "teaser": null
      },{
        "title": "Ruby - Array クラス拡張で単回帰曲線（5次回帰モデル）計算！",
        "excerpt":"かつて、 Ruby で Array クラスを拡張して単回帰直線や単回帰曲線（2〜4次、その他）を計算してみました。 （過去記事は「こちら」で検索してください） 今回は5次の単回帰曲線を計算してみました。自作のある解析処理で必要になったため、その練習として。（連立方程式の解法にはガウスの消去法（ピボット選択）を使用） 0. 前提条件 Debian GNU/Linux 11.3 での作業を想定。 Ruby 3.1.2 での実行を想定。 連立方程式の解法（ガウスの消去法（ピボット選択））についての説明は割愛。（Web 上等で容易に確認可能） 1. 単回帰曲線（5次回帰モデル）の求め方 求める曲線を \\(y=a+bx+cx^2+dx^3+ex^4+fx^5\\) とすると、残差の二乗和 \\(S\\) は \\[S = \\sum_{i=1}^{N}(y_i - a - bx_i - cx_i^2 - dx^3 - ex^4 - fx^5)^2\\] となる。 \\(a,b,c,d,e,f\\) それぞれで偏微分したものを \\(0\\) とする。 \\[\\begin{eqnarray*} \\frac{\\partial S}{\\partial a} &amp;=&amp;...","categories": ["プログラミング","数学"],
        "tags": ["Ruby"],
        "url": "/2022/06/22/ruby-simple-regression-curve-5d/",
        "teaser": null
      },{
        "title": "C++ - 単回帰曲線（5次回帰モデル）の計算！",
        "excerpt":"C++ で、数値からなる同サイズの配列2つを説明変数・目的変数とみなして単回帰曲線（5次回帰モデル）を計算する方法についての記録です。 今回は連立1次方程式を解くのに「ガウスの消去法（ピボット選択）」を使用します。 先日は Ruby で実装しています。。 Ruby - Array クラス拡張で単回帰曲線（5次回帰モデル）計算！ 0. 前提条件 Debian GNU/Linux 11.3 (64bit) での作業を想定。 GCC 11.2.0 (G++ 11.2.0) (C++17) でのコンパイルを想定。 連立方程式の解法（ガウスの消去法（ピボット選択））についての説明は割愛。（Web 上等で容易に確認可能） 1. 単回帰曲線（5次回帰モデル）の求め方 求める曲線を \\(y=a+bx+cx^2+dx^3+ex^4+fx^5\\) とすると、残差の二乗和 \\(S\\) は \\[S = \\sum_{i=1}^{N}(y_i - a - bx_i - cx_i^2 - dx^3 - ex^4 - fx^5)^2\\] となる。 \\(a,b,c,d,e,f\\) それぞれで偏微分したものを...","categories": ["プログラミング","数学"],
        "tags": ["C++"],
        "url": "/2022/07/13/cpp-simple-regression-curve-5d/",
        "teaser": null
      }]
